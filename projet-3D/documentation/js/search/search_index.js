var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/App.html",[0,1.012,1,1.358]],["body/components/App.html",[0,1.934,1,2.891,2,3.404,3,0.186,4,0.186,5,3.192,6,3.192,7,0.163,8,5.255,9,3.192,10,3.226,11,1.031,12,2.749,13,7.541,14,3.569,15,0.14,16,0.274,17,7.541,18,5.036,19,7.541,20,2.248,21,2.081,22,0.014,23,7.101,24,2.541,25,2.339,26,6.044,27,0.482,28,6.044,29,0.384,30,5.255,31,4.037,32,0.163,33,0.118,34,3.192,35,3.751,36,3.751,37,3.192,38,4.11,39,3.192,40,2.186,41,3.192,42,2.897,43,2.768,44,3.192,45,2.768,46,1.292,47,3.192,48,2.649,49,0.411,50,3.983,51,2.768,52,2.436,53,3.192,54,2.768,55,0.522,56,2.768,57,0.522,58,3.404,59,3.751,60,2.897,61,3.192,62,3.038,63,2.768,64,2.339,65,2.539,66,3.192,67,3.192,68,0.012,69,0.012]],["title/injectables/BatimentService.html",[70,0.439,71,2.466]],["body/injectables/BatimentService.html",[3,0.119,4,0.119,7,0.104,11,0.561,15,0.09,16,0.206,20,1.985,21,1.838,22,0.015,25,3.147,27,0.415,29,0.246,32,0.165,33,0.075,40,2.199,49,0.263,55,0.569,57,0.528,68,0.009,69,0.009,70,0.595,71,3.336,72,2.276,73,2.781,74,0.416,75,0.875,76,0.307,77,1.273,78,0.517,79,3.838,80,0.917,81,5.415,82,1.055,83,4.984,84,2.151,85,5.161,86,5.337,87,5.337,88,5.337,89,5.161,90,5.161,91,5.161,92,5.161,93,5.161,94,5.161,95,5.161,96,5.161,97,5.161,98,5.161,99,4.4,100,5.337,101,5.161,102,5.337,103,1.066,104,3.362,105,1.901,106,5.337,107,3.133,108,0.213,109,2.461,110,3.867,111,2.292,112,0.51,113,2.814,114,0.699,115,0.876,116,3.512,117,1.006,118,1.914,119,2.39,120,0.712,121,4.181,122,0.622,123,3.867,124,5.599,125,4.181,126,4.181,127,3.867,128,1.427,129,4.181,130,4.181,131,3.867,132,4.181,133,3.867,134,2.339,135,0.214,136,2.199,137,3.867,138,1.437,139,1.928,140,4.181,141,3.867,142,4.738,143,3.158,144,3.867,145,3.867,146,3.867,147,1.985,148,3.867,149,0.666,150,1.02,151,1.02,152,1.083,153,3.867,154,1.59,155,4.081,156,3.867,157,0.337,158,3.867,159,3.867,160,4.181,161,3.867,162,2.444,163,4.181,164,0.567,165,3.867,166,1.817,167,1.838,168,4.181,169,2.799,170,3.867,171,2.444,172,4.181,173,0.637,174,1.083,175,1.259,176,2.558,177,0.815,178,1.32,179,4.081,180,4.787,181,0.339,182,0.282,183,2.026,184,2.292,185,3.867,186,0.634,187,1.854,188,1.497,189,0.506,190,0.188,191,0.712,192,2.781,193,2.781,194,2.242,195,3.401,196,2.799,197,3.597,198,2.678,199,5.415,200,3.597,201,3.597,202,0.585,203,1.028,204,2.781,205,4.181,206,1.282,207,1.282,208,1.02,209,3.03,210,1.854,211,3.03,212,0.369,213,3.03,214,3.03,215,0.379,216,2.97,217,4.181,218,2.97,219,3.03,220,2.152,221,2.152,222,1.461,223,2.929,224,3.03,225,3.03,226,3.03,227,3.03,228,5.415,229,2.276,230,0.989,231,3.03,232,0.339,233,3.03,234,1.854,235,2.043,236,3.03,237,1.147,238,1.028,239,0.922,240,0.858,241,3.03,242,4.181,243,4.181,244,3.03,245,3.03,246,3.03,247,3.03,248,3.03,249,3.03,250,3.03,251,3.03,252,3.03,253,3.03,254,3.03,255,3.03,256,0.609,257,1.771,258,1.695,259,1.695,260,3.03,261,3.03,262,2.276,263,3.03,264,3.03,265,3.03,266,3.03,267,3.03,268,3.03,269,3.03,270,3.03,271,3.03,272,3.03,273,3.03,274,3.03,275,1.028,276,0.768,277,3.03,278,1.813,279,3.03,280,2.583,281,3.03,282,1.282,283,3.03,284,4.787,285,3.03,286,1.02,287,2.444,288,1.854,289,2.418,290,3.03,291,1.439,292,3.03,293,3.03,294,3.03,295,3.03,296,3.03,297,3.03,298,3.03,299,3.03,300,1.771,301,1.771,302,0.561,303,0.889,304,1.227,305,1.19,306,0.889,307,1.625,308,0.585]],["title/interfaces/CalculFenetres.html",[189,0.303,309,2.083]],["body/interfaces/CalculFenetres.html",[3,0.139,4,0.139,7,0.122,11,0.657,15,0.105,16,0.229,18,3.024,22,0.015,27,0.307,29,0.288,32,0.189,33,0.088,46,1.268,49,0.403,52,2.391,68,0.01,69,0.01,70,0.661,76,0.316,78,0.542,80,0.63,82,0.826,103,1.249,108,0.211,112,0.475,114,0.458,115,0.738,117,0.914,122,0.509,135,0.16,157,0.357,164,0.703,177,0.604,181,0.42,182,0.302,189,0.509,190,0.216,194,3.249,198,3.28,202,0.685,212,0.365,215,0.383,232,0.484,286,1.134,302,0.657,308,1.132,309,3.71,310,0.435,311,3.024,312,2.391,313,3.024,314,5.563,315,2.846,316,5.563,317,5.563,318,5.484,319,3.079,320,5.721,321,5.381,322,3.34,323,3.709,324,0.961,325,0.935,326,0.935,327,0.935,328,0.861,329,0.861,330,1.011,331,1.446,332,2.462,333,2.17,334,4.691,335,0.685,336,1.041,337,3.256,338,1.636,339,0.874,340,2.194,341,2.084,342,1.567,343,3.256,344,3.256,345,1.967,346,3.256,347,2.17,348,1.062,349,3.256,350,1.204,351,3.256,352,1.222,353,3.684,354,4.267,355,1.579,356,1.612,357,3.256,358,2.83,359,3.326,360,3.256,361,1.501,362,3.492,363,3.256,364,0.608,365,3.256,366,1.004,367,3.256,368,1.161,369,2.601,370,1.893,371,0.685,372,3.256,373,3.256,374,5.313,375,1.161,376,4.682,377,5.093,378,0.802,379,3.256,380,2.511,381,3.256,382,3.495,383,4.76,384,4.134,385,3.256,386,3.256,387,3.256,388,2.994,389,5.381,390,4.76,391,4.267,392,3.256,393,4.767,394,4.267,395,3.256,396,3.492,397,2.718,398,4.42,399,3.256,400,3.256,401,3.256,402,2.074,403,3.256,404,3.256,405,4.267,406,1.902,407,4.267,408,3.256,409,3.256,410,3.256,411,3.256,412,3.256,413,3.256,414,3.665,415,3.303,416,3.256,417,4.292,418,3.256,419,3.256,420,4.267,421,3.256,422,2.83,423,3.256,424,3.256,425,3.256,426,3.256,427,1.902,428,3.256,429,3.256,430,4.267,431,3.256,432,2.391,433,3.256,434,3.256,435,3.256,436,3.256,437,3.256,438,3.256,439,3.024]],["title/components/CalculateurFenetresComponent.html",[0,1.012,42,1.891]],["body/components/CalculateurFenetresComponent.html",[0,1.223,1,2.528,2,1.87,3,0.197,4,0.078,5,1.332,6,1.332,7,0.068,9,1.332,10,2.81,12,1.51,14,3.323,15,0.111,16,0.15,20,2.525,21,2.277,22,0.015,25,2.917,27,0.394,29,0.16,31,3.186,32,0.068,33,0.049,34,1.332,35,2.06,36,2.06,37,1.332,38,2.836,39,1.332,40,1.787,41,1.332,42,2.573,43,3.109,44,1.332,45,1.155,46,1.703,47,1.332,48,1.106,49,0.461,50,2.52,51,1.155,52,2.164,53,1.332,54,1.155,55,0.218,56,1.155,57,0.218,58,1.87,59,2.06,60,1.209,61,1.332,62,1.268,63,1.155,64,0.976,65,1.06,66,1.332,67,1.332,68,0.007,69,0.007,76,0.262,78,0.502,82,0.855,84,1.572,103,0.696,107,2.091,108,0.193,109,1.643,112,0.39,115,0.281,117,0.847,119,1.962,120,0.56,122,0.522,135,0.145,157,0.3,173,0.501,175,1.106,181,0.407,182,0.302,194,3.431,203,0.671,208,1.298,212,0.316,215,0.222,222,1.644,230,0.609,232,0.248,238,1.269,239,1.281,240,1.191,275,1.931,302,0.566,309,2.52,312,4.034,319,1.846,324,1.066,325,1.008,326,0.846,327,0.846,328,1.115,329,1.025,330,0.665,331,0.806,332,2.16,333,2.573,338,1.076,339,0.792,342,0.947,348,0.855,353,3.417,355,1.138,356,1.598,362,2.808,364,0.61,368,0.647,370,1.756,371,0.722,374,4.1,375,1.489,376,3.613,377,4.1,378,0.691,380,2.114,388,1.846,393,3.838,396,2.808,397,2.185,398,1.685,432,2.52,439,3.186,440,6.598,441,2.193,442,3.392,443,4.148,444,1.572,445,1.923,446,2.004,447,4.771,448,4.771,449,6.35,450,6.138,451,6.283,452,6.189,453,6.283,454,6.787,455,4.771,456,4.771,457,4.771,458,4.771,459,4.771,460,3.186,461,4.771,462,6.138,463,3.292,464,3.737,465,6.454,466,6.283,467,5.614,468,3.282,469,1.923,470,5.946,471,5.946,472,5.069,473,3.737,474,3.93,475,4.771,476,5.614,477,6.048,478,6.127,479,5.946,480,4.809,481,4.809,482,4.809,483,4.771,484,4.809,485,6.048,486,6.241,487,4.771,488,5.946,489,5.317,490,5.317,491,2.735,492,5.317,493,3.737,494,6.138,495,5.808,496,5.317,497,5.317,498,6.787,499,3.737,500,2.474,501,4.771,502,3.916,503,5.317,504,5.317,505,4.809,506,3.737,507,5.317,508,3.737,509,5.808,510,5.317,511,5.317,512,3.737,513,0.947,514,5.317,515,4.809,516,2.655,517,4.771,518,6.138,519,1.923,520,4.771,521,5.614,522,4.771,523,3.737,524,3.737,525,4.771,526,3.737,527,3.737,528,4.771,529,4.771,530,2.735,531,3.737,532,3.737,533,4.771,534,3.737,535,4.771,536,3.737,537,4.809,538,3.737,539,3.737,540,3.737,541,3.737,542,4.771,543,4.771,544,6.138,545,6.138,546,4.771,547,4.771,548,6.048,549,4.771,550,3.737,551,4.771,552,3.737,553,3.737,554,3.737,555,3.737,556,3.737,557,3.186,558,3.737,559,3.737,560,3.431,561,3.737,562,4.771,563,4.771,564,3.737,565,2.808,566,1.582,567,3.737,568,3.613,569,4.771,570,4.771,571,4.771,572,4.771,573,4.771,574,4.771,575,4.771,576,4.771,577,3.737,578,4.771,579,4.148,580,4.148,581,2.287,582,3.356,583,4.771,584,4.771,585,1.923,586,4.771,587,4.771,588,4.771,589,4.771,590,1.428,591,4.771,592,2.836,593,3.737,594,3.737,595,6.138,596,4.771,597,3.737,598,4.771,599,4.771,600,4.771,601,4.771,602,4.771,603,4.771,604,3.186,605,4.771,606,4.771,607,6.138,608,4.771,609,3.737,610,4.771,611,3.186,612,4.771,613,5.369,614,4.771,615,3.901,616,5.369,617,3.901,618,3.861,619,3.586,620,4.668,621,2.522,622,3.901,623,3.901,624,2.522,625,2.522,626,3.901,627,2.522,628,2.522,629,3.901,630,2.522,631,3.392,632,2.522,633,2.522,634,2.522,635,2.522,636,2.522,637,2.522,638,2.522,639,2.522,640,2.522,641,2.522,642,0.976,643,1.017,644,1.976,645,1.976,646,1.846,647,2.193,648,2.522,649,1.685,650,6.787,651,3.737,652,1.976,653,1.017,654,2.522,655,3.901,656,1.685,657,3.586,658,1.485,659,1.485,660,1.485,661,1.485,662,1.485,663,1.485,664,1.485,665,0.976,666,1.485,667,1.485,668,1.485,669,1.485,670,1.485,671,1.485,672,1.485,673,1.485,674,1.485,675,2.522,676,4.771,677,4.771,678,4.771,679,2.522,680,3.901,681,0.776,682,2.522,683,2.522,684,2.522,685,2.522,686,1.976,687,2.522,688,2.522,689,2.522,690,2.522,691,3.901,692,1.106,693,5.369,694,2.522,695,2.522,696,2.522,697,2.522,698,2.522,699,2.522,700,2.522,701,2.522,702,2.522,703,2.522,704,2.522,705,2.522,706,1.06,707,2.522,708,2.522]],["title/injectables/CalculateurFenetresService.html",[70,0.439,333,1.891]],["body/injectables/CalculateurFenetresService.html",[3,0.123,4,0.123,7,0.108,11,0.582,15,0.093,16,0.211,18,4.158,20,2.488,21,2.303,22,0.015,25,2.913,27,0.272,29,0.255,32,0.18,33,0.078,40,2.224,46,1.169,49,0.423,52,2.204,55,0.472,68,0.009,69,0.009,70,0.609,72,2.359,76,0.314,78,0.545,80,1.063,82,1.048,84,2.204,103,1.717,107,3.167,108,0.214,109,2.488,112,0.47,114,0.553,115,0.745,117,0.92,119,2.143,122,0.309,135,0.199,157,0.359,164,0.426,177,0.535,181,0.395,182,0.294,189,0.478,190,0.231,194,3.373,198,3.443,202,0.606,204,3.933,208,0.766,212,0.356,215,0.378,232,0.47,286,1.046,289,2.506,302,0.582,308,1.093,309,3.533,311,5.098,312,4.032,313,2.677,314,5.034,315,2.693,316,5.034,317,5.034,318,4.81,319,2.913,320,5.413,321,4.477,322,3.063,323,3.419,324,0.904,325,0.861,326,0.861,327,0.861,328,0.794,329,0.794,330,0.932,331,1.28,332,2.942,333,2.622,334,4.939,335,0.606,336,0.922,337,3.933,338,1.93,339,0.879,340,2.396,341,2.233,342,1.579,343,3.933,344,3.933,345,2.218,346,3.933,347,2.622,348,1.075,349,3.933,350,1.455,351,3.933,352,1.283,353,3.896,354,4.81,355,1.67,356,1.647,357,3.933,358,3.419,359,3.518,360,3.933,361,1.813,362,3.665,363,3.933,364,0.625,365,3.933,366,1.213,367,2.883,368,1.028,369,2.932,370,2.002,371,1.012,372,4.477,373,4.477,374,5.421,375,1.597,376,4.777,377,5.385,378,1.185,379,2.883,380,2.411,381,2.883,382,3.355,383,4.477,384,3.937,385,2.883,386,2.883,387,2.883,388,2.913,389,5.196,390,4.477,391,3.933,392,2.883,393,4.706,394,4.477,395,2.883,396,3.219,397,2.505,398,4.158,399,2.883,400,2.883,401,2.883,402,1.836,403,2.883,404,4.477,405,3.933,406,1.684,407,3.933,408,2.883,409,2.883,410,2.883,411,2.883,412,2.883,413,2.883,414,3.518,415,3.044,416,2.883,417,4.12,418,2.883,419,2.883,420,3.933,421,2.883,422,2.506,423,2.883,424,2.883,425,2.883,426,2.883,427,1.684,428,2.883,429,2.883,430,3.933,431,2.883,432,2.117,433,2.883,434,2.883,435,2.883,436,2.883,437,2.883,438,2.883,439,2.677,620,4.755,681,1.234,709,5.469,710,5.469,711,5.469,712,4.008,713,4.008,714,1.787,715,4.008,716,4.008,717,1.684,718,4.008,719,4.008,720,4.008,721,4.008,722,4.008,723,4.008,724,4.008,725,4.008,726,0.861,727,4.008,728,4.008,729,4.008,730,4.008,731,4.008,732,4.008,733,4.008,734,4.008,735,4.008,736,4.008]],["title/interfaces/CalculsMur.html",[189,0.303,737,2.466]],["body/interfaces/CalculsMur.html",[3,0.117,4,0.117,7,0.102,11,0.551,15,0.088,16,0.203,22,0.015,27,0.411,29,0.241,32,0.176,33,0.074,49,0.444,55,0.682,57,0.328,68,0.009,69,0.009,70,0.587,74,0.209,75,0.622,76,0.295,77,0.906,78,0.497,80,0.529,82,0.91,105,1.609,108,0.216,111,1.747,112,0.485,113,1.885,115,0.792,116,3.403,117,0.799,120,0.626,122,0.581,128,1.157,135,0.211,138,1.39,139,1.559,143,2.526,147,1.401,149,0.384,150,0.726,151,0.726,152,0.934,154,0.873,157,0.357,164,0.403,173,0.58,174,0.934,175,1.347,177,0.703,181,0.241,182,0.298,183,1.747,184,1.747,186,0.622,188,1.47,189,0.56,190,0.211,191,1.406,196,3.145,200,4.289,201,3.101,202,0.574,203,1.01,206,1.259,207,1.259,208,1.157,210,1.82,212,0.372,215,0.387,222,1.523,223,3.291,230,1.037,232,0.335,234,1.82,238,1.401,239,1.559,240,1.449,256,0.598,257,3.145,258,1.664,259,1.664,262,2.235,276,0.754,278,1.939,286,1.313,288,2.901,291,1.412,303,0.873,304,1.392,305,1.168,306,0.873,310,0.365,315,1.885,324,1.058,325,1.03,326,1.03,327,1.03,328,0.765,329,0.765,330,0.898,332,2.917,335,0.797,355,0.906,364,0.636,371,0.915,382,1.82,460,2.536,513,1.046,590,1.01,665,2.039,714,1.303,717,1.595,726,0.953,737,3.783,738,2.536,739,2.251,740,3.368,741,3.955,742,3.955,743,5.111,744,4.296,745,2.413,746,3.854,747,1.03,748,1.885,749,3.294,750,2.439,751,2.542,752,1.53,753,2.731,754,2.731,755,1.885,756,1.412,757,3.789,758,2.113,759,2.731,760,2.731,761,2.731,762,2.731,763,2.731,764,5.111,765,3.789,766,3.789,767,3.789,768,3.789,769,3.789,770,2.113,771,2.731,772,2.731,773,2.731,774,2.731,775,2.731,776,2.731,777,2.772,778,2.731,779,2.731,780,1.412,781,2.731,782,2.374,783,2.731,784,3.789,785,4.352,786,2.731,787,3.789,788,2.731,789,2.731,790,2.731,791,2.933,792,2.731,793,2.113,794,1.908,795,2.731,796,2.731,797,2.731,798,2.731,799,3.255,800,3.789,801,3.789,802,2.731,803,2.731,804,2.731,805,2.731,806,2.731,807,2.731,808,2.731,809,2.731,810,2.731,811,2.731,812,2.012,813,2.731,814,3.368,815,2.113,816,2.113,817,2.731,818,2.731,819,2.731,820,2.731,821,1.664,822,1.908,823,1.595,824,2.731,825,4.701,826,2.731,827,1.307,828,2.731,829,4.701,830,2.731,831,2.933,832,2.731,833,2.933,834,2.731,835,2.731,836,4.352,837,1.595,838,2.731,839,2.731,840,2.542,841,2.213,842,2.731,843,1.259,844,1.908,845,2.413,846,3.789,847,2.113,848,1.257,849,1.82,850,2.731,851,1.443,852,2.731,853,2.731,854,2.113,855,2.731,856,2.731,857,2.731,858,2.731,859,2.772,860,4.352,861,4.352,862,4.352,863,3.196,864,4.701,865,2.731,866,2.731,867,4.701,868,2.731,869,2.731,870,2.731,871,3.789,872,2.731,873,2.731,874,2.731,875,2.731,876,1.939,877,2.731,878,2.731,879,2.731,880,2.783,881,2.731,882,2.731,883,3.196,884,2.731,885,2.731,886,3.196,887,2.731,888,2.731,889,2.005,890,2.731,891,2.731,892,2.731,893,2.731,894,2.731,895,2.731,896,2.731,897,1.908,898,1.664,899,2.731,900,2.235,901,2.731,902,1.595]],["title/interfaces/CalculsOuverture.html",[189,0.303,903,2.466]],["body/interfaces/CalculsOuverture.html",[3,0.125,4,0.125,7,0.11,11,0.592,15,0.095,16,0.213,22,0.015,27,0.427,29,0.259,32,0.19,33,0.079,49,0.458,57,0.68,68,0.009,69,0.009,70,0.617,74,0.224,75,0.669,76,0.26,77,0.973,78,0.488,80,0.568,82,0.875,105,1.671,108,0.211,111,1.353,112,0.472,113,2.742,114,0.413,116,3.462,120,0.614,122,0.59,128,1.058,135,0.216,138,1.373,139,1.607,147,1.671,149,0.413,150,0.78,151,0.78,152,0.981,154,0.939,157,0.356,164,0.433,173,0.593,174,0.981,175,0.841,177,0.544,182,0.295,183,1.836,184,1.836,186,0.669,188,1.579,189,0.589,190,0.223,191,0.751,197,3.259,198,2.427,202,0.617,203,1.085,206,1.353,207,1.353,208,1.201,210,1.956,212,0.372,215,0.386,222,1.393,223,3.012,229,2.402,230,1.042,232,0.352,234,1.956,239,0.973,240,0.905,256,1.284,257,2.878,258,1.789,259,1.789,276,0.81,278,1.642,286,1.288,310,0.392,315,1.46,324,0.804,325,0.99,326,0.99,327,0.99,328,0.804,329,0.804,330,0.944,332,2.702,335,0.837,339,0.476,341,2.204,356,1.294,364,0.314,378,0.723,415,2.271,590,1.085,665,1.579,714,1.369,726,1.061,739,2.337,740,2.271,741,4.043,742,4.043,744,4.043,747,1.17,750,2.231,751,2.326,755,1.981,756,1.518,758,2.271,770,2.271,777,1.869,791,2.271,793,2.271,799,3.226,812,1.704,814,2.271,815,2.271,816,2.271,831,3.081,833,3.081,837,1.714,840,2.326,841,1.714,847,2.271,848,1.32,854,2.271,859,2.536,876,1.642,903,3.928,904,2.725,905,5.343,906,2.536,907,3.776,908,1.337,909,1.792,910,4.404,911,2.782,912,3.461,913,2.551,914,4.846,915,4.846,916,4.519,917,4.519,918,2.231,919,1.714,920,2.935,921,2.935,922,3.981,923,2.935,924,2.935,925,2.935,926,2.935,927,2.935,928,2.935,929,2.935,930,2.935,931,3.981,932,3.981,933,3.981,934,2.935,935,2.935,936,4.519,937,2.935,938,2.935,939,2.935,940,4.519,941,4.846,942,2.935,943,2.935,944,2.935,945,2.935,946,2.935,947,1.797,948,2.551,949,2.935,950,2.935,951,2.935,952,1.934,953,2.935,954,2.935,955,2.782,956,2.935,957,3.981,958,3.259,959,2.935,960,2.935,961,2.935,962,2.935,963,2.782,964,2.935,965,2.551,966,1.645,967,1.579,968,2.725,969,2.924,970,1.579,971,2.271,972,2.935,973,2.935,974,2.935,975,2.935,976,2.935,977,2.935,978,2.051,979,2.935,980,3.928,981,5.066,982,4.519,983,2.935,984,3.981,985,3.981,986,3.981,987,2.935,988,2.935,989,2.935,990,1.579,991,2.935,992,2.536,993,1.869,994,2.935,995,5.066,996,2.935,997,2.935,998,2.935,999,2.935,1000,2.935,1001,2.935,1002,2.935,1003,2.935,1004,2.935,1005,4.519,1006,2.924,1007,2.935,1008,2.935,1009,2.935,1010,2.935,1011,2.935,1012,2.935,1013,2.935,1014,2.935,1015,2.935,1016,2.935,1017,2.935,1018,2.059,1019,2.935,1020,2.935,1021,2.935,1022,2.935,1023,2.935,1024,2.935]],["title/interfaces/CameraConfig.html",[189,0.303,1025,1.806]],["body/interfaces/CameraConfig.html",[3,0.097,4,0.141,7,0.085,15,0.073,16,0.177,22,0.015,24,2.145,32,0.197,33,0.061,46,1.724,49,0.53,55,0.551,57,0.551,68,0.008,69,0.008,74,0.172,76,0.319,78,0.512,108,0.21,112,0.515,114,0.674,115,0.711,117,0.975,118,1.252,119,1.364,135,0.172,136,0.966,149,0.317,157,0.344,175,0.948,177,0.614,178,0.776,181,0.381,182,0.316,189,0.543,190,0.205,191,0.847,208,1.401,212,0.214,215,0.35,222,1.02,230,0.401,232,0.405,237,1.893,238,1.223,239,1.686,240,1.528,256,0.858,282,1.525,310,0.302,324,1.192,325,1.312,326,1.296,327,1.276,328,1.12,329,1.12,330,1.314,331,2.201,335,0.824,336,0.722,338,0.866,339,0.636,340,1.805,341,1.615,342,1.475,345,1.805,348,0.64,350,1.774,352,1.122,356,0.647,361,2.391,364,0.604,366,1.02,369,2.016,375,1.849,378,1.131,380,1.081,406,1.318,427,2.287,463,2.194,468,2.923,469,1.265,474,2.736,491,1.854,500,1.265,513,0.623,530,1.265,566,1.041,581,2.205,585,1.265,590,1.594,646,1.215,681,2.053,692,2.924,706,2.681,714,1.483,726,1.236,739,1.168,821,2.016,827,1.584,843,1.988,848,1.097,851,1.644,876,2.139,898,1.376,902,1.932,908,1.431,947,0.898,990,2.47,1025,2.494,1026,1.437,1027,1.041,1028,2.791,1029,2.23,1030,2.924,1031,3.055,1032,2.211,1033,3.213,1034,1.318,1035,3.857,1036,3.352,1037,2.387,1038,1.504,1039,2.736,1040,1.615,1041,1.376,1042,2.429,1043,1.964,1044,2.287,1045,2.312,1046,1.658,1047,1.437,1048,2.466,1049,2.924,1050,2.736,1051,3.013,1052,3.013,1053,2.312,1054,2.736,1055,2.025,1056,2.205,1057,1.932,1058,2.746,1059,2.312,1060,1.658,1061,2.572,1062,2.736,1063,1.658,1064,2.205,1065,2.107,1066,3.059,1067,2.312,1068,2.107,1069,2.312,1070,2.924,1071,1.658,1072,2.312,1073,2.107,1074,2.107,1075,2.107,1076,2.429,1077,1.711,1078,1.577,1079,2.116,1080,2.025,1081,2.582,1082,2.61,1083,2.736,1084,1.658,1085,2.025,1086,2.61,1087,2.61,1088,2.107,1089,2.23,1090,2.429,1091,1.658,1092,2.107,1093,1.658,1094,2.312,1095,2.312,1096,1.265,1097,2.736,1098,2.145,1099,2.429,1100,2.429,1101,1.658,1102,2.107,1103,2.312,1104,1.915,1105,1.854,1106,1.711,1107,1.265,1108,1.658,1109,1.658,1110,1.711,1111,2.205,1112,1.711,1113,1.168,1114,1.577,1115,1.437,1116,1.577,1117,1.577,1118,1.577,1119,1.123,1120,1.711,1121,1.577,1122,2.736,1123,1.318,1124,2.312,1125,1.577,1126,2.312,1127,1.584,1128,1.577,1129,1.265,1130,1.437,1131,1.584,1132,2.312,1133,1.123,1134,2.312,1135,1.577,1136,1.437,1137,1.504,1138,1.577,1139,1.081,1140,2.312,1141,1.041,1142,1.577,1143,1.168,1144,1.78,1145,1.046,1146,1.932,1147,2.312,1148,1.504,1149,1.715,1150,1.577,1151,1.504,1152,1.437,1153,1.577,1154,1.577,1155,1.577,1156,1.146,1157,1.577,1158,3.208,1159,1.577,1160,1.577,1161,1.437,1162,1.215,1163,2.386,1164,1.577,1165,3.208,1166,1.577,1167,1.215,1168,1.041,1169,1.318,1170,1.577,1171,1.577,1172,1.577,1173,1.577,1174,1.437,1175,2.736,1176,2.312,1177,3.013,1178,3.552,1179,2.667,1180,2.736,1181,2.32,1182,1.78,1183,2.312,1184,1.504,1185,1.78,1186,1.9,1187,1.215,1188,1.805,1189,2.312,1190,1.577,1191,2.494,1192,2.053,1193,1.577,1194,1.577,1195,1.577,1196,1.577,1197,1.577,1198,1.437,1199,1.437,1200,1.577,1201,1.215,1202,1.577,1203,2.32,1204,1.437,1205,1.577,1206,1.215,1207,1.577,1208,2.387,1209,1.577,1210,2.312,1211,1.577,1212,0.898,1213,1.577,1214,1.437,1215,1.577,1216,2.736,1217,1.215,1218,1.577,1219,1.577,1220,1.041,1221,1.437,1222,1.577,1223,1.658,1224,1.437,1225,1.658,1226,1.437,1227,2.429,1228,2.312,1229,1.658,1230,3.969,1231,2.429,1232,2.429,1233,2.429,1234,1.658,1235,1.658,1236,1.658,1237,3.871,1238,2.876,1239,2.429,1240,2.876,1241,1.658,1242,1.658,1243,1.318,1244,1.658,1245,1.658]],["title/components/ColorSelectorComponent.html",[0,1.012,45,1.806]],["body/components/ColorSelectorComponent.html",[0,1.685,1,2.779,2,2.815,3,0.137,4,0.137,5,2.355,6,2.355,7,0.12,9,2.355,10,3.137,12,2.273,14,2.241,15,0.103,16,0.226,20,2.699,21,2.871,22,0.015,25,3.148,27,0.446,29,0.283,32,0.158,33,0.087,34,2.355,35,3.102,36,3.102,37,2.355,38,3.688,39,2.355,40,2.566,41,2.355,42,2.137,43,2.042,44,2.355,45,3.198,46,1.696,47,2.355,48,1.954,49,0.303,50,3.47,51,2.042,52,1.797,53,2.355,54,2.042,55,0.385,56,2.042,57,0.385,58,2.815,59,3.102,60,2.137,61,2.355,62,2.241,63,2.042,64,2.273,65,1.873,66,2.355,67,2.355,68,0.01,69,0.01,74,0.245,76,0.226,78,0.506,84,2.367,107,2.575,108,0.215,109,2.023,114,0.594,119,2.21,120,0.728,122,0.618,135,0.158,164,0.624,173,0.57,178,1.103,182,0.226,189,0.451,190,0.202,212,0.208,256,0.702,275,1.562,302,0.853,308,0.889,364,0.343,371,0.994,444,2.367,445,2.647,446,2.759,472,4.663,519,2.924,557,3.923,561,4.602,642,1.726,643,1.797,726,1.1,747,0.702,756,2.185,812,2.149,967,2.273,1018,2.902,1104,1.876,1149,1.275,1182,2.273,1192,1.808,1217,2.273,1246,6.393,1247,3.493,1248,2.367,1249,5.021,1250,5.107,1251,2.69,1252,5.107,1253,2.69,1254,5.107,1255,5.711,1256,6.071,1257,6.071,1258,6.071,1259,6.071,1260,5.874,1261,5.874,1262,3.457,1263,5.711,1264,2.879,1265,5.711,1266,5.711,1267,3.457,1268,5.711,1269,5.711,1270,5.711,1271,5.711,1272,4.602,1273,5.711,1274,5.021,1275,4.458,1276,4.458,1277,4.458,1278,4.458,1279,3.277,1280,4.458,1281,4.458,1282,4.458,1283,4.458,1284,4.458,1285,4.458,1286,4.458,1287,4.458,1288,5.107,1289,4.458,1290,6.071,1291,5.107,1292,4.458,1293,5.107,1294,5.107,1295,5.107,1296,5.107,1297,5.107,1298,5.107,1299,5.107,1300,5.107,1301,5.107,1302,5.107,1303,5.107,1304,5.107,1305,5.107,1306,5.107,1307,5.107,1308,3.672,1309,3.672,1310,4.458,1311,4.458,1312,4.458,1313,3.048,1314,4.536,1315,3.876,1316,3.876,1317,5.711,1318,3.876,1319,3.876,1320,6.605,1321,3.876,1322,6.309,1323,3.876,1324,3.876,1325,3.876,1326,3.876,1327,3.876,1328,3.876,1329,3.876,1330,5.107,1331,6.982,1332,6.982,1333,5.874,1334,5.874,1335,5.874,1336,4.224,1337,2.273,1338,5.874]],["title/interfaces/ColorableElement.html",[189,0.303,1274,2.836]],["body/interfaces/ColorableElement.html",[0,1.704,1,1.863,3,0.166,4,0.166,7,0.146,10,2.571,12,2.094,15,0.125,16,0.256,21,2.825,22,0.015,27,0.488,29,0.344,32,0.179,33,0.105,40,2.554,45,2.478,46,1.675,64,2.783,68,0.011,69,0.011,74,0.297,78,0.392,108,0.216,114,0.547,120,0.714,122,0.634,135,0.146,164,0.575,173,0.612,178,1.778,189,0.552,190,0.221,212,0.252,256,1.133,275,1.767,302,0.785,308,0.818,310,0.52,364,0.553,371,1.005,444,2.18,445,2.678,446,2.791,472,4.437,519,3.102,557,3.613,561,4.238,642,2.094,643,2.18,747,1.181,812,1.665,1018,2.472,1104,1.728,1149,2.056,1182,2.094,1192,1.665,1217,2.094,1246,4.238,1247,4.238,1248,2.18,1249,3.891,1250,4.704,1251,2.478,1252,4.704,1253,2.478,1254,4.704,1255,4.704,1256,4.704,1257,4.704,1258,4.704,1259,4.704,1263,4.704,1264,2.371,1265,4.704,1266,4.704,1268,4.704,1269,4.704,1270,4.704,1271,4.704,1273,4.704,1274,5.393,1279,3.233,1288,4.704,1290,6.252,1291,4.704,1293,4.704,1294,4.704,1295,4.704,1296,4.704,1297,4.704,1298,4.704,1299,4.704,1300,4.704,1301,4.704,1302,4.704,1303,4.704,1304,4.704,1305,4.704,1306,4.704,1307,4.704,1308,3.382,1309,3.382,1313,3.233,1314,4.154,1315,5.776,1316,6.52,1317,4.704,1318,4.704,1319,4.704,1320,6.9,1321,4.704,1322,6.692,1323,4.704,1324,4.704,1325,4.704,1326,4.704,1327,4.704,1328,4.704,1329,4.704]],["title/interfaces/CommunicationEvent.html",[189,0.303,1339,2.634]],["body/interfaces/CommunicationEvent.html",[3,0.119,4,0.251,7,0.104,11,0.56,15,0.089,16,0.205,22,0.015,27,0.414,29,0.245,32,0.177,33,0.075,68,0.009,69,0.009,70,0.594,74,0.212,75,1,76,0.313,78,0.442,80,0.85,82,1.078,103,1.064,108,0.22,109,1.834,111,1.279,112,0.245,115,0.43,120,0.717,122,0.635,134,1.691,135,0.221,136,1.878,138,1.371,139,1.828,143,2.553,149,0.39,150,0.737,151,0.737,152,1.297,154,1.683,157,0.304,162,1.767,164,0.41,166,2.088,167,1.417,173,0.618,174,0.944,177,0.515,181,0.388,182,0.292,186,0.632,189,0.562,190,0.212,191,0.71,202,0.583,206,2.29,212,0.379,215,0.357,230,0.681,232,0.245,275,1.75,276,0.766,286,0.737,287,1.767,300,1.767,301,2.44,302,0.56,303,0.887,304,1.588,305,1.187,306,0.887,307,1.62,308,0.583,310,0.371,319,2.547,335,1.145,355,1.455,364,0.297,368,0.989,371,1.171,560,2.774,717,2.238,747,1.125,752,1.554,780,2.816,919,1.62,970,2.062,1032,2.182,1047,1.767,1079,1.279,1127,1.328,1133,1.906,1139,1.328,1224,1.767,1339,5.056,1340,2.774,1341,5.613,1342,5.843,1343,4.221,1344,6.197,1345,3.999,1346,3.647,1347,3.772,1348,3.647,1349,3.476,1350,3.223,1351,3.022,1352,3.022,1353,3.022,1354,5.364,1355,4.075,1356,4.395,1357,4.395,1358,4.173,1359,4.075,1360,4.78,1361,4.78,1362,4.78,1363,4.78,1364,4.78,1365,4.78,1366,2.925,1367,3.022,1368,3.022,1369,2.037,1370,4.78,1371,3.022,1372,3.022,1373,3.022,1374,3.999,1375,2.037,1376,3.022,1377,5.931,1378,3.022,1379,4.173,1380,2.411,1381,3.022,1382,3.022,1383,3.022,1384,3.476,1385,4.173,1386,2.147,1387,3.022,1388,4.78,1389,4.78,1390,4.173,1391,3.022,1392,3.022,1393,4.173,1394,4.78,1395,3.022,1396,4.173,1397,4.173,1398,3.022,1399,3.022,1400,4.173,1401,3.022,1402,3.022,1403,3.022,1404,3.022,1405,3.022,1406,4.173,1407,4.173,1408,3.022,1409,4.173,1410,3.022,1411,3.022,1412,3.022,1413,5.155,1414,3.022,1415,5.155,1416,3.022,1417,3.022,1418,3.022,1419,3.022,1420,3.022,1421,4.173,1422,3.022,1423,3.022,1424,5.155,1425,3.022,1426,3.022,1427,3.022,1428,3.022,1429,2.037,1430,4.173,1431,3.022,1432,3.022,1433,3.022,1434,3.022,1435,3.022,1436,2.037,1437,2.037,1438,3.022,1439,4.78,1440,4.173,1441,3.022,1442,4.173,1443,3.022,1444,4.173,1445,3.135,1446,4.173,1447,2.576,1448,3.022,1449,4.173,1450,2.037,1451,3.022,1452,3.135,1453,3.022,1454,3.022,1455,3.022,1456,3.022,1457,3.022,1458,2.037,1459,2.037,1460,2.037,1461,2.037,1462,2.813,1463,2.813,1464,3.022,1465,3.022,1466,5.155,1467,3.022,1468,3.022,1469,3.022,1470,3.022,1471,2.037,1472,2.037,1473,2.037,1474,3.022,1475,2.037,1476,4.173,1477,4.173,1478,2.411,1479,2.774,1480,3.022,1481,5.155,1482,5.734,1483,3.022,1484,3.022,1485,3.022,1486,3.022,1487,3.022,1488,3.022,1489,2.147,1490,3.022,1491,4.173,1492,3.022,1493,2.037,1494,3.022,1495,2.411,1496,3.022,1497,3.022,1498,1.849,1499,3.022,1500,3.022,1501,3.022,1502,1.767,1503,3.022,1504,3.022,1505,3.022,1506,3.022,1507,3.022,1508,3.022,1509,3.022]],["title/interfaces/CommunicationStats.html",[189,0.303,1359,2.634]],["body/interfaces/CommunicationStats.html",[3,0.119,4,0.249,7,0.104,11,0.563,15,0.09,16,0.206,22,0.015,27,0.416,29,0.246,32,0.178,33,0.076,68,0.009,69,0.009,70,0.596,74,0.213,75,1.003,76,0.313,78,0.443,80,0.852,82,1.079,103,1.07,108,0.218,111,1.286,112,0.246,115,0.432,120,0.717,122,0.626,134,1.7,135,0.221,136,1.884,138,1.373,139,1.83,143,2.563,149,0.392,150,0.742,151,0.742,152,1.299,154,1.718,157,0.326,162,1.777,164,0.412,166,2.09,167,1.422,173,0.619,174,0.948,177,0.518,181,0.389,182,0.292,186,0.636,189,0.563,190,0.213,191,0.714,202,0.587,206,2.294,212,0.379,215,0.358,230,0.683,232,0.246,275,1.902,276,0.77,286,0.742,287,1.777,300,1.777,301,2.449,302,0.563,303,0.892,304,1.592,305,1.194,306,0.892,307,1.629,308,0.587,310,0.373,319,2.553,335,1.147,355,1.46,364,0.299,368,0.995,371,1.172,560,2.79,717,2.246,747,0.964,752,1.563,780,2.961,919,1.629,970,2.07,1032,1.286,1047,1.777,1079,1.286,1127,1.336,1133,1.913,1139,1.336,1224,1.777,1339,4.988,1340,2.79,1341,5.572,1342,5.851,1343,4.156,1344,6.07,1345,3.778,1346,3.232,1347,3.484,1348,3.232,1349,2.824,1350,3.232,1351,3.039,1352,3.039,1353,3.039,1354,5.371,1355,4.087,1356,4.406,1357,4.406,1358,4.189,1359,4.406,1360,5.604,1361,5.604,1362,5.604,1363,5.604,1364,5.604,1365,5.604,1366,2.934,1367,3.039,1368,3.039,1369,2.049,1370,4.795,1371,3.039,1372,3.039,1373,3.039,1374,4.003,1375,2.049,1376,3.039,1377,5.938,1378,3.039,1379,4.189,1380,2.425,1381,3.039,1382,3.039,1383,3.039,1384,3.484,1385,4.189,1386,2.159,1387,3.039,1388,4.795,1389,4.795,1390,4.189,1391,3.039,1392,3.039,1393,4.189,1394,4.795,1395,3.039,1396,4.189,1397,4.189,1398,3.039,1399,3.039,1400,4.189,1401,3.039,1402,3.039,1403,3.039,1404,3.039,1405,3.039,1406,4.189,1407,4.189,1408,3.039,1409,4.189,1410,3.039,1411,3.039,1412,3.039,1413,5.168,1414,3.039,1415,5.168,1416,3.039,1417,3.039,1418,3.039,1419,3.039,1420,3.039,1421,4.189,1422,3.039,1423,3.039,1424,5.168,1425,3.039,1426,3.039,1427,3.039,1428,3.039,1429,2.049,1430,4.189,1431,3.039,1432,3.039,1433,3.039,1434,3.039,1435,3.039,1436,2.049,1437,2.049,1438,3.039,1439,4.795,1440,4.189,1441,3.039,1442,4.189,1443,3.039,1444,4.189,1445,3.148,1446,4.189,1447,2.591,1448,3.039,1449,4.189,1450,2.049,1451,3.039,1452,3.148,1453,3.039,1454,3.039,1455,3.039,1456,3.039,1457,3.039,1458,2.049,1459,2.049,1460,2.049,1461,2.049,1462,2.824,1463,2.824,1464,3.039,1465,3.039,1466,5.168,1467,3.039,1468,3.039,1469,3.039,1470,3.039,1471,2.049,1472,2.049,1473,2.049,1474,3.039,1475,2.049,1476,4.189,1477,4.189,1478,2.425,1479,2.79,1480,3.039,1481,5.168,1482,5.743,1483,3.039,1484,3.039,1485,3.039,1486,3.039,1487,3.039,1488,3.039,1489,2.159,1490,3.039,1491,4.189,1492,3.039,1493,2.049,1494,3.039,1495,2.425,1496,3.039,1497,3.039,1498,1.859,1499,3.039,1500,3.039,1501,3.039,1502,1.777,1503,3.039,1504,3.039,1505,3.039,1506,3.039,1507,3.039,1508,3.039,1509,3.039]],["title/injectables/ConfigDirectService.html",[70,0.439,1510,1.982]],["body/injectables/ConfigDirectService.html",[3,0.134,4,0.134,7,0.118,11,0.635,15,0.101,16,0.224,20,2.157,21,1.997,22,0.015,25,3.082,27,0.471,29,0.278,32,0.156,33,0.085,40,1.346,46,1.24,49,0.514,55,0.501,57,0.598,68,0.01,69,0.01,70,0.646,72,2.573,74,0.24,75,0.95,76,0.286,78,0.556,80,1.161,82,0.906,84,2.337,103,1.794,107,1.917,108,0.194,109,1.506,112,0.515,114,0.586,115,0.725,117,0.938,118,1.594,119,2.305,120,0.632,122,0.446,135,0.2,138,1.36,152,0.775,157,0.349,164,0.736,166,1.599,167,1.73,173,0.473,174,0.775,175,0.901,182,0.267,186,0.717,189,0.446,190,0.213,202,0.661,207,2.297,208,1.573,212,0.362,215,0.358,222,1.677,238,1.163,240,0.97,276,1.291,278,1.297,302,0.635,303,1.496,304,1.739,306,1.496,308,0.877,322,3.174,324,1.047,339,0.809,348,0.965,356,1.195,364,0.501,368,1.121,402,3.463,417,2.573,463,1.762,469,1.762,491,1.762,530,1.762,582,3.625,646,2.244,653,2.987,692,2.542,706,1.837,714,1.081,726,1.167,756,2.157,900,4.078,908,1.151,909,1.542,948,4.332,1027,2.602,1030,1.917,1031,2.003,1032,1.45,1033,3.037,1037,2.542,1038,2.096,1044,3.113,1048,1.564,1049,2.852,1057,2.436,1058,2.003,1065,2.003,1068,2.003,1070,1.917,1073,2.003,1074,2.003,1075,2.003,1077,1.627,1080,1.627,1085,1.627,1089,2.157,1092,2.003,1098,2.075,1106,1.627,1110,1.627,1112,1.627,1115,2.656,1119,1.564,1130,2.003,1152,2.003,1161,2.003,1174,2.003,1198,2.003,1199,2.003,1204,2.003,1208,1.917,1212,1.982,1214,2.003,1221,2.003,1495,2.733,1510,3.482,1511,6.275,1512,3.425,1513,3.436,1514,5.042,1515,4.013,1516,4.178,1517,5.042,1518,4.543,1519,5.657,1520,6.024,1521,3.857,1522,6.024,1523,3.857,1524,6.024,1525,5.042,1526,3.857,1527,6.024,1528,5.799,1529,4.372,1530,5.042,1531,3.905,1532,4.372,1533,4.372,1534,4.372,1535,4.372,1536,4.372,1537,2.542,1538,5.042,1539,5.042,1540,4.372,1541,5.042,1542,4.372,1543,3.063,1544,4.372,1545,5.657,1546,6.269,1547,5.657,1548,5.042,1549,5.042,1550,4.372,1551,2.309,1552,3.801,1553,3.801,1554,2.434,1555,3.228,1556,3.228,1557,3.228,1558,3.801,1559,3.621,1560,3.621,1561,3.801,1562,3.801,1563,3.228,1564,5.042,1565,3.801,1566,2.434,1567,3.801,1568,5.042,1569,5.042,1570,5.042,1571,3.801,1572,3.144,1573,3.857,1574,3.801,1575,3.801,1576,5.657,1577,3.801,1578,3.801,1579,3.801,1580,3.801,1581,2.434,1582,2.434,1583,3.801,1584,3.801,1585,2.434,1586,2.434,1587,3.801,1588,3.801,1589,3.801,1590,3.425,1591,3.801,1592,3.801,1593,3.801,1594,3.801,1595,3.801,1596,3.801,1597,3.425,1598,3.801]],["title/interfaces/ConfigurationBatiment.html",[187,1.891,189,0.303]],["body/interfaces/ConfigurationBatiment.html",[3,0.121,4,0.121,7,0.106,11,0.57,15,0.091,16,0.208,22,0.015,27,0.418,29,0.249,32,0.193,33,0.076,49,0.561,55,0.664,57,0.67,68,0.009,69,0.009,70,0.601,74,0.404,75,0.643,76,0.283,77,0.936,78,0.284,80,0.857,82,0.857,105,1.043,108,0.217,112,0.513,114,0.397,115,0.437,117,0.898,118,1.691,120,0.604,122,0.576,128,1.507,135,0.187,138,1.272,147,1.043,149,0.67,150,0.75,151,0.75,152,1.091,157,0.354,166,1.082,167,1.043,173,0.44,174,0.695,175,1.366,176,1.881,177,0.884,178,1.879,181,0.249,182,0.306,186,0.643,187,3.441,189,0.597,190,0.226,191,1.133,202,0.594,203,1.043,206,1.301,207,1.301,208,1.568,212,0.335,215,0.287,222,0.87,232,0.249,235,2.847,238,1.433,239,1.469,240,1.365,256,0.618,276,1.07,278,1.164,286,0.75,291,1.46,303,0.902,304,1.24,306,0.902,310,0.377,324,1.185,325,1.249,326,1.249,327,1.249,328,1.157,329,1.157,330,1.359,331,1.253,335,0.815,336,1.24,339,0.811,341,1.164,342,1.316,348,0.967,350,1.909,352,0.808,361,2.549,364,0.415,368,1.006,371,0.594,375,1.841,378,1.091,388,2.086,402,2.469,653,2.481,658,2.309,659,2.309,660,2.309,661,2.309,662,2.309,663,3.173,664,2.309,665,2.566,666,2.309,667,2.309,668,2.309,669,2.309,670,2.309,671,2.309,672,2.309,673,2.309,674,2.309,681,1.659,714,1.64,717,2.264,726,1.286,745,3.288,747,1.158,748,2.719,756,2.005,794,1.972,906,3.036,908,1.46,909,1.955,947,1.122,955,1.972,963,1.972,978,1.972,1027,2.198,1043,2.04,1048,1.404,1096,1.581,1113,2.005,1144,1.519,1145,1.086,1149,2.142,1156,1.177,1162,1.519,1167,1.519,1168,1.301,1181,2.566,1185,1.519,1186,1.828,1188,1.301,1192,1.208,1201,2.086,1203,1.519,1206,1.519,1212,1.896,1220,1.301,1337,1.519,1350,2.072,1510,3.608,1513,2.072,1515,2.184,1516,3.501,1521,2.184,1523,2.184,1526,2.184,1531,2.709,1543,2.072,1551,2.072,1554,2.184,1555,2.184,1556,2.184,1557,2.184,1559,2.184,1560,2.184,1563,2.184,1566,2.184,1573,2.184,1581,2.184,1582,2.184,1585,2.184,1586,2.184,1599,2.309,1600,3.69,1601,3.69,1602,2.453,1603,3.37,1604,3.849,1605,2.453,1606,2.309,1607,2.453,1608,2.453,1609,2.453,1610,1.972,1611,2.453,1612,2.453,1613,2.453,1614,2.453,1615,2.453,1616,2.453,1617,1.972,1618,2.453,1619,2.453,1620,2.453,1621,2.453,1622,2.453,1623,2.453,1624,2.453,1625,2.453,1626,2.453,1627,2.453,1628,2.453,1629,2.453,1630,2.453,1631,2.453,1632,2.453,1633,2.453,1634,2.453,1635,2.453,1636,2.453,1637,2.453,1638,2.453,1639,2.453,1640,2.453,1641,2.453,1642,2.453,1643,2.453,1644,2.453,1645,2.453,1646,2.453,1647,2.453,1648,2.453,1649,2.453,1650,2.453,1651,2.453,1652,2.453,1653,2.453,1654,2.453,1655,2.453,1656,2.453,1657,2.453,1658,2.453,1659,2.453,1660,2.453,1661,3.37,1662,2.453,1663,2.453,1664,2.453,1665,2.453,1666,2.453,1667,2.453,1668,2.453]],["title/interfaces/ConfigurationComplete.html",[189,0.303,1531,1.982]],["body/interfaces/ConfigurationComplete.html",[3,0.142,4,0.142,7,0.125,11,0.672,15,0.107,16,0.232,22,0.015,27,0.481,29,0.294,32,0.162,33,0.09,46,1.287,49,0.511,55,0.4,57,0.578,68,0.01,69,0.01,70,0.671,74,0.254,75,0.759,76,0.283,78,0.532,80,1.104,82,0.644,103,1.276,108,0.223,112,0.507,114,0.468,115,0.671,117,0.95,118,1.629,120,0.549,122,0.356,135,0.18,138,1.255,152,0.82,157,0.351,164,0.639,166,1.276,167,1.601,173,0.378,174,0.82,175,0.953,182,0.273,186,0.759,189,0.514,190,0.218,202,0.7,207,2.218,208,1.55,212,0.366,215,0.362,222,1.669,238,1.231,240,1.026,276,1.328,278,1.373,302,0.672,303,1.539,304,1.763,306,1.539,308,0.911,310,0.445,322,3.064,324,1.066,339,0.827,348,0.986,356,1.24,364,0.515,368,1.187,402,3.511,417,2.724,463,1.865,469,1.865,491,1.865,530,1.865,582,2.893,646,2.33,653,2.855,692,2.638,706,1.944,714,1.96,726,1.157,756,1.722,900,3.543,908,1.195,909,1.601,948,2.893,1027,2.541,1030,2.029,1031,2.12,1032,1.534,1033,3.105,1037,2.638,1038,2.218,1044,3.329,1048,1.656,1049,2.932,1057,2.976,1058,2.12,1065,2.12,1068,2.12,1070,2.029,1073,2.12,1074,2.12,1075,2.12,1077,1.722,1080,1.722,1085,1.722,1089,2.239,1092,2.12,1098,2.628,1106,1.722,1110,1.722,1112,1.722,1115,2.12,1119,2.535,1130,3.245,1152,3.245,1161,3.245,1174,3.245,1198,3.245,1199,2.12,1204,2.12,1208,3.105,1212,2.026,1214,2.12,1221,2.12,1495,2.893,1510,3.362,1511,3.626,1512,3.626,1513,3.179,1514,4.024,1515,3.723,1516,4.105,1517,4.024,1518,3.626,1519,4.024,1520,4.024,1521,2.576,1522,4.024,1523,2.576,1524,4.024,1526,2.576,1527,4.024,1530,4.024,1531,3.783,1537,2.029,1538,4.024,1539,4.024,1541,4.024,1543,2.444,1545,5.233,1546,6.159,1547,5.233,1548,4.024,1549,4.024,1551,3.179,1552,4.024,1553,4.024,1554,2.576,1555,3.35,1556,3.35,1557,3.35,1558,4.024,1559,3.723,1560,3.723,1561,4.024,1562,4.024,1563,3.35,1564,5.233,1565,4.024,1566,2.576,1567,4.024,1568,5.233,1569,5.233,1570,5.233,1571,4.024,1572,3.328,1573,3.943,1574,4.024,1575,4.024,1576,5.816,1577,4.024,1578,4.024,1579,4.024,1580,4.024,1581,2.576,1582,2.576,1583,4.024,1584,4.024,1585,2.576,1586,2.576,1587,4.024,1588,4.024,1589,4.024,1590,3.626,1591,4.024,1592,4.024,1593,4.024,1594,4.024,1595,4.024,1596,4.024,1597,3.626,1598,4.024]],["title/interfaces/ConfigurationMur.html",[189,0.303,745,1.806]],["body/interfaces/ConfigurationMur.html",[3,0.121,4,0.121,7,0.106,11,0.571,15,0.091,16,0.208,22,0.015,27,0.419,29,0.25,32,0.193,33,0.077,49,0.562,55,0.635,57,0.685,68,0.009,69,0.009,70,0.602,74,0.364,75,0.645,76,0.284,77,0.938,78,0.285,80,0.859,82,0.859,105,1.046,108,0.216,112,0.513,114,0.398,115,0.438,117,0.899,118,1.652,120,0.605,122,0.511,128,1.471,135,0.187,138,1.273,147,1.046,149,0.671,150,0.752,151,0.752,152,1.092,157,0.355,166,1.085,167,1.046,173,0.441,174,0.697,175,1.367,176,1.886,177,0.886,178,1.777,181,0.25,182,0.306,186,0.645,187,3.334,189,0.597,190,0.226,191,1.135,202,0.595,203,1.046,206,1.304,207,1.304,208,1.568,212,0.335,215,0.287,222,0.872,232,0.25,235,2.852,238,1.436,239,1.471,240,1.367,256,0.62,276,1.072,278,1.167,286,0.752,291,1.464,303,0.905,304,1.242,306,0.905,310,0.378,324,1.193,325,1.25,326,1.25,327,1.25,328,1.158,329,1.158,330,1.359,331,1.257,335,0.817,336,1.242,339,0.812,341,1.167,342,1.317,348,0.968,350,1.911,352,0.811,361,2.551,364,0.475,368,1.009,371,0.595,375,1.843,378,1.092,388,2.09,402,2.473,653,2.485,658,2.316,659,2.316,660,2.316,661,2.316,662,2.316,663,3.178,664,2.316,665,2.569,666,2.316,667,2.316,668,2.316,669,2.316,670,2.316,671,2.316,672,2.316,673,2.316,674,2.316,681,1.662,714,1.641,717,2.268,726,1.294,745,3.37,747,1.159,748,2.802,756,2.009,794,1.977,906,3.291,908,1.461,909,1.957,947,1.125,955,1.977,963,1.977,978,1.977,1027,2.2,1043,2.042,1048,1.408,1096,1.586,1113,2.009,1144,1.523,1145,1.088,1149,1.989,1156,1.179,1162,1.523,1167,1.523,1168,1.304,1181,2.569,1185,1.523,1186,1.83,1188,1.304,1192,1.211,1201,2.09,1203,1.523,1206,1.523,1212,1.898,1220,1.304,1337,1.523,1350,2.078,1510,3.611,1513,2.078,1515,2.19,1516,3.505,1521,2.19,1523,2.19,1526,2.19,1531,2.714,1543,2.078,1551,2.078,1554,2.19,1555,2.19,1556,2.19,1557,2.19,1559,2.19,1560,2.19,1563,2.19,1566,2.19,1573,2.19,1581,2.19,1582,2.19,1585,2.19,1586,2.19,1599,2.316,1600,3.006,1601,3.006,1602,2.46,1603,3.376,1604,3.855,1605,2.46,1606,2.316,1607,2.46,1608,2.46,1609,2.46,1610,1.977,1611,2.46,1612,2.46,1613,2.46,1614,2.46,1615,2.46,1616,2.46,1617,1.977,1618,2.46,1619,2.46,1620,2.46,1621,2.46,1622,2.46,1623,2.46,1624,2.46,1625,2.46,1626,2.46,1627,2.46,1628,2.46,1629,2.46,1630,2.46,1631,2.46,1632,2.46,1633,2.46,1634,2.46,1635,2.46,1636,2.46,1637,2.46,1638,2.46,1639,2.46,1640,2.46,1641,2.46,1642,2.46,1643,2.46,1644,2.46,1645,2.46,1646,2.46,1647,2.46,1648,2.46,1649,2.46,1650,2.46,1651,2.46,1652,2.46,1653,2.46,1654,2.46,1655,2.46,1656,2.46,1657,2.46,1658,2.46,1659,2.46,1660,2.46,1661,3.376,1662,2.46,1663,2.46,1664,2.46,1665,2.46,1666,2.46,1667,2.46,1668,2.46]],["title/interfaces/ConfigurationOuverture.html",[189,0.303,906,1.806]],["body/interfaces/ConfigurationOuverture.html",[3,0.12,4,0.12,7,0.105,11,0.568,15,0.091,16,0.207,22,0.015,27,0.418,29,0.249,32,0.193,33,0.076,49,0.561,55,0.635,57,0.67,68,0.009,69,0.009,70,0.6,74,0.364,75,0.642,76,0.283,77,0.934,78,0.283,80,0.856,82,0.856,105,1.041,108,0.219,109,1.853,112,0.512,114,0.396,115,0.436,117,0.898,118,1.65,120,0.604,122,0.576,128,1.507,135,0.187,138,1.271,147,1.041,149,0.67,150,0.748,151,0.748,152,1.09,157,0.355,166,1.08,167,1.041,173,0.439,174,0.694,175,1.364,176,1.876,177,0.884,178,1.774,181,0.249,182,0.306,186,0.642,187,3.328,189,0.596,190,0.226,191,0.991,202,0.592,203,1.041,206,1.298,207,1.298,208,1.567,212,0.334,215,0.287,222,0.868,232,0.249,235,2.842,238,1.431,239,1.467,240,1.364,256,0.848,276,1.068,278,1.161,286,0.748,291,1.456,303,0.9,304,1.238,306,0.9,310,0.376,324,1.192,325,1.249,326,1.249,327,1.249,328,1.157,329,1.157,330,1.358,331,1.25,335,0.814,336,1.238,339,0.811,341,1.596,342,1.314,348,0.967,350,1.908,352,0.806,361,2.548,364,0.414,368,1.004,371,0.592,375,1.84,378,1.09,388,2.083,402,2.465,653,2.478,658,2.304,659,2.304,660,2.304,661,2.304,662,2.304,663,3.168,664,2.304,665,2.563,666,2.304,667,2.304,668,2.304,669,2.304,670,2.304,671,2.304,672,2.304,673,2.304,674,2.304,681,1.656,714,1.638,717,2.261,726,1.294,745,3.286,747,1.211,748,2.717,756,2.002,794,1.967,906,3.18,908,1.508,909,2.02,947,1.12,955,1.967,963,1.967,978,1.967,1027,2.196,1043,2.038,1048,1.401,1096,1.578,1113,2.002,1144,1.515,1145,1.085,1149,1.985,1156,1.176,1162,1.515,1167,1.515,1168,1.298,1181,2.563,1185,1.515,1186,1.826,1188,1.298,1192,1.205,1201,2.083,1203,1.515,1206,1.515,1212,1.894,1220,1.298,1337,1.515,1350,2.068,1510,3.605,1513,2.068,1515,2.179,1516,3.498,1521,2.179,1523,2.179,1526,2.179,1531,2.705,1543,2.068,1551,2.068,1554,2.179,1555,2.179,1556,2.179,1557,2.179,1559,2.179,1560,2.179,1563,2.179,1566,2.179,1573,2.179,1581,2.179,1582,2.179,1585,2.179,1586,2.179,1599,2.304,1600,2.995,1601,2.995,1602,2.447,1603,3.364,1604,3.845,1605,2.447,1606,2.304,1607,2.447,1608,2.447,1609,2.447,1610,1.967,1611,2.447,1612,2.447,1613,2.447,1614,2.447,1615,2.447,1616,2.447,1617,1.967,1618,2.447,1619,2.447,1620,2.447,1621,2.447,1622,2.447,1623,2.447,1624,2.447,1625,2.447,1626,2.447,1627,2.447,1628,2.447,1629,2.447,1630,2.447,1631,2.447,1632,2.447,1633,2.447,1634,2.447,1635,2.447,1636,2.447,1637,2.447,1638,2.447,1639,2.447,1640,2.447,1641,2.447,1642,2.447,1643,2.447,1644,2.447,1645,2.447,1646,2.447,1647,2.447,1648,2.447,1649,2.447,1650,2.447,1651,2.447,1652,2.447,1653,2.447,1654,2.447,1655,2.447,1656,2.447,1657,2.447,1658,2.447,1659,2.447,1660,2.447,1661,3.364,1662,2.447,1663,2.447,1664,2.447,1665,2.447,1666,2.447,1667,2.447,1668,2.447]],["title/injectables/ConfigurationService.html",[70,0.439,105,1.049]],["body/injectables/ConfigurationService.html",[3,0.1,4,0.1,7,0.088,11,0.473,15,0.075,16,0.182,20,2.068,21,1.914,22,0.015,25,3.037,27,0.378,29,0.207,32,0.182,33,0.063,40,2.145,49,0.56,55,0.647,57,0.678,68,0.008,69,0.008,70,0.526,72,1.916,74,0.356,75,0.774,76,0.285,77,1.127,78,0.236,80,0.97,82,1.013,84,1.904,103,0.898,105,1.256,107,3.055,108,0.213,109,2.4,112,0.512,114,0.478,115,0.526,117,0.889,118,1.7,119,2.245,120,0.683,122,0.52,128,1.483,135,0.196,138,1.341,147,0.866,149,0.655,150,0.903,151,0.903,152,1.081,157,0.35,166,1.533,167,1.478,173,0.454,174,0.577,175,1.392,176,2.264,177,0.901,178,1.766,181,0.3,182,0.313,186,0.533,187,3.488,189,0.568,190,0.208,191,1.023,202,0.492,203,0.866,206,1.079,207,1.079,208,1.565,212,0.315,215,0.259,222,1.047,232,0.3,235,2.495,238,1.478,239,1.455,240,1.352,256,0.876,276,0.938,278,0.965,286,0.622,291,1.211,303,0.749,304,1.086,306,0.749,324,1.188,325,1.269,326,1.269,327,1.269,328,1.172,329,1.172,330,1.376,331,1.039,335,0.841,336,1.279,339,0.789,341,0.965,342,1.383,348,0.941,350,2.013,352,0.973,361,2.637,364,0.52,368,0.835,371,0.923,375,1.941,378,1.197,388,1.828,402,2.163,631,5.303,653,2.458,658,1.916,659,1.916,660,1.916,661,1.916,662,1.916,663,2.78,664,1.916,665,2.507,666,1.916,667,1.916,668,1.916,669,1.916,670,1.916,671,1.916,672,1.916,673,1.916,674,1.916,681,1.877,714,0.805,717,2.562,726,1.289,745,3.333,747,1.179,748,2.734,756,2.068,794,3.065,906,3.192,908,1.444,909,1.966,947,1.351,952,1.454,955,1.636,963,2.794,966,1.312,968,3.154,969,2.495,978,1.636,1027,2.24,1043,2.197,1048,1.164,1096,1.312,1113,1.757,1144,1.828,1145,1.17,1149,1.932,1156,1.292,1162,1.828,1167,1.828,1168,1.566,1181,2.763,1185,1.828,1186,1.969,1188,1.566,1192,1.454,1201,2.361,1203,1.828,1206,1.828,1212,1.852,1220,1.566,1337,1.828,1350,1.719,1510,3.657,1513,2.495,1515,1.811,1516,3.568,1521,3.395,1523,3.395,1525,4.106,1526,3.395,1531,3.065,1543,2.495,1551,2.495,1554,1.811,1555,1.811,1556,1.811,1557,1.811,1559,1.811,1560,1.811,1563,1.811,1566,1.811,1573,1.811,1581,1.811,1582,1.811,1585,1.811,1586,1.811,1599,1.916,1600,2.629,1601,2.629,1602,2.035,1603,2.953,1604,3.475,1605,2.953,1606,2.78,1607,2.953,1608,3.475,1609,2.953,1610,2.374,1611,2.953,1612,2.953,1613,2.953,1614,2.953,1615,2.953,1616,2.953,1617,2.374,1618,3.475,1619,2.953,1620,2.953,1621,2.035,1622,2.035,1623,2.035,1624,2.953,1625,2.953,1626,2.035,1627,2.035,1628,2.035,1629,2.035,1630,2.035,1631,2.035,1632,2.035,1633,2.035,1634,2.035,1635,2.035,1636,2.035,1637,2.035,1638,2.035,1639,2.035,1640,2.035,1641,2.035,1642,2.035,1643,2.035,1644,2.035,1645,2.035,1646,3.813,1647,2.035,1648,2.953,1649,2.953,1650,2.035,1651,2.035,1652,2.035,1653,2.035,1654,3.475,1655,2.035,1656,3.813,1657,2.035,1658,2.035,1659,2.035,1660,2.035,1661,2.953,1662,2.035,1663,2.953,1664,2.035,1665,2.035,1666,3.813,1667,2.035,1668,2.035,1669,4.723,1670,4.723,1671,4.723,1672,4.723,1673,3.255,1674,4.723,1675,3.255,1676,3.255,1677,3.255,1678,3.255,1679,3.255,1680,3.255,1681,3.255,1682,3.255,1683,3.255,1684,3.255,1685,4.723,1686,3.255,1687,3.255,1688,3.255,1689,3.255,1690,3.255,1691,1.491,1692,3.255,1693,3.255,1694,3.255]],["title/interfaces/ConfigurationSol.html",[189,0.303,1600,2.195]],["body/interfaces/ConfigurationSol.html",[3,0.122,4,0.122,7,0.107,11,0.574,15,0.092,16,0.209,22,0.015,27,0.42,29,0.251,32,0.194,33,0.077,49,0.562,55,0.636,57,0.671,68,0.009,69,0.009,70,0.604,74,0.365,75,0.648,76,0.284,77,0.943,78,0.286,80,0.861,82,0.861,105,1.052,108,0.214,112,0.513,114,0.4,115,0.441,117,0.917,118,1.655,120,0.606,122,0.512,128,1.472,135,0.188,138,1.275,147,1.052,149,0.672,150,0.756,151,0.756,152,1.096,157,0.355,166,1.091,167,1.052,173,0.442,174,0.701,175,1.37,176,1.896,177,0.888,178,1.78,181,0.251,182,0.306,186,0.648,187,3.34,189,0.597,190,0.227,191,0.998,202,0.598,203,1.052,206,1.312,207,1.312,208,1.569,212,0.335,215,0.288,222,0.877,232,0.251,235,2.863,238,1.441,239,1.475,240,1.371,256,0.623,276,1.076,278,1.173,286,0.756,291,1.471,303,0.91,304,1.247,306,0.91,310,0.38,324,1.193,325,1.251,326,1.251,327,1.251,328,1.159,329,1.159,330,1.36,331,1.263,335,0.82,336,1.247,339,0.814,341,1.173,342,1.32,348,0.97,350,1.914,352,0.815,361,2.553,364,0.417,368,1.014,371,0.598,375,1.846,378,1.096,388,2.098,402,2.482,653,2.492,658,2.328,659,2.328,660,2.328,661,2.328,662,2.328,663,3.19,664,2.328,665,2.574,666,2.328,667,2.328,668,2.328,669,2.328,670,2.328,671,2.328,672,2.328,673,2.328,674,2.328,681,1.668,714,1.645,717,2.277,726,1.295,745,3.296,747,1.161,748,2.724,756,2.016,794,1.988,906,3.046,908,1.463,909,1.96,947,1.131,955,1.988,963,1.988,978,1.988,1027,2.205,1043,2.047,1048,1.415,1096,1.594,1113,2.016,1144,1.531,1145,1.09,1149,2.058,1156,1.182,1162,1.531,1167,1.531,1168,1.312,1181,2.574,1185,1.531,1186,1.834,1188,1.312,1192,1.217,1201,2.098,1203,1.531,1206,1.531,1212,1.902,1220,1.312,1337,1.531,1350,2.089,1510,3.617,1513,2.089,1515,2.202,1516,3.513,1521,2.202,1523,2.202,1526,2.202,1531,2.724,1543,2.089,1551,2.089,1554,2.202,1555,2.202,1556,2.202,1557,2.202,1559,2.202,1560,2.202,1563,2.202,1566,2.202,1573,2.202,1581,2.202,1582,2.202,1585,2.202,1586,2.202,1599,2.328,1600,3.442,1601,3.017,1602,2.473,1603,3.388,1604,3.866,1605,2.473,1606,2.328,1607,2.473,1608,2.473,1609,2.473,1610,1.988,1611,2.473,1612,2.473,1613,2.473,1614,2.473,1615,2.473,1616,2.473,1617,1.988,1618,2.473,1619,2.473,1620,2.473,1621,2.473,1622,2.473,1623,2.473,1624,2.473,1625,2.473,1626,2.473,1627,2.473,1628,2.473,1629,2.473,1630,2.473,1631,2.473,1632,2.473,1633,2.473,1634,2.473,1635,2.473,1636,2.473,1637,2.473,1638,2.473,1639,2.473,1640,2.473,1641,2.473,1642,2.473,1643,2.473,1644,2.473,1645,2.473,1646,2.473,1647,2.473,1648,2.473,1649,2.473,1650,2.473,1651,2.473,1652,2.473,1653,2.473,1654,2.473,1655,2.473,1656,2.473,1657,2.473,1658,2.473,1659,2.473,1660,2.473,1661,3.388,1662,2.473,1663,2.473,1664,2.473,1665,2.473,1666,2.473,1667,2.473,1668,2.473]],["title/interfaces/ConfigurationToit.html",[189,0.303,1601,2.195]],["body/interfaces/ConfigurationToit.html",[3,0.122,4,0.122,7,0.107,11,0.574,15,0.092,16,0.209,22,0.015,27,0.42,29,0.251,32,0.194,33,0.077,49,0.562,55,0.636,57,0.671,68,0.009,69,0.009,70,0.604,74,0.365,75,0.648,76,0.284,77,0.943,78,0.286,80,0.861,82,0.861,105,1.052,108,0.214,112,0.513,114,0.4,115,0.441,117,0.917,118,1.655,120,0.606,122,0.512,128,1.472,135,0.188,138,1.275,147,1.052,149,0.672,150,0.756,151,0.756,152,1.096,157,0.355,166,1.091,167,1.052,173,0.442,174,0.701,175,1.37,176,1.896,177,0.888,178,1.823,181,0.251,182,0.306,186,0.648,187,3.34,189,0.597,190,0.227,191,0.998,202,0.598,203,1.052,206,1.312,207,1.312,208,1.569,212,0.335,215,0.288,222,0.877,232,0.251,235,2.863,238,1.441,239,1.475,240,1.371,256,0.623,276,1.076,278,1.173,286,0.756,291,1.471,303,0.91,304,1.247,306,0.91,310,0.38,324,1.193,325,1.251,326,1.251,327,1.251,328,1.159,329,1.159,330,1.36,331,1.263,335,0.82,336,1.247,339,0.814,341,1.173,342,1.32,348,0.97,350,1.914,352,0.815,361,2.553,364,0.417,368,1.014,371,0.598,375,1.846,378,1.096,388,2.098,402,2.482,653,2.492,658,2.328,659,2.328,660,2.328,661,2.328,662,2.328,663,3.19,664,2.328,665,2.574,666,2.328,667,2.328,668,2.328,669,2.328,670,2.328,671,2.328,672,2.328,673,2.328,674,2.328,681,1.668,714,1.645,717,2.277,726,1.295,745,3.296,747,1.161,748,2.724,756,2.016,794,1.988,906,3.046,908,1.463,909,1.96,947,1.131,955,1.988,963,1.988,978,1.988,1027,2.205,1043,2.047,1048,1.415,1096,1.594,1113,2.016,1144,1.531,1145,1.09,1149,1.993,1156,1.182,1162,1.531,1167,1.531,1168,1.312,1181,2.574,1185,1.531,1186,1.834,1188,1.312,1192,1.217,1201,2.098,1203,1.531,1206,1.531,1212,1.902,1220,1.312,1337,1.531,1350,2.089,1510,3.617,1513,2.089,1515,2.202,1516,3.513,1521,2.202,1523,2.202,1526,2.202,1531,2.724,1543,2.089,1551,2.089,1554,2.202,1555,2.202,1556,2.202,1557,2.202,1559,2.202,1560,2.202,1563,2.202,1566,2.202,1573,2.202,1581,2.202,1582,2.202,1585,2.202,1586,2.202,1599,2.328,1600,3.017,1601,3.442,1602,2.473,1603,3.388,1604,3.866,1605,2.473,1606,2.328,1607,2.473,1608,2.473,1609,2.473,1610,1.988,1611,2.473,1612,2.473,1613,2.473,1614,2.473,1615,2.473,1616,2.473,1617,1.988,1618,2.473,1619,2.473,1620,2.473,1621,2.473,1622,2.473,1623,2.473,1624,2.473,1625,2.473,1626,2.473,1627,2.473,1628,2.473,1629,2.473,1630,2.473,1631,2.473,1632,2.473,1633,2.473,1634,2.473,1635,2.473,1636,2.473,1637,2.473,1638,2.473,1639,2.473,1640,2.473,1641,2.473,1642,2.473,1643,2.473,1644,2.473,1645,2.473,1646,2.473,1647,2.473,1648,2.473,1649,2.473,1650,2.473,1651,2.473,1652,2.473,1653,2.473,1654,2.473,1655,2.473,1656,2.473,1657,2.473,1658,2.473,1659,2.473,1660,2.473,1661,3.388,1662,2.473,1663,2.473,1664,2.473,1665,2.473,1666,2.473,1667,2.473,1668,2.473]],["title/interfaces/ControlesScene.html",[189,0.303,1695,2.321]],["body/interfaces/ControlesScene.html",[3,0.115,4,0.115,7,0.1,11,0.541,15,0.086,16,0.201,22,0.015,24,2.144,27,0.463,29,0.237,32,0.19,33,0.073,46,1.281,55,0.518,57,0.449,68,0.009,69,0.009,70,0.58,74,0.205,75,0.611,76,0.313,77,0.889,80,0.903,82,1.01,103,1.028,105,1.594,108,0.215,112,0.519,114,0.377,115,0.58,117,0.456,120,0.685,122,0.544,128,0.995,135,0.216,138,1.363,139,1.627,147,1.928,149,0.69,150,1.24,151,1.24,152,1.209,154,1.197,157,0.359,164,0.845,166,1.653,167,1.879,169,2.97,171,2.97,173,0.592,174,1.209,181,0.449,182,0.28,183,1.725,184,1.987,186,0.611,188,1.443,189,0.591,190,0.217,195,3.797,196,3.124,202,0.564,212,0.355,215,0.385,216,3.61,218,3.61,220,2.896,221,2.896,230,0.872,232,0.237,275,1.594,302,1.091,308,0.564,310,0.358,324,1.053,325,1.24,326,1.24,327,1.24,335,0.907,336,1.197,339,0.608,348,0.725,352,0.768,355,0.889,366,1.438,368,0.956,370,1.066,371,0.787,397,1.708,513,0.74,516,2.075,746,1.787,747,1.184,752,2.415,812,1.148,848,0.889,851,1.241,863,1.969,876,2.024,880,2.748,883,3.165,886,3.165,889,1.969,907,1.787,919,2.518,952,1.996,966,1.503,967,1.443,970,1.443,1006,1.969,1028,2.908,1029,2.538,1032,2.15,1034,1.566,1061,2.415,1077,2.538,1079,2.625,1080,1.936,1081,2.51,1085,1.936,1089,2.229,1098,2.144,1104,1.191,1105,1.503,1106,1.936,1110,1.936,1112,1.936,1119,1.334,1120,1.387,1127,1.284,1129,2.415,1131,1.284,1133,1.862,1145,1.189,1156,0.713,1186,1.028,1337,1.443,1386,2.075,1498,1.787,1537,1.634,1691,1.708,1695,3.528,1696,2.331,1697,4.556,1698,4.556,1699,4.556,1700,4.556,1701,4.556,1702,4.556,1703,4.556,1704,4.556,1705,4.556,1706,4.556,1707,4.556,1708,2.49,1709,2.49,1710,3.063,1711,3.475,1712,3.475,1713,3.475,1714,3.475,1715,3.253,1716,3.475,1717,3.475,1718,2.49,1719,3.475,1720,2.49,1721,3.063,1722,3.475,1723,2.49,1724,3.528,1725,2.49,1726,3.475,1727,4.003,1728,2.873,1729,3.063,1730,4.003,1731,4.332,1732,4.332,1733,4.003,1734,4.003,1735,3.475,1736,2.49,1737,2.49,1738,1.443,1739,2.49,1740,2.195,1741,3.475,1742,2.49,1743,4.003,1744,2.49,1745,4.556,1746,2.49,1747,2.49,1748,1.787,1749,2.49,1750,2.49,1751,2.49,1752,2.49,1753,2.49,1754,3.475,1755,2.49,1756,2.49,1757,2.49,1758,2.49,1759,2.49,1760,2.331,1761,2.49,1762,2.49,1763,2.49,1764,2.49,1765,2.49,1766,2.49,1767,2.331,1768,2.49,1769,4.003,1770,2.49,1771,2.49,1772,2.49,1773,2.49,1774,2.49,1775,2.49,1776,2.49,1777,3.475,1778,2.49,1779,2.49,1780,2.49,1781,2.49,1782,2.49,1783,2.49,1784,2.49,1785,2.49,1786,2.49,1787,2.49,1788,2.49,1789,4.556,1790,2.49,1791,4.003,1792,2.49,1793,2.49,1794,2.49,1795,4.003,1796,2.49,1797,2.49,1798,4.332,1799,3.475,1800,3.475,1801,1.787,1802,2.49,1803,3.475,1804,2.49,1805,3.475,1806,3.475,1807,2.49,1808,4.003,1809,2.49,1810,3.475,1811,2.331,1812,2.49,1813,2.49,1814,2.49,1815,2.49,1816,2.49,1817,2.49,1818,2.49,1819,2.49,1820,2.49,1821,3.475,1822,2.49,1823,1.634,1824,2.49,1825,2.49,1826,2.49,1827,2.49,1828,2.49,1829,2.49,1830,2.49,1831,2.49,1832,2.49,1833,2.49,1834,2.49,1835,2.49,1836,2.49,1837,2.49,1838,2.49,1839,2.49]],["title/interfaces/Dimensions.html",[49,0.268,189,0.303]],["body/interfaces/Dimensions.html",[0,1.748,1,1.943,3,0.174,4,0.174,7,0.152,10,2.184,12,2.184,15,0.131,16,0.263,22,0.015,27,0.497,29,0.358,32,0.197,33,0.11,48,2.474,49,0.56,64,2.184,65,2.371,68,0.012,69,0.012,74,0.31,76,0.218,108,0.197,120,0.694,122,0.434,135,0.205,149,0.571,157,0.351,164,0.778,173,0.621,181,0.483,189,0.598,190,0.234,191,1.255,232,0.433,237,1.674,302,0.99,308,1.031,310,0.542,328,1.173,329,1.173,330,1.377,338,1.556,339,0.855,348,1.02,350,1.813,352,1.404,444,2.274,445,2.747,446,2.864,519,3.277,642,2.184,643,2.274,1145,1.201,1146,2.371,1156,1.303,1212,2.095,1248,2.274,1251,2.585,1253,2.585,1264,2.474,1279,3.272,1313,3.272,1314,4.579,1445,3.322,1840,4.059,1841,2.836,1842,4.892,1843,2.981,1844,4.059,1845,2.981,1846,2.981,1847,4.421,1848,4.421,1849,4.421,1850,4.421,1851,4.421,1852,4.421,1853,4.421,1854,4.421,1855,4.421,1856,4.421,1857,4.421,1858,4.421,1859,5.34,1860,4.421,1861,4.421,1862,5.34,1863,4.421,1864,4.421,1865,4.421,1866,4.421]],["title/interfaces/Dimensions3D.html",[189,0.303,1037,1.729]],["body/interfaces/Dimensions3D.html",[3,0.097,4,0.142,7,0.085,15,0.073,16,0.178,22,0.015,24,2.286,32,0.198,33,0.061,46,1.725,49,0.533,55,0.552,57,0.552,68,0.008,69,0.008,74,0.173,76,0.319,78,0.499,108,0.204,112,0.514,114,0.646,115,0.712,117,0.975,118,1.254,119,1.367,135,0.172,136,0.968,149,0.318,157,0.348,175,0.949,177,0.615,178,0.778,181,0.381,182,0.317,189,0.543,190,0.205,191,1.004,208,1.379,212,0.215,215,0.35,222,1.022,230,0.402,232,0.406,237,1.895,238,1.225,239,1.687,240,1.529,256,0.859,282,1.527,310,0.302,324,1.192,325,1.312,326,1.296,327,1.276,328,1.14,329,1.14,330,1.338,331,2.202,335,0.825,336,0.723,338,0.867,339,0.636,340,1.807,341,1.617,342,1.475,345,1.807,348,0.641,350,1.775,352,1.123,356,0.648,361,2.392,364,0.604,366,1.022,369,2.019,375,1.85,378,1.132,380,1.083,406,1.321,427,2.29,463,2.197,468,2.926,469,1.268,474,2.74,491,1.857,500,1.268,513,0.624,530,1.268,566,1.043,581,2.208,585,1.268,590,1.596,646,1.217,681,2.054,692,2.926,706,2.683,726,1.236,739,1.17,821,2.019,827,1.586,843,1.99,848,1.099,851,1.645,876,2.14,898,1.379,902,1.935,908,1.432,947,0.9,990,2.472,1025,2.11,1026,1.441,1027,1.043,1028,2.737,1029,2.028,1030,2.39,1031,2.497,1032,1.807,1033,3.1,1034,1.935,1035,3.857,1036,3.355,1037,2.631,1038,1.508,1039,2.74,1040,1.617,1041,1.379,1042,2.433,1043,1.966,1044,2.29,1045,2.315,1046,1.661,1047,1.441,1048,2.467,1049,2.926,1050,2.74,1051,3.016,1052,3.016,1053,2.315,1054,2.74,1055,2.028,1056,2.208,1057,1.935,1058,2.749,1059,2.315,1060,1.661,1061,2.575,1062,2.74,1063,1.661,1064,2.208,1065,2.11,1066,3.062,1067,2.315,1068,2.11,1069,2.315,1070,2.926,1071,1.661,1072,2.315,1073,2.11,1074,2.11,1075,2.11,1076,2.433,1077,1.714,1078,1.581,1079,2.118,1080,2.028,1081,2.583,1082,2.613,1083,2.74,1084,1.661,1085,2.028,1086,2.613,1087,2.613,1088,2.11,1089,2.233,1090,2.433,1091,1.661,1092,2.11,1093,1.661,1094,2.315,1095,2.315,1096,1.268,1097,2.74,1098,2.147,1099,2.433,1100,2.433,1101,1.661,1102,2.11,1103,2.315,1104,1.917,1105,1.857,1106,1.714,1107,1.268,1108,1.661,1109,1.661,1110,1.714,1111,2.208,1112,1.714,1113,1.17,1114,1.581,1115,1.441,1116,1.581,1117,1.581,1118,1.581,1119,1.125,1120,1.714,1121,1.581,1122,2.74,1123,1.321,1124,2.315,1125,1.581,1126,2.315,1127,1.586,1128,1.581,1129,1.268,1130,1.441,1131,1.586,1132,2.315,1133,1.125,1134,2.315,1135,1.581,1136,1.441,1137,1.508,1138,1.581,1139,1.083,1140,2.315,1141,1.043,1142,1.581,1143,1.17,1144,1.783,1145,1.047,1146,1.935,1147,2.315,1148,1.508,1149,1.716,1150,1.581,1151,1.508,1152,1.441,1153,1.581,1154,1.581,1155,1.581,1156,1.147,1157,1.581,1158,3.211,1159,1.581,1160,1.581,1161,1.441,1162,1.217,1163,2.388,1164,1.581,1165,3.211,1166,1.581,1167,1.217,1168,1.043,1169,1.321,1170,1.581,1171,1.581,1172,1.581,1173,1.581,1174,1.441,1175,2.74,1176,2.315,1177,3.016,1178,3.554,1179,2.669,1180,2.74,1181,2.323,1182,1.783,1183,2.315,1184,1.508,1185,1.783,1186,1.902,1187,1.217,1188,1.807,1189,2.315,1190,1.581,1191,2.497,1192,2.054,1193,1.581,1194,1.581,1195,1.581,1196,1.581,1197,1.581,1198,1.441,1199,1.441,1200,1.581,1201,1.217,1202,1.581,1203,2.323,1204,1.441,1205,1.581,1206,1.217,1207,1.581,1208,2.39,1209,1.581,1210,2.315,1211,1.581,1212,0.9,1213,1.581,1214,1.441,1215,1.581,1216,2.74,1217,1.217,1218,1.581,1219,1.581,1220,1.043,1221,1.441,1222,1.581,1223,1.661,1224,1.441,1225,1.661,1226,1.441,1227,2.433,1228,2.315,1229,1.661,1230,3.971,1231,2.433,1232,2.433,1233,2.433,1234,1.661,1235,1.661,1236,1.661,1237,3.873,1238,2.879,1239,2.433,1240,2.879,1241,1.661,1242,1.661,1243,1.321,1244,1.661,1245,1.661]],["title/components/DimensionsControllerComponent.html",[0,1.012,48,1.729]],["body/components/DimensionsControllerComponent.html",[0,1.732,1,2.799,2,2.921,3,0.145,4,0.145,5,2.492,6,2.492,7,0.127,9,2.492,10,3.132,12,2.359,14,2.371,15,0.109,20,2.903,21,2.687,22,0.015,25,3.168,27,0.459,29,0.3,32,0.182,33,0.092,34,2.492,35,3.219,36,3.219,37,2.492,38,3.769,39,2.492,40,1.876,41,2.492,42,2.261,43,2.161,44,2.492,45,2.161,46,1.008,47,2.492,48,3.128,49,0.561,50,3.566,51,2.161,52,1.901,53,2.492,54,2.161,55,0.407,56,2.161,57,0.407,58,2.921,59,3.219,60,2.261,61,2.492,62,2.371,63,2.161,64,2.762,65,2.836,66,2.492,67,2.492,68,0.01,69,0.01,74,0.259,76,0.182,84,2.456,108,0.217,119,2.117,120,0.711,122,0.469,135,0.192,149,0.616,157,0.322,164,0.804,173,0.582,181,0.489,189,0.548,190,0.219,191,0.869,194,3.495,232,0.429,237,1.808,302,1.036,308,1.079,328,1.133,329,1.133,330,1.33,338,1.681,339,0.911,348,1.086,350,1.795,352,1.391,444,2.456,445,2.721,446,2.836,519,3.178,585,2.456,642,1.826,643,1.901,1145,1.211,1146,2.56,1156,1.291,1212,2.164,1248,2.456,1251,2.791,1253,2.791,1262,3.587,1264,2.959,1267,3.587,1279,3.312,1313,3.104,1314,4.221,1336,4.383,1337,2.359,1445,4.2,1840,5.903,1841,2.371,1842,5.054,1843,3.219,1844,5.132,1845,3.219,1846,3.219,1847,5.289,1848,5.289,1849,5.788,1850,5.289,1851,5.289,1852,5.289,1853,5.289,1854,5.289,1855,5.289,1856,5.289,1857,5.59,1858,3.696,1859,4.775,1860,5.59,1861,3.696,1862,4.775,1863,5.59,1864,3.696,1865,5.59,1866,3.696,1867,4.102,1868,3.696,1869,3.696,1870,3.696,1871,3.696,1872,3.696,1873,3.393,1874,4.102,1875,3.696,1876,3.696,1877,4.718,1878,4.102,1879,4.102,1880,3.696,1881,3.696,1882,4.102,1883,6.095,1884,6.095,1885,6.095,1886,6.095,1887,6.095,1888,6.095]],["title/interfaces/FenetreConfig.html",[189,0.303,323,2.466]],["body/interfaces/FenetreConfig.html",[3,0.141,4,0.141,7,0.123,11,0.666,15,0.106,16,0.231,18,3.062,22,0.015,27,0.311,29,0.291,32,0.19,33,0.089,46,1.565,49,0.497,52,2.411,68,0.01,69,0.01,70,0.667,76,0.316,78,0.544,80,0.638,82,0.833,103,1.264,108,0.215,112,0.477,114,0.463,115,0.742,117,0.918,122,0.353,135,0.161,157,0.355,164,0.487,177,0.612,181,0.423,182,0.302,189,0.512,190,0.217,194,3.258,198,3.291,202,0.693,212,0.365,215,0.383,232,0.486,286,1.144,302,0.666,308,1.136,309,3.517,310,0.441,311,3.062,312,2.421,313,3.062,314,5.266,315,2.775,316,5.266,317,5.266,318,5.076,319,3.002,320,5.578,321,4.789,322,3.05,323,4.163,324,1.09,325,0.942,326,0.942,327,0.942,328,0.869,329,0.869,330,1.02,331,1.464,332,2.477,333,2.197,334,4.714,335,0.693,336,1.054,337,3.297,338,1.65,339,0.877,340,2.208,341,2.094,342,1.571,343,3.297,344,3.297,345,1.983,346,3.297,347,2.197,348,1.065,349,3.297,350,1.219,351,3.297,352,1.232,353,3.706,354,4.302,355,1.588,356,1.616,357,3.297,358,2.866,359,3.347,360,3.297,361,1.52,362,3.521,363,3.297,364,0.609,365,3.297,366,1.017,367,3.297,368,1.176,369,2.622,370,1.904,371,0.693,372,3.297,373,3.297,374,5.323,375,1.176,376,4.691,377,5.108,378,0.812,379,3.297,380,2.521,381,3.297,382,3.509,383,4.789,384,4.154,385,3.297,386,3.297,387,3.297,388,3.002,389,5.4,390,4.789,391,4.302,392,3.297,393,4.781,394,4.302,395,3.297,396,3.521,397,2.74,398,4.447,399,3.297,400,3.297,401,3.297,402,2.1,403,3.297,404,3.297,405,4.302,406,1.926,407,4.302,408,3.297,409,3.297,410,3.297,411,3.297,412,3.297,413,3.297,414,3.68,415,3.33,416,3.297,417,4.309,418,3.297,419,3.297,420,4.302,421,3.297,422,2.866,423,3.297,424,3.297,425,3.297,426,3.297,427,1.926,428,3.297,429,3.297,430,4.302,431,3.297,432,2.421,433,3.297,434,3.297,435,3.297,436,3.297,437,3.297,438,3.297,439,3.062,714,1.746]],["title/components/FenetresCalculatorComponent.html",[0,1.012,51,1.806]],["body/components/FenetresCalculatorComponent.html",[0,1.232,1,2.534,2,1.886,3,0.224,4,0.078,5,1.347,6,1.347,7,0.069,9,1.347,10,2.817,12,1.523,14,3.335,15,0.059,16,0.152,20,2.391,21,2.506,22,0.015,25,2.876,27,0.367,29,0.162,31,3.209,32,0.106,33,0.05,34,1.347,35,2.078,36,2.078,37,1.347,38,2.852,39,1.347,40,1.479,41,1.347,42,1.223,43,2.824,44,1.347,45,1.168,46,1.746,47,1.347,48,1.118,49,0.367,50,2.537,51,2.474,52,2.995,53,1.347,54,1.168,55,0.22,56,1.168,57,0.22,58,1.886,59,2.078,60,1.223,61,1.347,62,1.282,63,1.168,64,0.987,65,1.071,66,1.347,67,1.347,68,0.011,69,0.007,74,0.14,76,0.273,78,0.493,84,1.586,103,0.703,107,1.118,108,0.196,109,0.878,112,0.162,115,0.438,117,0.754,119,1.602,120,0.605,122,0.511,128,1.269,135,0.106,157,0.273,164,0.418,173,0.392,181,0.305,182,0.317,189,0.302,190,0.148,194,3.373,198,2.367,203,0.678,208,0.919,212,0.119,215,0.183,230,0.87,232,0.305,275,1.85,302,0.571,308,0.595,309,2.537,312,1.347,319,1.859,322,1.802,324,0.37,325,0.402,326,0.402,327,0.402,328,1.057,329,1.01,330,0.435,332,2.009,333,2.956,338,1.325,339,0.875,342,1.072,347,1.886,348,0.968,353,3.432,355,1.146,356,1.593,358,2.46,362,2.828,364,0.603,366,0.873,370,1.374,371,0.727,375,1.009,376,3.179,378,0.697,382,2.303,384,2.828,388,2.692,396,2.828,397,2.2,422,4.018,432,2.537,444,1.586,445,1.936,446,2.018,449,6.382,451,6.135,452,5.821,453,6.425,463,3.27,464,3.764,465,6.498,466,6.248,467,5.629,468,3.587,469,1.936,470,5.957,471,6.135,472,4.548,473,3.764,476,5.335,477,6.135,478,6.197,479,5.821,480,4.831,481,4.831,482,4.831,484,4.831,485,5.629,486,6.058,488,5.957,489,5.335,490,4.831,491,2.485,492,3.764,493,1.998,495,5.957,496,3.764,497,3.764,499,5.335,502,4.136,503,5.821,504,5.629,505,5.629,506,3.764,507,3.764,508,3.764,509,5.821,510,5.335,511,5.335,512,3.764,513,0.954,514,5.629,515,5.335,519,2.352,521,6.058,523,3.764,524,3.764,526,3.764,527,3.764,530,3.156,531,3.764,532,3.764,534,3.764,536,5.335,537,3.764,538,4.831,539,5.335,540,4.831,541,4.831,548,5.821,550,3.764,552,3.764,553,3.764,554,3.764,555,3.764,556,3.764,557,4.118,558,3.764,559,3.764,564,3.764,565,2.828,566,1.593,567,3.764,577,3.764,582,3.003,585,1.936,590,1.436,592,2.537,593,3.764,594,3.764,597,3.764,609,3.764,611,3.209,619,3.607,642,0.987,643,1.028,644,1.998,645,1.998,649,3.607,651,3.764,652,1.998,714,0.973,726,1.012,747,0.402,812,1.479,990,1.859,1035,3.645,1040,1.731,1043,0.785,1191,2.2,1248,1.586,1249,3.455,1262,2.316,1264,2.106,1267,2.316,1279,2.7,1313,2.269,1336,3.455,1337,1.859,1357,3.209,1447,4.645,1740,4.008,1889,5.871,1890,1.998,1891,5.77,1892,4.177,1893,6.723,1894,4.177,1895,5.361,1896,5.921,1897,5.361,1898,5.361,1899,5.921,1900,6.247,1901,5.921,1902,5.921,1903,4.177,1904,5.361,1905,5.361,1906,5.361,1907,4.177,1908,4.177,1909,4.177,1910,4.177,1911,3.541,1912,4.177,1913,4.177,1914,4.177,1915,4.177,1916,4.177,1917,4.177,1918,4.177,1919,3.209,1920,3.764,1921,3.764,1922,3.764,1923,5.587,1924,4.177,1925,4.177,1926,4.177,1927,4.177,1928,4.177,1929,4.177,1930,4.177,1931,4.177,1932,4.177,1933,4.177,1934,4.177,1935,4.695,1936,4.695,1937,4.695,1938,3.455,1939,4.177,1940,3.455,1941,4.177,1942,3.455,1943,4.177,1944,2.551,1945,3.935,1946,2.551,1947,2.551,1948,3.455,1949,4.695,1950,3.003,1951,2.551,1952,2.551,1953,2.551,1954,2.551,1955,2.551,1956,2.551,1957,2.551,1958,2.551,1959,2.551,1960,2.551,1961,3.421,1962,2.551,1963,2.218,1964,1.834,1965,1.595,1966,1.834,1967,2.218,1968,2.218,1969,2.218,1970,2.218,1971,2.218,1972,2.218,1973,2.218,1974,2.218,1975,2.218,1976,2.218,1977,2.218,1978,1.595,1979,1.834,1980,3.421,1981,2.218]],["title/interfaces/FenetresParams.html",[189,0.303,1948,2.836]],["body/interfaces/FenetresParams.html",[0,1.418,1,1.402,3,0.216,4,0.125,7,0.11,10,1.576,12,1.576,14,3.155,15,0.094,16,0.213,21,1.904,22,0.015,27,0.457,29,0.259,31,2.72,32,0.149,33,0.079,43,2.532,46,1.713,49,0.426,51,1.865,52,2.837,68,0.012,69,0.009,74,0.224,76,0.286,78,0.454,108,0.181,112,0.259,115,0.454,117,0.676,120,0.614,122,0.602,128,1.346,135,0.169,157,0.333,164,0.433,173,0.512,181,0.259,182,0.313,189,0.482,190,0.193,194,3.283,198,3.182,203,1.083,208,0.779,212,0.19,215,0.258,230,0.802,232,0.351,275,1.931,302,0.591,308,0.616,309,2.92,310,0.391,312,2.151,319,1.576,322,1.865,324,0.591,325,0.641,326,0.641,327,0.641,328,1.022,329,0.977,330,0.694,332,2.505,333,3.009,338,1.525,339,0.867,342,1.097,347,1.952,348,0.98,353,3.077,355,0.971,356,1.578,358,2.546,362,2.397,364,0.582,366,0.903,370,1.165,371,0.616,375,1.044,376,4.273,378,0.722,382,1.952,384,2.397,388,2.606,396,2.397,397,1.865,422,3.924,432,2.151,444,1.641,445,2.228,446,2.322,449,6.246,451,5.919,452,5.514,453,6.304,463,3.195,464,3.19,465,6.403,466,6.067,467,5.274,468,3.46,469,1.641,470,5.687,471,5.919,472,4.192,473,3.19,476,4.917,477,5.919,478,6,479,5.514,480,4.331,481,4.331,482,4.331,484,4.331,485,5.274,486,5.817,488,5.687,489,4.917,490,4.331,491,2.228,492,3.19,493,3.19,495,5.687,496,3.19,497,3.19,499,4.917,502,3.99,503,5.514,504,5.274,505,5.274,506,3.19,507,3.19,508,3.19,509,5.514,510,4.917,511,4.917,512,3.19,513,0.808,514,5.274,515,4.917,519,2.837,521,5.817,523,3.19,524,3.19,526,3.19,527,3.19,530,3.045,531,3.19,532,3.19,534,3.19,536,4.917,537,3.19,538,4.331,539,4.917,540,4.331,541,4.331,548,5.514,550,3.19,552,3.19,553,3.19,554,3.19,555,3.19,556,3.19,557,3.692,558,3.19,559,3.19,564,3.19,565,2.397,566,1.35,567,3.19,577,3.19,582,2.546,585,1.641,590,1.669,592,2.151,593,3.19,594,3.19,597,3.19,609,3.19,611,2.72,619,2.72,642,1.576,643,1.641,644,3.19,645,3.19,649,4.496,651,4.917,652,3.19,726,1.17,747,0.641,812,1.253,990,1.576,1035,3.48,1040,1.862,1043,1.253,1191,1.865,1248,1.641,1249,2.929,1264,1.785,1279,2.828,1313,2.828,1336,2.929,1337,1.576,1357,2.72,1447,4.701,1740,3.695,1889,3.19,1890,3.19,1891,5.457,1892,3.541,1893,6.456,1894,3.541,1895,4.807,1896,5.457,1897,4.807,1898,4.807,1899,5.457,1900,5.853,1901,5.457,1902,5.457,1903,3.541,1904,4.807,1905,4.807,1906,4.807,1907,3.541,1908,3.541,1909,3.541,1910,3.541,1911,3.401,1912,3.541,1913,3.541,1914,3.541,1915,3.541,1916,3.541,1917,3.541,1918,3.541,1919,2.72,1920,3.19,1921,3.19,1922,3.19,1923,5.457,1924,3.541,1925,3.541,1926,3.541,1927,3.541,1928,3.541,1929,3.541,1930,3.541,1931,3.541,1932,3.541,1933,3.541,1934,3.541,1935,3.541,1936,3.541,1937,3.541,1938,2.929,1939,3.541,1940,2.929,1941,3.541,1942,2.929,1943,3.541,1948,4.514,1949,6.311,1950,3.456,1961,3.541,1963,3.541,1964,2.929,1965,2.546,1966,2.929,1967,3.541,1968,3.541,1969,3.541,1970,3.541,1971,3.541,1972,3.541,1973,3.541,1974,3.541,1975,3.541,1976,3.541,1977,3.541,1978,2.546,1979,2.929,1980,4.807,1981,3.541]],["title/interfaces/LightingConfig.html",[189,0.303,1088,1.806]],["body/interfaces/LightingConfig.html",[3,0.097,4,0.142,7,0.085,15,0.073,16,0.178,22,0.015,24,2.148,32,0.198,33,0.061,46,1.725,49,0.53,55,0.552,57,0.552,68,0.008,69,0.008,74,0.173,76,0.319,78,0.499,108,0.209,112,0.515,114,0.646,115,0.712,117,0.975,118,1.254,119,1.367,135,0.172,136,0.968,149,0.318,157,0.344,175,0.949,177,0.615,178,0.778,181,0.381,182,0.317,189,0.543,190,0.205,191,0.848,208,1.402,212,0.215,215,0.35,222,1.022,230,0.402,232,0.406,237,1.895,238,1.225,239,1.687,240,1.529,256,0.859,282,1.528,310,0.302,324,1.192,325,1.312,326,1.296,327,1.276,328,1.12,329,1.12,330,1.315,331,2.203,335,0.825,336,0.724,338,0.868,339,0.637,340,1.808,341,1.617,342,1.476,345,1.808,348,0.642,350,1.775,352,1.123,356,0.648,361,2.392,364,0.604,366,1.022,369,2.02,375,1.85,378,1.132,380,1.083,406,1.322,427,2.29,463,2.197,468,2.926,469,1.268,474,2.74,491,1.857,500,1.268,513,0.625,530,1.268,566,1.043,581,2.209,585,1.268,590,1.596,646,1.218,681,2.054,692,2.926,706,2.684,714,1.485,726,1.236,739,1.17,821,2.02,827,1.587,843,1.99,848,1.099,851,1.645,876,2.14,898,1.379,902,1.936,908,1.432,947,0.9,990,2.473,1025,2.111,1026,1.441,1027,1.043,1028,2.737,1029,2.028,1030,2.39,1031,2.497,1032,1.808,1033,3.1,1034,1.322,1035,3.858,1036,3.355,1037,2.39,1038,1.508,1039,2.74,1040,1.617,1041,1.379,1042,2.434,1043,1.966,1044,2.29,1045,2.316,1046,1.662,1047,1.441,1048,2.468,1049,2.926,1050,2.74,1051,3.017,1052,3.017,1053,2.316,1054,2.74,1055,2.028,1056,2.209,1057,1.936,1058,2.749,1059,2.316,1060,1.662,1061,2.575,1062,2.74,1063,1.662,1064,2.209,1065,2.111,1066,3.062,1067,2.316,1068,2.111,1069,2.316,1070,2.926,1071,1.662,1072,2.316,1073,2.111,1074,2.111,1075,2.111,1076,2.434,1077,1.714,1078,2.316,1079,2.213,1080,2.483,1081,2.584,1082,2.613,1083,2.74,1084,1.662,1085,2.483,1086,2.613,1087,2.613,1088,2.497,1089,2.233,1090,2.434,1091,1.662,1092,2.111,1093,1.662,1094,2.316,1095,2.316,1096,1.268,1097,2.74,1098,2.148,1099,2.434,1100,2.434,1101,1.662,1102,2.111,1103,2.316,1104,1.917,1105,1.857,1106,1.714,1107,1.268,1108,1.662,1109,1.662,1110,1.714,1111,2.209,1112,1.714,1113,1.17,1114,1.581,1115,1.441,1116,1.581,1117,1.581,1118,1.581,1119,1.126,1120,1.714,1121,1.581,1122,2.74,1123,1.322,1124,2.316,1125,1.581,1126,2.316,1127,1.587,1128,1.581,1129,1.268,1130,1.441,1131,1.587,1132,2.316,1133,1.126,1134,2.316,1135,1.581,1136,1.441,1137,1.508,1138,1.581,1139,1.083,1140,2.316,1141,1.043,1142,1.581,1143,1.17,1144,1.784,1145,1.047,1146,1.936,1147,2.316,1148,1.508,1149,1.717,1150,1.581,1151,1.508,1152,1.441,1153,1.581,1154,1.581,1155,1.581,1156,1.148,1157,1.581,1158,3.211,1159,1.581,1160,1.581,1161,1.441,1162,1.218,1163,2.389,1164,1.581,1165,3.211,1166,1.581,1167,1.218,1168,1.043,1169,1.322,1170,1.581,1171,1.581,1172,1.581,1173,1.581,1174,1.441,1175,2.74,1176,2.316,1177,3.017,1178,3.554,1179,2.669,1180,2.74,1181,2.323,1182,1.784,1183,2.316,1184,1.508,1185,1.784,1186,1.902,1187,1.218,1188,1.808,1189,2.316,1190,1.581,1191,2.497,1192,2.054,1193,1.581,1194,1.581,1195,1.581,1196,1.581,1197,1.581,1198,1.441,1199,1.441,1200,1.581,1201,1.218,1202,1.581,1203,2.323,1204,1.441,1205,1.581,1206,1.218,1207,1.581,1208,2.39,1209,1.581,1210,2.316,1211,1.581,1212,0.9,1213,1.581,1214,1.441,1215,1.581,1216,2.74,1217,1.218,1218,1.581,1219,1.581,1220,1.043,1221,1.441,1222,1.581,1223,1.662,1224,1.441,1225,1.662,1226,1.441,1227,2.434,1228,2.316,1229,1.662,1230,3.971,1231,2.434,1232,2.434,1233,2.434,1234,1.662,1235,1.662,1236,1.662,1237,3.873,1238,2.88,1239,2.434,1240,2.88,1241,1.662,1242,1.662,1243,1.322,1244,1.662,1245,1.662]],["title/interfaces/MainWallConfig.html",[189,0.303,1057,1.657]],["body/interfaces/MainWallConfig.html",[3,0.096,4,0.141,7,0.084,15,0.072,16,0.177,22,0.015,24,2.141,32,0.197,33,0.061,46,1.735,49,0.53,55,0.55,57,0.575,68,0.008,69,0.008,74,0.172,76,0.319,78,0.498,108,0.21,112,0.513,114,0.644,115,0.71,117,0.977,118,1.25,119,1.361,135,0.172,136,0.962,149,0.316,157,0.347,175,1.119,177,0.725,178,0.773,181,0.38,182,0.316,189,0.542,190,0.205,191,0.844,208,1.4,212,0.214,215,0.35,222,1.017,230,0.399,232,0.405,237,1.891,238,1.22,239,1.684,240,1.526,256,0.856,282,1.521,310,0.3,324,1.196,325,1.311,326,1.296,327,1.276,328,1.119,329,1.119,330,1.314,331,2.198,335,0.822,336,0.719,338,0.862,339,0.634,340,1.801,341,1.612,342,1.474,345,1.801,348,0.639,350,1.771,352,1.119,356,0.644,361,2.388,364,0.606,366,1.017,369,2.011,375,1.848,378,1.129,380,1.077,406,1.314,427,2.282,463,2.19,468,2.919,469,1.26,474,2.731,491,1.849,500,1.26,513,0.621,530,1.26,566,1.037,581,2.604,585,1.26,590,1.592,646,1.21,681,2.05,692,3.158,706,2.677,714,1.135,726,1.235,739,1.163,821,2.011,827,1.58,843,1.984,848,1.094,851,1.642,876,2.137,898,1.371,902,1.927,908,1.43,947,0.894,990,2.467,1025,2.101,1026,1.432,1027,1.037,1028,2.733,1029,2.021,1030,2.382,1031,2.488,1032,1.801,1033,3.292,1034,1.314,1035,3.855,1036,3.348,1037,2.382,1038,1.499,1039,2.731,1040,1.612,1041,1.371,1042,2.423,1043,1.961,1044,2.282,1045,2.305,1046,1.652,1047,1.432,1048,2.463,1049,2.92,1050,3.348,1051,3.008,1052,3.008,1053,2.305,1054,3.348,1055,2.021,1056,2.199,1057,2.282,1058,2.741,1059,2.305,1060,1.652,1061,2.568,1062,2.731,1063,1.652,1064,2.199,1065,2.101,1066,3.055,1067,2.305,1068,2.101,1069,2.305,1070,2.92,1071,1.652,1072,2.305,1073,2.101,1074,2.101,1075,2.101,1076,2.423,1077,1.706,1078,1.572,1079,2.113,1080,2.021,1081,2.578,1082,2.604,1083,2.731,1084,1.652,1085,2.021,1086,2.604,1087,2.604,1088,2.101,1089,2.226,1090,2.423,1091,1.652,1092,2.101,1093,1.652,1094,2.305,1095,2.305,1096,1.26,1097,2.731,1098,2.141,1099,2.423,1100,2.423,1101,1.652,1102,2.101,1103,2.305,1104,1.911,1105,1.849,1106,1.706,1107,1.26,1108,1.652,1109,1.652,1110,1.706,1111,2.199,1112,1.706,1113,1.163,1114,1.572,1115,1.432,1116,1.572,1117,1.572,1118,1.572,1119,1.119,1120,1.706,1121,1.572,1122,2.731,1123,1.314,1124,2.305,1125,1.572,1126,2.305,1127,1.58,1128,1.572,1129,1.26,1130,1.432,1131,1.58,1132,2.305,1133,1.119,1134,2.305,1135,1.572,1136,1.432,1137,1.499,1138,1.572,1139,1.077,1140,2.305,1141,1.037,1142,1.572,1143,1.163,1144,1.775,1145,1.045,1146,1.927,1147,2.305,1148,1.499,1149,1.712,1150,1.572,1151,1.499,1152,1.432,1153,1.572,1154,1.572,1155,1.572,1156,1.144,1157,1.572,1158,3.203,1159,1.572,1160,1.572,1161,1.432,1162,1.21,1163,2.383,1164,1.572,1165,3.203,1166,1.572,1167,1.21,1168,1.037,1169,1.314,1170,1.572,1171,1.572,1172,1.572,1173,1.572,1174,1.432,1175,2.731,1176,2.305,1177,3.008,1178,3.548,1179,2.664,1180,2.731,1181,2.316,1182,1.775,1183,2.305,1184,1.499,1185,1.775,1186,1.898,1187,1.21,1188,1.801,1189,2.305,1190,1.572,1191,2.488,1192,2.05,1193,1.572,1194,1.572,1195,1.572,1196,1.572,1197,1.572,1198,1.432,1199,1.432,1200,1.572,1201,1.21,1202,1.572,1203,2.316,1204,1.432,1205,1.572,1206,1.21,1207,1.572,1208,2.382,1209,1.572,1210,2.305,1211,1.572,1212,0.894,1213,1.572,1214,1.432,1215,1.572,1216,2.731,1217,1.21,1218,1.572,1219,1.572,1220,1.037,1221,1.432,1222,1.572,1223,1.652,1224,1.432,1225,1.652,1226,1.432,1227,2.423,1228,2.305,1229,1.652,1230,3.966,1231,2.423,1232,2.423,1233,2.423,1234,1.652,1235,1.652,1236,1.652,1237,3.868,1238,2.87,1239,2.423,1240,2.87,1241,1.652,1242,1.652,1243,1.314,1244,1.652,1245,1.652]],["title/interfaces/Mur.html",[189,0.303,364,0.304]],["body/interfaces/Mur.html",[0,1.721,1,1.894,3,0.169,4,0.169,7,0.148,10,2.129,12,2.129,15,0.156,16,0.259,22,0.015,27,0.492,29,0.349,32,0.181,33,0.107,49,0.525,54,2.519,55,0.668,57,0.651,65,2.311,68,0.011,69,0.011,74,0.302,108,0.221,120,0.717,122,0.63,128,1.442,135,0.148,157,0.347,164,0.584,173,0.642,181,0.349,182,0.259,189,0.557,190,0.223,212,0.256,215,0.313,256,0.866,275,1.785,302,0.799,308,0.832,310,0.529,322,3.317,324,1.123,325,1.057,326,1.057,327,1.057,328,0.974,329,0.974,330,1.144,364,0.605,371,1.015,375,1.411,378,0.975,444,2.217,445,2.705,446,2.819,519,3.04,611,3.674,619,3.674,642,2.129,643,2.217,649,5.319,714,1.865,726,1.218,747,1.218,748,2.698,909,1.463,969,3.545,1186,1.517,1248,2.217,1251,2.519,1253,2.519,1264,2.411,1279,3.345,1313,3.345,1841,2.764,1843,2.905,1845,2.905,1846,2.905,1940,3.956,1942,3.956,1950,3.439,1965,3.439,1966,4.827,1978,4.528,1979,4.827,1982,4.309,1983,4.782,1984,3.956,1985,4.782,1986,4.782,1987,4.782,1988,4.782,1989,4.782,1990,4.782,1991,4.782,1992,3.956,1993,3.956,1994,4.782,1995,4.782,1996,4.782,1997,4.782,1998,4.782,1999,4.782,2000,4.782]],["title/interfaces/MurConfig.html",[189,0.303,332,1.467]],["body/interfaces/MurConfig.html",[3,0.141,4,0.141,7,0.124,11,0.666,15,0.106,16,0.231,18,3.066,22,0.015,27,0.312,29,0.292,32,0.19,33,0.089,46,1.566,49,0.497,52,2.413,68,0.01,69,0.01,70,0.667,76,0.316,78,0.544,80,0.639,82,0.834,103,1.266,108,0.209,112,0.477,114,0.464,115,0.743,117,0.918,122,0.353,135,0.161,157,0.355,164,0.488,177,0.613,181,0.423,182,0.302,189,0.512,190,0.217,194,3.259,198,3.292,202,0.694,212,0.366,215,0.383,232,0.486,286,1.145,302,0.666,308,1.136,309,3.519,310,0.441,311,3.066,312,2.425,313,3.066,314,5.268,315,2.776,316,5.268,317,5.268,318,5.079,319,3.003,320,5.579,321,4.792,322,3.052,323,3.743,324,1.091,325,0.943,326,0.943,327,0.943,328,0.869,329,0.869,330,1.021,331,1.466,332,2.627,333,2.2,334,4.716,335,0.694,336,1.056,337,3.301,338,1.651,339,0.877,340,2.209,341,2.095,342,1.571,343,3.301,344,3.301,345,1.985,346,3.301,347,2.2,348,1.065,349,3.301,350,1.221,351,3.301,352,1.234,353,3.709,354,4.306,355,1.589,356,1.616,357,3.301,358,2.87,359,3.349,360,3.301,361,1.522,362,3.524,363,3.301,364,0.609,365,3.301,366,1.018,367,3.301,368,1.177,369,2.625,370,1.906,371,0.694,372,3.301,373,3.301,374,5.325,375,1.177,376,4.692,377,5.109,378,0.813,379,3.301,380,2.522,381,3.301,382,3.511,383,4.792,384,4.157,385,3.301,386,3.301,387,3.301,388,3.003,389,5.402,390,4.792,391,4.306,392,3.301,393,4.783,394,4.306,395,3.301,396,3.524,397,2.742,398,4.45,399,3.301,400,3.301,401,3.301,402,2.102,403,3.301,404,3.301,405,4.306,406,1.928,407,4.306,408,3.301,409,3.301,410,3.301,411,3.301,412,3.301,413,3.301,414,3.681,415,3.333,416,3.301,417,4.311,418,3.301,419,3.301,420,4.306,421,3.301,422,2.87,423,3.301,424,3.301,425,3.301,426,3.301,427,1.928,428,3.301,429,3.301,430,4.306,431,3.301,432,2.425,433,3.301,434,3.301,435,3.301,436,3.301,437,3.301,438,3.301,439,3.066,714,1.747]],["title/injectables/MurService.html",[70,0.439,752,1.59]],["body/injectables/MurService.html",[3,0.102,4,0.102,7,0.089,11,0.48,15,0.077,16,0.184,20,1.778,21,1.646,22,0.015,25,3.123,27,0.381,29,0.21,32,0.166,33,0.064,40,2.337,49,0.443,55,0.698,57,0.413,68,0.008,69,0.008,70,0.533,72,1.947,74,0.182,75,0.783,76,0.293,77,1.14,78,0.507,80,0.781,82,1.057,84,1.926,103,0.912,104,2.876,105,1.807,107,3.328,108,0.221,109,2.615,111,2.038,112,0.491,113,1.71,115,0.846,116,2.986,117,0.751,119,2.372,120,0.676,122,0.594,128,1.175,135,0.215,138,1.436,139,1.466,143,2.291,147,1.492,149,0.483,150,0.914,151,0.914,152,0.994,154,1.099,157,0.353,164,0.351,173,0.572,174,0.994,175,1.343,177,0.749,181,0.21,182,0.29,183,1.585,184,1.585,186,0.542,188,1.28,189,0.522,190,0.189,191,1.432,196,2.986,200,3.617,201,2.813,202,0.5,203,0.88,206,1.097,207,1.097,208,1.175,210,1.586,212,0.365,215,0.384,222,1.446,223,3.125,230,1.022,232,0.304,234,1.586,238,1.492,239,1.555,240,1.446,256,0.521,257,2.986,258,1.45,259,1.45,262,1.947,276,0.657,278,1.823,286,1.246,288,2.69,291,1.231,303,0.761,304,1.291,305,1.018,306,0.761,315,1.71,324,1.041,325,0.968,326,0.968,327,0.968,328,0.694,329,0.694,330,0.815,332,2.873,335,0.93,355,1.14,364,0.64,371,1.028,382,1.586,460,3.192,513,0.949,590,0.88,665,1.85,714,1.612,717,2.008,726,0.968,737,3.508,738,2.21,739,1.778,740,3.123,741,3.123,742,3.123,743,4.035,744,3.991,745,2.815,746,3.987,747,1.07,748,1.71,749,3.508,750,2.261,751,2.357,752,1.926,753,4.035,754,3.437,755,2.008,756,1.231,757,3.437,758,2.66,759,4.42,760,2.379,761,2.379,762,2.379,763,2.379,764,4.886,765,3.437,766,3.437,767,3.437,768,3.437,769,3.437,770,1.841,771,2.379,772,2.379,773,2.379,774,2.379,775,2.379,776,3.437,777,3.111,778,3.437,779,2.379,780,1.231,781,2.379,782,2.068,783,3.437,784,3.437,785,4.035,786,2.379,787,3.437,788,2.379,789,2.379,790,2.379,791,2.66,792,2.379,793,1.841,794,3.089,795,2.379,796,4.42,797,2.379,798,3.437,799,3.478,800,3.437,801,3.437,802,3.437,803,2.379,804,4.42,805,2.379,806,4.42,807,2.379,808,4.42,809,2.379,810,4.42,811,2.379,812,2.207,813,3.437,814,3.628,815,1.841,816,1.841,817,2.379,818,2.379,819,2.379,820,2.379,821,1.45,822,1.663,823,1.39,824,2.379,825,4.42,826,2.379,827,1.139,828,2.379,829,4.42,830,3.437,831,3.421,832,3.437,833,3.421,834,3.437,835,3.437,836,4.688,837,2.008,838,3.437,839,2.379,840,2.357,841,2.008,842,2.379,843,1.097,844,1.663,845,2.57,846,3.437,847,1.841,848,1.338,849,1.586,850,2.379,851,1.338,852,2.379,853,2.379,854,1.841,855,2.379,856,2.379,857,2.379,858,4.42,859,2.57,860,4.035,861,4.035,862,4.035,863,2.964,864,4.42,865,2.379,866,2.379,867,4.42,868,2.379,869,2.379,870,4.42,871,3.437,872,2.379,873,2.379,874,4.42,875,2.379,876,1.934,877,3.437,878,3.437,879,4.035,880,2.524,881,2.379,882,2.379,883,2.964,884,2.379,885,2.379,886,2.964,887,2.379,888,2.379,889,1.747,890,3.437,891,3.437,892,2.379,893,2.379,894,2.379,895,2.379,896,2.379,897,1.663,898,1.45,899,2.379,900,1.947,901,2.379,902,1.39,2001,4.779,2002,4.779,2003,4.779,2004,4.779,2005,4.779,2006,4.779,2007,4.779,2008,4.779,2009,4.779,2010,4.779,2011,4.779,2012,4.779,2013,3.308,2014,3.308,2015,3.308,2016,3.308,2017,3.308,2018,3.308,2019,3.308,2020,3.308,2021,3.308,2022,3.308,2023,3.308,2024,3.308,2025,3.308,2026,3.308,2027,3.308,2028,3.308,2029,3.308,2030,3.308,2031,3.308,2032,3.308,2033,3.308,2034,3.308,2035,3.308]],["title/components/MursControllerComponent.html",[0,1.012,54,1.806]],["body/components/MursControllerComponent.html",[0,1.693,1,2.783,2,2.835,3,0.139,4,0.139,5,2.38,6,2.38,7,0.121,9,2.38,10,3.113,12,2.289,14,2.264,15,0.153,20,2.456,21,2.274,22,0.015,25,3.152,27,0.448,29,0.286,32,0.159,33,0.088,34,2.38,35,3.124,36,3.124,37,2.38,38,3.703,39,2.38,40,2.158,41,2.38,42,2.16,43,2.064,44,2.38,45,2.064,46,0.963,47,2.38,48,1.975,49,0.495,50,3.487,51,2.064,52,1.816,53,2.38,54,3.211,55,0.703,56,2.064,57,0.605,58,2.835,59,3.124,60,2.16,61,2.38,62,2.264,63,2.064,64,1.744,65,2.774,66,2.38,67,2.38,68,0.01,69,0.01,74,0.247,76,0.228,84,2.384,107,2.593,108,0.215,109,2.037,117,0.723,119,2.217,120,0.729,122,0.595,128,0.861,135,0.159,157,0.336,164,0.628,173,0.61,181,0.286,182,0.27,189,0.454,190,0.203,194,3.483,212,0.21,215,0.276,256,1.147,258,2.593,259,2.593,275,1.573,302,0.859,308,0.895,322,2.064,324,1.018,325,1.104,326,1.104,327,1.104,328,0.859,329,0.859,330,1.008,339,0.691,348,0.824,364,0.602,371,0.682,375,1.155,378,0.798,382,2.835,384,3.481,444,2.384,445,2.661,446,2.774,519,2.826,585,2.384,611,4.41,619,4.682,642,1.744,643,1.816,649,5.087,726,1.104,747,0.932,748,1.612,909,1.198,958,3.481,966,2.384,969,3.124,1055,2.2,1056,2.835,1186,1.242,1248,2.384,1251,2.709,1253,2.709,1262,3.481,1264,2.894,1267,3.481,1272,4.634,1279,3.379,1313,3.199,1691,2.709,1823,2.593,1841,2.264,1843,3.124,1845,3.124,1846,3.124,1867,3.917,1868,3.53,1870,3.53,1871,3.53,1872,3.53,1873,3.24,1875,3.53,1876,3.53,1878,3.917,1919,3.95,1920,4.634,1921,4.634,1922,4.634,1940,4.749,1942,4.749,1950,2.817,1965,2.817,1966,4.254,1978,4.383,1979,4.254,1982,6.4,1983,5.741,1984,4.749,1985,5.741,1986,5.741,1987,5.741,1988,3.917,1989,5.142,1990,3.917,1991,3.917,1992,5.042,1993,3.24,1994,3.917,1995,5.142,1996,3.917,1997,6.096,1998,3.917,1999,6.096,2000,3.917,2036,5.915,2037,5.915,2038,3.917,2039,4.505,2040,4.505,2041,4.505,2042,4.505,2043,4.505,2044,3.917,2045,4.505,2046,5.142,2047,5.142,2048,5.915,2049,5.915,2050,5.915,2051,5.142,2052,5.915,2053,5.915,2054,5.915,2055,5.915,2056,5.915,2057,5.915,2058,5.915,2059,3.95,2060,5.142]],["title/interfaces/OpeningConfig.html",[189,0.303,1049,1.729]],["body/interfaces/OpeningConfig.html",[3,0.096,4,0.141,7,0.084,15,0.073,16,0.177,22,0.015,24,2.143,32,0.197,33,0.061,46,1.735,49,0.538,55,0.551,57,0.551,68,0.008,69,0.008,74,0.172,76,0.319,78,0.499,108,0.21,112,0.513,114,0.645,115,0.711,117,0.974,118,1.251,119,1.363,135,0.172,136,0.964,149,0.317,157,0.345,175,0.946,177,0.613,178,0.775,181,0.38,182,0.316,189,0.543,190,0.205,191,0.846,208,1.401,212,0.214,215,0.35,222,1.019,230,0.4,232,0.405,237,1.892,238,1.222,239,1.685,240,1.527,256,0.943,282,1.803,310,0.301,324,1.196,325,1.312,326,1.296,327,1.276,328,1.119,329,1.119,330,1.314,331,2.302,335,0.823,336,0.721,338,0.864,339,0.635,340,1.803,341,1.777,342,1.491,345,1.803,348,0.64,350,1.773,352,1.12,356,0.645,361,2.39,364,0.604,366,1.019,369,2.014,375,1.848,378,1.13,380,1.079,406,1.316,427,2.285,463,2.192,468,2.921,469,1.263,474,2.733,491,1.851,500,1.263,513,0.622,530,1.263,566,1.039,581,2.202,585,1.263,590,1.593,646,1.213,681,2.051,692,2.922,706,2.679,726,1.236,739,1.165,821,2.014,827,1.582,843,1.986,848,1.096,851,1.643,876,2.138,898,1.373,902,1.93,908,1.454,947,0.896,990,2.468,1025,2.104,1026,1.435,1027,1.039,1028,2.734,1029,2.023,1030,2.384,1031,2.491,1032,1.803,1033,3.211,1034,1.316,1035,3.856,1036,3.35,1037,2.796,1038,1.502,1039,2.733,1040,1.613,1041,1.373,1042,2.426,1043,1.963,1044,2.285,1045,2.309,1046,1.655,1047,1.435,1048,2.579,1049,3.019,1050,2.733,1051,3.01,1052,3.01,1053,2.309,1054,2.733,1055,2.023,1056,2.202,1057,1.93,1058,2.743,1059,2.309,1060,1.655,1061,2.57,1062,2.733,1063,1.655,1064,2.202,1065,2.104,1066,3.057,1067,2.309,1068,2.104,1069,2.309,1070,2.922,1071,1.655,1072,2.309,1073,2.104,1074,2.104,1075,2.104,1076,2.426,1077,1.709,1078,1.574,1079,2.115,1080,2.023,1081,2.58,1082,2.607,1083,2.733,1084,1.655,1085,2.023,1086,2.607,1087,2.607,1088,2.104,1089,2.228,1090,2.426,1091,1.655,1092,2.104,1093,1.655,1094,2.309,1095,2.309,1096,1.263,1097,2.733,1098,2.143,1099,2.426,1100,2.426,1101,1.655,1102,2.104,1103,2.309,1104,1.913,1105,1.851,1106,1.709,1107,1.263,1108,1.655,1109,1.655,1110,1.709,1111,2.202,1112,1.709,1113,1.165,1114,1.574,1115,1.435,1116,1.574,1117,1.574,1118,1.574,1119,1.121,1120,1.709,1121,1.574,1122,2.733,1123,1.316,1124,2.309,1125,1.574,1126,2.309,1127,1.582,1128,1.574,1129,1.263,1130,1.435,1131,1.582,1132,2.309,1133,1.121,1134,2.309,1135,1.574,1136,1.435,1137,1.502,1138,1.574,1139,1.079,1140,2.309,1141,1.039,1142,1.574,1143,1.165,1144,1.778,1145,1.045,1146,1.93,1147,2.309,1148,1.502,1149,1.713,1150,1.574,1151,1.502,1152,1.435,1153,1.574,1154,1.574,1155,1.574,1156,1.145,1157,1.574,1158,3.205,1159,1.574,1160,1.574,1161,1.435,1162,1.213,1163,2.385,1164,1.574,1165,3.205,1166,1.574,1167,1.213,1168,1.039,1169,1.316,1170,1.574,1171,1.574,1172,1.574,1173,1.574,1174,1.435,1175,2.733,1176,2.309,1177,3.01,1178,3.55,1179,2.666,1180,2.733,1181,2.318,1182,1.778,1183,2.309,1184,1.502,1185,1.778,1186,1.899,1187,1.213,1188,1.803,1189,2.309,1190,1.574,1191,2.491,1192,2.051,1193,1.574,1194,1.574,1195,1.574,1196,1.574,1197,1.574,1198,1.435,1199,1.435,1200,1.574,1201,1.213,1202,1.574,1203,2.318,1204,1.435,1205,1.574,1206,1.213,1207,1.574,1208,2.384,1209,1.574,1210,2.309,1211,1.574,1212,0.896,1213,1.574,1214,1.435,1215,1.574,1216,2.733,1217,1.213,1218,1.574,1219,1.574,1220,1.039,1221,1.435,1222,1.574,1223,1.655,1224,1.435,1225,1.655,1226,1.435,1227,2.426,1228,2.309,1229,1.655,1230,3.968,1231,2.426,1232,2.426,1233,2.426,1234,1.655,1235,1.655,1236,1.655,1237,3.87,1238,2.873,1239,2.426,1240,2.873,1241,1.655,1242,1.655,1243,1.316,1244,1.655,1245,1.655]],["title/interfaces/Ouverture.html",[189,0.303,256,0.621]],["body/interfaces/Ouverture.html",[0,1.68,1,1.821,3,0.163,4,0.163,7,0.142,10,2.047,12,2.047,15,0.123,16,0.253,22,0.015,27,0.483,29,0.336,32,0.176,33,0.103,49,0.519,56,2.423,57,0.66,65,2.222,68,0.011,69,0.011,74,0.291,108,0.223,120,0.728,122,0.64,128,1.49,135,0.142,157,0.332,164,0.562,173,0.624,181,0.336,182,0.253,189,0.547,190,0.219,212,0.332,215,0.356,256,1.276,275,1.742,302,0.768,308,0.8,310,0.508,322,2.423,324,1.11,325,1.032,326,1.032,327,1.032,328,0.951,329,0.951,330,1.117,364,0.548,375,1.357,378,0.937,444,2.132,445,2.641,446,2.752,519,3.082,618,3.804,642,2.047,643,2.132,714,1.84,726,1.205,747,1.227,782,3.307,908,1.413,909,1.979,910,4.781,952,2.017,958,3.113,965,3.307,967,2.047,969,2.794,980,3.307,1186,1.459,1248,2.132,1251,2.423,1253,2.423,1264,2.319,1279,3.273,1313,3.273,1841,2.658,1843,2.794,1845,2.794,1846,2.794,1919,3.533,1938,3.804,1950,3.307,1964,3.804,1965,3.307,1978,3.307,1984,3.804,1992,3.804,1993,4.712,2061,4.144,2062,4.599,2063,4.599,2064,4.599,2065,4.599,2066,4.599,2067,4.599,2068,4.599,2069,4.599,2070,5.697,2071,4.599,2072,4.599,2073,4.599,2074,5.697,2075,4.599,2076,4.599,2077,4.599,2078,5.697,2079,5.697,2080,5.697,2081,5.697,2082,4.599,2083,4.599,2084,4.599,2085,4.599,2086,6.649,2087,4.599,2088,4.599,2089,4.599,2090,4.599,2091,4.599,2092,4.599,2093,4.599,2094,4.599,2095,4.599,2096,4.599,2097,4.599]],["title/components/OuverturesControllerComponent.html",[0,1.012,56,1.806]],["body/components/OuverturesControllerComponent.html",[0,1.655,1,2.766,2,2.748,3,0.132,4,0.132,5,2.27,6,2.27,7,0.116,9,2.27,10,3.093,12,2.219,14,2.16,15,0.1,16,0.221,20,2.801,21,2.592,22,0.015,25,3.186,27,0.438,29,0.273,32,0.154,33,0.084,34,2.27,35,3.028,36,3.028,37,2.27,38,3.635,39,2.27,40,2.118,41,2.27,42,2.06,43,1.969,44,2.27,45,1.969,46,0.919,47,2.27,48,1.884,49,0.487,50,3.407,51,1.969,52,1.732,53,2.27,54,1.969,55,0.371,56,3.152,57,0.699,58,2.748,59,3.028,60,2.06,61,2.27,62,2.16,63,1.969,64,1.664,65,2.71,66,2.27,67,2.27,68,0.01,69,0.01,74,0.236,76,0.221,77,1.368,78,0.415,84,2.311,107,2.513,108,0.22,109,1.974,119,2.297,120,0.738,122,0.627,128,1.233,135,0.154,157,0.314,164,0.609,173,0.585,181,0.41,182,0.221,189,0.441,190,0.198,194,3.425,212,0.301,215,0.334,256,1.232,258,2.513,259,2.513,275,1.525,302,0.832,308,0.867,322,2.626,324,1.071,325,1.084,326,1.084,327,1.084,328,0.832,329,0.832,330,0.977,339,0.669,342,1.138,348,0.798,364,0.497,375,1.102,378,0.762,444,2.311,445,2.6,446,2.71,519,2.889,585,2.311,618,4.949,642,1.664,643,1.732,726,1.084,747,1.016,782,2.687,908,1.281,909,1.525,910,3.584,952,1.323,958,3.797,965,2.687,967,1.664,969,2.27,980,2.687,1045,2.16,1186,1.185,1248,2.311,1251,2.626,1253,2.626,1262,3.375,1264,2.828,1267,3.375,1272,4.492,1279,3.313,1313,3.098,1691,2.626,1841,2.16,1843,3.028,1845,3.028,1846,3.028,1868,3.368,1869,3.368,1870,3.368,1871,3.368,1872,3.368,1873,3.091,1874,3.737,1876,3.368,1880,3.368,1881,3.368,1882,3.737,1919,2.871,1938,4.64,1950,2.687,1964,3.091,1965,2.687,1978,3.584,1984,4.64,1992,4.949,1993,4.123,2038,3.737,2047,4.985,2051,4.985,2060,4.985,2061,6.461,2062,5.609,2063,5.609,2064,5.609,2065,5.609,2066,5.609,2067,5.609,2068,5.609,2069,5.609,2070,4.985,2071,5.984,2072,5.609,2073,3.737,2074,4.985,2075,5.984,2076,3.737,2077,3.737,2078,4.985,2079,4.985,2080,4.985,2081,4.985,2082,4.985,2083,4.985,2084,3.737,2085,5.984,2086,6.233,2087,3.737,2088,3.737,2089,3.737,2090,5.984,2091,3.737,2092,3.737,2093,3.737,2094,3.737,2095,5.984,2096,3.737,2097,4.985,2098,5.734,2099,5.734,2100,4.299,2101,4.299,2102,4.299,2103,4.299,2104,4.299,2105,4.299,2106,4.299,2107,4.299,2108,4.299,2109,4.299,2110,4.299,2111,5.734,2112,5.734,2113,5.734,2114,5.734,2115,5.734,2116,5.734,2117,5.734,2118,5.734,2119,5.734,2120,5.734,2121,5.734,2122,5.734,2123,4.299]],["title/interfaces/PaletteCouleurs.html",[189,0.303,2124,2.466]],["body/interfaces/PaletteCouleurs.html",[3,0.095,4,0.095,7,0.083,11,0.449,15,0.072,16,0.175,22,0.015,27,0.309,29,0.196,32,0.171,33,0.06,55,0.393,68,0.008,69,0.008,70,0.507,74,0.394,75,0.507,76,0.256,77,0.737,78,0.431,80,0.751,82,0.924,103,0.852,108,0.221,112,0.196,114,0.641,117,0.556,120,0.642,122,0.618,128,1.522,135,0.212,138,1.353,139,1.941,147,0.822,149,0.641,150,0.87,151,0.87,152,0.956,154,1.046,157,0.348,164,0.328,169,1.416,171,2.083,173,0.665,174,1.055,178,1.472,181,0.447,182,0.305,183,2.62,184,2.484,186,0.507,189,0.552,190,0.235,191,0.569,202,0.468,212,0.363,215,0.378,230,0.689,232,0.289,276,0.614,278,1.766,286,0.591,288,1.482,291,1.15,302,0.66,303,0.711,304,1.241,305,0.951,306,0.711,308,1.037,310,0.297,328,0.864,329,0.864,335,1.087,336,1.241,338,1.254,342,0.903,347,2.587,352,0.937,355,0.737,356,0.937,364,0.458,366,1.521,370,0.884,371,0.96,380,2.362,500,2.674,513,1.071,565,4.299,566,1.025,590,0.822,604,3.038,656,2.064,657,2.064,681,0.951,726,1.202,747,1.286,755,1.931,777,2.472,780,1.692,799,2.472,812,0.951,823,1.298,827,1.064,859,2.472,908,1.259,909,1.435,918,1.833,947,1.301,952,2.166,966,2.175,967,1.76,970,2.089,971,1.72,1018,2.898,1040,1.766,1041,1.355,1043,1.661,1104,0.987,1123,2.664,1131,1.566,1141,1.025,1145,0.507,1149,1.702,1168,1.508,1169,1.298,1182,1.196,1188,1.508,1192,1.4,1217,1.196,1220,1.025,1243,1.298,1308,1.932,1309,3.374,1452,4.651,1489,3.817,1493,1.633,1610,1.553,1617,2.991,1691,1.416,1738,2.455,1748,1.482,1911,2.083,2059,2.064,2124,4.288,2125,2.064,2126,5.165,2127,4.562,2128,4.562,2129,3.881,2130,4.399,2131,2.223,2132,5.252,2133,5.252,2134,5.532,2135,5.658,2136,5.252,2137,5.442,2138,5.442,2139,5.442,2140,4.771,2141,5.252,2142,2.223,2143,2.223,2144,5.326,2145,3.271,2146,5.326,2147,2.223,2148,5.326,2149,2.223,2150,5.252,2151,5.061,2152,4.147,2153,4.28,2154,4.28,2155,2.223,2156,2.223,2157,4.28,2158,4.28,2159,4.28,2160,2.223,2161,2.223,2162,2.223,2163,5.054,2164,2.844,2165,3.881,2166,3.881,2167,3.881,2168,3.881,2169,3.881,2170,4.28,2171,3.271,2172,3.271,2173,4.28,2174,2.223,2175,2.223,2176,2.223,2177,2.223,2178,2.223,2179,2.223,2180,2.223,2181,2.223,2182,3.038,2183,1.932,2184,3.881,2185,2.223,2186,2.223,2187,5.631,2188,5.252,2189,2.223,2190,3.038,2191,3.881,2192,3.881,2193,3.881,2194,3.604,2195,3.604,2196,3.881,2197,2.223,2198,3.975,2199,2.223,2200,3.271,2201,2.223,2202,2.223,2203,2.223,2204,2.223,2205,2.223,2206,3.271,2207,2.223,2208,2.223,2209,2.223,2210,4.771,2211,2.223,2212,2.223,2213,2.223,2214,2.223,2215,2.223,2216,2.223,2217,2.223,2218,2.223,2219,2.223,2220,2.223,2221,2.223,2222,2.223,2223,3.271,2224,2.223,2225,2.223,2226,2.223,2227,2.223,2228,2.223,2229,4.932,2230,2.223,2231,2.223,2232,2.223,2233,2.223,2234,2.223,2235,2.223,2236,2.223,2237,2.223,2238,2.223,2239,2.223,2240,2.223,2241,2.223,2242,2.223,2243,2.223,2244,2.223,2245,2.223,2246,2.223,2247,2.223,2248,2.223,2249,2.223,2250,2.223,2251,2.223,2252,2.223,2253,2.223,2254,2.223,2255,2.223,2256,2.223,2257,4.771,2258,2.223,2259,2.223,2260,2.223,2261,2.223,2262,2.223,2263,2.223,2264,2.223,2265,2.223,2266,3.271,2267,3.881,2268,2.223,2269,3.271,2270,2.223,2271,2.223,2272,3.604,2273,2.223,2274,2.223,2275,3.271,2276,2.223,2277,2.223,2278,2.223,2279,4.28,2280,2.223,2281,2.223,2282,2.223,2283,3.881,2284,2.223,2285,2.223,2286,2.223,2287,2.223,2288,2.223,2289,2.223,2290,2.223,2291,2.223,2292,2.223,2293,2.223,2294,2.223,2295,2.223,2296,3.271,2297,2.223,2298,2.223,2299,2.223,2300,2.223,2301,2.223,2302,2.223,2303,3.271,2304,2.223,2305,1.553,2306,3.271,2307,2.223,2308,2.223,2309,4.28,2310,2.223,2311,3.271,2312,2.223,2313,3.271,2314,2.223,2315,3.271,2316,2.223,2317,2.223,2318,2.223,2319,2.223,2320,2.223,2321,2.223,2322,2.223,2323,2.223,2324,2.223,2325,2.223,2326,2.223,2327,2.223,2328,2.223,2329,2.223,2330,2.223,2331,2.223,2332,2.223,2333,2.223,2334,2.223,2335,3.271,2336,2.223,2337,2.223,2338,2.223,2339,2.223,2340,2.223,2341,2.223,2342,2.223,2343,2.223,2344,2.223,2345,2.223,2346,2.223,2347,2.223,2348,2.223,2349,2.223,2350,2.223,2351,2.223,2352,2.223,2353,3.271,2354,2.223,2355,2.223,2356,2.223,2357,2.223,2358,2.223,2359,3.271,2360,2.223,2361,2.223,2362,2.223,2363,3.271,2364,2.223,2365,2.223,2366,2.223,2367,2.223,2368,2.223,2369,2.223,2370,2.223,2371,2.223,2372,2.223,2373,1.553,2374,2.223,2375,2.223,2376,2.223,2377,2.223,2378,2.223,2379,2.223,2380,2.223,2381,3.881]],["title/interfaces/Position3D.html",[189,0.303,1033,1.729]],["body/interfaces/Position3D.html",[3,0.097,4,0.142,7,0.085,15,0.073,16,0.178,22,0.015,24,2.286,32,0.198,33,0.061,46,1.725,49,0.53,55,0.552,57,0.552,68,0.008,69,0.008,74,0.173,76,0.319,78,0.499,108,0.204,112,0.514,114,0.646,115,0.712,117,0.975,118,1.254,119,1.367,135,0.172,136,0.968,149,0.318,157,0.348,175,0.949,177,0.615,178,0.778,181,0.381,182,0.317,189,0.543,190,0.205,191,0.848,208,1.379,212,0.215,215,0.35,222,1.022,230,0.402,232,0.406,237,1.895,238,1.225,239,1.687,240,1.529,256,0.859,282,1.527,310,0.302,324,1.194,325,1.314,326,1.301,327,1.284,328,1.12,329,1.12,330,1.315,331,2.202,335,0.825,336,0.723,338,0.867,339,0.636,340,1.807,341,1.617,342,1.475,345,1.807,348,0.641,350,1.775,352,1.123,356,0.648,361,2.392,364,0.604,366,1.022,369,2.019,375,1.85,378,1.132,380,1.083,406,1.321,427,2.521,463,2.197,468,2.926,469,1.268,474,2.74,491,1.857,500,1.268,513,0.624,530,1.268,566,1.043,581,2.208,585,1.268,590,1.596,646,1.217,681,2.054,692,2.926,706,2.804,726,1.236,739,1.17,821,2.019,827,1.586,843,1.99,848,1.099,851,1.645,876,2.14,898,1.379,902,1.935,908,1.432,947,0.9,990,2.472,1025,2.11,1026,1.441,1027,1.043,1028,2.737,1029,2.028,1030,2.39,1031,2.497,1032,1.807,1033,3.162,1034,1.321,1035,3.857,1036,3.355,1037,2.39,1038,1.508,1039,2.74,1040,1.617,1041,1.379,1042,2.433,1043,1.966,1044,2.29,1045,2.315,1046,1.661,1047,1.441,1048,2.467,1049,2.926,1050,2.74,1051,3.016,1052,3.016,1053,2.315,1054,2.74,1055,2.028,1056,2.208,1057,1.935,1058,2.749,1059,2.315,1060,1.661,1061,2.575,1062,2.74,1063,1.661,1064,2.208,1065,2.11,1066,3.062,1067,2.315,1068,2.11,1069,2.315,1070,2.926,1071,1.661,1072,2.315,1073,2.11,1074,2.11,1075,2.11,1076,2.433,1077,1.714,1078,1.581,1079,2.118,1080,2.028,1081,2.583,1082,2.613,1083,2.74,1084,1.661,1085,2.028,1086,2.613,1087,2.613,1088,2.11,1089,2.233,1090,2.433,1091,1.661,1092,2.11,1093,1.661,1094,2.315,1095,2.315,1096,1.268,1097,2.74,1098,2.147,1099,2.433,1100,2.433,1101,1.661,1102,2.11,1103,2.315,1104,1.917,1105,1.857,1106,1.714,1107,1.268,1108,1.661,1109,1.661,1110,1.714,1111,2.208,1112,1.714,1113,1.17,1114,1.581,1115,1.441,1116,1.581,1117,1.581,1118,1.581,1119,1.125,1120,1.714,1121,1.581,1122,2.74,1123,1.321,1124,2.315,1125,1.581,1126,2.315,1127,1.586,1128,1.581,1129,1.268,1130,1.441,1131,1.586,1132,2.315,1133,1.125,1134,2.315,1135,1.581,1136,1.441,1137,1.508,1138,1.581,1139,1.083,1140,2.315,1141,1.043,1142,1.581,1143,1.17,1144,1.783,1145,1.047,1146,1.935,1147,2.315,1148,1.508,1149,1.716,1150,1.581,1151,1.508,1152,1.441,1153,1.581,1154,1.581,1155,1.581,1156,1.147,1157,1.581,1158,3.211,1159,1.581,1160,1.581,1161,1.441,1162,1.217,1163,2.388,1164,1.581,1165,3.211,1166,1.581,1167,1.217,1168,1.043,1169,1.321,1170,1.581,1171,1.581,1172,1.581,1173,1.581,1174,1.441,1175,2.74,1176,2.315,1177,3.016,1178,3.554,1179,2.669,1180,2.74,1181,2.323,1182,1.783,1183,2.315,1184,1.508,1185,1.783,1186,1.902,1187,1.217,1188,1.807,1189,2.315,1190,1.581,1191,2.497,1192,2.054,1193,1.581,1194,1.581,1195,1.581,1196,1.581,1197,1.581,1198,1.441,1199,1.441,1200,1.581,1201,1.217,1202,1.581,1203,2.323,1204,1.441,1205,1.581,1206,1.217,1207,1.581,1208,2.39,1209,1.581,1210,2.315,1211,1.581,1212,0.9,1213,1.581,1214,1.441,1215,1.581,1216,2.74,1217,1.217,1218,1.581,1219,1.581,1220,1.043,1221,1.441,1222,1.581,1223,1.661,1224,1.441,1225,1.661,1226,1.441,1227,2.433,1228,2.315,1229,1.661,1230,3.971,1231,2.433,1232,2.433,1233,2.433,1234,1.661,1235,1.661,1236,1.661,1237,3.873,1238,2.879,1239,2.433,1240,2.879,1241,1.661,1242,1.661,1243,1.321,1244,1.661,1245,1.661]],["title/interfaces/ProprietesBatiment.html",[83,2.634,189,0.303]],["body/interfaces/ProprietesBatiment.html",[3,0.133,4,0.133,7,0.117,11,0.628,15,0.1,16,0.222,22,0.015,27,0.44,29,0.275,32,0.174,33,0.084,49,0.294,55,0.559,57,0.497,68,0.01,69,0.01,70,0.642,71,2.704,73,3.111,74,0.426,75,0.709,76,0.299,77,1.032,78,0.52,79,3.111,80,0.961,81,5.07,82,0.901,83,4.608,85,3.389,89,3.389,90,3.389,91,3.389,92,3.389,93,3.389,94,3.389,95,3.389,96,3.389,97,3.389,98,3.389,99,2.889,101,3.389,105,1.721,108,0.218,111,2.288,112,0.497,113,2.862,114,0.654,115,0.84,116,3.587,117,0.987,118,1.89,120,0.674,121,3.389,122,0.616,124,5.07,125,3.389,126,3.389,128,1.464,129,3.389,130,3.389,132,3.389,134,1.896,135,0.211,136,2.123,138,1.388,139,1.933,140,3.389,142,4.141,143,2.76,147,1.965,149,0.654,150,0.827,151,0.827,152,1.02,154,1.587,155,3.845,157,0.347,160,3.389,162,1.981,163,3.389,164,0.459,166,1.588,167,1.721,168,3.389,169,1.981,171,1.981,172,3.389,173,0.633,174,1.02,175,1.186,176,2.074,177,0.768,178,1.07,179,4.608,180,5.629,181,0.275,182,0.277,183,2.382,184,2.5,186,0.709,187,2.074,188,1.674,189,0.552,190,0.212,191,1.06,192,4.654,193,4.654,194,2.419,195,3.602,196,2.964,197,3.809,198,2.837,199,5.629,200,3.809,201,3.809,202,0.654,203,1.15,204,3.111,205,4.511,206,1.434,207,1.434,208,1.101,209,3.389,210,2.074,211,3.389,212,0.375,213,3.389,214,3.389,215,0.383,216,3.205,217,4.511,218,3.205,219,3.389,220,2.408,221,2.408,222,1.53,223,3.102,224,3.389,225,3.389,226,3.389,227,3.389,228,5.629,229,2.546,230,1.009,231,3.389,232,0.366,233,3.389,234,2.074,235,2.285,236,3.389,237,1.283,238,1.15,239,1.032,240,0.959,241,3.389,242,4.511,243,4.511,244,3.389,245,3.389,246,3.389,247,3.389,248,3.389,249,3.389,250,3.389,251,3.389,252,3.389,253,3.389,254,3.389,255,3.389,256,0.681,257,1.981,258,1.896,259,1.896,260,3.389,261,3.389,262,2.546,263,3.389,264,3.389,265,3.389,266,3.389,267,3.389,268,3.389,269,3.389,270,3.389,271,3.389,272,3.389,273,3.389,274,3.389,275,1.15,276,0.859,277,3.389,278,1.92,279,3.389,280,2.889,281,3.389,282,1.434,283,3.389,284,5.07,285,3.389,286,1.101,287,2.637,288,2.074,289,2.704,290,3.389,291,1.609,292,3.389,293,3.389,294,3.389,295,3.389,296,3.389,297,3.389,298,3.389,299,3.389,300,1.981,301,1.981,302,0.628,303,0.995,304,1.324,305,1.331,306,0.995,307,1.817,308,0.654,310,0.416]],["title/interfaces/ProprietesCamera.html",[189,0.303,1721,2.321]],["body/interfaces/ProprietesCamera.html",[3,0.116,4,0.116,7,0.102,11,0.549,15,0.088,16,0.203,22,0.015,24,2.16,27,0.466,29,0.24,32,0.191,33,0.074,46,1.29,55,0.521,57,0.454,68,0.009,69,0.009,70,0.585,74,0.208,75,0.62,76,0.313,77,0.902,80,0.908,82,1.014,103,1.042,105,1.605,108,0.216,112,0.52,114,0.382,115,0.585,117,0.462,120,0.687,122,0.546,128,1.004,135,0.216,138,1.366,139,1.635,147,1.936,149,0.693,150,1.247,151,1.247,152,1.215,154,1.208,157,0.358,164,0.788,166,1.665,167,1.887,169,2.988,171,2.988,173,0.594,174,1.215,181,0.451,182,0.281,183,1.742,184,2.002,186,0.62,188,1.463,189,0.593,190,0.218,195,3.816,196,3.14,202,0.572,212,0.356,215,0.386,216,3.631,218,3.631,220,2.924,221,2.924,230,0.876,232,0.24,275,1.605,302,1.094,308,0.572,310,0.363,324,1.108,325,1.242,326,1.242,327,1.242,335,0.913,336,1.208,339,0.613,348,0.731,352,0.779,355,0.902,366,1.447,368,0.969,370,1.081,371,0.795,397,1.731,513,0.75,516,2.104,714,1.614,746,1.812,747,1.187,752,2.433,812,1.163,848,0.902,851,1.253,863,1.996,876,2.034,880,2.774,883,3.188,886,3.188,889,1.996,907,1.812,919,2.536,952,2.008,966,1.523,967,1.463,970,1.463,1006,1.996,1028,2.954,1029,2.427,1032,2.413,1034,1.588,1061,2.433,1077,1.954,1079,2.615,1080,1.954,1081,2.525,1085,1.954,1089,2.246,1098,2.16,1104,1.207,1105,1.523,1106,2.55,1110,2.55,1112,2.55,1119,1.352,1120,1.406,1127,1.302,1129,2.433,1131,1.302,1133,1.879,1145,1.193,1156,0.723,1186,1.042,1337,1.463,1386,2.104,1498,1.812,1537,1.657,1691,1.731,1695,3.092,1696,2.363,1697,3.508,1698,3.508,1699,3.508,1700,3.508,1701,3.508,1702,3.508,1703,3.508,1704,3.508,1705,3.508,1706,3.508,1707,3.508,1708,2.524,1709,2.524,1710,3.092,1711,3.508,1712,3.508,1713,3.508,1714,3.508,1715,3.284,1716,3.508,1717,3.508,1718,2.524,1719,3.508,1720,2.524,1721,3.553,1722,4.357,1723,4.032,1724,3.553,1725,2.524,1726,3.508,1727,4.032,1728,2.894,1729,3.092,1730,4.032,1731,4.357,1732,4.357,1733,4.032,1734,4.032,1735,3.508,1736,2.524,1737,2.524,1738,1.463,1739,2.524,1740,2.225,1741,3.508,1742,2.524,1743,4.032,1744,2.524,1745,4.579,1746,2.524,1747,2.524,1748,1.812,1749,2.524,1750,2.524,1751,2.524,1752,2.524,1753,2.524,1754,3.508,1755,2.524,1756,2.524,1757,2.524,1758,2.524,1759,2.524,1760,2.363,1761,2.524,1762,2.524,1763,2.524,1764,2.524,1765,2.524,1766,2.524,1767,2.363,1768,2.524,1769,4.032,1770,2.524,1771,2.524,1772,2.524,1773,2.524,1774,2.524,1775,2.524,1776,2.524,1777,3.508,1778,2.524,1779,2.524,1780,2.524,1781,2.524,1782,2.524,1783,2.524,1784,2.524,1785,2.524,1786,2.524,1787,2.524,1788,2.524,1789,4.579,1790,2.524,1791,4.032,1792,2.524,1793,2.524,1794,2.524,1795,4.032,1796,2.524,1797,2.524,1798,4.357,1799,3.508,1800,3.508,1801,1.812,1802,2.524,1803,3.508,1804,2.524,1805,3.508,1806,3.508,1807,2.524,1808,4.032,1809,2.524,1810,3.508,1811,2.363,1812,2.524,1813,2.524,1814,2.524,1815,2.524,1816,2.524,1817,2.524,1818,2.524,1819,2.524,1820,2.524,1821,3.508,1822,2.524,1823,1.657,1824,2.524,1825,2.524,1826,2.524,1827,2.524,1828,2.524,1829,2.524,1830,2.524,1831,2.524,1832,2.524,1833,2.524,1834,2.524,1835,2.524,1836,2.524,1837,2.524,1838,2.524,1839,2.524]],["title/interfaces/ProprietesLumiere.html",[189,0.303,1724,2.321]],["body/interfaces/ProprietesLumiere.html",[3,0.115,4,0.115,7,0.101,11,0.544,15,0.087,16,0.201,22,0.015,24,2.149,27,0.464,29,0.238,32,0.191,33,0.073,46,1.512,55,0.519,57,0.451,68,0.009,69,0.009,70,0.581,74,0.206,75,0.614,76,0.312,77,0.893,80,0.905,82,1.011,103,1.032,105,1.597,108,0.218,109,2.237,112,0.519,114,0.379,115,0.581,117,0.457,120,0.686,122,0.57,128,0.998,135,0.216,138,1.364,139,1.63,147,1.931,149,0.691,150,1.242,151,1.242,152,1.21,154,1.2,157,0.358,164,0.825,166,1.656,167,1.881,169,2.976,171,2.976,173,0.592,174,1.21,181,0.449,182,0.28,183,1.73,184,1.991,186,0.614,188,1.449,189,0.591,190,0.218,195,3.803,196,3.129,202,0.566,212,0.355,215,0.385,216,3.616,218,3.616,220,2.904,221,2.904,230,0.873,232,0.238,275,1.597,302,1.092,308,0.566,310,0.36,324,1.106,325,1.241,326,1.241,327,1.241,335,0.909,336,1.2,339,0.609,348,0.727,352,0.771,355,0.893,366,1.441,368,0.96,370,1.071,371,0.789,397,1.715,513,0.743,516,2.084,714,1.607,746,1.795,747,1.223,752,2.421,812,1.152,848,0.893,851,1.245,863,1.977,876,2.027,880,2.756,883,3.172,886,3.172,889,1.977,907,1.795,919,2.523,952,1.999,966,1.509,967,1.449,970,1.449,1006,1.977,1028,2.911,1029,2.417,1032,2.154,1034,1.573,1061,2.753,1077,1.941,1079,2.611,1080,2.417,1081,2.515,1085,2.417,1089,2.632,1098,2.149,1104,1.196,1105,1.509,1106,1.941,1110,1.941,1112,1.941,1119,1.34,1120,1.393,1127,1.289,1129,2.618,1131,1.289,1133,1.867,1145,1.19,1156,0.716,1186,1.032,1337,1.449,1386,2.084,1498,1.795,1537,1.641,1691,1.715,1695,3.071,1696,2.341,1697,3.485,1698,3.485,1699,3.485,1700,3.485,1701,3.485,1702,3.485,1703,3.485,1704,3.485,1705,3.485,1706,3.485,1707,3.485,1708,2.5,1709,2.5,1710,3.071,1711,3.485,1712,3.485,1713,3.485,1714,3.485,1715,3.262,1716,3.485,1717,3.485,1718,2.5,1719,3.485,1720,2.5,1721,3.071,1722,3.485,1723,2.5,1724,3.824,1725,4.011,1726,4.563,1727,4.725,1728,3.391,1729,3.071,1730,4.011,1731,4.339,1732,4.339,1733,4.011,1734,4.011,1735,3.485,1736,2.5,1737,2.5,1738,1.449,1739,2.5,1740,2.204,1741,3.485,1742,2.5,1743,4.011,1744,2.5,1745,4.563,1746,2.5,1747,2.5,1748,1.795,1749,2.5,1750,2.5,1751,2.5,1752,2.5,1753,2.5,1754,3.485,1755,2.5,1756,2.5,1757,2.5,1758,2.5,1759,2.5,1760,2.341,1761,2.5,1762,2.5,1763,2.5,1764,2.5,1765,2.5,1766,2.5,1767,2.341,1768,2.5,1769,4.011,1770,2.5,1771,2.5,1772,2.5,1773,2.5,1774,2.5,1775,2.5,1776,2.5,1777,3.485,1778,2.5,1779,2.5,1780,2.5,1781,2.5,1782,2.5,1783,2.5,1784,2.5,1785,2.5,1786,2.5,1787,2.5,1788,2.5,1789,4.563,1790,2.5,1791,4.011,1792,2.5,1793,2.5,1794,2.5,1795,4.011,1796,2.5,1797,2.5,1798,4.339,1799,3.485,1800,3.485,1801,1.795,1802,2.5,1803,3.485,1804,2.5,1805,3.485,1806,3.485,1807,2.5,1808,4.011,1809,2.5,1810,3.485,1811,2.341,1812,2.5,1813,2.5,1814,2.5,1815,2.5,1816,2.5,1817,2.5,1818,2.5,1819,2.5,1820,2.5,1821,3.485,1822,2.5,1823,1.641,1824,2.5,1825,2.5,1826,2.5,1827,2.5,1828,2.5,1829,2.5,1830,2.5,1831,2.5,1832,2.5,1833,2.5,1834,2.5,1835,2.5,1836,2.5,1837,2.5,1838,2.5,1839,2.5]],["title/interfaces/ProprietesMateriau.html",[189,0.303,2130,2.466]],["body/interfaces/ProprietesMateriau.html",[3,0.093,4,0.093,7,0.081,11,0.438,15,0.07,16,0.172,22,0.015,27,0.304,29,0.192,32,0.169,33,0.059,55,0.386,68,0.008,69,0.008,70,0.498,74,0.361,75,0.495,76,0.242,77,0.72,78,0.426,80,0.741,82,0.916,103,0.832,108,0.223,109,1.539,112,0.192,114,0.635,117,0.546,120,0.637,122,0.62,128,1.518,135,0.211,138,1.347,139,1.944,147,1.188,149,0.635,150,0.854,151,0.854,152,0.943,154,1.028,157,0.352,164,0.565,169,1.382,171,2.047,173,0.664,174,1.042,178,1.627,181,0.444,182,0.304,183,2.612,184,2.54,186,0.495,189,0.548,190,0.234,191,0.823,202,0.457,212,0.362,215,0.377,230,0.68,232,0.284,276,0.599,278,1.745,286,0.577,288,1.447,291,1.123,302,0.649,303,0.694,304,1.224,305,0.929,306,0.694,308,1.03,310,0.29,328,0.854,329,0.854,335,1.08,336,1.224,338,1.232,342,0.887,347,2.551,352,0.921,355,0.72,356,0.921,364,0.506,366,1.509,370,0.863,371,0.95,380,2.344,500,2.651,513,1.056,565,4.434,566,1.001,590,0.803,604,2.985,656,2.016,657,2.016,681,0.929,714,1.455,726,1.222,747,1.284,755,1.904,777,2.437,780,1.662,799,2.437,812,0.929,823,1.268,827,1.039,859,2.437,908,1.351,909,1.67,918,1.801,947,1.278,952,2.151,966,2.145,967,1.73,970,2.06,971,1.68,1018,2.802,1040,1.745,1041,1.323,1043,1.638,1104,0.964,1123,2.235,1131,1.539,1141,1.001,1145,0.495,1149,1.881,1168,1.482,1169,1.268,1182,1.168,1188,1.482,1192,1.375,1217,1.168,1220,1.001,1243,1.268,1308,1.887,1309,3.327,1452,4.636,1489,3.89,1493,1.594,1610,1.517,1617,2.957,1691,1.382,1738,2.06,1748,1.447,1911,2.047,2059,2.016,2124,4.112,2125,2.016,2126,5.026,2127,3.827,2128,3.827,2129,2.17,2130,4.462,2131,3.827,2132,5.418,2133,5.418,2134,5.509,2135,5.64,2136,5.418,2137,5.418,2138,5.418,2139,5.418,2140,5.133,2141,5.418,2142,2.17,2143,2.17,2144,5.466,2145,3.214,2146,5.466,2147,2.17,2148,5.466,2149,2.17,2150,5.418,2151,5.026,2152,4.112,2153,4.231,2154,4.231,2155,2.17,2156,2.17,2157,4.231,2158,4.231,2159,4.231,2160,2.17,2161,2.17,2162,2.17,2163,5.031,2164,2.794,2165,3.827,2166,3.827,2167,3.827,2168,3.827,2169,3.827,2170,4.231,2171,3.214,2172,3.214,2173,4.231,2174,2.17,2175,2.17,2176,2.17,2177,2.17,2178,2.17,2179,2.17,2180,2.17,2181,2.17,2182,2.985,2183,1.887,2184,3.827,2185,2.17,2186,2.17,2187,5.612,2188,5.222,2189,2.17,2190,2.985,2191,3.827,2192,3.827,2193,3.827,2194,3.554,2195,3.554,2196,3.827,2197,2.17,2198,3.929,2199,2.17,2200,3.214,2201,2.17,2202,2.17,2203,2.17,2204,2.17,2205,2.17,2206,3.214,2207,2.17,2208,2.17,2209,2.17,2210,4.73,2211,2.17,2212,2.17,2213,2.17,2214,2.17,2215,2.17,2216,2.17,2217,2.17,2218,2.17,2219,2.17,2220,2.17,2221,2.17,2222,2.17,2223,3.214,2224,2.17,2225,2.17,2226,2.17,2227,2.17,2228,2.17,2229,4.895,2230,2.17,2231,2.17,2232,2.17,2233,2.17,2234,2.17,2235,2.17,2236,2.17,2237,2.17,2238,2.17,2239,2.17,2240,2.17,2241,2.17,2242,2.17,2243,2.17,2244,2.17,2245,2.17,2246,2.17,2247,2.17,2248,2.17,2249,2.17,2250,2.17,2251,2.17,2252,2.17,2253,2.17,2254,2.17,2255,2.17,2256,2.17,2257,4.73,2258,2.17,2259,2.17,2260,2.17,2261,2.17,2262,2.17,2263,2.17,2264,2.17,2265,2.17,2266,3.214,2267,3.827,2268,2.17,2269,3.214,2270,2.17,2271,2.17,2272,3.554,2273,2.17,2274,2.17,2275,3.214,2276,2.17,2277,2.17,2278,2.17,2279,4.231,2280,2.17,2281,2.17,2282,2.17,2283,3.827,2284,2.17,2285,2.17,2286,2.17,2287,2.17,2288,2.17,2289,2.17,2290,2.17,2291,2.17,2292,2.17,2293,2.17,2294,2.17,2295,2.17,2296,3.214,2297,2.17,2298,2.17,2299,2.17,2300,2.17,2301,2.17,2302,2.17,2303,3.214,2304,2.17,2305,1.517,2306,3.214,2307,2.17,2308,2.17,2309,4.231,2310,2.17,2311,3.214,2312,2.17,2313,3.214,2314,2.17,2315,3.214,2316,2.17,2317,2.17,2318,2.17,2319,2.17,2320,2.17,2321,2.17,2322,2.17,2323,2.17,2324,2.17,2325,2.17,2326,2.17,2327,2.17,2328,2.17,2329,2.17,2330,2.17,2331,2.17,2332,2.17,2333,2.17,2334,2.17,2335,3.214,2336,2.17,2337,2.17,2338,2.17,2339,2.17,2340,2.17,2341,2.17,2342,2.17,2343,2.17,2344,2.17,2345,2.17,2346,2.17,2347,2.17,2348,2.17,2349,2.17,2350,2.17,2351,2.17,2352,2.17,2353,3.214,2354,2.17,2355,2.17,2356,2.17,2357,2.17,2358,2.17,2359,3.214,2360,2.17,2361,2.17,2362,2.17,2363,3.214,2364,2.17,2365,2.17,2366,2.17,2367,2.17,2368,2.17,2369,2.17,2370,2.17,2371,2.17,2372,2.17,2373,1.517,2374,2.17,2375,2.17,2376,2.17,2377,2.17,2378,2.17,2379,2.17,2380,2.17,2381,3.827]],["title/interfaces/ProprietesMur.html",[189,0.303,746,1.891]],["body/interfaces/ProprietesMur.html",[3,0.114,4,0.114,7,0.1,11,0.539,15,0.086,16,0.2,22,0.015,27,0.406,29,0.236,32,0.174,33,0.072,49,0.492,55,0.679,57,0.32,68,0.009,69,0.009,70,0.578,74,0.204,75,0.608,76,0.293,77,0.885,78,0.493,80,0.517,82,0.901,105,1.59,108,0.222,111,1.719,112,0.483,113,2.437,115,0.786,116,3.384,117,0.791,120,0.621,122,0.601,128,1.349,135,0.21,138,1.384,139,1.762,143,2.486,147,1.59,149,0.375,150,0.71,151,0.71,152,0.919,154,0.854,157,0.357,164,0.394,173,0.576,174,0.919,175,1.454,177,0.692,181,0.236,182,0.296,183,2.258,184,2.258,186,0.608,188,1.436,189,0.556,190,0.209,191,1.4,196,3.384,200,3.809,201,4.008,202,0.561,203,0.987,206,1.23,207,1.23,208,1.143,210,1.779,212,0.371,215,0.387,222,1.51,223,3.264,230,1.035,232,0.329,234,1.779,238,1.379,239,1.683,240,1.565,256,0.585,257,3.119,258,1.627,259,1.627,262,2.184,276,0.737,278,1.92,286,1.302,288,2.865,291,1.381,303,0.854,304,1.375,305,1.142,306,0.854,310,0.357,315,1.856,324,1.104,325,1.019,326,1.019,327,1.019,328,0.753,329,0.753,330,0.884,332,2.907,335,0.785,355,0.885,364,0.635,371,0.904,382,1.779,460,2.479,513,1.029,590,0.987,665,2.505,714,1.601,717,1.559,726,1.111,737,3.242,738,2.479,739,1.929,740,2.887,741,3.327,742,3.327,743,4.299,744,4.112,745,2.375,746,3.858,747,1.141,748,2.437,749,3.242,750,2.409,751,2.511,752,1.496,753,2.669,754,2.669,755,1.856,756,1.381,757,3.73,758,2.066,759,2.669,760,2.669,761,2.669,762,2.669,763,2.669,764,5.074,765,3.73,766,3.73,767,3.73,768,3.73,769,3.73,770,2.066,771,2.669,772,2.669,773,2.669,774,2.669,775,2.669,776,2.669,777,2.738,778,2.669,779,2.669,780,1.381,781,2.669,782,2.32,783,2.669,784,3.73,785,4.299,786,2.669,787,3.73,788,2.669,789,2.669,790,2.669,791,2.887,792,2.669,793,2.066,794,1.865,795,2.669,796,2.669,797,2.669,798,2.669,799,3.231,800,3.73,801,3.73,802,2.669,803,2.669,804,2.669,805,2.669,806,2.669,807,2.669,808,2.669,809,2.669,810,2.669,811,2.669,812,1.992,813,2.669,814,3.327,815,2.066,816,2.066,817,2.669,818,2.669,819,2.669,820,2.669,821,1.627,822,1.865,823,1.559,824,2.669,825,4.655,826,2.669,827,1.278,828,2.669,829,4.655,830,2.669,831,2.887,832,2.669,833,2.887,834,2.669,835,2.669,836,4.299,837,1.559,838,2.669,839,2.669,840,2.511,841,2.179,842,2.669,843,1.23,844,1.865,845,2.375,846,3.73,847,2.066,848,1.237,849,1.779,850,2.669,851,1.426,852,2.669,853,2.669,854,2.066,855,2.669,856,2.669,857,2.669,858,2.669,859,2.738,860,4.299,861,4.299,862,4.299,863,3.157,864,4.655,865,2.669,866,2.669,867,4.655,868,2.669,869,2.669,870,2.669,871,3.73,872,2.669,873,2.669,874,2.669,875,2.669,876,1.92,877,2.669,878,2.669,879,2.669,880,2.739,881,2.669,882,2.669,883,3.157,884,2.669,885,2.669,886,3.157,887,2.669,888,2.669,889,1.96,890,2.669,891,2.669,892,2.669,893,2.669,894,2.669,895,2.669,896,2.669,897,1.865,898,1.627,899,2.669,900,2.184,901,2.669,902,1.559]],["title/interfaces/ProprietesOuverture.html",[189,0.303,907,1.891]],["body/interfaces/ProprietesOuverture.html",[3,0.123,4,0.123,7,0.107,11,0.579,15,0.092,16,0.21,22,0.015,27,0.422,29,0.253,32,0.188,33,0.078,49,0.501,57,0.678,68,0.009,69,0.009,70,0.607,74,0.219,75,0.653,76,0.257,77,0.95,78,0.483,80,0.555,82,0.864,105,1.651,108,0.22,111,1.321,112,0.469,113,2.728,114,0.403,116,3.443,120,0.608,122,0.608,128,1.336,135,0.215,138,1.366,139,1.793,147,1.774,149,0.403,150,0.762,151,0.762,152,0.965,154,0.917,157,0.354,164,0.423,173,0.589,174,0.965,175,1.279,177,0.532,182,0.294,183,2.316,184,2.316,186,0.653,188,1.542,189,0.586,190,0.222,191,0.734,197,3.206,198,2.388,202,0.603,203,1.06,206,1.321,207,1.321,208,1.187,210,1.91,212,0.37,215,0.385,222,1.376,223,2.975,229,2.346,230,1.039,232,0.346,234,1.91,239,1.48,240,1.376,256,1.281,257,2.843,258,1.747,259,1.747,276,0.791,278,1.616,286,1.276,310,0.383,315,1.426,324,1.014,325,0.978,326,0.978,327,0.978,328,0.791,329,0.791,330,0.929,332,2.683,335,0.824,339,0.465,341,2.19,356,1.279,364,0.307,378,0.706,415,2.218,590,1.06,665,2.402,714,1.65,726,1.163,739,2.027,740,2.218,741,3.455,742,3.455,744,4.014,747,1.215,750,2.196,751,2.288,755,1.949,756,1.482,758,2.218,770,2.218,777,1.825,791,2.218,793,2.218,799,3.2,812,1.677,814,2.218,815,2.218,816,2.218,831,3.032,833,3.032,837,1.674,840,2.288,841,1.674,847,2.218,848,1.299,854,2.218,859,2.495,876,1.616,903,3.406,904,2.661,905,4.798,906,2.495,907,3.787,908,1.432,909,1.918,910,4.699,911,2.738,912,3.406,913,2.491,914,4.798,915,4.798,916,4.464,917,4.464,918,2.196,919,1.674,920,2.866,921,2.866,922,3.918,923,2.866,924,2.866,925,2.866,926,2.866,927,2.866,928,2.866,929,2.866,930,2.866,931,3.918,932,3.918,933,3.918,934,2.866,935,2.866,936,4.464,937,2.866,938,2.866,939,2.866,940,4.464,941,4.798,942,2.866,943,2.866,944,2.866,945,2.866,946,2.866,947,1.775,948,2.491,949,2.866,950,2.866,951,2.866,952,1.91,953,2.866,954,2.866,955,2.738,956,2.866,957,3.918,958,3.206,959,2.866,960,2.866,961,2.866,962,2.866,963,2.738,964,2.866,965,2.491,966,1.606,967,1.542,968,2.661,969,2.877,970,1.542,971,2.218,972,2.866,973,2.866,974,2.866,975,2.866,976,2.866,977,2.866,978,2.003,979,2.866,980,3.88,981,5.024,982,4.464,983,2.866,984,3.918,985,3.918,986,3.918,987,2.866,988,2.866,989,2.866,990,1.542,991,2.866,992,2.495,993,1.825,994,2.866,995,5.024,996,2.866,997,2.866,998,2.866,999,2.866,1000,2.866,1001,2.866,1002,2.866,1003,2.866,1004,2.866,1005,4.464,1006,2.877,1007,2.866,1008,2.866,1009,2.866,1010,2.866,1011,2.866,1012,2.866,1013,2.866,1014,2.866,1015,2.866,1016,2.866,1017,2.866,1018,2.027,1019,2.866,1020,2.866,1021,2.866,1022,2.866,1023,2.866,1024,2.866]],["title/interfaces/ProprietesScene.html",[189,0.303,1710,2.321]],["body/interfaces/ProprietesScene.html",[3,0.114,4,0.114,7,0.1,11,0.538,15,0.086,16,0.2,22,0.015,24,2.315,27,0.462,29,0.235,32,0.19,33,0.072,46,1.277,55,0.516,57,0.447,68,0.009,69,0.009,70,0.577,74,0.204,75,0.608,76,0.313,77,0.884,80,0.901,82,1.008,103,1.022,105,1.589,108,0.216,112,0.519,114,0.375,115,0.577,117,0.453,120,0.684,122,0.585,128,1.301,135,0.216,138,1.361,139,1.79,147,1.964,149,0.688,150,1.237,151,1.237,152,1.206,154,1.192,157,0.359,164,0.823,166,1.648,167,1.876,169,2.963,171,2.963,173,0.591,174,1.206,181,0.448,182,0.279,183,2.257,184,2.338,186,0.608,188,1.435,189,0.59,190,0.217,195,3.789,196,3.118,202,0.561,212,0.354,215,0.385,216,3.601,218,3.601,220,2.884,221,2.884,230,0.87,232,0.235,275,1.589,302,1.09,308,0.561,310,0.356,324,1.051,325,1.239,326,1.239,327,1.239,335,0.904,336,1.192,339,0.795,348,0.948,352,0.764,355,0.884,366,1.435,368,0.951,370,1.06,371,0.784,397,1.698,513,0.736,516,2.063,746,1.777,747,1.221,752,2.408,812,1.141,848,0.884,851,1.236,863,1.958,876,2.019,880,2.737,883,3.156,886,3.156,889,1.958,907,1.777,919,2.51,952,1.991,966,1.494,967,1.435,970,1.435,1006,1.958,1028,2.905,1029,2.407,1032,2.145,1034,1.557,1061,2.408,1077,1.928,1079,2.622,1080,1.928,1081,2.504,1085,1.928,1089,2.223,1098,2.138,1104,1.184,1105,1.494,1106,1.928,1110,1.928,1112,1.928,1119,1.326,1120,1.379,1127,1.277,1129,2.408,1131,1.277,1133,1.854,1145,1.187,1156,0.709,1186,1.022,1337,1.435,1386,2.063,1498,1.777,1537,1.625,1691,1.698,1695,3.05,1696,2.318,1697,3.461,1698,3.461,1699,3.461,1700,3.461,1701,3.461,1702,3.461,1703,3.461,1704,3.461,1705,3.461,1706,3.461,1707,3.461,1708,2.476,1709,2.476,1710,3.517,1711,4.546,1712,4.546,1713,4.546,1714,4.546,1715,4.256,1716,4.546,1717,4.546,1718,3.99,1719,4.321,1720,3.99,1721,3.05,1722,3.461,1723,2.476,1724,3.517,1725,2.476,1726,3.461,1727,3.99,1728,2.864,1729,3.05,1730,3.99,1731,4.321,1732,4.321,1733,3.99,1734,3.99,1735,3.461,1736,2.476,1737,2.476,1738,1.435,1739,2.476,1740,2.182,1741,3.461,1742,2.476,1743,3.99,1744,2.476,1745,4.546,1746,2.476,1747,2.476,1748,1.777,1749,2.476,1750,2.476,1751,2.476,1752,2.476,1753,2.476,1754,3.461,1755,2.476,1756,2.476,1757,2.476,1758,2.476,1759,2.476,1760,2.318,1761,2.476,1762,2.476,1763,2.476,1764,2.476,1765,2.476,1766,2.476,1767,2.318,1768,2.476,1769,3.99,1770,2.476,1771,2.476,1772,2.476,1773,2.476,1774,2.476,1775,2.476,1776,2.476,1777,3.461,1778,2.476,1779,2.476,1780,2.476,1781,2.476,1782,2.476,1783,2.476,1784,2.476,1785,2.476,1786,2.476,1787,2.476,1788,2.476,1789,4.546,1790,2.476,1791,3.99,1792,2.476,1793,2.476,1794,2.476,1795,3.99,1796,2.476,1797,2.476,1798,4.321,1799,3.461,1800,3.461,1801,1.777,1802,2.476,1803,3.461,1804,2.476,1805,3.461,1806,3.461,1807,2.476,1808,3.99,1809,2.476,1810,3.461,1811,2.318,1812,2.476,1813,2.476,1814,2.476,1815,2.476,1816,2.476,1817,2.476,1818,2.476,1819,2.476,1820,2.476,1821,3.461,1822,2.476,1823,1.625,1824,2.476,1825,2.476,1826,2.476,1827,2.476,1828,2.476,1829,2.476,1830,2.476,1831,2.476,1832,2.476,1833,2.476,1834,2.476,1835,2.476,1836,2.476,1837,2.476,1838,2.476,1839,2.476]],["title/interfaces/ProprietesTexture.html",[189,0.303,2152,2.466]],["body/interfaces/ProprietesTexture.html",[3,0.095,4,0.095,7,0.083,11,0.447,15,0.071,16,0.175,22,0.015,27,0.308,29,0.195,32,0.171,33,0.06,55,0.391,68,0.008,69,0.008,70,0.505,74,0.364,75,0.504,76,0.244,77,0.734,78,0.43,80,0.749,82,0.922,103,0.849,108,0.221,112,0.195,114,0.64,117,0.554,120,0.641,122,0.618,128,1.521,135,0.212,138,1.351,139,1.933,147,0.818,149,0.64,150,0.867,151,0.867,152,0.954,154,1.043,157,0.348,164,0.327,169,1.409,171,2.076,173,0.665,174,1.052,178,1.469,181,0.446,182,0.304,183,2.581,184,2.482,186,0.504,189,0.551,190,0.235,191,0.566,202,0.465,212,0.363,215,0.378,230,0.688,232,0.288,276,0.611,278,1.762,286,0.588,288,1.475,291,1.145,302,0.658,303,0.708,304,1.238,305,0.947,306,0.708,308,1.036,310,0.296,328,0.862,329,0.862,335,1.085,336,1.238,338,1.25,342,0.9,347,2.58,352,0.934,355,0.734,356,0.934,364,0.457,366,1.519,370,0.88,371,0.958,380,2.358,500,2.669,513,1.068,565,4.294,566,1.02,590,0.818,604,3.028,656,2.055,657,2.055,681,0.947,714,1.121,726,1.201,747,1.286,755,1.926,777,2.465,780,1.686,799,2.465,812,0.947,823,1.293,827,1.06,859,2.465,908,1.257,909,1.431,918,1.827,947,1.297,952,2.163,966,2.169,967,1.755,970,2.083,971,1.713,1018,2.813,1040,2.032,1041,1.349,1043,1.657,1104,0.983,1123,2.261,1131,1.561,1141,1.02,1145,0.504,1149,1.698,1168,1.503,1169,1.293,1182,1.191,1188,1.503,1192,1.395,1217,1.191,1220,1.02,1243,1.293,1308,1.924,1309,3.365,1452,4.648,1489,3.812,1493,1.625,1610,1.546,1617,2.985,1691,1.409,1738,2.083,1748,1.475,1911,2.076,2059,2.055,2124,4.14,2125,2.055,2126,5.054,2127,3.871,2128,3.871,2129,2.213,2130,4.394,2131,2.213,2132,5.247,2133,5.247,2134,5.527,2135,5.655,2136,5.247,2137,5.438,2138,5.438,2139,5.438,2140,4.763,2141,5.247,2142,2.213,2143,2.213,2144,5.438,2145,3.26,2146,5.32,2147,2.213,2148,5.438,2149,2.213,2150,5.247,2151,5.159,2152,4.281,2153,4.925,2154,4.763,2155,3.871,2156,3.871,2157,4.925,2158,4.925,2159,4.763,2160,3.871,2161,3.871,2162,2.213,2163,5.05,2164,2.834,2165,3.871,2166,3.871,2167,3.871,2168,3.871,2169,3.871,2170,4.271,2171,3.26,2172,3.26,2173,4.271,2174,2.213,2175,2.213,2176,2.213,2177,2.213,2178,2.213,2179,2.213,2180,2.213,2181,2.213,2182,3.028,2183,1.924,2184,3.871,2185,2.213,2186,2.213,2187,5.628,2188,5.247,2189,2.213,2190,3.028,2191,3.871,2192,3.871,2193,3.871,2194,3.595,2195,3.595,2196,3.871,2197,2.213,2198,3.966,2199,2.213,2200,3.26,2201,2.213,2202,2.213,2203,2.213,2204,2.213,2205,2.213,2206,3.26,2207,2.213,2208,2.213,2209,2.213,2210,4.763,2211,2.213,2212,2.213,2213,2.213,2214,2.213,2215,2.213,2216,2.213,2217,2.213,2218,2.213,2219,2.213,2220,2.213,2221,2.213,2222,2.213,2223,3.26,2224,2.213,2225,2.213,2226,2.213,2227,2.213,2228,2.213,2229,4.925,2230,2.213,2231,2.213,2232,2.213,2233,2.213,2234,2.213,2235,2.213,2236,2.213,2237,2.213,2238,2.213,2239,2.213,2240,2.213,2241,2.213,2242,2.213,2243,2.213,2244,2.213,2245,2.213,2246,2.213,2247,2.213,2248,2.213,2249,2.213,2250,2.213,2251,2.213,2252,2.213,2253,2.213,2254,2.213,2255,2.213,2256,2.213,2257,4.763,2258,2.213,2259,2.213,2260,2.213,2261,2.213,2262,2.213,2263,2.213,2264,2.213,2265,2.213,2266,3.26,2267,3.871,2268,2.213,2269,3.26,2270,2.213,2271,2.213,2272,3.595,2273,2.213,2274,2.213,2275,3.26,2276,2.213,2277,2.213,2278,2.213,2279,4.271,2280,2.213,2281,2.213,2282,2.213,2283,3.871,2284,2.213,2285,2.213,2286,2.213,2287,2.213,2288,2.213,2289,2.213,2290,2.213,2291,2.213,2292,2.213,2293,2.213,2294,2.213,2295,2.213,2296,3.26,2297,2.213,2298,2.213,2299,2.213,2300,2.213,2301,2.213,2302,2.213,2303,3.26,2304,2.213,2305,1.546,2306,3.26,2307,2.213,2308,2.213,2309,4.271,2310,2.213,2311,3.26,2312,2.213,2313,3.26,2314,2.213,2315,3.26,2316,2.213,2317,2.213,2318,2.213,2319,2.213,2320,2.213,2321,2.213,2322,2.213,2323,2.213,2324,2.213,2325,2.213,2326,2.213,2327,2.213,2328,2.213,2329,2.213,2330,2.213,2331,2.213,2332,2.213,2333,2.213,2334,2.213,2335,3.26,2336,2.213,2337,2.213,2338,2.213,2339,2.213,2340,2.213,2341,2.213,2342,2.213,2343,2.213,2344,2.213,2345,2.213,2346,2.213,2347,2.213,2348,2.213,2349,2.213,2350,2.213,2351,2.213,2352,2.213,2353,3.26,2354,2.213,2355,2.213,2356,2.213,2357,2.213,2358,2.213,2359,3.26,2360,2.213,2361,2.213,2362,2.213,2363,3.26,2364,2.213,2365,2.213,2366,2.213,2367,2.213,2368,2.213,2369,2.213,2370,2.213,2371,2.213,2372,2.213,2373,1.546,2374,2.213,2375,2.213,2376,2.213,2377,2.213,2378,2.213,2379,2.213,2380,2.213,2381,3.871]],["title/components/Scene3dCoreComponent.html",[0,1.012,60,1.891]],["body/components/Scene3dCoreComponent.html",[0,1.599,1,2.74,2,2.627,3,0.124,4,0.124,5,2.894,6,2.123,7,0.108,9,2.123,10,3.062,12,2.121,14,2.02,15,0.093,16,0.211,20,2.038,21,1.887,22,0.015,24,1.961,25,3.196,27,0.455,29,0.255,32,0.108,33,0.078,34,2.123,35,2.894,36,2.894,37,2.123,38,3.537,39,2.123,40,2.157,41,2.123,42,1.927,43,1.841,44,2.123,45,1.841,46,0.859,47,2.123,48,1.762,49,0.273,50,3.293,51,1.841,52,1.62,53,2.123,54,1.841,55,0.347,56,1.841,57,0.347,58,3.61,59,2.894,60,3.21,61,2.123,62,2.02,63,1.841,64,1.556,65,1.688,66,2.123,67,2.123,68,0.009,69,0.009,74,0.221,76,0.308,77,1.307,78,0.451,80,1.137,82,1.159,84,2.208,103,1.108,107,2.733,108,0.214,109,2.147,112,0.499,114,0.554,115,0.448,117,0.818,119,2.373,120,0.749,135,0.108,157,0.233,164,0.711,173,0.641,177,0.731,182,0.298,190,0.192,208,1.048,212,0.291,215,0.356,222,0.891,289,4.381,302,1.122,308,1.013,338,1.108,347,1.927,352,1.129,442,4.764,443,5.421,444,2.208,445,2.513,513,0.798,519,2.513,566,1.333,618,4.816,642,1.556,646,1.556,647,3.495,851,1.725,900,3.225,1028,2.592,1029,2.038,1030,2.733,1064,1.927,1066,1.927,1070,1.762,1078,2.02,1079,2.067,1081,2.121,1082,1.927,1086,1.927,1087,1.927,1098,2.231,1111,2.988,1119,2.231,1120,1.495,1127,1.384,1136,1.841,1137,2.627,1143,1.495,1145,0.659,1146,2.302,1148,1.927,1156,1.048,1163,1.438,1208,1.762,1226,1.841,1228,2.754,1243,1.688,1248,2.513,1251,2.51,1253,2.51,1262,3.225,1267,3.225,1279,3.109,1313,2.813,1341,2.891,1380,3.898,1478,2.513,1715,2.513,1760,3.426,1767,3.898,2382,7.19,2383,3.495,2384,6.696,2385,4.764,2386,5.48,2387,5.48,2388,4.764,2389,6.235,2390,5.48,2391,5.48,2392,6.235,2393,6.235,2394,6.696,2395,6.696,2396,6.696,2397,5.48,2398,6.696,2399,6.696,2400,6.696,2401,6.696,2402,6.696,2403,6.696,2404,6.696,2405,5.48,2406,6.696,2407,6.696,2408,6.696,2409,6.235,2410,6.235,2411,6.235,2412,6.235,2413,6.235,2414,4.019,2415,5.48,2416,5.48,2417,4.019,2418,4.019,2419,4.019,2420,4.019,2421,4.019,2422,4.019,2423,4.019,2424,5.48,2425,7.231,2426,4.019,2427,4.019,2428,4.019,2429,4.019,2430,7.007,2431,4.019,2432,7.007,2433,4.019,2434,7.007,2435,4.019,2436,4.019,2437,4.019,2438,5.48,2439,4.019,2440,4.019,2441,4.019,2442,4.019,2443,4.019,2444,4.019,2445,6.235,2446,4.019,2447,5.48,2448,4.019,2449,4.019,2450,4.019,2451,4.019,2452,4.019,2453,4.019,2454,4.019,2455,4.764,2456,4.019,2457,4.019,2458,4.019,2459,5.48,2460,4.019,2461,6.235,2462,4.019,2463,6.235,2464,4.019,2465,4.019,2466,5.48,2467,5.48,2468,5.48,2469,6.235,2470,4.019,2471,4.019,2472,4.019,2473,4.019,2474,4.019,2475,5.421,2476,4.019,2477,4.019,2478,4.019,2479,5.48,2480,4.019,2481,4.019,2482,4.019,2483,4.019,2484,4.019,2485,4.019,2486,4.019,2487,4.019,2488,4.019,2489,4.019,2490,3.495,2491,4.019,2492,5.48,2493,4.019,2494,4.019,2495,4.019,2496,4.019,2497,4.019,2498,4.019,2499,4.019,2500,4.019,2501,4.019,2502,4.019,2503,4.019,2504,4.019,2505,4.019,2506,4.019,2507,4.019,2508,4.019,2509,4.019,2510,4.019,2511,4.019,2512,4.019,2513,4.019,2514,4.019,2515,4.019,2516,6.696,2517,6.696,2518,6.696,2519,4.019,2520,6.235,2521,6.235,2522,4.019,2523,5.48,2524,5.48,2525,4.019,2526,4.019,2527,4.019,2528,4.019,2529,6.235,2530,4.019,2531,4.019,2532,4.019,2533,4.019,2534,4.019,2535,4.019,2536,4.019,2537,4.019,2538,4.019,2539,4.019,2540,4.019,2541,4.019,2542,4.019,2543,4.019,2544,4.019,2545,4.019,2546,4.019,2547,6.235,2548,4.019,2549,5.48,2550,4.019,2551,4.019,2552,4.019,2553,4.019,2554,4.019,2555,4.019]],["title/interfaces/SceneConfig.html",[189,0.303,1102,1.806]],["body/interfaces/SceneConfig.html",[3,0.097,4,0.142,7,0.085,15,0.073,16,0.178,22,0.015,24,2.287,32,0.198,33,0.061,46,1.725,49,0.53,55,0.552,57,0.552,68,0.008,69,0.008,74,0.173,76,0.319,78,0.499,108,0.206,112,0.515,114,0.646,115,0.712,117,0.975,118,1.254,119,1.368,135,0.172,136,0.969,149,0.318,157,0.346,175,0.95,177,0.615,178,0.779,181,0.381,182,0.317,189,0.544,190,0.205,191,0.849,208,1.402,212,0.215,215,0.35,222,1.022,230,0.402,232,0.406,237,1.896,238,1.226,239,1.687,240,1.53,256,0.859,282,1.529,310,0.303,324,1.192,325,1.312,326,1.296,327,1.277,328,1.12,329,1.12,330,1.315,331,2.203,335,0.825,336,0.724,338,0.868,339,0.637,340,1.808,341,1.618,342,1.476,345,1.808,348,0.642,350,1.776,352,1.124,356,0.649,361,2.393,364,0.604,366,1.022,369,2.021,375,1.851,378,1.132,380,1.084,406,1.322,427,2.291,463,2.691,468,2.927,469,1.269,474,2.741,491,1.858,500,1.269,513,0.625,530,1.269,566,1.044,581,2.21,585,1.269,590,1.597,646,1.219,681,2.055,692,2.927,706,2.684,714,1.14,726,1.237,739,1.171,821,2.021,827,1.587,843,1.991,848,1.1,851,1.645,876,2.141,898,1.38,902,1.937,908,1.432,947,0.9,990,2.473,1025,2.111,1026,1.442,1027,1.044,1028,2.738,1029,2.029,1030,2.391,1031,2.498,1032,1.808,1033,3.101,1034,1.322,1035,3.858,1036,3.356,1037,2.391,1038,1.509,1039,2.741,1040,1.618,1041,1.38,1042,2.435,1043,1.967,1044,2.291,1045,2.317,1046,1.663,1047,1.442,1048,2.468,1049,2.927,1050,2.741,1051,3.018,1052,3.018,1053,2.317,1054,2.741,1055,2.029,1056,2.21,1057,1.937,1058,2.75,1059,2.317,1060,1.663,1061,2.576,1062,2.741,1063,1.663,1064,2.21,1065,2.111,1066,3.063,1067,2.317,1068,2.111,1069,2.317,1070,2.927,1071,1.663,1072,2.317,1073,2.111,1074,2.111,1075,2.111,1076,2.435,1077,1.715,1078,1.582,1079,2.214,1080,2.029,1081,2.584,1082,2.614,1083,2.741,1084,1.663,1085,2.029,1086,2.614,1087,2.614,1088,2.111,1089,2.234,1090,2.435,1091,1.663,1092,2.111,1093,1.663,1094,2.317,1095,2.317,1096,1.858,1097,2.741,1098,2.468,1099,2.435,1100,2.435,1101,1.663,1102,2.498,1103,2.317,1104,1.918,1105,1.858,1106,1.715,1107,1.269,1108,1.663,1109,1.663,1110,1.715,1111,2.21,1112,1.715,1113,1.171,1114,1.582,1115,1.442,1116,1.582,1117,1.582,1118,1.582,1119,1.126,1120,1.715,1121,1.582,1122,2.741,1123,1.322,1124,2.317,1125,1.582,1126,2.317,1127,1.587,1128,1.582,1129,1.269,1130,1.442,1131,1.587,1132,2.317,1133,1.126,1134,2.317,1135,1.582,1136,1.442,1137,1.509,1138,1.582,1139,1.084,1140,2.317,1141,1.044,1142,1.582,1143,1.171,1144,1.784,1145,1.047,1146,1.937,1147,2.317,1148,1.509,1149,1.717,1150,1.582,1151,1.509,1152,1.442,1153,1.582,1154,1.582,1155,1.582,1156,1.148,1157,1.582,1158,3.212,1159,1.582,1160,1.582,1161,1.442,1162,1.219,1163,2.389,1164,1.582,1165,3.212,1166,1.582,1167,1.219,1168,1.044,1169,1.322,1170,1.582,1171,1.582,1172,1.582,1173,1.582,1174,1.442,1175,2.741,1176,2.317,1177,3.018,1178,3.555,1179,2.67,1180,2.741,1181,2.324,1182,1.784,1183,2.317,1184,1.509,1185,1.784,1186,1.902,1187,1.219,1188,1.808,1189,2.317,1190,1.582,1191,2.498,1192,2.055,1193,1.582,1194,1.582,1195,1.582,1196,1.582,1197,1.582,1198,1.442,1199,1.442,1200,1.582,1201,1.219,1202,1.582,1203,2.324,1204,1.442,1205,1.582,1206,1.219,1207,1.582,1208,2.391,1209,1.582,1210,2.317,1211,1.582,1212,0.9,1213,1.582,1214,1.442,1215,1.582,1216,2.741,1217,1.219,1218,1.582,1219,1.582,1220,1.044,1221,1.442,1222,1.582,1223,1.663,1224,1.442,1225,1.663,1226,1.442,1227,2.435,1228,2.317,1229,1.663,1230,3.972,1231,2.435,1232,2.435,1233,2.435,1234,1.663,1235,1.663,1236,1.663,1237,3.874,1238,2.881,1239,2.435,1240,2.881,1241,1.663,1242,1.663,1243,1.322,1244,1.663,1245,1.663]],["title/interfaces/ServiceMessage.html",[189,0.303,1356,2.634]],["body/interfaces/ServiceMessage.html",[3,0.12,4,0.249,7,0.105,11,0.567,15,0.091,16,0.207,22,0.015,27,0.417,29,0.248,32,0.178,33,0.076,68,0.009,69,0.009,70,0.599,74,0.215,75,1.007,76,0.312,78,0.445,80,0.855,82,1.08,103,1.077,108,0.217,111,1.295,112,0.248,115,0.435,120,0.718,122,0.634,134,1.713,135,0.221,136,1.891,138,1.375,139,1.832,143,2.576,149,0.395,150,0.747,151,0.747,152,1.301,154,1.689,157,0.305,162,1.79,164,0.415,166,2.094,167,1.429,173,0.62,174,0.952,177,0.521,181,0.39,182,0.293,186,0.64,189,0.564,190,0.213,191,0.719,202,0.591,206,2.3,212,0.379,215,0.358,230,0.687,232,0.248,275,1.76,276,0.776,286,0.747,287,1.79,300,1.79,301,2.462,302,0.567,303,0.899,304,1.596,305,1.202,306,0.899,307,1.641,308,0.591,310,0.375,319,2.561,335,1.148,355,1.578,364,0.301,368,1.002,371,1.174,560,2.81,717,2.258,747,0.968,752,1.575,780,2.824,919,1.641,970,2.08,1032,1.295,1047,1.79,1079,1.295,1127,1.345,1133,1.923,1139,1.345,1224,1.79,1339,4.997,1340,2.81,1341,5.579,1342,5.754,1343,4.161,1344,6.078,1345,4.01,1346,3.245,1347,3.495,1348,3.245,1349,2.839,1350,3.245,1351,3.061,1352,3.061,1353,3.061,1354,5.46,1355,4.419,1356,4.633,1357,4.905,1358,5.435,1359,4.103,1360,4.813,1361,4.813,1362,4.813,1363,4.813,1364,4.813,1365,4.813,1366,2.945,1367,3.061,1368,3.061,1369,2.064,1370,4.813,1371,3.061,1372,3.061,1373,3.061,1374,4.01,1375,2.064,1376,3.061,1377,5.948,1378,3.061,1379,4.21,1380,2.443,1381,3.061,1382,3.061,1383,3.061,1384,3.495,1385,4.21,1386,2.175,1387,3.061,1388,4.813,1389,4.813,1390,4.21,1391,3.061,1392,3.061,1393,4.21,1394,4.813,1395,3.061,1396,4.21,1397,4.21,1398,3.061,1399,3.061,1400,4.21,1401,3.061,1402,3.061,1403,3.061,1404,3.061,1405,3.061,1406,4.21,1407,4.21,1408,3.061,1409,4.21,1410,3.061,1411,3.061,1412,3.061,1413,5.184,1414,3.061,1415,5.184,1416,3.061,1417,3.061,1418,3.061,1419,3.061,1420,3.061,1421,4.21,1422,3.061,1423,3.061,1424,5.184,1425,3.061,1426,3.061,1427,3.061,1428,3.061,1429,2.064,1430,4.21,1431,3.061,1432,3.061,1433,3.061,1434,3.061,1435,3.061,1436,2.064,1437,2.064,1438,3.061,1439,4.813,1440,4.21,1441,3.061,1442,4.21,1443,3.061,1444,4.21,1445,3.163,1446,4.21,1447,2.609,1448,3.061,1449,4.21,1450,2.064,1451,3.061,1452,3.163,1453,3.061,1454,3.061,1455,3.061,1456,3.061,1457,3.061,1458,2.064,1459,2.064,1460,2.064,1461,2.064,1462,2.839,1463,2.839,1464,3.061,1465,3.061,1466,5.184,1467,3.061,1468,3.061,1469,3.061,1470,3.061,1471,2.064,1472,2.064,1473,2.064,1474,3.061,1475,2.064,1476,4.21,1477,4.21,1478,2.443,1479,2.81,1480,3.061,1481,5.184,1482,5.754,1483,3.061,1484,3.061,1485,3.061,1486,3.061,1487,3.061,1488,3.061,1489,2.175,1490,3.061,1491,4.21,1492,3.061,1493,2.064,1494,3.061,1495,2.443,1496,3.061,1497,3.061,1498,1.873,1499,3.061,1500,3.061,1501,3.061,1502,1.79,1503,3.061,1504,3.061,1505,3.061,1506,3.061,1507,3.061,1508,3.061,1509,3.061]],["title/interfaces/StatistiquesBatiment.html",[155,2.634,189,0.303]],["body/interfaces/StatistiquesBatiment.html",[3,0.134,4,0.134,7,0.117,11,0.633,15,0.101,16,0.223,22,0.015,27,0.441,29,0.277,32,0.175,33,0.085,49,0.296,55,0.561,57,0.5,68,0.01,69,0.01,70,0.645,71,2.726,73,3.136,74,0.407,75,0.715,76,0.299,77,1.04,78,0.522,79,3.136,80,0.806,81,5.091,82,0.905,83,4.34,85,3.417,89,3.417,90,3.417,91,3.417,92,3.417,93,3.417,94,3.417,95,3.417,96,3.417,97,3.417,98,3.417,99,2.913,101,3.417,105,1.728,108,0.214,111,2.295,112,0.498,113,2.806,114,0.657,115,0.842,116,3.461,117,0.991,118,1.892,120,0.675,121,3.417,122,0.598,124,5.091,125,3.417,126,3.417,128,1.377,129,3.417,130,3.417,132,3.417,134,1.912,135,0.211,136,2.13,138,1.39,139,1.899,140,3.417,142,4.163,143,2.775,147,1.916,149,0.657,150,0.834,151,0.834,152,1.026,154,1.657,155,4.34,157,0.353,160,3.417,162,1.997,163,3.417,164,0.463,166,1.596,167,1.728,168,3.417,169,1.997,171,1.997,172,3.417,173,0.634,174,1.026,175,1.193,176,2.09,177,0.772,178,1.079,179,3.866,180,4.535,181,0.277,182,0.278,183,1.919,184,2.295,186,0.715,187,2.09,188,1.688,189,0.554,190,0.213,191,0.803,192,3.136,193,3.136,194,2.432,195,4.122,196,3.392,197,4.359,198,3.246,199,6.011,200,4.359,201,4.359,202,0.66,203,1.16,204,3.136,205,4.535,206,1.446,207,1.446,208,1.107,209,3.417,210,2.09,211,3.417,212,0.375,213,3.417,214,3.417,215,0.383,216,3.222,217,4.535,218,3.222,219,3.417,220,2.427,221,2.427,222,1.535,223,3.115,224,3.417,225,3.417,226,3.417,227,3.417,228,5.644,229,2.567,230,1.01,231,3.417,232,0.368,233,3.417,234,2.09,235,2.303,236,3.417,237,1.294,238,1.16,239,1.04,240,0.967,241,3.417,242,4.535,243,4.535,244,3.417,245,3.417,246,3.417,247,3.417,248,3.417,249,3.417,250,3.417,251,3.417,252,3.417,253,3.417,254,3.417,255,3.417,256,0.687,257,1.997,258,1.912,259,1.912,260,3.417,261,3.417,262,2.567,263,3.417,264,3.417,265,3.417,266,3.417,267,3.417,268,3.417,269,3.417,270,3.417,271,3.417,272,3.417,273,3.417,274,3.417,275,1.16,276,0.866,277,3.417,278,1.928,279,3.417,280,2.913,281,3.417,282,1.446,283,3.417,284,5.091,285,3.417,286,1.107,287,2.651,288,2.09,289,2.726,290,3.417,291,1.622,292,3.417,293,3.417,294,3.417,295,3.417,296,3.417,297,3.417,298,3.417,299,3.417,300,1.997,301,1.997,302,0.633,303,1.003,304,1.331,305,1.342,306,1.003,307,1.832,308,0.66,310,0.419]],["title/interfaces/StatistiquesMateriaux.html",[189,0.303,2164,2.466]],["body/interfaces/StatistiquesMateriaux.html",[3,0.096,4,0.096,7,0.084,11,0.451,15,0.072,16,0.176,22,0.015,27,0.31,29,0.197,32,0.171,33,0.06,55,0.394,68,0.008,69,0.008,70,0.509,74,0.365,75,0.509,76,0.245,77,0.741,78,0.46,80,0.754,82,0.925,103,0.857,108,0.22,112,0.197,114,0.643,117,0.558,120,0.642,122,0.619,128,1.505,135,0.212,138,1.354,139,1.935,147,0.826,149,0.643,150,0.873,151,0.873,152,0.959,154,1.245,157,0.349,164,0.33,169,1.423,171,2.091,173,0.666,174,1.057,178,1.475,181,0.448,182,0.305,183,2.584,184,2.487,186,0.509,189,0.553,190,0.235,191,0.572,202,0.47,212,0.363,215,0.378,230,0.691,232,0.29,276,0.617,278,1.77,286,0.594,288,1.489,291,1.155,302,0.663,303,0.714,304,1.245,305,0.956,306,0.714,308,1.039,310,0.298,328,0.866,329,0.866,335,1.088,336,1.245,338,1.259,342,0.906,347,2.594,352,0.94,355,0.741,356,0.94,364,0.459,366,1.523,370,0.888,371,0.961,380,2.365,500,2.678,513,1.074,565,4.304,566,1.03,590,0.826,604,3.049,656,2.074,657,2.074,681,0.956,726,1.203,747,1.28,755,1.936,777,2.479,780,2.219,799,2.479,812,0.956,823,1.305,827,1.07,859,3.044,908,1.262,909,1.439,918,1.84,947,1.305,952,2.169,966,2.181,967,1.767,970,2.095,971,1.729,1018,2.818,1040,1.77,1041,1.362,1043,1.666,1104,0.992,1123,2.273,1131,1.572,1141,1.03,1145,0.509,1149,1.706,1168,1.513,1169,1.305,1182,1.202,1188,1.513,1192,1.405,1217,1.202,1220,1.03,1243,1.305,1308,1.942,1309,3.383,1452,4.654,1489,3.823,1493,1.641,1610,1.561,1617,2.998,1691,1.423,1738,2.095,1748,1.489,1911,2.091,2059,2.074,2124,4.154,2125,2.074,2126,5.068,2127,3.892,2128,3.892,2129,2.234,2130,4.405,2131,2.234,2132,5.258,2133,5.258,2134,5.536,2135,5.662,2136,5.258,2137,5.447,2138,5.447,2139,5.447,2140,4.779,2141,5.258,2142,2.234,2143,2.234,2144,5.331,2145,3.283,2146,5.331,2147,2.234,2148,5.331,2149,2.234,2150,5.258,2151,5.068,2152,4.154,2153,4.29,2154,4.29,2155,2.234,2156,2.234,2157,4.29,2158,4.29,2159,4.29,2160,2.234,2161,2.234,2162,2.234,2163,5.103,2164,3.383,2165,4.779,2166,4.779,2167,4.779,2168,4.779,2169,4.779,2170,4.29,2171,3.283,2172,3.283,2173,4.29,2174,2.234,2175,2.234,2176,2.234,2177,2.234,2178,2.234,2179,2.234,2180,2.234,2181,2.234,2182,3.049,2183,1.942,2184,3.892,2185,2.234,2186,2.234,2187,5.635,2188,5.258,2189,2.234,2190,3.049,2191,3.892,2192,3.892,2193,3.892,2194,3.614,2195,3.614,2196,3.892,2197,2.234,2198,3.984,2199,2.234,2200,3.283,2201,2.234,2202,2.234,2203,2.234,2204,2.234,2205,2.234,2206,3.283,2207,2.234,2208,2.234,2209,2.234,2210,4.779,2211,2.234,2212,2.234,2213,2.234,2214,2.234,2215,2.234,2216,2.234,2217,2.234,2218,2.234,2219,2.234,2220,2.234,2221,2.234,2222,2.234,2223,3.283,2224,2.234,2225,2.234,2226,2.234,2227,2.234,2228,2.234,2229,4.94,2230,2.234,2231,2.234,2232,2.234,2233,2.234,2234,2.234,2235,2.234,2236,2.234,2237,2.234,2238,2.234,2239,2.234,2240,2.234,2241,2.234,2242,2.234,2243,2.234,2244,2.234,2245,2.234,2246,2.234,2247,2.234,2248,2.234,2249,2.234,2250,2.234,2251,2.234,2252,2.234,2253,2.234,2254,2.234,2255,2.234,2256,2.234,2257,4.779,2258,2.234,2259,2.234,2260,2.234,2261,2.234,2262,2.234,2263,2.234,2264,2.234,2265,2.234,2266,3.283,2267,3.892,2268,2.234,2269,3.283,2270,2.234,2271,2.234,2272,3.614,2273,2.234,2274,2.234,2275,3.283,2276,2.234,2277,2.234,2278,2.234,2279,4.29,2280,2.234,2281,2.234,2282,2.234,2283,3.892,2284,2.234,2285,2.234,2286,2.234,2287,2.234,2288,2.234,2289,2.234,2290,2.234,2291,2.234,2292,2.234,2293,2.234,2294,2.234,2295,2.234,2296,3.283,2297,2.234,2298,2.234,2299,2.234,2300,2.234,2301,2.234,2302,2.234,2303,3.283,2304,2.234,2305,1.561,2306,3.283,2307,2.234,2308,2.234,2309,4.29,2310,2.234,2311,3.283,2312,2.234,2313,3.283,2314,2.234,2315,3.283,2316,2.234,2317,2.234,2318,2.234,2319,2.234,2320,2.234,2321,2.234,2322,2.234,2323,2.234,2324,2.234,2325,2.234,2326,2.234,2327,2.234,2328,2.234,2329,2.234,2330,2.234,2331,2.234,2332,2.234,2333,2.234,2334,2.234,2335,3.283,2336,2.234,2337,2.234,2338,2.234,2339,2.234,2340,2.234,2341,2.234,2342,2.234,2343,2.234,2344,2.234,2345,2.234,2346,2.234,2347,2.234,2348,2.234,2349,2.234,2350,2.234,2351,2.234,2352,2.234,2353,3.283,2354,2.234,2355,2.234,2356,2.234,2357,2.234,2358,2.234,2359,3.283,2360,2.234,2361,2.234,2362,2.234,2363,3.283,2364,2.234,2365,2.234,2366,2.234,2367,2.234,2368,2.234,2369,2.234,2370,2.234,2371,2.234,2372,2.234,2373,1.561,2374,2.234,2375,2.234,2376,2.234,2377,2.234,2378,2.234,2379,2.234,2380,2.234,2381,3.892]],["title/interfaces/StatistiquesOuvertures.html",[189,0.303,913,2.466]],["body/interfaces/StatistiquesOuvertures.html",[3,0.125,4,0.125,7,0.109,11,0.588,15,0.094,16,0.212,22,0.015,27,0.425,29,0.257,32,0.189,33,0.079,49,0.456,57,0.684,68,0.009,69,0.009,70,0.614,74,0.222,75,0.664,76,0.259,77,0.966,78,0.509,80,0.564,82,0.872,105,1.664,108,0.212,111,1.343,112,0.471,113,2.593,114,0.409,116,3.218,120,0.612,122,0.589,128,1.053,135,0.216,138,1.371,139,1.602,147,1.664,149,0.409,150,0.774,151,0.774,152,0.976,154,1.267,157,0.357,164,0.43,173,0.592,174,0.976,175,0.834,177,0.54,182,0.295,183,1.826,184,1.826,186,0.664,188,1.567,189,0.588,190,0.223,191,0.746,197,4.135,198,3.08,202,0.613,203,1.077,206,1.343,207,1.343,208,1.197,210,1.941,212,0.371,215,0.386,222,1.388,223,3,229,2.384,230,1.041,232,0.35,234,1.941,239,0.966,240,0.898,256,1.28,257,2.867,258,1.775,259,1.775,276,0.804,278,1.634,286,1.284,310,0.389,315,1.449,324,0.8,325,0.986,326,0.986,327,0.986,328,0.8,329,0.8,330,0.939,332,2.696,335,0.833,339,0.473,341,2.15,356,1.289,364,0.312,378,0.718,415,2.254,590,1.077,665,1.567,726,1.058,739,2.049,740,2.254,741,3.484,742,3.484,744,4.258,747,1.168,750,2.22,751,2.314,755,1.971,756,1.507,758,2.254,770,2.254,777,1.855,791,2.254,793,2.254,799,3.218,812,1.695,814,2.254,815,2.254,816,2.254,831,3.066,833,3.066,837,1.701,840,2.314,841,1.701,847,2.254,848,1.314,854,2.254,859,3.218,876,1.634,903,3.443,904,2.705,905,4.831,906,2.523,907,3.772,908,1.333,909,1.786,910,4.392,911,2.768,912,3.443,913,3.443,914,5.332,915,5.332,916,5.212,917,5.212,918,2.22,919,1.701,920,2.912,921,2.912,922,3.961,923,2.912,924,2.912,925,2.912,926,2.912,927,2.912,928,2.912,929,2.912,930,2.912,931,3.961,932,3.961,933,3.961,934,2.912,935,2.912,936,4.501,937,2.912,938,2.912,939,2.912,940,4.501,941,4.831,942,2.912,943,2.912,944,2.912,945,2.912,946,2.912,947,1.79,948,2.532,949,2.912,950,2.912,951,2.912,952,1.926,953,2.912,954,2.912,955,2.768,956,2.912,957,3.961,958,3.242,959,2.912,960,2.912,961,2.912,962,2.912,963,2.768,964,2.912,965,2.532,966,1.632,967,1.567,968,2.705,969,2.909,970,1.567,971,2.254,972,2.912,973,2.912,974,2.912,975,2.912,976,2.912,977,2.912,978,2.035,979,2.912,980,3.913,981,5.053,982,4.501,983,2.912,984,3.961,985,3.961,986,3.961,987,2.912,988,2.912,989,2.912,990,1.567,991,2.912,992,2.523,993,1.855,994,2.912,995,5.053,996,2.912,997,2.912,998,2.912,999,2.912,1000,2.912,1001,2.912,1002,2.912,1003,2.912,1004,2.912,1005,4.501,1006,2.909,1007,2.912,1008,2.912,1009,2.912,1010,2.912,1011,2.912,1012,2.912,1013,2.912,1014,2.912,1015,2.912,1016,2.912,1017,2.912,1018,2.049,1019,2.912,1020,2.912,1021,2.912,1022,2.912,1023,2.912,1024,2.912]],["title/interfaces/StatistiquesScene.html",[189,0.303,1729,2.321]],["body/interfaces/StatistiquesScene.html",[3,0.116,4,0.116,7,0.101,11,0.547,15,0.087,16,0.202,22,0.015,24,2.156,27,0.465,29,0.239,32,0.191,33,0.073,46,1.288,55,0.52,57,0.453,68,0.009,69,0.009,70,0.584,74,0.207,75,0.617,76,0.314,77,0.899,80,0.907,82,1.013,103,1.039,105,1.603,108,0.211,112,0.52,114,0.381,115,0.584,117,0.46,120,0.687,122,0.546,128,1.002,135,0.216,138,1.365,139,1.633,147,1.934,149,0.692,150,1.246,151,1.246,152,1.213,154,1.386,157,0.359,164,0.788,166,1.662,167,1.885,169,2.984,171,2.984,173,0.594,174,1.213,181,0.45,182,0.28,183,1.738,184,1.998,186,0.617,188,1.458,189,0.592,190,0.218,195,4.128,196,3.397,202,0.57,212,0.355,215,0.386,216,3.626,218,3.626,220,2.917,221,2.917,230,0.875,232,0.239,275,1.603,302,1.093,308,0.57,310,0.362,324,1.056,325,1.242,326,1.242,327,1.242,335,0.912,336,1.205,339,0.612,348,0.73,352,0.776,355,0.899,366,1.445,368,0.966,370,1.077,371,0.793,397,1.725,513,0.748,516,2.097,746,1.806,747,1.186,752,2.429,812,1.159,848,0.899,851,1.25,863,1.99,876,2.031,880,2.768,883,3.183,886,3.183,889,1.99,907,1.806,919,2.531,952,2.005,966,1.518,967,1.458,970,1.458,1006,1.99,1028,2.915,1029,2.423,1032,2.16,1034,1.583,1061,2.429,1077,1.95,1079,2.628,1080,1.95,1081,2.521,1085,1.95,1089,2.242,1098,2.156,1104,1.203,1105,1.518,1106,1.95,1110,1.95,1112,1.95,1119,1.348,1120,1.401,1127,1.297,1129,2.429,1131,1.297,1133,1.875,1145,1.192,1156,0.72,1186,1.039,1337,1.458,1386,2.097,1498,1.806,1537,1.651,1691,1.725,1695,3.085,1696,2.355,1697,3.5,1698,3.5,1699,3.5,1700,3.5,1701,3.5,1702,3.5,1703,3.5,1704,3.5,1705,3.5,1706,3.5,1707,3.5,1708,2.516,1709,2.516,1710,3.085,1711,3.5,1712,3.5,1713,3.5,1714,3.5,1715,3.276,1716,3.5,1717,3.5,1718,2.516,1719,3.5,1720,2.516,1721,3.085,1722,3.5,1723,2.516,1724,3.547,1725,2.516,1726,3.5,1727,4.025,1728,2.889,1729,3.547,1730,4.734,1731,4.857,1732,4.857,1733,4.734,1734,4.734,1735,4.573,1736,2.516,1737,2.516,1738,1.458,1739,2.516,1740,2.217,1741,3.5,1742,2.516,1743,4.025,1744,2.516,1745,4.573,1746,2.516,1747,2.516,1748,1.806,1749,2.516,1750,2.516,1751,2.516,1752,2.516,1753,2.516,1754,3.5,1755,2.516,1756,2.516,1757,2.516,1758,2.516,1759,2.516,1760,2.355,1761,2.516,1762,2.516,1763,2.516,1764,2.516,1765,2.516,1766,2.516,1767,2.355,1768,2.516,1769,4.025,1770,2.516,1771,2.516,1772,2.516,1773,2.516,1774,2.516,1775,2.516,1776,2.516,1777,3.5,1778,2.516,1779,2.516,1780,2.516,1781,2.516,1782,2.516,1783,2.516,1784,2.516,1785,2.516,1786,2.516,1787,2.516,1788,2.516,1789,4.573,1790,2.516,1791,4.025,1792,2.516,1793,2.516,1794,2.516,1795,4.025,1796,2.516,1797,2.516,1798,4.351,1799,3.5,1800,3.5,1801,1.806,1802,2.516,1803,3.5,1804,2.516,1805,3.5,1806,3.5,1807,2.516,1808,4.025,1809,2.516,1810,3.5,1811,2.355,1812,2.516,1813,2.516,1814,2.516,1815,2.516,1816,2.516,1817,2.516,1818,2.516,1819,2.516,1820,2.516,1821,3.5,1822,2.516,1823,1.651,1824,2.516,1825,2.516,1826,2.516,1827,2.516,1828,2.516,1829,2.516,1830,2.516,1831,2.516,1832,2.516,1833,2.516,1834,2.516,1835,2.516,1836,2.516,1837,2.516,1838,2.516,1839,2.516]],["title/interfaces/Structure.html",[64,1.527,189,0.303]],["body/interfaces/Structure.html",[0,1.595,1,1.677,3,0.15,4,0.15,7,0.194,10,1.885,12,1.885,15,0.113,16,0.24,22,0.015,27,0.466,29,0.309,32,0.168,33,0.095,49,0.527,55,0.592,57,0.592,63,2.231,64,3.094,65,2.046,68,0.011,69,0.011,74,0.426,75,1.02,76,0.24,78,0.353,99,3.253,108,0.221,112,0.435,114,0.629,117,0.838,118,1.806,120,0.716,122,0.639,128,1.459,135,0.168,149,0.629,157,0.34,164,0.517,173,0.641,175,1.282,176,2.982,177,0.83,178,1.539,179,4.155,182,0.24,189,0.527,190,0.222,212,0.361,215,0.361,230,0.795,232,0.309,276,0.967,280,3.253,282,2.063,302,0.707,303,1.12,304,1.431,305,1.499,306,1.12,307,2.046,308,0.737,310,0.468,335,0.941,336,1.431,339,0.8,348,0.954,350,1.654,371,1.037,388,1.885,432,2.573,444,1.963,445,2.507,446,2.613,516,3.463,519,3.075,566,1.615,642,1.885,643,1.963,686,3.816,714,1.539,726,1.202,851,1.929,993,2.231,1145,1.02,1156,1.189,1212,1.96,1248,1.963,1251,2.231,1253,2.231,1264,2.135,1279,3.299,1313,3.299,1380,3.045,1478,3.045,1572,4.474,1748,2.335,1841,2.448,1843,2.573,1845,2.573,1846,2.573,2183,3.889,2556,3.816,2557,6.635,2558,6.635,2559,6.635,2560,4.235,2561,6.279,2562,5.409,2563,4.235,2564,4.235,2565,4.235,2566,4.235,2567,4.235,2568,4.235,2569,4.235,2570,4.235,2571,4.235,2572,6.895,2573,4.235,2574,4.235,2575,4.235,2576,4.235,2577,4.235,2578,4.235,2579,5.409,2580,4.235,2581,5.959,2582,4.235,2583,4.235,2584,4.235,2585,4.235,2586,5.959,2587,4.235,2588,4.235,2589,4.235,2590,4.235,2591,4.235,2592,4.235,2593,4.235,2594,4.235,2595,4.235,2596,4.235,2597,4.235,2598,4.235,2599,4.235,2600,4.235,2601,4.235,2602,4.235,2603,4.235,2604,5.409,2605,4.235,2606,4.235,2607,4.235,2608,4.235,2609,4.235,2610,4.235,2611,4.235,2612,5.409,2613,5.959,2614,4.235,2615,4.235,2616,4.235,2617,4.235,2618,4.235,2619,4.235,2620,4.235,2621,4.235,2622,4.235,2623,5.409,2624,5.409,2625,5.409,2626,5.409,2627,4.235,2628,4.235,2629,4.235]],["title/components/StructureControllerComponent.html",[0,1.012,63,1.806]],["body/components/StructureControllerComponent.html",[0,1.59,1,2.736,2,2.607,3,0.122,4,0.122,5,2.1,6,2.1,7,0.18,9,2.1,10,3.057,12,2.105,14,1.998,15,0.092,20,2.023,21,1.873,22,0.015,25,3.177,27,0.421,29,0.253,32,0.146,33,0.077,34,2.1,35,2.873,36,2.873,37,2.1,38,3.52,39,2.1,40,1.674,41,2.1,42,1.906,43,1.821,44,2.1,45,1.821,46,0.85,47,2.1,48,1.743,49,0.51,50,3.274,51,1.821,52,1.602,53,2.1,54,1.821,55,0.637,56,1.821,57,0.603,58,2.607,59,2.873,60,1.906,61,2.1,62,1.998,63,3.053,64,3.129,65,2.604,66,2.1,67,2.1,68,0.009,69,0.009,74,0.383,75,0.891,76,0.302,78,0.288,80,0.757,84,2.192,99,4.452,108,0.215,112,0.394,113,1.946,114,0.627,116,2.491,117,0.853,118,1.827,119,2.369,120,0.731,122,0.568,128,1.378,134,2.384,135,0.146,149,0.55,154,1.251,157,0.343,164,0.578,173,0.613,175,1.438,176,2.972,177,0.827,178,1.726,179,4.14,182,0.21,189,0.418,190,0.205,192,3.911,193,3.911,194,3.238,212,0.344,215,0.344,230,0.695,232,0.253,257,2.491,276,0.789,280,2.655,282,1.803,302,0.79,303,0.914,304,1.251,305,1.224,306,0.914,307,1.67,308,0.823,335,0.823,336,1.251,339,0.842,348,1.004,350,1.649,370,1.906,371,0.938,388,1.539,432,2.1,444,2.192,445,2.499,446,2.604,516,3.027,519,2.905,566,1.318,582,3.4,642,1.539,643,1.602,686,3.115,726,1.135,845,1.821,849,1.906,851,1.871,993,1.821,1145,1.016,1149,1.555,1151,2.607,1156,1.185,1163,1.946,1212,2.061,1248,2.192,1251,2.491,1253,2.491,1262,3.201,1264,2.717,1267,3.201,1279,3.355,1313,3.156,1337,2.105,1380,2.485,1478,2.485,1489,3.71,1572,3.911,1748,1.906,1841,1.998,1843,2.873,1845,2.873,1846,2.873,1869,3.115,1873,2.859,1875,3.115,1879,3.456,1880,3.115,1881,3.115,2044,3.456,2046,4.729,2163,3.632,2182,4.452,2183,3.876,2190,3.632,2198,3.632,2556,6.442,2557,5.795,2558,5.795,2559,5.795,2560,4.729,2561,6.266,2562,6.069,2563,5.39,2564,5.39,2565,5.39,2566,5.39,2567,5.39,2568,5.39,2569,5.39,2570,5.795,2571,3.456,2572,6.625,2573,5.795,2574,3.456,2575,5.795,2576,3.456,2577,5.795,2578,3.456,2579,4.729,2580,5.39,2581,5.39,2582,3.456,2583,3.456,2584,3.456,2585,3.456,2586,5.39,2587,3.456,2588,3.456,2589,3.456,2590,5.795,2591,3.456,2592,5.795,2593,3.456,2594,3.456,2595,3.456,2596,3.456,2597,3.456,2598,3.456,2599,3.456,2600,3.456,2601,3.456,2602,3.456,2603,3.456,2604,4.729,2605,3.456,2606,3.456,2607,3.456,2608,3.456,2609,5.795,2610,3.456,2611,6.266,2612,4.729,2613,5.39,2614,3.456,2615,5.795,2616,3.456,2617,5.795,2618,3.456,2619,3.456,2620,6.266,2621,3.456,2622,6.266,2623,4.729,2624,4.729,2625,4.729,2626,4.729,2627,6.266,2628,5.795,2629,3.456,2630,3.976,2631,3.976,2632,3.976,2633,3.976,2634,3.976,2635,3.976,2636,3.976,2637,3.976,2638,3.976,2639,3.976,2640,3.976,2641,3.976,2642,3.976,2643,3.976,2644,3.976,2645,3.976,2646,3.976,2647,5.439,2648,3.201,2649,5.439,2650,5.439,2651,5.439,2652,5.439,2653,6.665,2654,5.439,2655,5.439]],["title/interfaces/StructureDimensions.html",[189,0.303,1842,2.634]],["body/interfaces/StructureDimensions.html",[0,1.748,1,1.943,3,0.174,4,0.174,7,0.152,10,2.184,12,2.184,15,0.131,16,0.263,22,0.015,27,0.497,29,0.358,32,0.197,33,0.11,48,2.474,49,0.558,64,2.638,65,2.371,68,0.012,69,0.012,74,0.31,76,0.263,108,0.197,120,0.694,122,0.434,135,0.205,149,0.571,157,0.351,164,0.778,173,0.621,181,0.483,189,0.598,190,0.234,191,1.039,232,0.433,237,1.674,302,0.99,308,1.031,310,0.542,328,1.131,329,1.131,330,1.328,338,1.556,339,0.924,348,1.102,350,1.813,352,1.404,444,2.274,445,2.747,446,2.864,519,3.277,642,2.184,643,2.274,1145,1.201,1146,2.371,1156,1.303,1212,2.263,1248,2.274,1251,2.585,1253,2.585,1264,2.474,1279,3.272,1313,3.272,1314,4.262,1445,3.322,1840,4.059,1841,2.836,1842,5.081,1843,2.981,1844,4.059,1845,2.981,1846,2.981,1847,4.421,1848,4.421,1849,4.421,1850,4.421,1851,4.421,1852,4.421,1853,4.421,1854,4.421,1855,4.421,1856,4.421,1857,4.421,1858,4.421,1859,5.34,1860,4.421,1861,4.421,1862,5.34,1863,4.421,1864,4.421,1865,4.421,1866,4.421]],["title/interfaces/ValidationError.html",[189,0.303,2656,2.195]],["body/interfaces/ValidationError.html",[3,0.105,4,0.105,7,0.092,11,0.495,15,0.079,16,0.188,22,0.015,27,0.387,29,0.216,32,0.185,33,0.066,40,2.35,49,0.5,55,0.624,57,0.593,68,0.008,69,0.008,70,0.544,74,0.423,75,0.559,76,0.315,78,0.577,80,0.475,82,0.918,108,0.178,109,1.681,111,1.13,112,0.467,113,2.041,114,0.494,115,0.765,118,0.784,120,0.568,122,0.626,134,1.494,135,0.218,136,1.756,138,1.104,139,1.685,149,0.345,150,0.652,151,0.652,152,0.865,154,1.433,157,0.281,162,1.561,164,0.606,166,1.346,167,0.906,173,0.56,174,0.865,177,0.455,181,0.362,182,0.311,186,0.559,189,0.581,190,0.222,202,0.516,203,0.906,212,0.348,215,0.38,230,0.998,232,0.31,237,1.011,256,0.537,275,1.657,276,0.676,282,1.13,286,1.494,287,1.561,300,1.561,301,1.561,302,1.109,303,0.784,304,1.123,305,1.049,306,0.784,307,1.432,308,0.516,310,0.327,315,2.359,319,2.89,339,0.57,340,2.397,342,0.676,345,1.13,348,0.918,355,1.165,356,1.359,359,1.713,364,0.48,366,0.756,368,0.874,370,0.975,371,0.942,378,0.604,414,1.713,502,4.033,513,0.969,568,4.395,592,1.8,653,1.373,747,1.203,748,1.219,750,1.968,751,1.432,755,1.219,780,2.318,822,3.633,823,2.617,837,2.968,840,2.051,841,2.051,843,1.619,844,1.713,845,2.613,848,1.361,849,1.633,851,1.573,897,2.867,908,1.132,909,0.906,911,1.713,918,2.658,952,2.225,992,2.854,993,3.02,1018,1.816,1040,1.011,1055,2.553,1107,3.01,1139,1.681,1141,1.619,1143,1.268,1145,0.559,1156,0.652,1163,2.229,1179,1.89,1187,1.319,1343,2.579,1345,3.483,1346,3.013,1347,3.291,1348,3.013,1349,3.732,1366,2.735,1369,1.8,1374,3.013,1375,1.8,1384,3.013,1429,1.8,1436,1.8,1437,1.8,1450,1.8,1458,1.8,1459,1.8,1460,1.8,1461,1.8,1462,1.8,1463,2.579,1471,1.8,1472,1.8,1473,1.8,1475,1.8,1502,1.561,1537,1.494,1728,3.66,1738,1.319,1801,1.633,1823,2.14,1911,2.236,2305,2.454,2373,1.713,2648,2.874,2656,3.933,2657,2.006,2658,4.123,2659,4.668,2660,2.13,2661,4.023,2662,4.601,2663,4.601,2664,3.819,2665,4.937,2666,4.418,2667,3.176,2668,4.774,2669,4.29,2670,2.13,2671,3.567,2672,3.567,2673,2.13,2674,3.052,2675,3.176,2676,4.601,2677,3.895,2678,3.895,2679,3.895,2680,3.895,2681,3.567,2682,2.13,2683,2.13,2684,2.13,2685,2.13,2686,2.13,2687,3.895,2688,2.13,2689,2.13,2690,2.13,2691,3.052,2692,2.874,2693,2.874,2694,2.13,2695,2.13,2696,2.13,2697,3.567,2698,3.895,2699,2.13,2700,2.13,2701,3.052,2702,2.13,2703,2.874,2704,3.052,2705,2.13,2706,2.006,2707,3.052,2708,2.13,2709,3.052,2710,2.13,2711,2.13,2712,2.13,2713,2.13,2714,2.13,2715,2.006,2716,2.13,2717,2.13,2718,2.13,2719,2.13,2720,2.13,2721,2.13,2722,2.13,2723,2.13,2724,2.13,2725,3.052,2726,2.13,2727,2.13,2728,2.006,2729,2.13,2730,3.895,2731,4.29,2732,3.567,2733,3.052,2734,3.052,2735,2.13,2736,2.13,2737,4.418,2738,2.13,2739,2.13,2740,2.13,2741,2.13,2742,2.13,2743,2.13,2744,2.13,2745,2.13,2746,2.13,2747,2.13,2748,2.13,2749,2.13,2750,2.13,2751,2.13,2752,2.13,2753,3.052,2754,2.13,2755,3.567,2756,4.519,2757,3.895,2758,2.13,2759,2.13,2760,2.13,2761,2.13,2762,2.13,2763,3.895,2764,2.13,2765,2.13,2766,3.052,2767,2.13,2768,2.13,2769,3.567,2770,2.13,2771,3.052,2772,3.052,2773,2.13,2774,2.13,2775,2.13,2776,2.13,2777,2.13,2778,2.13,2779,2.13,2780,3.895,2781,3.567,2782,2.13,2783,2.13,2784,2.13,2785,2.13,2786,2.13,2787,2.13,2788,2.13,2789,3.567,2790,2.13,2791,3.052,2792,2.13,2793,3.052,2794,2.13,2795,2.13,2796,2.13,2797,2.13,2798,2.13,2799,2.13,2800,4.29,2801,3.567,2802,3.567,2803,3.052,2804,3.567,2805,2.13,2806,2.13,2807,2.13,2808,3.567,2809,2.13,2810,3.895,2811,2.13,2812,3.052,2813,2.13,2814,2.13,2815,2.13,2816,2.13,2817,2.13,2818,2.13,2819,2.13,2820,2.13,2821,3.052,2822,2.13,2823,2.13,2824,3.052,2825,2.13,2826,2.13,2827,2.13,2828,2.13,2829,2.13,2830,2.13,2831,2.13,2832,2.13,2833,2.13,2834,2.13,2835,3.052,2836,3.052]],["title/interfaces/ValidationMur.html",[189,0.303,749,2.466]],["body/interfaces/ValidationMur.html",[3,0.118,4,0.118,7,0.103,11,0.556,15,0.089,16,0.204,22,0.015,27,0.413,29,0.243,32,0.177,33,0.075,49,0.446,55,0.682,57,0.331,68,0.009,69,0.009,70,0.591,74,0.21,75,0.628,76,0.295,77,0.914,78,0.499,80,0.533,82,0.914,105,1.617,108,0.21,111,1.758,112,0.491,113,1.897,115,0.794,116,3.155,117,0.802,120,0.628,122,0.604,128,1.162,135,0.21,138,1.391,139,1.565,143,2.541,147,1.41,149,0.387,150,0.732,151,0.732,152,0.939,154,0.881,157,0.354,164,0.646,173,0.582,174,0.939,175,1.352,177,0.707,181,0.243,182,0.298,183,1.758,184,1.758,186,0.628,188,1.483,189,0.561,190,0.212,191,1.409,196,3.155,200,3.862,201,3.121,202,0.58,203,1.019,206,1.27,207,1.27,208,1.162,210,1.836,212,0.372,215,0.387,222,1.528,223,3.302,230,1.038,232,0.337,234,1.836,238,1.41,239,1.565,240,1.455,256,0.603,257,3.155,258,1.679,259,1.679,262,2.255,276,0.76,278,1.946,286,1.362,288,2.914,291,1.425,303,0.881,304,1.398,305,1.179,306,0.881,310,0.368,315,2.465,324,1.061,325,1.034,326,1.034,327,1.034,328,0.77,329,0.77,330,0.904,332,2.921,335,0.802,355,0.914,364,0.637,371,0.92,382,1.836,460,2.559,513,1.052,590,1.019,665,2.052,717,1.609,726,0.958,737,3.315,738,2.559,739,1.972,740,2.951,741,3.384,742,3.384,743,4.373,744,4.145,745,2.428,746,3.858,747,1.034,748,1.897,749,3.801,750,2.872,751,2.993,752,1.544,753,2.755,754,2.755,755,1.897,756,1.425,757,3.813,758,2.132,759,2.755,760,2.755,761,2.755,762,2.755,763,2.755,764,5.125,765,3.813,766,3.813,767,3.813,768,3.813,769,3.813,770,2.132,771,2.755,772,2.755,773,2.755,774,2.755,775,2.755,776,2.755,777,2.785,778,2.755,779,2.755,780,1.425,781,2.755,782,2.395,783,2.755,784,3.813,785,4.373,786,2.755,787,3.813,788,2.755,789,2.755,790,2.755,791,2.951,792,2.755,793,2.132,794,1.925,795,2.755,796,2.755,797,2.755,798,2.755,799,3.264,800,3.813,801,3.813,802,2.755,803,2.755,804,2.755,805,2.755,806,2.755,807,2.755,808,2.755,809,2.755,810,2.755,811,2.755,812,2.019,813,2.755,814,3.384,815,2.132,816,2.132,817,2.755,818,2.755,819,2.755,820,2.755,821,1.679,822,1.925,823,1.609,824,2.755,825,4.719,826,2.755,827,1.319,828,2.755,829,4.719,830,2.755,831,2.951,832,2.755,833,2.951,834,2.755,835,2.755,836,4.373,837,1.609,838,2.755,839,2.755,840,2.554,841,2.227,842,2.755,843,1.27,844,1.925,845,2.428,846,3.813,847,2.132,848,1.265,849,1.836,850,2.755,851,1.45,852,2.755,853,2.755,854,2.132,855,2.755,856,2.755,857,2.755,858,2.755,859,2.785,860,4.373,861,4.373,862,4.373,863,3.211,864,4.719,865,2.755,866,2.755,867,4.719,868,2.755,869,2.755,870,2.755,871,3.813,872,2.755,873,2.755,874,2.755,875,2.755,876,1.946,877,2.755,878,2.755,879,2.755,880,2.8,881,2.755,882,2.755,883,3.211,884,2.755,885,2.755,886,3.211,887,2.755,888,2.755,889,2.023,890,2.755,891,2.755,892,2.755,893,2.755,894,2.755,895,2.755,896,2.755,897,1.925,898,1.679,899,2.755,900,2.255,901,2.755,902,1.609]],["title/interfaces/ValidationOuverture.html",[189,0.303,912,2.466]],["body/interfaces/ValidationOuverture.html",[3,0.126,4,0.126,7,0.111,11,0.596,15,0.095,16,0.214,22,0.015,27,0.428,29,0.261,32,0.19,33,0.08,49,0.459,57,0.681,68,0.01,69,0.01,70,0.62,74,0.226,75,0.673,76,0.26,77,0.98,78,0.489,80,0.572,82,0.878,105,1.676,108,0.2,111,1.362,112,0.481,113,2.604,114,0.415,116,3.233,120,0.616,122,0.611,128,1.063,135,0.215,138,1.374,139,1.611,147,1.676,149,0.415,150,0.785,151,0.785,152,0.985,154,0.945,157,0.353,164,0.67,173,0.594,174,0.985,175,0.846,177,0.548,182,0.296,183,1.844,184,1.844,186,0.673,188,1.589,189,0.59,190,0.224,191,0.756,197,3.273,198,2.437,202,0.621,203,1.092,206,1.362,207,1.362,208,1.205,210,1.968,212,0.372,215,0.386,222,1.398,223,3.022,229,2.417,230,1.042,232,0.353,234,1.968,239,0.98,240,0.911,256,1.285,257,2.887,258,1.8,259,1.8,276,0.815,278,1.649,286,1.35,310,0.395,315,2.417,324,0.807,325,0.993,326,0.993,327,0.993,328,0.807,329,0.807,330,0.948,332,2.707,335,0.841,339,0.479,341,2.208,356,1.299,364,0.316,378,0.728,415,2.286,590,1.092,665,1.589,726,1.064,739,2.068,740,2.286,741,3.509,742,3.509,744,4.051,747,1.172,750,2.845,751,2.965,755,1.989,756,1.528,758,2.286,770,2.286,777,1.881,791,2.286,793,2.286,799,3.233,812,1.711,814,2.286,815,2.286,816,2.286,831,3.095,833,3.095,837,1.725,840,2.336,841,1.725,847,2.286,848,1.326,854,2.286,859,2.547,876,1.649,903,3.476,904,2.743,905,4.859,906,2.547,907,3.78,908,1.341,909,1.797,910,4.413,911,2.794,912,3.941,913,2.567,914,4.859,915,4.859,916,4.534,917,4.534,918,2.241,919,1.725,920,2.953,921,2.953,922,3.999,923,2.953,924,2.953,925,2.953,926,2.953,927,2.953,928,2.953,929,2.953,930,2.953,931,3.999,932,3.999,933,3.999,934,2.953,935,2.953,936,4.534,937,2.953,938,2.953,939,2.953,940,4.534,941,4.859,942,2.953,943,2.953,944,2.953,945,2.953,946,2.953,947,1.803,948,2.567,949,2.953,950,2.953,951,2.953,952,1.94,953,2.953,954,2.953,955,2.794,956,2.953,957,3.999,958,3.273,959,2.953,960,2.953,961,2.953,962,2.953,963,2.794,964,2.953,965,2.567,966,1.655,967,1.589,968,2.743,969,2.937,970,1.589,971,2.286,972,2.953,973,2.953,974,2.953,975,2.953,976,2.953,977,2.953,978,2.064,979,2.953,980,3.941,981,5.077,982,4.534,983,2.953,984,3.999,985,3.999,986,3.999,987,2.953,988,2.953,989,2.953,990,1.589,991,2.953,992,2.547,993,1.881,994,2.953,995,5.077,996,2.953,997,2.953,998,2.953,999,2.953,1000,2.953,1001,2.953,1002,2.953,1003,2.953,1004,2.953,1005,4.534,1006,2.937,1007,2.953,1008,2.953,1009,2.953,1010,2.953,1011,2.953,1012,2.953,1013,2.953,1014,2.953,1015,2.953,1016,2.953,1017,2.953,1018,2.068,1019,2.953,1020,2.953,1021,2.953,1022,2.953,1023,2.953,1024,2.953]],["title/interfaces/ValidationResult.html",[189,0.303,2661,2.195]],["body/interfaces/ValidationResult.html",[3,0.105,4,0.105,7,0.092,11,0.497,15,0.079,16,0.189,22,0.015,27,0.389,29,0.217,32,0.185,33,0.067,40,2.352,49,0.5,55,0.625,57,0.593,68,0.008,69,0.008,70,0.546,74,0.423,75,0.561,76,0.315,78,0.577,80,0.477,82,0.92,108,0.178,111,1.135,112,0.468,113,2.047,114,0.495,115,0.766,118,0.787,120,0.569,122,0.611,134,1.501,135,0.219,136,1.76,138,1.106,139,1.757,149,0.346,150,0.655,151,0.655,152,0.868,154,1.436,157,0.301,162,1.568,164,0.702,166,1.351,167,0.91,173,0.561,174,0.868,177,0.457,181,0.363,182,0.311,186,0.561,189,0.581,190,0.223,202,0.518,203,0.91,212,0.348,215,0.38,230,0.999,232,0.311,237,1.016,256,0.539,275,1.66,276,0.68,282,1.135,286,1.495,287,1.568,300,1.568,301,1.568,302,1.11,303,0.787,304,1.127,305,1.054,306,0.787,307,1.438,308,0.518,310,0.329,315,2.589,319,2.739,339,0.572,340,2.4,342,0.68,345,1.135,348,0.92,355,1.168,356,1.361,359,1.721,364,0.481,366,0.759,368,0.878,370,0.979,371,0.945,378,0.607,414,1.721,502,4.036,513,0.972,568,4.165,592,2.587,653,1.38,747,1.204,748,1.225,750,1.38,751,1.438,755,1.225,780,2.323,822,3.637,823,2.623,837,2.973,840,2.058,841,2.058,843,1.624,844,1.721,845,2.62,848,1.364,849,1.641,851,1.576,897,2.875,908,1.135,909,0.91,911,1.721,918,2.663,952,2.227,992,2.86,993,3.026,1018,1.822,1040,1.016,1055,2.557,1107,2.852,1139,1.687,1141,1.624,1143,1.274,1145,0.561,1156,0.655,1163,2.234,1179,1.896,1187,1.325,1343,2.587,1345,3.822,1346,1.808,1347,2.587,1348,1.808,1349,3.489,1366,2.742,1369,1.808,1374,3.021,1375,1.808,1384,3.021,1429,1.808,1436,1.808,1437,1.808,1450,1.808,1458,1.808,1459,1.808,1460,1.808,1461,1.808,1462,1.808,1463,2.587,1471,1.808,1472,1.808,1473,1.808,1475,1.808,1502,1.568,1537,1.501,1728,3.663,1738,1.325,1801,1.641,1823,2.147,1911,2.244,2305,2.462,2373,1.721,2648,2.883,2656,4.028,2657,2.015,2658,3.063,2659,4.424,2660,2.14,2661,4.101,2662,4.778,2663,4.778,2664,4.028,2665,5.002,2666,4.424,2667,3.184,2668,4.778,2669,4.297,2670,2.14,2671,3.576,2672,3.576,2673,2.14,2674,3.063,2675,3.184,2676,4.606,2677,3.903,2678,3.903,2679,3.903,2680,3.903,2681,3.576,2682,2.14,2683,2.14,2684,2.14,2685,2.14,2686,2.14,2687,3.903,2688,2.14,2689,2.14,2690,2.14,2691,3.063,2692,2.883,2693,2.883,2694,2.14,2695,2.14,2696,2.14,2697,3.576,2698,3.903,2699,2.14,2700,2.14,2701,3.063,2702,2.14,2703,2.883,2704,3.063,2705,2.14,2706,2.015,2707,3.063,2708,2.14,2709,3.063,2710,2.14,2711,2.14,2712,2.14,2713,2.14,2714,2.14,2715,2.015,2716,2.14,2717,2.14,2718,2.14,2719,2.14,2720,2.14,2721,2.14,2722,2.14,2723,2.14,2724,2.14,2725,3.063,2726,2.14,2727,2.14,2728,2.015,2729,2.14,2730,3.903,2731,4.297,2732,3.576,2733,3.063,2734,3.063,2735,2.14,2736,2.14,2737,4.424,2738,2.14,2739,2.14,2740,2.14,2741,2.14,2742,2.14,2743,2.14,2744,2.14,2745,2.14,2746,2.14,2747,2.14,2748,2.14,2749,2.14,2750,2.14,2751,2.14,2752,2.14,2753,3.063,2754,2.14,2755,3.576,2756,4.524,2757,3.903,2758,2.14,2759,2.14,2760,2.14,2761,2.14,2762,2.14,2763,3.903,2764,2.14,2765,2.14,2766,3.063,2767,2.14,2768,2.14,2769,3.576,2770,2.14,2771,3.063,2772,3.063,2773,2.14,2774,2.14,2775,2.14,2776,2.14,2777,2.14,2778,2.14,2779,2.14,2780,3.903,2781,3.576,2782,2.14,2783,2.14,2784,2.14,2785,2.14,2786,2.14,2787,2.14,2788,2.14,2789,3.576,2790,2.14,2791,3.063,2792,2.14,2793,3.063,2794,2.14,2795,2.14,2796,2.14,2797,2.14,2798,2.14,2799,2.14,2800,4.297,2801,3.576,2802,3.576,2803,3.063,2804,3.576,2805,2.14,2806,2.14,2807,2.14,2808,3.576,2809,2.14,2810,3.903,2811,2.14,2812,3.063,2813,2.14,2814,2.14,2815,2.14,2816,2.14,2817,2.14,2818,2.14,2819,2.14,2820,2.14,2821,3.063,2822,2.14,2823,2.14,2824,3.063,2825,2.14,2826,2.14,2827,2.14,2828,2.14,2829,2.14,2830,2.14,2831,2.14,2832,2.14,2833,2.14,2834,2.14,2835,3.063,2836,3.063]],["title/interfaces/ValidationRule.html",[189,0.303,2667,2.195]],["body/interfaces/ValidationRule.html",[3,0.104,4,0.104,7,0.092,11,0.493,15,0.079,16,0.188,22,0.015,27,0.387,29,0.216,32,0.185,33,0.066,40,2.403,49,0.513,55,0.624,57,0.592,68,0.008,69,0.008,70,0.543,74,0.431,75,0.557,76,0.315,78,0.577,80,0.473,82,0.917,108,0.185,111,1.126,112,0.467,113,2.038,114,0.493,115,0.764,118,0.781,120,0.567,122,0.623,134,1.489,135,0.218,136,1.753,138,1.102,139,1.684,149,0.343,150,0.65,151,0.65,152,0.863,154,1.431,157,0.3,162,1.556,164,0.7,166,1.343,167,0.904,173,0.559,174,0.863,177,0.453,181,0.362,182,0.311,186,0.557,189,0.58,190,0.222,202,0.514,203,0.904,212,0.348,215,0.38,230,0.998,232,0.309,237,1.008,256,0.535,275,1.655,276,0.674,282,1.126,286,1.493,287,1.556,300,1.556,301,1.556,302,1.108,303,0.781,304,1.121,305,1.046,306,0.781,307,1.427,308,0.514,310,0.326,315,2.357,319,2.733,339,0.569,340,2.395,342,0.674,345,1.126,348,0.917,355,1.162,356,1.357,359,1.708,364,0.479,366,0.753,368,0.871,370,0.972,371,0.941,378,0.602,414,1.708,502,4.124,513,0.967,568,4.156,592,1.794,653,1.369,747,1.23,748,1.216,750,1.369,751,1.427,755,1.216,780,2.315,822,3.63,823,2.614,837,2.966,840,2.047,841,2.047,843,1.615,844,1.708,845,2.609,848,1.359,849,1.629,851,1.571,897,2.863,908,1.131,909,0.904,911,1.708,918,2.655,952,2.223,992,2.85,993,3.017,1018,1.812,1040,1.008,1055,2.55,1107,2.845,1139,1.678,1141,1.615,1143,1.264,1145,0.557,1156,0.65,1163,2.226,1179,1.886,1187,1.315,1343,2.573,1345,3.479,1346,1.794,1347,2.573,1348,1.794,1349,3.479,1366,2.73,1369,1.794,1374,3.008,1375,1.794,1384,3.008,1429,1.794,1436,1.794,1437,1.794,1450,1.794,1458,1.794,1459,1.794,1460,1.794,1461,1.794,1462,1.794,1463,2.573,1471,1.794,1472,1.794,1473,1.794,1475,1.794,1502,1.556,1537,1.489,1728,3.743,1738,1.315,1801,1.629,1823,2.136,1911,2.231,2305,2.448,2373,1.708,2648,2.868,2656,3.815,2657,2,2658,3.046,2659,4.414,2660,2.124,2661,4.02,2662,4.597,2663,4.597,2664,3.815,2665,4.935,2666,4.515,2667,3.463,2668,4.882,2669,4.515,2670,3.561,2671,4.118,2672,4.118,2673,2.124,2674,3.046,2675,3.17,2676,4.597,2677,3.89,2678,3.89,2679,3.89,2680,3.89,2681,3.561,2682,2.124,2683,2.124,2684,2.124,2685,2.124,2686,2.124,2687,3.89,2688,2.124,2689,2.124,2690,2.124,2691,3.046,2692,2.868,2693,2.868,2694,2.124,2695,2.124,2696,2.124,2697,3.561,2698,3.89,2699,2.124,2700,2.124,2701,3.046,2702,2.124,2703,2.868,2704,3.046,2705,2.124,2706,2,2707,3.046,2708,2.124,2709,3.046,2710,2.124,2711,2.124,2712,2.124,2713,2.124,2714,2.124,2715,2,2716,2.124,2717,2.124,2718,2.124,2719,2.124,2720,2.124,2721,2.124,2722,2.124,2723,2.124,2724,2.124,2725,3.046,2726,2.124,2727,2.124,2728,2,2729,2.124,2730,3.89,2731,4.285,2732,3.561,2733,3.046,2734,3.046,2735,2.124,2736,2.124,2737,4.414,2738,2.124,2739,2.124,2740,2.124,2741,2.124,2742,2.124,2743,2.124,2744,2.124,2745,2.124,2746,2.124,2747,2.124,2748,2.124,2749,2.124,2750,2.124,2751,2.124,2752,2.124,2753,3.046,2754,2.124,2755,3.561,2756,4.515,2757,3.89,2758,2.124,2759,2.124,2760,2.124,2761,2.124,2762,2.124,2763,3.89,2764,2.124,2765,2.124,2766,3.046,2767,2.124,2768,2.124,2769,3.561,2770,2.124,2771,3.046,2772,3.046,2773,2.124,2774,2.124,2775,2.124,2776,2.124,2777,2.124,2778,2.124,2779,2.124,2780,3.89,2781,3.561,2782,2.124,2783,2.124,2784,2.124,2785,2.124,2786,2.124,2787,2.124,2788,2.124,2789,3.561,2790,2.124,2791,3.046,2792,2.124,2793,3.046,2794,2.124,2795,2.124,2796,2.124,2797,2.124,2798,2.124,2799,2.124,2800,4.285,2801,3.561,2802,3.561,2803,3.046,2804,3.561,2805,2.124,2806,2.124,2807,2.124,2808,3.561,2809,2.124,2810,3.89,2811,2.124,2812,3.046,2813,2.124,2814,2.124,2815,2.124,2816,2.124,2817,2.124,2818,2.124,2819,2.124,2820,2.124,2821,3.046,2822,2.124,2823,2.124,2824,3.046,2825,2.124,2826,2.124,2827,2.124,2828,2.124,2829,2.124,2830,2.124,2831,2.124,2832,2.124,2833,2.124,2834,2.124,2835,3.046,2836,3.046]],["title/injectables/ValidationService.html",[70,0.439,1502,1.806]],["body/injectables/ValidationService.html",[3,0.097,4,0.097,7,0.085,11,0.457,15,0.073,16,0.178,20,2.233,21,2.067,22,0.015,25,3.052,27,0.37,29,0.2,32,0.18,33,0.061,40,2.427,49,0.49,55,0.611,57,0.577,68,0.008,69,0.008,70,0.514,72,1.852,74,0.417,75,0.755,76,0.316,78,0.576,80,0.759,82,1.074,84,1.858,103,0.868,107,3.023,108,0.194,109,2.375,111,1.043,112,0.458,113,1.951,114,0.466,115,0.744,118,1.06,119,2.272,120,0.645,122,0.622,134,2.02,135,0.22,136,1.967,138,1.253,139,1.645,149,0.466,150,0.881,151,0.881,152,0.966,154,1.586,157,0.272,162,2.111,164,0.638,166,1.504,167,1.226,173,0.563,174,0.966,177,0.42,181,0.346,182,0.311,186,0.516,189,0.564,190,0.212,202,0.476,203,0.837,212,0.342,215,0.377,230,0.986,232,0.293,237,0.934,256,0.726,275,1.699,276,0.625,282,1.043,286,1.514,287,1.441,300,1.441,301,1.441,302,1.092,303,0.724,304,1.06,305,0.969,306,0.724,307,1.322,308,0.476,315,2.286,319,2.67,339,0.538,340,2.345,342,0.625,345,1.043,348,0.89,355,1.099,356,1.316,359,1.582,364,0.492,366,0.698,368,0.807,370,0.9,371,1.01,378,0.558,414,1.582,502,3.972,513,0.915,568,4.06,592,1.662,653,1.268,747,1.184,748,1.126,750,1.268,751,1.322,755,1.649,780,2.233,822,3.555,823,2.522,837,3.123,840,1.936,841,1.936,843,1.528,844,1.582,845,2.498,848,1.301,849,1.509,851,1.524,897,2.741,908,1.082,909,0.837,911,1.582,918,2.575,952,2.257,992,2.75,993,2.927,1018,1.715,1040,0.934,1055,2.484,1107,2.78,1139,1.587,1141,1.528,1143,1.171,1145,0.516,1156,0.602,1163,2.148,1179,1.784,1187,1.218,1343,2.434,1345,3.375,1346,1.662,1347,2.434,1348,1.662,1349,3.375,1366,3.2,1369,2.88,1374,3.375,1375,2.434,1384,2.88,1429,3.171,1436,1.662,1437,1.662,1450,1.662,1458,3.171,1459,1.662,1460,3.171,1461,1.662,1462,2.434,1463,3.171,1471,1.662,1472,1.662,1473,1.662,1475,1.662,1502,2.111,1537,1.38,1728,3.604,1738,1.784,1801,2.209,1823,2.02,1911,2.111,2305,2.316,2373,1.582,2648,3.21,2656,3.716,2657,1.852,2658,2.881,2659,4.312,2660,1.968,2661,4.262,2662,4.511,2663,4.511,2664,3.716,2665,4.882,2666,4.511,2667,3.557,2668,4.701,2669,4.312,2670,1.968,2671,3.409,2672,3.409,2673,1.968,2674,3.409,2675,3.341,2676,4.585,2677,3.995,2678,3.995,2679,3.995,2680,3.995,2681,3.753,2682,3.409,2683,3.409,2684,1.968,2685,1.968,2686,3.753,2687,3.753,2688,1.968,2689,1.968,2690,1.968,2691,2.881,2692,2.713,2693,2.713,2694,1.968,2695,1.968,2696,1.968,2697,3.409,2698,3.753,2699,1.968,2700,1.968,2701,2.881,2702,1.968,2703,2.713,2704,2.881,2705,1.968,2706,1.852,2707,2.881,2708,1.968,2709,2.881,2710,1.968,2711,1.968,2712,1.968,2713,1.968,2714,1.968,2715,1.852,2716,1.968,2717,1.968,2718,1.968,2719,1.968,2720,1.968,2721,1.968,2722,1.968,2723,1.968,2724,1.968,2725,2.881,2726,1.968,2727,1.968,2728,2.713,2729,2.881,2730,3.753,2731,4.174,2732,3.409,2733,2.881,2734,3.409,2735,1.968,2736,1.968,2737,4.648,2738,1.968,2739,1.968,2740,1.968,2741,1.968,2742,1.968,2743,1.968,2744,1.968,2745,1.968,2746,1.968,2747,1.968,2748,1.968,2749,1.968,2750,1.968,2751,1.968,2752,1.968,2753,2.881,2754,1.968,2755,3.409,2756,4.422,2757,3.753,2758,1.968,2759,1.968,2760,1.968,2761,2.881,2762,1.968,2763,3.753,2764,1.968,2765,1.968,2766,2.881,2767,1.968,2768,1.968,2769,3.409,2770,2.881,2771,2.881,2772,2.881,2773,1.968,2774,1.968,2775,1.968,2776,1.968,2777,1.968,2778,1.968,2779,2.881,2780,3.753,2781,3.409,2782,1.968,2783,1.968,2784,1.968,2785,1.968,2786,1.968,2787,1.968,2788,1.968,2789,3.409,2790,1.968,2791,2.881,2792,1.968,2793,2.881,2794,1.968,2795,1.968,2796,1.968,2797,1.968,2798,3.753,2799,2.881,2800,4.174,2801,3.409,2802,3.409,2803,3.409,2804,3.409,2805,1.968,2806,1.968,2807,1.968,2808,3.995,2809,3.753,2810,3.753,2811,1.968,2812,2.881,2813,1.968,2814,1.968,2815,1.968,2816,1.968,2817,1.968,2818,1.968,2819,1.968,2820,1.968,2821,2.881,2822,1.968,2823,1.968,2824,2.881,2825,1.968,2826,1.968,2827,1.968,2828,3.753,2829,1.968,2830,1.968,2831,3.753,2832,1.968,2833,1.968,2834,2.881,2835,2.881,2836,2.881,2837,4.609,2838,4.609,2839,4.609,2840,4.609,2841,4.609,2842,4.609,2843,3.147,2844,4.609,2845,3.147,2846,3.147,2847,3.147,2848,3.147,2849,3.147,2850,3.147,2851,3.147,2852,3.147,2853,3.147,2854,3.147,2855,3.147,2856,3.147,2857,4.609,2858,3.147,2859,3.147,2860,3.147,2861,3.147,2862,3.147,2863,3.147,2864,3.147]],["title/interfaces/ValidationStats.html",[189,0.303,2675,2.195]],["body/interfaces/ValidationStats.html",[3,0.105,4,0.105,7,0.092,11,0.495,15,0.079,16,0.188,22,0.015,27,0.388,29,0.217,32,0.185,33,0.066,40,2.35,49,0.5,55,0.624,57,0.593,68,0.008,69,0.008,70,0.544,74,0.423,75,0.559,76,0.315,78,0.577,80,0.475,82,0.919,108,0.185,111,1.131,112,0.468,113,2.042,114,0.494,115,0.765,118,0.785,120,0.568,122,0.611,134,1.495,135,0.218,136,1.757,138,1.104,139,1.756,149,0.345,150,0.652,151,0.652,152,0.866,154,1.517,157,0.322,162,1.562,164,0.606,166,1.347,167,0.907,173,0.56,174,0.866,177,0.455,181,0.363,182,0.311,186,0.559,189,0.581,190,0.222,202,0.516,203,0.907,212,0.348,215,0.38,230,0.998,232,0.31,237,1.012,256,0.537,275,1.825,276,0.677,282,1.131,286,1.494,287,1.562,300,1.562,301,1.562,302,1.109,303,0.785,304,1.124,305,1.05,306,0.785,307,1.433,308,0.516,310,0.328,315,2.36,319,2.736,339,0.57,340,2.397,342,0.677,345,1.131,348,0.919,355,1.165,356,1.359,359,1.714,364,0.48,366,0.756,368,0.875,370,0.976,371,0.943,378,0.604,414,1.714,502,4.034,513,0.97,568,4.16,592,1.802,653,1.375,747,1.203,748,1.221,750,1.375,751,1.433,755,1.221,780,2.69,822,3.634,823,2.618,837,2.969,840,2.052,841,2.052,843,1.62,844,1.714,845,2.615,848,1.362,849,1.635,851,1.574,897,2.869,908,1.133,909,0.907,911,1.714,918,2.659,952,2.225,992,2.855,993,3.022,1018,1.818,1040,1.012,1055,2.553,1107,2.849,1139,1.682,1141,1.62,1143,1.269,1145,0.559,1156,0.652,1163,2.23,1179,1.891,1187,1.32,1343,2.581,1345,3.484,1346,1.802,1347,2.581,1348,1.802,1349,3.484,1366,2.736,1369,1.802,1374,3.015,1375,1.802,1384,3.015,1429,1.802,1436,1.802,1437,1.802,1450,1.802,1458,1.802,1459,1.802,1460,1.802,1461,1.802,1462,1.802,1463,2.581,1471,1.802,1472,1.802,1473,1.802,1475,1.802,1502,1.562,1537,1.495,1728,3.661,1738,1.32,1801,1.635,1823,2.142,1911,2.238,2305,2.456,2373,1.714,2648,2.876,2656,3.821,2657,2.008,2658,3.054,2659,4.419,2660,2.133,2661,4.024,2662,4.602,2663,4.602,2664,3.821,2665,4.938,2666,4.419,2667,3.177,2668,4.775,2669,4.291,2670,2.133,2671,3.569,2672,3.569,2673,2.133,2674,3.054,2675,3.469,2676,4.775,2677,4.419,2678,4.419,2679,4.419,2680,4.419,2681,4.291,2682,2.133,2683,2.133,2684,2.133,2685,2.133,2686,2.133,2687,3.897,2688,2.133,2689,2.133,2690,2.133,2691,3.054,2692,2.876,2693,2.876,2694,2.133,2695,2.133,2696,2.133,2697,3.569,2698,3.897,2699,2.133,2700,2.133,2701,3.054,2702,2.133,2703,2.876,2704,3.054,2705,2.133,2706,2.008,2707,3.054,2708,2.133,2709,3.054,2710,2.133,2711,2.133,2712,2.133,2713,2.133,2714,2.133,2715,2.008,2716,2.133,2717,2.133,2718,2.133,2719,2.133,2720,2.133,2721,2.133,2722,2.133,2723,2.133,2724,2.133,2725,3.054,2726,2.133,2727,2.133,2728,2.008,2729,2.133,2730,3.897,2731,4.291,2732,3.569,2733,3.054,2734,3.054,2735,2.133,2736,2.133,2737,4.419,2738,2.133,2739,2.133,2740,2.133,2741,2.133,2742,2.133,2743,2.133,2744,2.133,2745,2.133,2746,2.133,2747,2.133,2748,2.133,2749,2.133,2750,2.133,2751,2.133,2752,2.133,2753,3.054,2754,2.133,2755,3.569,2756,4.52,2757,3.897,2758,2.133,2759,2.133,2760,2.133,2761,2.133,2762,2.133,2763,3.897,2764,2.133,2765,2.133,2766,3.054,2767,2.133,2768,2.133,2769,3.569,2770,2.133,2771,3.054,2772,3.054,2773,2.133,2774,2.133,2775,2.133,2776,2.133,2777,2.133,2778,2.133,2779,2.133,2780,3.897,2781,3.569,2782,2.133,2783,2.133,2784,2.133,2785,2.133,2786,2.133,2787,2.133,2788,2.133,2789,3.569,2790,2.133,2791,3.054,2792,2.133,2793,3.054,2794,2.133,2795,2.133,2796,2.133,2797,2.133,2798,2.133,2799,2.133,2800,4.291,2801,3.569,2802,3.569,2803,3.054,2804,3.569,2805,2.133,2806,2.133,2807,2.133,2808,3.569,2809,2.133,2810,3.897,2811,2.133,2812,3.054,2813,2.133,2814,2.133,2815,2.133,2816,2.133,2817,2.133,2818,2.133,2819,2.133,2820,2.133,2821,3.054,2822,2.133,2823,2.133,2824,3.054,2825,2.133,2826,2.133,2827,2.133,2828,2.133,2829,2.133,2830,2.133,2831,2.133,2832,2.133,2833,2.133,2834,2.133,2835,3.054,2836,3.054]],["title/interfaces/ValidationWarning.html",[189,0.303,2664,2.195]],["body/interfaces/ValidationWarning.html",[3,0.105,4,0.105,7,0.092,11,0.498,15,0.079,16,0.189,22,0.015,27,0.389,29,0.218,32,0.185,33,0.067,40,2.353,49,0.501,55,0.625,57,0.594,68,0.008,69,0.008,70,0.547,74,0.423,75,0.562,76,0.315,78,0.577,80,0.478,82,0.92,108,0.168,109,1.689,111,1.137,112,0.468,113,2.049,114,0.496,115,0.766,118,0.789,120,0.57,122,0.626,134,1.503,135,0.219,136,1.762,138,1.107,139,1.689,149,0.347,150,0.656,151,0.656,152,0.869,154,1.437,157,0.281,162,1.571,164,0.608,166,1.353,167,0.912,173,0.561,174,0.869,177,0.458,181,0.364,182,0.311,186,0.562,189,0.581,190,0.223,202,0.519,203,0.912,212,0.348,215,0.38,230,0.999,232,0.312,237,1.017,256,0.54,275,1.662,276,0.681,282,1.137,286,1.495,287,1.571,300,1.571,301,1.571,302,1.11,303,0.789,304,1.128,305,1.055,306,0.789,307,1.441,308,0.519,310,0.33,315,2.365,319,2.894,339,0.573,340,2.401,342,0.681,345,1.137,348,0.92,355,1.17,356,1.362,359,1.724,364,0.481,366,0.76,368,0.88,370,0.981,371,0.945,378,0.608,414,1.724,502,4.038,513,0.974,568,4.401,592,1.811,653,1.382,747,1.204,748,1.227,750,1.382,751,2.06,755,1.227,780,2.324,822,3.639,823,2.625,837,2.974,840,2.06,841,2.06,843,1.626,844,1.724,845,2.622,848,1.366,849,1.644,851,1.577,897,2.878,908,1.136,909,0.912,911,1.724,918,2.664,952,2.228,992,2.862,993,3.028,1018,1.825,1040,1.017,1055,2.558,1107,3.014,1139,1.689,1141,1.626,1143,1.276,1145,0.562,1156,0.656,1163,2.236,1179,1.898,1187,1.327,1343,2.59,1345,3.492,1346,1.811,1347,2.59,1348,1.811,1349,3.492,1366,2.744,1369,1.811,1374,3.024,1375,1.811,1384,3.024,1429,1.811,1436,1.811,1437,1.811,1450,1.811,1458,1.811,1459,1.811,1460,1.811,1461,1.811,1462,1.811,1463,2.59,1471,1.811,1472,1.811,1473,1.811,1475,1.811,1502,1.571,1537,1.503,1728,3.664,1738,1.327,1801,1.644,1823,2.15,1911,2.246,2305,2.465,2373,1.724,2648,2.887,2656,3.827,2657,2.019,2658,3.066,2659,4.675,2660,2.144,2661,4.03,2662,4.608,2663,4.608,2664,3.941,2665,4.942,2666,4.426,2667,3.187,2668,4.779,2669,4.299,2670,2.144,2671,3.579,2672,3.579,2673,2.144,2674,3.066,2675,3.187,2676,4.608,2677,3.906,2678,3.906,2679,3.906,2680,3.906,2681,3.579,2682,2.144,2683,2.144,2684,2.144,2685,2.144,2686,2.144,2687,3.906,2688,2.144,2689,2.144,2690,2.144,2691,3.066,2692,2.887,2693,2.887,2694,2.144,2695,2.144,2696,2.144,2697,3.579,2698,3.906,2699,2.144,2700,2.144,2701,3.066,2702,2.144,2703,2.887,2704,3.066,2705,2.144,2706,2.019,2707,3.066,2708,2.144,2709,3.066,2710,2.144,2711,2.144,2712,2.144,2713,2.144,2714,2.144,2715,2.019,2716,2.144,2717,2.144,2718,2.144,2719,2.144,2720,2.144,2721,2.144,2722,2.144,2723,2.144,2724,2.144,2725,3.066,2726,2.144,2727,2.144,2728,2.019,2729,2.144,2730,3.906,2731,4.299,2732,3.579,2733,3.066,2734,3.066,2735,2.144,2736,2.144,2737,4.426,2738,2.144,2739,2.144,2740,2.144,2741,2.144,2742,2.144,2743,2.144,2744,2.144,2745,2.144,2746,2.144,2747,2.144,2748,2.144,2749,2.144,2750,2.144,2751,2.144,2752,2.144,2753,3.066,2754,2.144,2755,3.579,2756,4.526,2757,3.906,2758,2.144,2759,2.144,2760,2.144,2761,2.144,2762,2.144,2763,3.906,2764,2.144,2765,2.144,2766,3.066,2767,2.144,2768,2.144,2769,3.579,2770,2.144,2771,3.066,2772,3.066,2773,2.144,2774,2.144,2775,2.144,2776,2.144,2777,2.144,2778,2.144,2779,2.144,2780,3.906,2781,3.579,2782,2.144,2783,2.144,2784,2.144,2785,2.144,2786,2.144,2787,2.144,2788,2.144,2789,3.579,2790,2.144,2791,3.066,2792,2.144,2793,3.066,2794,2.144,2795,2.144,2796,2.144,2797,2.144,2798,2.144,2799,2.144,2800,4.299,2801,3.579,2802,3.579,2803,3.066,2804,3.579,2805,2.144,2806,2.144,2807,2.144,2808,3.579,2809,2.144,2810,3.906,2811,2.144,2812,3.066,2813,2.144,2814,2.144,2815,2.144,2816,2.144,2817,2.144,2818,2.144,2819,2.144,2820,2.144,2821,3.066,2822,2.144,2823,2.144,2824,3.066,2825,2.144,2826,2.144,2827,2.144,2828,2.144,2829,2.144,2830,2.144,2831,2.144,2832,2.144,2833,2.144,2834,2.144,2835,3.066,2836,3.066]],["title/classes/WallCalculations.html",[33,0.077,1226,1.806]],["body/classes/WallCalculations.html",[3,0.094,4,0.139,7,0.083,15,0.071,20,1.141,21,1.056,22,0.015,24,2.122,25,1.751,32,0.196,33,0.06,40,1.392,46,1.72,49,0.528,55,0.571,57,0.571,68,0.008,69,0.008,74,0.295,76,0.32,78,0.495,84,1.823,107,1.983,108,0.201,109,1.558,112,0.517,114,0.639,115,0.762,117,0.975,118,1.236,119,1.759,135,0.193,136,0.944,149,0.31,157,0.345,175,0.932,177,0.604,178,0.759,181,0.377,182,0.316,189,0.54,190,0.22,191,0.833,208,1.414,212,0.211,215,0.349,222,1.315,230,0.392,232,0.402,237,1.876,238,1.203,239,1.675,240,1.517,256,0.996,282,1.5,324,1.19,325,1.31,326,1.294,327,1.273,328,1.115,329,1.115,330,1.309,331,2.185,335,0.897,336,1.04,338,0.846,339,0.627,340,1.781,341,1.876,342,1.525,345,1.781,348,0.63,350,1.759,352,1.107,356,0.632,361,2.377,364,0.602,366,1.003,369,2.599,375,1.838,378,1.12,380,1.056,406,1.289,427,2.257,463,2.165,468,2.896,469,1.236,474,2.7,491,1.823,500,1.236,513,0.609,530,1.236,566,1.017,581,2.168,585,1.236,590,1.577,646,1.187,681,2.036,692,2.9,706,2.779,726,1.232,739,1.683,821,2.599,827,1.558,843,1.966,848,1.079,851,1.632,876,2.163,898,1.345,902,1.9,908,1.485,947,0.877,990,2.447,1025,2.072,1026,2.461,1027,1.017,1028,2.718,1029,1.999,1030,2.355,1031,2.461,1032,1.781,1033,3.078,1034,1.289,1035,3.847,1036,3.325,1037,2.355,1038,1.47,1039,2.7,1040,1.594,1041,1.345,1042,2.389,1043,1.946,1044,2.257,1045,2.273,1046,1.62,1047,1.405,1048,2.448,1049,3.196,1050,2.7,1051,3.325,1052,3.325,1053,2.273,1054,2.7,1055,1.999,1056,2.168,1057,1.9,1058,2.716,1059,2.273,1060,1.62,1061,2.548,1062,2.7,1063,1.62,1064,2.168,1065,2.072,1066,3.031,1067,2.273,1068,2.072,1069,2.273,1070,2.9,1071,1.62,1072,2.273,1073,2.072,1074,2.072,1075,2.072,1076,2.389,1077,1.683,1078,1.542,1079,2.097,1080,1.999,1081,2.561,1082,2.575,1083,2.7,1084,1.62,1085,1.999,1086,2.575,1087,2.575,1088,2.072,1089,2.206,1090,2.389,1091,1.62,1092,2.072,1093,1.62,1094,2.273,1095,2.273,1096,1.236,1097,2.7,1098,2.122,1099,2.389,1100,2.389,1101,1.62,1102,2.072,1103,2.273,1104,1.894,1105,1.823,1106,1.683,1107,1.236,1108,1.62,1109,1.62,1110,1.683,1111,2.168,1112,1.683,1113,1.141,1114,1.542,1115,1.405,1116,1.542,1117,1.542,1118,1.542,1119,1.098,1120,1.683,1121,1.542,1122,2.7,1123,1.289,1124,2.273,1125,1.542,1126,2.273,1127,1.558,1128,1.542,1129,1.236,1130,1.405,1131,1.558,1132,2.273,1133,1.098,1134,2.273,1135,1.542,1136,1.405,1137,1.47,1138,1.542,1139,1.056,1140,2.273,1141,1.017,1142,1.542,1143,1.141,1144,1.751,1145,1.036,1146,1.9,1147,2.273,1148,1.47,1149,1.808,1150,1.542,1151,1.47,1152,1.405,1153,1.542,1154,1.542,1155,1.542,1156,1.134,1157,1.542,1158,3.178,1159,1.542,1160,1.542,1161,1.405,1162,1.187,1163,2.448,1164,1.542,1165,3.178,1166,1.542,1167,1.187,1168,1.017,1169,1.289,1170,1.542,1171,1.542,1172,1.542,1173,1.542,1174,1.405,1175,3.178,1176,2.273,1177,2.98,1178,3.603,1179,2.648,1180,2.7,1181,2.295,1182,1.751,1183,2.273,1184,1.47,1185,1.751,1186,1.887,1187,1.187,1188,1.781,1189,2.273,1190,1.542,1191,2.461,1192,2.036,1193,1.542,1194,1.542,1195,1.542,1196,1.542,1197,1.542,1198,1.405,1199,1.405,1200,1.542,1201,1.187,1202,1.542,1203,2.295,1204,1.405,1205,1.542,1206,1.187,1207,1.542,1208,2.355,1209,1.542,1210,2.273,1211,1.542,1212,0.877,1213,1.542,1214,1.405,1215,1.542,1216,2.7,1217,1.187,1218,1.542,1219,1.542,1220,1.017,1221,1.405,1222,1.542,1223,2.389,1224,2.072,1225,2.389,1226,2.072,1227,3.132,1228,3.325,1229,2.389,1230,3.951,1231,2.389,1232,2.389,1233,2.389,1234,1.62,1235,1.62,1236,1.62,1237,3.85,1238,2.838,1239,2.389,1240,3.34,1241,2.389,1242,2.389,1243,1.9,1244,1.62,1245,1.62,2865,3.068,2866,4.523,2867,4.523,2868,3.068,2869,3.068]],["title/interfaces/WallConfig.html",[189,0.303,1044,1.657]],["body/interfaces/WallConfig.html",[3,0.097,4,0.142,7,0.085,15,0.073,16,0.178,22,0.015,24,2.147,32,0.198,33,0.061,46,1.736,49,0.538,55,0.552,57,0.552,68,0.008,69,0.008,74,0.173,76,0.319,78,0.499,108,0.204,112,0.514,114,0.646,115,0.712,117,0.975,118,1.254,119,1.367,135,0.172,136,0.968,149,0.318,157,0.346,175,0.949,177,0.615,178,0.778,181,0.381,182,0.317,189,0.543,190,0.205,191,1.004,208,1.402,212,0.215,215,0.35,222,1.022,230,0.402,232,0.406,237,1.895,238,1.225,239,1.687,240,1.529,256,0.859,282,1.527,310,0.302,324,1.196,325,1.312,326,1.296,327,1.276,328,1.12,329,1.12,330,1.315,331,2.202,335,0.825,336,0.723,338,0.867,339,0.636,340,1.807,341,1.617,342,1.475,345,1.807,348,0.641,350,1.775,352,1.123,356,0.648,361,2.392,364,0.607,366,1.022,369,2.019,375,1.85,378,1.132,380,1.083,406,1.321,427,2.29,463,2.197,468,2.926,469,1.268,474,2.74,491,1.857,500,1.268,513,0.624,530,1.268,566,1.043,581,2.208,585,1.268,590,1.596,646,1.217,681,2.054,692,2.926,706,2.683,726,1.236,739,1.17,821,2.019,827,1.586,843,1.99,848,1.099,851,1.645,876,2.14,898,1.379,902,1.935,908,1.432,947,0.9,990,2.472,1025,2.11,1026,1.441,1027,1.043,1028,2.737,1029,2.028,1030,2.39,1031,2.497,1032,1.807,1033,3.214,1034,1.321,1035,3.857,1036,3.355,1037,2.8,1038,2.208,1039,2.74,1040,1.617,1041,1.379,1042,2.433,1043,1.966,1044,2.521,1045,2.315,1046,1.661,1047,1.441,1048,2.467,1049,2.926,1050,2.74,1051,3.016,1052,3.016,1053,2.315,1054,2.74,1055,2.028,1056,2.208,1057,1.935,1058,2.749,1059,2.315,1060,1.661,1061,2.575,1062,2.74,1063,1.661,1064,2.208,1065,2.11,1066,3.062,1067,2.315,1068,2.11,1069,2.315,1070,2.926,1071,1.661,1072,2.315,1073,2.11,1074,2.11,1075,2.11,1076,2.433,1077,1.714,1078,1.581,1079,2.118,1080,2.028,1081,2.583,1082,2.613,1083,2.74,1084,1.661,1085,2.028,1086,2.613,1087,2.613,1088,2.11,1089,2.233,1090,2.433,1091,1.661,1092,2.11,1093,1.661,1094,2.315,1095,2.315,1096,1.268,1097,2.74,1098,2.147,1099,2.433,1100,2.433,1101,1.661,1102,2.11,1103,2.315,1104,1.917,1105,1.857,1106,1.714,1107,1.268,1108,1.661,1109,1.661,1110,1.714,1111,2.208,1112,1.714,1113,1.17,1114,1.581,1115,1.441,1116,1.581,1117,1.581,1118,1.581,1119,1.125,1120,1.714,1121,1.581,1122,2.74,1123,1.321,1124,2.315,1125,1.581,1126,2.315,1127,1.586,1128,1.581,1129,1.268,1130,1.441,1131,1.586,1132,2.315,1133,1.125,1134,2.315,1135,1.581,1136,1.441,1137,1.508,1138,1.581,1139,1.083,1140,2.315,1141,1.043,1142,1.581,1143,1.17,1144,1.783,1145,1.047,1146,1.935,1147,2.315,1148,1.508,1149,1.716,1150,1.581,1151,1.508,1152,1.441,1153,1.581,1154,1.581,1155,1.581,1156,1.147,1157,1.581,1158,3.211,1159,1.581,1160,1.581,1161,1.441,1162,1.217,1163,2.388,1164,1.581,1165,3.211,1166,1.581,1167,1.217,1168,1.043,1169,1.321,1170,1.581,1171,1.581,1172,1.581,1173,1.581,1174,1.441,1175,2.74,1176,2.315,1177,3.016,1178,3.554,1179,2.669,1180,2.74,1181,2.323,1182,1.783,1183,2.315,1184,1.508,1185,1.783,1186,1.902,1187,1.217,1188,1.807,1189,2.315,1190,1.581,1191,2.497,1192,2.054,1193,1.581,1194,1.581,1195,1.581,1196,1.581,1197,1.581,1198,1.441,1199,1.441,1200,1.581,1201,1.217,1202,1.581,1203,2.323,1204,1.441,1205,1.581,1206,1.217,1207,1.581,1208,2.39,1209,1.581,1210,2.315,1211,1.581,1212,0.9,1213,1.581,1214,1.441,1215,1.581,1216,2.74,1217,1.217,1218,1.581,1219,1.581,1220,1.043,1221,1.441,1222,1.581,1223,1.661,1224,1.441,1225,1.661,1226,1.441,1227,2.433,1228,2.315,1229,1.661,1230,3.971,1231,2.433,1232,2.433,1233,2.433,1234,1.661,1235,1.661,1236,1.661,1237,3.873,1238,2.879,1239,2.433,1240,2.879,1241,1.661,1242,1.661,1243,1.321,1244,1.661,1245,1.661]],["title/coverage.html",[2870,4.703]],["body/coverage.html",[0,2.071,1,1.72,7,0.135,8,4.342,22,0.015,33,0.097,42,2.394,45,2.288,48,2.189,49,0.339,51,2.288,54,2.288,56,2.288,58,2.394,60,2.394,62,2.51,63,2.288,64,1.933,68,0.011,69,0.011,70,0.894,71,3.123,73,4.987,83,3.336,105,1.328,108,0.135,155,3.336,173,0.408,181,0.317,182,0.301,187,2.394,189,0.652,230,0.808,237,1.875,256,0.787,309,2.638,311,4.868,312,3.971,313,4.868,323,3.123,332,1.858,333,2.394,364,0.384,440,4.342,441,4.342,646,1.933,737,3.123,738,4.868,745,2.288,746,2.394,749,3.123,752,2.013,903,3.123,904,5.022,906,2.288,907,2.394,912,3.123,913,3.123,919,2.098,992,2.288,1025,2.288,1026,3.676,1027,2.661,1033,2.189,1037,2.189,1044,2.098,1049,2.189,1057,2.098,1088,2.288,1102,2.288,1120,1.858,1136,3.338,1145,1.036,1156,0.955,1226,2.288,1246,4.952,1247,4.952,1274,3.592,1339,3.336,1340,5.242,1356,3.336,1359,3.336,1366,2.394,1493,2.638,1498,2.394,1502,2.288,1510,2.51,1511,4.952,1512,4.952,1531,2.51,1599,4.521,1600,2.78,1601,2.78,1695,2.94,1696,4.802,1710,2.94,1721,2.94,1724,2.94,1729,2.94,1811,4.701,1840,4.987,1841,4.004,1842,3.336,1889,4.952,1890,4.952,1948,3.592,1982,4.952,2061,4.952,2124,3.123,2125,5.022,2130,3.123,2152,3.123,2164,3.123,2194,5.36,2195,4.222,2272,5.13,2382,4.342,2383,4.342,2556,4.952,2656,2.78,2657,4.521,2661,2.78,2664,2.78,2667,2.78,2675,2.78,2703,4.082,2706,4.082,2870,4.342,2871,4.342,2872,4.995,2873,4.995,2874,4.342,2875,6.935,2876,4.342,2877,6.321,2878,4.342,2879,3.592,2880,4.995,2881,4.995,2882,6.935,2883,7.289,2884,6.321,2885,8.026,2886,7.519,2887,4.995,2888,4.995,2889,6.678,2890,7.681,2891,4.995,2892,4.995,2893,4.995,2894,4.995,2895,4.995,2896,4.995,2897,4.995,2898,4.995,2899,6.321,2900,6.321,2901,7.681,2902,4.995,2903,4.995,2904,4.995,2905,4.995,2906,4.995,2907,4.995,2908,4.995,2909,4.995,2910,4.995,2911,4.995,2912,7.966,2913,7.966,2914,4.995,2915,4.995,2916,4.995,2917,4.995,2918,6.321,2919,4.995,2920,6.321,2921,4.995,2922,4.995,2923,4.995,2924,4.995,2925,4.995,2926,4.995,2927,4.995,2928,4.995]],["title/dependencies.html",[2929,2.853,2930,4.13]],["body/dependencies.html",[22,0.014,29,0.41,30,5.607,68,0.013,69,0.013,186,1.057,642,2.496,643,2.599,2455,5.607,2930,5.607,2931,8.152,2932,6.449,2933,6.449,2934,6.449,2935,6.449,2936,7.373,2937,6.449,2938,6.449,2939,6.449,2940,6.449,2941,6.449]],["title/index.html",[15,0.091,2942,3.944]],["body/index.html",[0,1.273,1,1.709,2,2.379,22,0.015,24,2.821,31,4.618,32,0.134,43,3.437,49,0.521,52,2,55,0.597,57,0.673,58,2.379,64,1.921,68,0.011,69,0.011,76,0.321,77,1.502,78,0.576,79,3.569,105,1.32,112,0.462,114,0.788,115,0.553,117,0.952,118,1.673,128,0.949,135,0.17,142,3.569,143,3.486,149,0.735,167,1.32,173,0.405,175,1.297,177,0.662,178,1.228,181,0.315,186,0.813,189,0.484,190,0.24,207,1.646,208,1.489,215,0.231,222,1.101,232,0.315,239,1.502,240,1.101,286,0.949,333,2.379,334,3.315,339,0.735,348,0.877,350,1.32,353,2.762,356,1.58,364,0.485,370,1.801,388,2.437,393,3.103,417,2.921,579,4.315,580,4.315,590,1.32,646,1.921,665,1.921,706,2.085,750,2.787,812,1.527,827,1.709,845,3.167,918,2.537,992,2.273,1018,2.853,1026,2.273,1027,2.488,1029,2.342,1040,1.472,1079,2.293,1111,2.379,1113,1.846,1145,0.813,1149,1.419,1156,0.949,1184,2.379,1212,1.801,1248,2.787,1314,3.936,1330,5.474,1354,3.569,1355,4.857,1445,4.07,1479,3.569,1495,3.103,1498,2.379,1513,3.325,1516,3.841,1518,4.932,1543,3.325,1551,2.621,1590,3.888,1597,5.417,1606,3.706,1738,1.921,1823,2.76,1844,4.973,2385,5.474,2388,5.474,2475,5.474,2490,4.315,2692,2.921,2693,2.921,2715,3.706,2728,2.921,2871,5.474,2943,6.915,2944,6.296,2945,6.296,2946,6.296,2947,4.963,2948,7.272,2949,4.963,2950,4.963,2951,4.963,2952,4.963,2953,4.963,2954,6.915,2955,7.505,2956,4.963,2957,4.963,2958,4.963,2959,4.963,2960,4.963,2961,4.963,2962,6.296,2963,4.963,2964,4.963,2965,4.963,2966,4.963,2967,4.963,2968,6.296,2969,4.963,2970,4.963,2971,4.963,2972,4.963,2973,4.963,2974,6.296,2975,4.963,2976,4.963,2977,4.963,2978,4.963,2979,4.963,2980,4.963,2981,4.963,2982,4.963,2983,6.296,2984,4.963,2985,4.963,2986,4.963,2987,4.963,2988,4.963,2989,4.963,2990,4.963,2991,6.296,2992,4.963,2993,4.963,2994,4.963,2995,4.963,2996,4.963,2997,4.963,2998,4.963,2999,4.963,3000,6.915,3001,4.963,3002,4.963,3003,4.963,3004,4.963,3005,6.915,3006,4.963,3007,6.296,3008,6.296,3009,4.963,3010,4.963,3011,4.963,3012,4.963,3013,4.963,3014,4.963,3015,6.296,3016,6.296,3017,4.963,3018,4.963,3019,6.915,3020,4.963,3021,4.963,3022,4.963,3023,4.963,3024,4.963,3025,4.963,3026,4.963,3027,4.963,3028,4.963,3029,4.963,3030,4.963,3031,4.963,3032,4.963,3033,4.963,3034,4.963,3035,4.963,3036,4.963,3037,4.963,3038,4.963,3039,4.963,3040,4.963]],["title/modules.html",[3041,4.703]],["body/modules.html",[22,0.013,68,0.013,69,0.013,3041,5.73]],["title/overview.html",[3042,4.703]],["body/overview.html",[2,3.141,22,0.013,33,0.128,68,0.013,69,0.013,72,3.857,181,0.416,182,0.253,310,0.63,513,1.301,851,1.563,2889,5.697,3042,5.697]],["title/properties.html",[16,0.183,2929,2.853]],["body/properties.html",[16,0.254,22,0.013,68,0.013,69,0.013,3043,6.578,3044,6.578]],["title/routes.html",[2879,3.89]],["body/routes.html",[22,0.013,68,0.013,69,0.013,2879,4.74]],["title/miscellaneous/variables.html",[3045,2.853,3046,4.13]],["body/miscellaneous/variables.html",[15,0.093,20,2.314,21,2.142,22,0.015,24,1.955,43,1.833,46,1.729,49,0.533,55,0.577,57,0.472,68,0.009,69,0.009,71,2.502,76,0.298,78,0.484,105,1.064,108,0.208,112,0.395,114,0.552,115,0.609,117,0.932,118,1.431,135,0.108,136,1.232,175,0.825,177,0.534,178,0.99,181,0.395,182,0.32,190,0.206,208,0.765,215,0.344,230,0.511,232,0.395,237,2.076,238,1.453,239,1.594,240,1.379,289,2.502,312,2.114,324,1.185,325,1.318,326,1.298,327,1.298,328,1.148,329,1.148,330,1.348,331,2.235,333,1.918,338,1.104,340,1.327,342,1.235,345,1.327,350,1.921,352,1.282,361,2.53,364,0.587,366,1.212,375,1.957,378,1.24,380,1.378,406,1.681,427,2.295,463,1.613,469,1.613,491,1.613,500,1.613,513,0.794,530,1.613,566,1.327,581,1.918,590,1.064,646,2.115,681,2.223,692,2.93,706,2.295,726,1.227,752,1.613,827,1.881,843,2.216,848,1.303,851,1.763,876,1.845,902,2.295,908,1.085,919,1.681,947,1.145,990,2.708,1025,1.833,1026,1.833,1027,1.811,1028,2.115,1029,1.489,1030,1.754,1031,1.833,1032,1.327,1036,3.126,1039,2.011,1040,1.187,1043,2.057,1044,2.295,1048,2.392,1050,2.011,1051,2.011,1052,2.011,1053,2.011,1054,2.011,1055,2.032,1056,1.918,1057,1.681,1058,2.849,1059,2.011,1061,2.507,1062,2.746,1064,1.918,1065,1.833,1066,2.619,1067,2.011,1068,1.833,1069,2.011,1070,2.93,1072,2.011,1073,1.833,1074,1.833,1075,1.833,1077,1.489,1079,1.811,1080,1.489,1081,2.115,1082,1.918,1083,2.746,1085,1.489,1086,1.918,1087,2.619,1088,1.833,1089,2.032,1092,1.833,1094,2.011,1095,2.011,1097,2.011,1098,1.955,1102,1.833,1103,2.011,1104,1.987,1105,1.613,1106,1.489,1110,1.489,1112,1.489,1113,1.489,1114,2.011,1115,1.833,1116,2.011,1117,2.011,1118,2.011,1119,1.432,1120,2.032,1121,2.011,1122,3.126,1123,1.681,1124,2.746,1125,2.011,1126,2.746,1127,1.881,1128,2.011,1129,1.613,1130,1.833,1131,1.881,1132,2.746,1133,1.432,1134,2.746,1135,2.011,1136,1.833,1137,1.918,1138,2.011,1139,1.378,1140,2.746,1141,1.327,1142,2.011,1143,1.489,1144,2.115,1145,1.147,1146,2.295,1147,2.746,1148,1.918,1149,1.145,1150,2.011,1151,1.918,1152,1.833,1153,2.011,1154,2.011,1155,2.011,1156,1.278,1157,2.011,1158,3.516,1159,2.011,1160,2.011,1161,1.833,1162,1.549,1163,1.955,1164,2.011,1165,3.516,1166,2.011,1167,1.549,1168,1.327,1169,1.681,1170,2.011,1171,2.011,1172,2.011,1173,2.011,1174,1.833,1175,2.011,1176,2.746,1177,3.359,1178,2.746,1179,2.115,1180,2.011,1181,2.587,1182,2.115,1183,2.746,1184,1.918,1185,2.115,1186,2.038,1187,1.549,1188,2.063,1189,2.746,1190,2.011,1191,2.849,1192,2.223,1193,2.011,1194,2.011,1195,2.011,1196,2.011,1197,2.011,1198,1.833,1199,1.833,1200,2.011,1201,1.549,1202,2.011,1203,2.587,1204,1.833,1205,2.011,1206,1.549,1207,2.011,1208,2.727,1209,2.011,1210,2.746,1211,2.011,1212,1.145,1213,2.011,1214,1.833,1215,2.011,1216,3.126,1217,1.549,1218,2.011,1219,2.011,1220,1.327,1221,1.833,1222,2.011,1355,2.673,1366,1.918,1493,2.114,1498,1.918,1502,1.833,2874,3.48,2876,4.75,2878,3.48,2879,4.474,3045,3.48,3046,3.48,3047,4.002,3048,4.002,3049,4.002,3050,4.002,3051,4.002,3052,4.002,3053,4.002,3054,4.002,3055,4.002,3056,4.002,3057,4.002,3058,4.002,3059,6.221,3060,5.464,3061,4.002,3062,4.002,3063,4.002,3064,4.002,3065,4.002,3066,4.002]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"components/App.html":{},"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":182,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0.0",{"_index":2187,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["0.0.0",{"_index":3044,"title":{},"body":{"properties.html":{}}}],["0.001",{"_index":1814,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["0.01",{"_index":1146,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StructureDimensions.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["0.05",{"_index":1186,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["0.1",{"_index":352,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/StructureDimensions.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["0.15.0",{"_index":2941,"title":{},"body":{"dependencies.html":{}}}],["0.180.0",{"_index":2936,"title":{},"body":{"dependencies.html":{}}}],["0.1m",{"_index":1166,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["0.2",{"_index":361,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["0.2s",{"_index":1918,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["0.3",{"_index":1141,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["0.3s",{"_index":551,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["0.4",{"_index":1748,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["0.5",{"_index":338,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StructureDimensions.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["0.6",{"_index":566,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["0.7",{"_index":2186,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["0.8",{"_index":347,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["0.8m",{"_index":1924,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["0.9",{"_index":1243,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["0.9em",{"_index":1899,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["0.9m",{"_index":1241,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["0/1",{"_index":2877,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":2881,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2880,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2910,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2909,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2908,"title":{},"body":{"coverage.html":{}}}],["000000",{"_index":1307,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["0000ff",{"_index":2215,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["0056b3",{"_index":555,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["007bff",{"_index":472,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["00ff00",{"_index":2209,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["0x${fenetre.color.tostring(16)},\\n",{"_index":702,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["0x000000",{"_index":2188,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["0x0000ff",{"_index":1220,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["0x00ff00",{"_index":1188,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["0x228b22",{"_index":2241,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["0x2e1e1a",{"_index":1159,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["0x2e8b57",{"_index":2243,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["0x2f4f4f",{"_index":2250,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["0x32cd32",{"_index":2245,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["0x404040",{"_index":1747,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["0x4169e1",{"_index":1168,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["0x654321",{"_index":2235,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["0x696969",{"_index":2249,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["0x708090",{"_index":2251,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["0x778899",{"_index":2252,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["0x87ceeb",{"_index":1741,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["0x8b4513",{"_index":1617,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["0x8fbc8f",{"_index":2242,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["0x90ee90",{"_index":2244,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["0xaaaaaa",{"_index":1043,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["0xbfd1e5",{"_index":1103,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["0xcd853f",{"_index":2237,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["0xdeb887",{"_index":2200,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["0xff0000",{"_index":681,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["0xffd700",{"_index":2236,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["0xffffff",{"_index":1131,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["1",{"_index":181,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CameraConfig.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0",{"_index":366,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CameraConfig.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["1.05",{"_index":1185,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["1.0m",{"_index":1925,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["1.1",{"_index":2537,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["1.1em",{"_index":1894,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["1.2",{"_index":378,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["1.25",{"_index":1144,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["1.2em",{"_index":531,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["1.2m",{"_index":990,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["1.5",{"_index":375,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["1.5m",{"_index":1191,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["1.8",{"_index":1961,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["1.8m",{"_index":1926,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["1/1",{"_index":2902,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":2922,"title":{},"body":{"coverage.html":{}}}],["1/13",{"_index":2925,"title":{},"body":{"coverage.html":{}}}],["1/14",{"_index":2920,"title":{},"body":{"coverage.html":{}}}],["1/16",{"_index":2882,"title":{},"body":{"coverage.html":{}}}],["1/17",{"_index":2884,"title":{},"body":{"coverage.html":{}}}],["1/22",{"_index":2887,"title":{},"body":{"coverage.html":{}}}],["1/25",{"_index":2888,"title":{},"body":{"coverage.html":{}}}],["1/28",{"_index":2891,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":2900,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":2885,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":2883,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":2901,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":2913,"title":{},"body":{"coverage.html":{}}}],["1/79",{"_index":2894,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":2886,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":2890,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":851,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CameraConfig.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesScene.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["10/13",{"_index":2903,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":230,"title":{},"body":{"injectables/BatimentService.html":{},"components/CalculateurFenetresComponent.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["1000",{"_index":1127,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["100px",{"_index":520,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["105",{"_index":2222,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["10cm",{"_index":2690,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["10px",{"_index":477,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["11",{"_index":2889,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["12",{"_index":1811,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{},"coverage.html":{}}}],["120",{"_index":2211,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["12px",{"_index":537,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["135",{"_index":2204,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["139",{"_index":2191,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["14",{"_index":2912,"title":{},"body":{"coverage.html":{}}}],["14/18",{"_index":2915,"title":{},"body":{"coverage.html":{}}}],["14px",{"_index":573,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["15",{"_index":1143,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["15/20",{"_index":2926,"title":{},"body":{"coverage.html":{}}}],["15px",{"_index":486,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["16",{"_index":2272,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"coverage.html":{}}}],["16.67",{"_index":1816,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["16.67ms",{"_index":1817,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["16777215",{"_index":2306,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["16px",{"_index":577,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["17",{"_index":2995,"title":{},"body":{"index.html":{}}}],["170",{"_index":2184,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["17a2b8",{"_index":1303,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["184",{"_index":2203,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["18px",{"_index":1906,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["19",{"_index":2193,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["19/22",{"_index":2905,"title":{},"body":{"coverage.html":{}}}],["198",{"_index":2264,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["1].timestamp",{"_index":1436,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["1e7e34",{"_index":563,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["1em",{"_index":1902,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["1fr",{"_index":484,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["1m",{"_index":843,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMur.html":{},"interfaces/SceneConfig.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["1px",{"_index":521,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["2",{"_index":232,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["2.0",{"_index":358,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{}}}],["2.0m",{"_index":1927,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["2.1",{"_index":1206,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["2.1m",{"_index":1207,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["2.2",{"_index":1200,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["2.3",{"_index":1181,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["2.3.0",{"_index":2939,"title":{},"body":{"dependencies.html":{}}}],["2.5",{"_index":350,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["2.5m",{"_index":1165,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["2.6",{"_index":1162,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["20",{"_index":1136,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["20.3.0",{"_index":2931,"title":{},"body":{"dependencies.html":{}}}],["200px",{"_index":501,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["2048",{"_index":1137,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["2048x2048",{"_index":1138,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["20cm",{"_index":1158,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["20px",{"_index":452,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["22/25",{"_index":2919,"title":{},"body":{"coverage.html":{}}}],["222",{"_index":2202,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["225",{"_index":2223,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["24",{"_index":1420,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["24/27",{"_index":2921,"title":{},"body":{"coverage.html":{}}}],["24/33",{"_index":2924,"title":{},"body":{"coverage.html":{}}}],["240",{"_index":2216,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["24h",{"_index":1418,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["24px",{"_index":549,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["25",{"_index":2194,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"coverage.html":{}}}],["255",{"_index":2210,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["256",{"_index":2258,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["28a745",{"_index":561,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["2d3748",{"_index":569,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["2m",{"_index":1187,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["2px",{"_index":476,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["3",{"_index":992,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"coverage.html":{},"index.html":{}}}],["3.0",{"_index":344,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["3.8",{"_index":1203,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["3.9",{"_index":1201,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["3/3",{"_index":2898,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":2793,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["31",{"_index":2196,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["312",{"_index":2261,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["33",{"_index":2899,"title":{},"body":{"coverage.html":{}}}],["33/43",{"_index":2911,"title":{},"body":{"coverage.html":{}}}],["333",{"_index":475,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["34",{"_index":2205,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["34/41",{"_index":2917,"title":{},"body":{"coverage.html":{}}}],["3d",{"_index":24,"title":{},"body":{"components/App.html":{},"interfaces/CameraConfig.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["3px",{"_index":506,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["4",{"_index":237,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["40px",{"_index":1910,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["4169e1",{"_index":2220,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["49",{"_index":2896,"title":{},"body":{"coverage.html":{}}}],["495057",{"_index":1893,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["4px",{"_index":470,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["5",{"_index":1145,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["5.2",{"_index":1616,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["50",{"_index":513,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/CalculsMur.html":{},"interfaces/CameraConfig.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["500",{"_index":503,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["512",{"_index":2257,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["545b62",{"_index":559,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["57",{"_index":2206,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["5m",{"_index":902,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMur.html":{},"interfaces/SceneConfig.html":{},"interfaces/ValidationMur.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["5px",{"_index":489,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["6",{"_index":2703,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"coverage.html":{}}}],["6/9",{"_index":2907,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":1133,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["600",{"_index":1740,"title":{},"body":{"interfaces/ControlesScene.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["60px",{"_index":517,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["65",{"_index":2221,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["66",{"_index":2906,"title":{},"body":{"coverage.html":{}}}],["666",{"_index":546,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["67",{"_index":2185,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["69",{"_index":2192,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["6c757d",{"_index":557,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["6f42c1",{"_index":1299,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["6px",{"_index":505,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["7",{"_index":2706,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"coverage.html":{}}}],["7.8.0",{"_index":2937,"title":{},"body":{"dependencies.html":{}}}],["70",{"_index":2207,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["72",{"_index":2923,"title":{},"body":{"coverage.html":{}}}],["73",{"_index":2224,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["75",{"_index":1120,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["76",{"_index":2195,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"coverage.html":{}}}],["77",{"_index":2914,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1156,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["8.2",{"_index":1615,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["8.4",{"_index":1167,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["800",{"_index":1739,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["800px",{"_index":448,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["80cm",{"_index":2700,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["82",{"_index":2916,"title":{},"body":{"coverage.html":{}}}],["86",{"_index":2904,"title":{},"body":{"coverage.html":{}}}],["87ceeb",{"_index":1950,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["88",{"_index":2918,"title":{},"body":{"coverage.html":{}}}],["8b4513",{"_index":1309,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["8m",{"_index":1176,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["8px",{"_index":467,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["8x5m",{"_index":1157,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["9",{"_index":1139,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["92/185",{"_index":2897,"title":{},"body":{"coverage.html":{}}}],["aaaaaa",{"_index":2183,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["accessibilit",{"_index":2712,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["accessible",{"_index":2714,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["accessors",{"_index":1272,"title":{},"body":{"components/ColorSelectorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{}}}],["accès",{"_index":2957,"title":{},"body":{"index.html":{}}}],["action",{"_index":1357,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/ServiceMessage.html":{}}}],["actions",{"_index":547,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["activer/désactiver",{"_index":1801,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["activée",{"_index":2806,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["actual_component",{"_index":67,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}}}],["actuelle",{"_index":756,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"components/ColorSelectorComponent.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["actuelles",{"_index":1457,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["addaxes",{"_index":2395,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["addgrid",{"_index":2396,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["addobject",{"_index":2397,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["addobject(object",{"_index":2424,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["addouverture",{"_index":1992,"title":{},"body":{"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["adjacent",{"_index":899,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["adjacents",{"_index":890,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["aesthetics",{"_index":2672,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["ajout",{"_index":2475,"title":{},"body":{"components/Scene3dCoreComponent.html":{},"index.html":{}}}],["ajout/suppression",{"_index":2989,"title":{},"body":{"index.html":{}}}],["ajouter",{"_index":966,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ControlesScene.html":{},"components/MursControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationOuverture.html":{}}}],["ajouterlumiere(nouvellelumiere",{"_index":1785,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["ajoutermateriau(nouveaumateriau",{"_index":2295,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["ajouterouverture",{"_index":968,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ajouterouverture(nommur",{"_index":1675,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["ajouterpalette(nouvellepalette",{"_index":2331,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["ajoutertexture(nouvelletexture",{"_index":2349,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["alert('configuration",{"_index":704,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["alert(optimisation.message",{"_index":691,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["alert(resultat.message",{"_index":685,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["align",{"_index":496,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["allowed",{"_index":567,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["aléatoire",{"_index":2370,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["ambiante",{"_index":1082,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["ambient",{"_index":1080,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["ambientlight",{"_index":2493,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["analyse",{"_index":716,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["analysercapacitemurs",{"_index":709,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["analysercapacitemurs(murs",{"_index":713,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["angle",{"_index":1121,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["angular",{"_index":2945,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":642,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":2932,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":29,"title":{},"body":{"components/App.html":{},"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":643,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":2933,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":30,"title":{},"body":{"components/App.html":{},"dependencies.html":{}}}],["animate",{"_index":2398,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["animationid",{"_index":2392,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["animations",{"_index":3004,"title":{},"body":{"index.html":{}}}],["antialias",{"_index":1715,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/StatistiquesScene.html":{}}}],["aperçu",{"_index":1338,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["app",{"_index":1,"title":{"components/App.html":{}},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"coverage.html":{},"index.html":{}}}],["app.ts",{"_index":2977,"title":{},"body":{"index.html":{}}}],["appconfig",{"_index":2876,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appearance",{"_index":511,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["application",{"_index":2944,"title":{},"body":{"index.html":{}}}],["applicationconfig",{"_index":3050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applique",{"_index":1517,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["appliquer",{"_index":1336,"title":{},"body":{"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["appliquerconfiguration",{"_index":1935,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["applycolor",{"_index":1256,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["applydimensions",{"_index":1865,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["applyfilters",{"_index":2075,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["applyrequested",{"_index":1856,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["applystructure",{"_index":2573,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["approximation",{"_index":1810,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["architectural",{"_index":176,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["architecturale",{"_index":1738,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"index.html":{}}}],["architecturales",{"_index":2970,"title":{},"body":{"index.html":{}}}],["ardoise",{"_index":2655,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["array",{"_index":322,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["array.from(couleurs",{"_index":1024,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["arriere",{"_index":665,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"index.html":{}}}],["arrière",{"_index":238,"title":{},"body":{"injectables/BatimentService.html":{},"components/CalculateurFenetresComponent.html":{},"interfaces/CalculsMur.html":{},"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/ValidationMur.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["arrondir",{"_index":231,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["aspect_ratio_reasonable",{"_index":2707,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["aspectratio.tofixed(2",{"_index":2778,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["assets",{"_index":2979,"title":{},"body":{"index.html":{}}}],["assets/textures/beton.jpg",{"_index":2256,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["assets/textures/bois.jpg",{"_index":2263,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["assets/textures/brique.jpg",{"_index":2260,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["au",{"_index":1163,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["aucune",{"_index":2059,"title":{},"body":{"components/MursControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["auto",{"_index":450,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["automatique",{"_index":1597,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"index.html":{}}}],["automatiquement",{"_index":204,"title":{},"body":{"injectables/BatimentService.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["automatiques",{"_index":1225,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["autremur",{"_index":896,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["autremur.id",{"_index":894,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["autreouverture",{"_index":1016,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["autreouverture.id",{"_index":1014,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["autres",{"_index":1195,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["aux",{"_index":991,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["avancés",{"_index":2969,"title":{},"body":{"index.html":{}}}],["avant/arrière",{"_index":1219,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["avec",{"_index":177,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["averageresponsetime",{"_index":1364,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["averagescore",{"_index":2678,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["avertissements",{"_index":751,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["avertissements.push('l\\'épaisseur",{"_index":839,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["avertissements.push('la",{"_index":854,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["avertissements.push('le",{"_index":847,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["avoir",{"_index":2689,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["axe",{"_index":1036,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["axes",{"_index":1208,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["axeshelper",{"_index":2509,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["b",{"_index":1452,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["back",{"_index":1199,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["background",{"_index":463,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["backgroundcolor",{"_index":1711,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["barre",{"_index":2984,"title":{},"body":{"index.html":{}}}],["bas",{"_index":1178,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["bas/haut",{"_index":1218,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["base",{"_index":1151,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"components/StructureControllerComponent.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["basic",{"_index":1720,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["basique",{"_index":2578,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["batimentservice",{"_index":71,"title":{"injectables/BatimentService.html":{}},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["beaucoup",{"_index":2795,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["behaviorsubject",{"_index":174,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["behaviorsubject(this.chargerconfiguration",{"_index":1549,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["behaviorsubject(this.configurationpardefaut",{"_index":1619,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["beton",{"_index":2561,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["between",{"_index":541,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["blanc",{"_index":1304,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["blanche",{"_index":1132,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["bleu",{"_index":1104,"title":{},"body":{"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["bleue",{"_index":1610,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["block",{"_index":1896,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["bois",{"_index":2198,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"components/StructureControllerComponent.html":{}}}],["bold",{"_index":518,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["boolean",{"_index":164,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["border",{"_index":465,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["bords",{"_index":363,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["bottom",{"_index":468,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["bottomoffset",{"_index":1240,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["boucle",{"_index":2491,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["boutons",{"_index":2988,"title":{},"body":{"index.html":{}}}],["box",{"_index":490,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["break",{"_index":2554,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["brique",{"_index":2190,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"components/StructureControllerComponent.html":{}}}],["browser",{"_index":2934,"title":{},"body":{"dependencies.html":{}}}],["brun",{"_index":2213,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["btn",{"_index":548,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["btn:disabled",{"_index":564,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["build",{"_index":3029,"title":{},"body":{"index.html":{}}}],["building",{"_index":1516,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"index.html":{}}}],["building_config",{"_index":646,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["buildingdata",{"_index":2857,"title":{},"body":{"injectables/ValidationService.html":{}}}],["buildingdata.murs",{"_index":2732,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["buttons",{"_index":1917,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["bâtiment",{"_index":118,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["bâtiments",{"_index":79,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{},"index.html":{}}}],["béton",{"_index":2182,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"components/StructureControllerComponent.html":{}}}],["c3e6cb",{"_index":524,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["calcul",{"_index":388,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"index.html":{}}}],["calcul.nombremaxfenetres",{"_index":430,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["calculateaverageresponsetime",{"_index":1448,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["calculateur",{"_index":43,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["calculateurfenetrescomponent",{"_index":42,"title":{"components/CalculateurFenetresComponent.html":{}},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{},"coverage.html":{}}}],["calculateurfenetresservice",{"_index":333,"title":{"injectables/CalculateurFenetresService.html":{}},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["calculateurservice",{"_index":623,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["calculator",{"_index":1891,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["calculator'},{'name",{"_index":53,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}}}],["calculator.component.ts",{"_index":1890,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"coverage.html":{}}}],["calculator.component.ts:415",{"_index":1946,"title":{},"body":{"components/FenetresCalculatorComponent.html":{}}}],["calculator.component.ts:416",{"_index":1947,"title":{},"body":{"components/FenetresCalculatorComponent.html":{}}}],["calculator.component.ts:417",{"_index":1952,"title":{},"body":{"components/FenetresCalculatorComponent.html":{}}}],["calculator.component.ts:418",{"_index":1951,"title":{},"body":{"components/FenetresCalculatorComponent.html":{}}}],["calculator.component.ts:425",{"_index":1954,"title":{},"body":{"components/FenetresCalculatorComponent.html":{}}}],["calculator.component.ts:426",{"_index":1953,"title":{},"body":{"components/FenetresCalculatorComponent.html":{}}}],["calculator.component.ts:427",{"_index":1955,"title":{},"body":{"components/FenetresCalculatorComponent.html":{}}}],["calculator.component.ts:429",{"_index":1960,"title":{},"body":{"components/FenetresCalculatorComponent.html":{}}}],["calculator.component.ts:431",{"_index":1962,"title":{},"body":{"components/FenetresCalculatorComponent.html":{}}}],["calculator.component.ts:436",{"_index":1945,"title":{},"body":{"components/FenetresCalculatorComponent.html":{}}}],["calculator.component.ts:440",{"_index":1958,"title":{},"body":{"components/FenetresCalculatorComponent.html":{}}}],["calculator.component.ts:448",{"_index":1957,"title":{},"body":{"components/FenetresCalculatorComponent.html":{}}}],["calculator.component.ts:468",{"_index":1956,"title":{},"body":{"components/FenetresCalculatorComponent.html":{}}}],["calculator.component.ts:478",{"_index":1959,"title":{},"body":{"components/FenetresCalculatorComponent.html":{}}}],["calcule",{"_index":369,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["calculer",{"_index":111,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/MurService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["calculercapacite",{"_index":613,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["calculerdistancecamera(point",{"_index":1825,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["calculerdistanceentremurs",{"_index":2001,"title":{},"body":{"injectables/MurService.html":{}}}],["calculerdistanceentremurs(mur1",{"_index":878,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["calculerfenetres",{"_index":1936,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["calculernombremaxfenetres",{"_index":373,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["calculernombremaxfenetres(mur",{"_index":721,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["calculerpositionsoptimales",{"_index":404,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["calculerpositionsoptimales(mur",{"_index":723,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["calculerproprietesmur",{"_index":2002,"title":{},"body":{"injectables/MurService.html":{}}}],["calculerproprietesmur(murconfig",{"_index":783,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["calculerproprietesouverture(ouvertureconfig",{"_index":939,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["calculersurfaceetvolume",{"_index":85,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["calculfenetres",{"_index":309,"title":{"interfaces/CalculFenetres.html":{}},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{},"coverage.html":{}}}],["calculresultat",{"_index":609,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["calculresultat.ecartoptimal",{"_index":1931,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["calculresultat.ecartoptimal.tofixed(2",{"_index":599,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["calculresultat.isvalid",{"_index":593,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["calculresultat.largeurfenetreoptimale",{"_index":1930,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["calculresultat.largeurtotaleutilisee",{"_index":1932,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["calculresultat.largeurtotaleutilisee.tofixed(2",{"_index":596,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["calculresultat.margerestante",{"_index":1933,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["calculresultat.margerestante.tofixed(2",{"_index":598,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["calculresultat.message",{"_index":594,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["calculresultat.nombremaxfenetres",{"_index":595,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["calculs",{"_index":739,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["calculs.surface",{"_index":934,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["calculs.surfaceouvertures",{"_index":772,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["calculs.surfacetotale",{"_index":769,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["calculs.volume",{"_index":770,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["calculsmur",{"_index":737,"title":{"interfaces/CalculsMur.html":{}},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{},"coverage.html":{}}}],["calculsouverture",{"_index":903,"title":{"interfaces/CalculsOuverture.html":{}},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{},"coverage.html":{}}}],["calculées",{"_index":600,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["camera",{"_index":1098,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["camera.position.x",{"_index":1826,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["camera.position.y",{"_index":1828,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["camera.position.z",{"_index":1830,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["cameraactuelle",{"_index":1742,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["cameraconfig",{"_index":1025,"title":{"interfaces/CameraConfig.html":{}},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cameraready",{"_index":2411,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["caméra",{"_index":1028,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["cancelanimationframe(this.animationid",{"_index":2460,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["canvas",{"_index":2476,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["canvascontainer",{"_index":2393,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["capacités",{"_index":720,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["cart",{"_index":353,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{},"index.html":{}}}],["case",{"_index":657,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["castshadow",{"_index":1727,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["catch",{"_index":303,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["category",{"_index":2668,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["ce",{"_index":1056,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["ced4da",{"_index":1898,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["center",{"_index":498,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["central",{"_index":1071,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["centrale",{"_index":1184,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["centralisées",{"_index":1116,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["centre",{"_index":1039,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["centregravite",{"_index":741,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["centrer",{"_index":1822,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["centrercamerasurobjet(position",{"_index":1824,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["centrée",{"_index":407,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["cette",{"_index":2623,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["chaleureuses",{"_index":2234,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["champ",{"_index":1099,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["chang",{"_index":1538,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["changement",{"_index":1488,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["changements",{"_index":207,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"injectables/MurService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"index.html":{}}}],["changer",{"_index":124,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["changerdescription",{"_index":86,"title":{},"body":{"injectables/BatimentService.html":{}}}],["changerdescription(nouvelledescription",{"_index":121,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["changernom",{"_index":87,"title":{},"body":{"injectables/BatimentService.html":{}}}],["changernom(nouveaunom",{"_index":126,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["changertypebatiment",{"_index":88,"title":{},"body":{"injectables/BatimentService.html":{}}}],["changertypebatiment(nouveautype",{"_index":130,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["changes",{"_index":1481,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["chaque",{"_index":2715,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"index.html":{}}}],["charge",{"_index":3014,"title":{},"body":{"index.html":{}}}],["chargement",{"_index":1561,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["charger",{"_index":1530,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["chargerconfiguration",{"_index":1520,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["chargée",{"_index":1554,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["child",{"_index":2547,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["choisir",{"_index":580,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"index.html":{}}}],["ciel",{"_index":1105,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["clair",{"_index":1183,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["clairage",{"_index":1083,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["class",{"_index":33,"title":{"classes/WallCalculations.html":{}},"body":{"components/App.html":{},"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":2865,"title":{},"body":{"classes/WallCalculations.html":{}}}],["classique",{"_index":2128,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["clear",{"_index":1466,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["clearevents",{"_index":1464,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["clearhistory",{"_index":2828,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["clearmessages",{"_index":1468,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["clearscene",{"_index":2399,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["cliquez",{"_index":2991,"title":{},"body":{"index.html":{}}}],["code",{"_index":568,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["coin",{"_index":1177,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["color",{"_index":46,"title":{},"body":{"components/App.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"components/StructureControllerComponent.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["color.name",{"_index":1335,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["color_harmony",{"_index":2721,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["colorable",{"_index":1315,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["colorableelement",{"_index":1274,"title":{"interfaces/ColorableElement.html":{}},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"coverage.html":{}}}],["colorapplied",{"_index":1268,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["colorchanged",{"_index":1269,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["colorreset",{"_index":1270,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["colorselectorcomponent",{"_index":45,"title":{"components/ColorSelectorComponent.html":{}},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{},"coverage.html":{}}}],["columns",{"_index":480,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["commandes",{"_index":3027,"title":{},"body":{"index.html":{}}}],["comme",{"_index":898,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMur.html":{},"interfaces/SceneConfig.html":{},"interfaces/ValidationMur.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["commentés",{"_index":3057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commercial",{"_index":192,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{},"components/StructureControllerComponent.html":{}}}],["commonmodule",{"_index":445,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["communication",{"_index":1342,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["communication/communication.service",{"_index":2660,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["communicationevent",{"_index":1339,"title":{"interfaces/CommunicationEvent.html":{}},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"coverage.html":{}}}],["communicationevent['priority",{"_index":1396,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["communicationservice",{"_index":1366,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["communicationstats",{"_index":1359,"title":{"interfaces/CommunicationStats.html":{}},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"coverage.html":{}}}],["comparaison",{"_index":1589,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["compatibilit",{"_index":1541,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["compilation",{"_index":3019,"title":{},"body":{"index.html":{}}}],["complet",{"_index":2728,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"index.html":{}}}],["complète",{"_index":1551,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"index.html":{}}}],["component",{"_index":0,"title":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":39,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{},"index.html":{},"overview.html":{}}}],["composant",{"_index":1248,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"index.html":{}}}],["composantstructure",{"_index":3034,"title":{},"body":{"index.html":{}}}],["config",{"_index":222,"title":{},"body":{"injectables/BatimentService.html":{},"components/CalculateurFenetresComponent.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{}}}],["config.dimensions",{"_index":224,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["config.dimensions.height",{"_index":1238,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["config.dimensions.width",{"_index":1231,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["config.ground.color",{"_index":1640,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.ground.dimensions",{"_index":1639,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.ground.position",{"_index":1638,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.mainwall.color",{"_index":664,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.mainwall.contour[0].x",{"_index":660,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.mainwall.contour[0].y",{"_index":662,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.mainwall.contour[1].x",{"_index":659,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.mainwall.contour[2].y",{"_index":661,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.mainwall.openings.window2",{"_index":1575,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["config.mainwall.openings.window2.color.tostring(16).padstart(6",{"_index":1579,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["config.mainwall.openings.window2.dimensions",{"_index":1578,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["config.mainwall.openings.window2.position",{"_index":1577,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["config.mainwall.position",{"_index":658,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.mainwall.thickness",{"_index":663,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.murs",{"_index":246,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["config.murs[ouverture.murparent",{"_index":985,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["config.murs[type",{"_index":825,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["config.position.x",{"_index":1237,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["config.roof.color",{"_index":1637,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.roof.dimensions",{"_index":1636,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.roof.position",{"_index":1635,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.ts",{"_index":1027,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["config.ts:364",{"_index":2868,"title":{},"body":{"classes/WallCalculations.html":{}}}],["config.ts:382",{"_index":2869,"title":{},"body":{"classes/WallCalculations.html":{}}}],["config.walls.back.color",{"_index":668,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.back.color.tostring(16",{"_index":1558,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["config.walls.back.color.tostring(16).padstart(6",{"_index":1574,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["config.walls.back.dimensions",{"_index":667,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.back.dimensions.depth",{"_index":1626,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.back.dimensions.height",{"_index":1557,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.back.dimensions.width",{"_index":1555,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.back.openings",{"_index":1627,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.back.openings.window1.color",{"_index":1628,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.back.openings.window1.color.tostring(16).padstart(6",{"_index":1583,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["config.walls.back.openings.window1.dimensions",{"_index":1582,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.back.openings.window1.position",{"_index":1581,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.back.openings.window1.type",{"_index":1629,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.back.openings?.window1",{"_index":1580,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["config.walls.back.position",{"_index":666,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.left.color",{"_index":671,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.left.dimensions",{"_index":670,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.left.dimensions.depth",{"_index":1556,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.left.dimensions.width",{"_index":1630,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.left.position",{"_index":669,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.right.color",{"_index":674,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.right.dimensions",{"_index":673,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.right.dimensions.width",{"_index":1631,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.right.openings",{"_index":1632,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.right.openings.door.color",{"_index":1633,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.right.openings.door.color.tostring(16).padstart(6",{"_index":1587,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["config.walls.right.openings.door.dimensions",{"_index":1586,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.right.openings.door.position",{"_index":1585,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.right.openings.door.type",{"_index":1634,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config.walls.right.openings?.door",{"_index":1584,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["config.walls.right.position",{"_index":672,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["config/building",{"_index":647,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/Scene3dCoreComponent.html":{}}}],["config/config",{"_index":1602,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["configactuelle",{"_index":1588,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["configactuelle.walls.back.color",{"_index":1594,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["configactuelle.walls.back.dimensions.height",{"_index":1593,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["configactuelle.walls.back.dimensions.width",{"_index":1591,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["configactuelle.walls.left.dimensions.depth",{"_index":1592,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["configdirectservice",{"_index":1510,"title":{"injectables/ConfigDirectService.html":{}},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"coverage.html":{}}}],["configuration",{"_index":208,"title":{},"body":{"injectables/BatimentService.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["configuration/configuration.service",{"_index":188,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["configurationactuelle",{"_index":1618,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["configurationapplied",{"_index":1941,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["configurationbatiment",{"_index":187,"title":{"interfaces/ConfigurationBatiment.html":{}},"body":{"injectables/BatimentService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{},"coverage.html":{}}}],["configurationbatiment['murs",{"_index":1661,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["configurationcomplete",{"_index":1531,"title":{"interfaces/ConfigurationComplete.html":{}},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"coverage.html":{}}}],["configurationgeneree",{"_index":607,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["configurationmur",{"_index":745,"title":{"interfaces/ConfigurationMur.html":{}},"body":{"interfaces/CalculsMur.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{},"coverage.html":{}}}],["configurationouverture",{"_index":906,"title":{"interfaces/ConfigurationOuverture.html":{}},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{},"coverage.html":{}}}],["configurationpardefaut",{"_index":1608,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["configurations",{"_index":2973,"title":{},"body":{"index.html":{}}}],["configurationservice",{"_index":105,"title":{"injectables/ConfigurationService.html":{}},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["configurationsol",{"_index":1600,"title":{"interfaces/ConfigurationSol.html":{}},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"coverage.html":{}}}],["configurationsubject",{"_index":1519,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["configurationtoit",{"_index":1601,"title":{"interfaces/ConfigurationToit.html":{}},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"coverage.html":{}}}],["considérer",{"_index":897,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["console",{"_index":3016,"title":{},"body":{"index.html":{}}}],["console.error",{"_index":1559,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["console.error('erreur",{"_index":305,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["console.log",{"_index":402,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["console.log('calcul",{"_index":379,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["console.log('calculateurfenetrescomponent",{"_index":648,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["console.log('calculateurfenetresservice",{"_index":367,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["console.log('communicationservice",{"_index":1376,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["console.log('configuration",{"_index":1658,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["console.log('configurationservice",{"_index":1621,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["console.log('contrôles",{"_index":1780,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["console.log('données",{"_index":300,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["console.log('historique",{"_index":2829,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["console.log('propriétés",{"_index":220,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ControlesScene.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesScene.html":{}}}],["console.log('sceneservice",{"_index":1756,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["console.log('validationservice",{"_index":2685,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["console.log(`[communicationservice",{"_index":1385,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["console.log(`règle",{"_index":2805,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["const",{"_index":215,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["const\\n",{"_index":703,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["constructor",{"_index":103,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"injectables/ConfigurationService.html":{},"interfaces/ControlesScene.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesScene.html":{},"injectables/ValidationService.html":{}}}],["constructor(@inject(platform_id",{"_index":2456,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["constructor(calculateurfenetresservice",{"_index":1944,"title":{},"body":{"components/FenetresCalculatorComponent.html":{}}}],["constructor(calculateurservice",{"_index":621,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["constructor(communicationservice",{"_index":2843,"title":{},"body":{"injectables/ValidationService.html":{}}}],["constructor(configdirectservice",{"_index":1673,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["constructor(configurationservice",{"_index":104,"title":{},"body":{"injectables/BatimentService.html":{},"injectables/MurService.html":{}}}],["constructor(platformid",{"_index":2414,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["constructor(private",{"_index":203,"title":{},"body":{"injectables/BatimentService.html":{},"components/CalculateurFenetresComponent.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"injectables/MurService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["container",{"_index":447,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["content",{"_index":539,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["contour",{"_index":1050,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["contraintes",{"_index":334,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{},"index.html":{}}}],["control",{"_index":576,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["controles",{"_index":1752,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["controlesactuels",{"_index":1743,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["controlesmisesajour",{"_index":1777,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["controlesscene",{"_index":1695,"title":{"interfaces/ControlesScene.html":{}},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{},"coverage.html":{}}}],["controller",{"_index":65,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["controller'},{'name",{"_index":50,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}}}],["controller.component.css",{"_index":1846,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["controller.component.html",{"_index":1845,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["controller.component.ts",{"_index":1841,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"coverage.html":{}}}],["controller.component.ts:105",{"_index":2107,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["controller.component.ts:120",{"_index":2645,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["controller.component.ts:125",{"_index":2639,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["controller.component.ts:129",{"_index":2640,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["controller.component.ts:133",{"_index":2637,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["controller.component.ts:137",{"_index":2638,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["controller.component.ts:141",{"_index":2641,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["controller.component.ts:145",{"_index":2635,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["controller.component.ts:150",{"_index":2636,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["controller.component.ts:155",{"_index":2646,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["controller.component.ts:29",{"_index":2100,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["controller.component.ts:30",{"_index":2102,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["controller.component.ts:31",{"_index":2101,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["controller.component.ts:32",{"_index":2103,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["controller.component.ts:34",{"_index":1869,"title":{},"body":{"components/DimensionsControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/StructureControllerComponent.html":{}}}],["controller.component.ts:35",{"_index":1873,"title":{},"body":{"components/DimensionsControllerComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/StructureControllerComponent.html":{}}}],["controller.component.ts:36",{"_index":1872,"title":{},"body":{"components/DimensionsControllerComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{}}}],["controller.component.ts:37",{"_index":1868,"title":{},"body":{"components/DimensionsControllerComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{}}}],["controller.component.ts:38",{"_index":1874,"title":{},"body":{"components/DimensionsControllerComponent.html":{},"components/OuverturesControllerComponent.html":{}}}],["controller.component.ts:39",{"_index":1867,"title":{},"body":{"components/DimensionsControllerComponent.html":{},"components/MursControllerComponent.html":{}}}],["controller.component.ts:40",{"_index":1871,"title":{},"body":{"components/DimensionsControllerComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{}}}],["controller.component.ts:41",{"_index":1870,"title":{},"body":{"components/DimensionsControllerComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{}}}],["controller.component.ts:42",{"_index":2038,"title":{},"body":{"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{}}}],["controller.component.ts:43",{"_index":1878,"title":{},"body":{"components/DimensionsControllerComponent.html":{},"components/MursControllerComponent.html":{}}}],["controller.component.ts:44",{"_index":1876,"title":{},"body":{"components/DimensionsControllerComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{}}}],["controller.component.ts:45",{"_index":1877,"title":{},"body":{"components/DimensionsControllerComponent.html":{}}}],["controller.component.ts:46",{"_index":1875,"title":{},"body":{"components/DimensionsControllerComponent.html":{},"components/MursControllerComponent.html":{},"components/StructureControllerComponent.html":{}}}],["controller.component.ts:47",{"_index":2630,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["controller.component.ts:48",{"_index":1881,"title":{},"body":{"components/DimensionsControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/StructureControllerComponent.html":{}}}],["controller.component.ts:49",{"_index":2632,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["controller.component.ts:50",{"_index":2044,"title":{},"body":{"components/MursControllerComponent.html":{},"components/StructureControllerComponent.html":{}}}],["controller.component.ts:51",{"_index":2631,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["controller.component.ts:52",{"_index":1880,"title":{},"body":{"components/DimensionsControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/StructureControllerComponent.html":{}}}],["controller.component.ts:54",{"_index":2643,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["controller.component.ts:55",{"_index":2042,"title":{},"body":{"components/MursControllerComponent.html":{}}}],["controller.component.ts:56",{"_index":1882,"title":{},"body":{"components/DimensionsControllerComponent.html":{},"components/OuverturesControllerComponent.html":{}}}],["controller.component.ts:58",{"_index":2633,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["controller.component.ts:61",{"_index":2039,"title":{},"body":{"components/MursControllerComponent.html":{}}}],["controller.component.ts:62",{"_index":1879,"title":{},"body":{"components/DimensionsControllerComponent.html":{},"components/StructureControllerComponent.html":{}}}],["controller.component.ts:64",{"_index":2109,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["controller.component.ts:69",{"_index":2108,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["controller.component.ts:74",{"_index":2043,"title":{},"body":{"components/MursControllerComponent.html":{}}}],["controller.component.ts:75",{"_index":2104,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["controller.component.ts:76",{"_index":2644,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["controller.component.ts:80",{"_index":2041,"title":{},"body":{"components/MursControllerComponent.html":{}}}],["controller.component.ts:86",{"_index":2040,"title":{},"body":{"components/MursControllerComponent.html":{}}}],["controller.component.ts:88",{"_index":2106,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["controller.component.ts:92",{"_index":2634,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["controller.component.ts:96",{"_index":2642,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["controller.component.ts:99",{"_index":2105,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["controls",{"_index":1030,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["contrôler",{"_index":1843,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["contrôles",{"_index":1029,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["contrôleur",{"_index":2046,"title":{},"body":{"components/MursControllerComponent.html":{},"components/StructureControllerComponent.html":{}}}],["convertir",{"_index":2266,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["coordonnees",{"_index":543,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["coordonnées",{"_index":821,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMur.html":{},"interfaces/SceneConfig.html":{},"interfaces/ValidationMur.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["copie",{"_index":2093,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["copier",{"_index":608,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["copierconfiguration",{"_index":614,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["copiée",{"_index":705,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["core",{"_index":2384,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core'},{'name",{"_index":61,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}}}],["core.component.css",{"_index":2391,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.html",{"_index":2390,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts",{"_index":2383,"title":{},"body":{"components/Scene3dCoreComponent.html":{},"coverage.html":{}}}],["core.component.ts:102",{"_index":2442,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:122",{"_index":2422,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:127",{"_index":2423,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:132",{"_index":2441,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:175",{"_index":2427,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:18",{"_index":2448,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:181",{"_index":2433,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:185",{"_index":2429,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:189",{"_index":2431,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:193",{"_index":2440,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:198",{"_index":2426,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:20",{"_index":2417,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:202",{"_index":2439,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:206",{"_index":2428,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:21",{"_index":2418,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:22",{"_index":2421,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:23",{"_index":2419,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:24",{"_index":2420,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:26",{"_index":2450,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:27",{"_index":2444,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:28",{"_index":2449,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:29",{"_index":2443,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:30",{"_index":2415,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:34",{"_index":2437,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:40",{"_index":2436,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["core.component.ts:49",{"_index":2435,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["couleur",{"_index":726,"title":{},"body":{"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["couleurbase",{"_index":2376,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["couleurhex",{"_index":2132,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["couleurhsl",{"_index":2136,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["couleurrgb",{"_index":2133,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["couleurs",{"_index":1018,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"index.html":{}}}],["couleurs.add(ouverture.couleur",{"_index":1023,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["couleursutilisees",{"_index":2166,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["courants",{"_index":1479,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"index.html":{}}}],["courier",{"_index":544,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["couter",{"_index":206,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"injectables/MurService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["couverture",{"_index":1160,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":2870,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["critical",{"_index":1349,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["création",{"_index":140,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["créer",{"_index":1172,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["css3",{"_index":3003,"title":{},"body":{"index.html":{}}}],["cubes",{"_index":1222,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["currentcolor",{"_index":1316,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["cursor",{"_index":514,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["cutoff",{"_index":1421,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["cyan",{"_index":1302,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["d",{"_index":2279,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["d'aspect",{"_index":2776,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["d'entrée",{"_index":1205,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["d'erreur",{"_index":1504,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["d'espacement",{"_index":735,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["d'importation",{"_index":2594,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["d'intensit",{"_index":1134,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["d'ouverture",{"_index":1047,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["d'ouvertures",{"_index":845,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"index.html":{}}}],["d'un",{"_index":191,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["d'une",{"_index":341,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["d4edda",{"_index":523,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["d\\'aspect",{"_index":2708,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["d\\'entrée",{"_index":1614,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["d\\'ouverture",{"_index":972,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["d\\'ouvertures",{"_index":849,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["d\\'épaisseur",{"_index":2695,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["dampingfactor",{"_index":1697,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["dans",{"_index":706,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":1343,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["data.events",{"_index":1476,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["data.history",{"_index":2836,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["data.messages",{"_index":1477,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["data.rules",{"_index":2835,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["datajson",{"_index":2852,"title":{},"body":{"injectables/ValidationService.html":{}}}],["date",{"_index":139,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["date().tolocaledatestring('fr",{"_index":3039,"title":{},"body":{"index.html":{}}}],["date(date.now",{"_index":1422,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["datecreation",{"_index":183,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["dateexport",{"_index":273,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["dc3545",{"_index":1293,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["ddd",{"_index":507,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["de",{"_index":76,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["deb887",{"_index":2201,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["debug",{"_index":3058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["debut",{"_index":408,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["decoration",{"_index":2131,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["decorators",{"_index":2446,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["dee2e6",{"_index":1892,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["default",{"_index":20,"title":{},"body":{"components/App.html":{},"injectables/BatimentService.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"components/ColorSelectorComponent.html":{},"injectables/ConfigDirectService.html":{},"injectables/ConfigurationService.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{},"injectables/ValidationService.html":{},"classes/WallCalculations.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":25,"title":{},"body":{"components/App.html":{},"injectables/BatimentService.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"components/ColorSelectorComponent.html":{},"injectables/ConfigDirectService.html":{},"injectables/ConfigurationService.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{},"injectables/ValidationService.html":{},"classes/WallCalculations.html":{}}}],["degrés",{"_index":1109,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["deletemur",{"_index":1999,"title":{},"body":{"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["deleteouverture",{"_index":2095,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["deltax",{"_index":2523,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["deltay",{"_index":2524,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["demand",{"_index":2479,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["demandées",{"_index":431,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["demi",{"_index":1232,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["dependencies",{"_index":2930,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["depth",{"_index":330,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["depuis",{"_index":653,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["dernieremodification",{"_index":184,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["dernière",{"_index":142,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{},"index.html":{}}}],["dernières",{"_index":1417,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["des",{"_index":78,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["description",{"_index":74,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["dessus",{"_index":1164,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["destinés",{"_index":1404,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["detail",{"_index":534,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["details",{"_index":532,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["deux",{"_index":877,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["deuxième",{"_index":1193,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["devrait",{"_index":2625,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["diagnostics",{"_index":3009,"title":{},"body":{"index.html":{}}}],["diffuse",{"_index":2154,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["dimensions",{"_index":49,"title":{"interfaces/Dimensions.html":{}},"body":{"components/App.html":{},"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["dimensions.hauteur",{"_index":227,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["dimensions.largeur",{"_index":226,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["dimensions.longueur",{"_index":225,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["dimensions.width",{"_index":2775,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["dimensions3d",{"_index":1037,"title":{"interfaces/Dimensions3D.html":{}},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{}}}],["dimensionscontrollercomponent",{"_index":48,"title":{"components/DimensionsControllerComponent.html":{}},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"coverage.html":{}}}],["direct",{"_index":1603,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["direct.ts",{"_index":1512,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"coverage.html":{}}}],["direct.ts:106",{"_index":1529,"title":{},"body":{"injectables/ConfigDirectService.html":{}}}],["direct.ts:129",{"_index":1532,"title":{},"body":{"injectables/ConfigDirectService.html":{}}}],["direct.ts:136",{"_index":1542,"title":{},"body":{"injectables/ConfigDirectService.html":{}}}],["direct.ts:156",{"_index":1540,"title":{},"body":{"injectables/ConfigDirectService.html":{}}}],["direct.ts:164",{"_index":1534,"title":{},"body":{"injectables/ConfigDirectService.html":{}}}],["direct.ts:176",{"_index":1533,"title":{},"body":{"injectables/ConfigDirectService.html":{}}}],["direct.ts:184",{"_index":1535,"title":{},"body":{"injectables/ConfigDirectService.html":{}}}],["direct.ts:224",{"_index":1536,"title":{},"body":{"injectables/ConfigDirectService.html":{}}}],["direct.ts:245",{"_index":1544,"title":{},"body":{"injectables/ConfigDirectService.html":{}}}],["direct.ts:96",{"_index":1550,"title":{},"body":{"injectables/ConfigDirectService.html":{}}}],["direct.ts:97",{"_index":1528,"title":{},"body":{"injectables/ConfigDirectService.html":{}}}],["directe",{"_index":1513,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"index.html":{}}}],["directement",{"_index":1515,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["direction",{"_index":1726,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["directional",{"_index":1085,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["directionallight",{"_index":2496,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["directionallight.castshadow",{"_index":2499,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["directionallight.position.set(5",{"_index":2498,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["directionallight.shadow.camera.bottom",{"_index":2507,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["directionallight.shadow.camera.far",{"_index":2503,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["directionallight.shadow.camera.left",{"_index":2504,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["directionallight.shadow.camera.near",{"_index":2502,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["directionallight.shadow.camera.right",{"_index":2505,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["directionallight.shadow.camera.top",{"_index":2506,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["directionallight.shadow.mapsize.height",{"_index":2501,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["directionallight.shadow.mapsize.width",{"_index":2500,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["directionnelle",{"_index":1086,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["directive",{"_index":37,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}}}],["directives",{"_index":66,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}}}],["display",{"_index":478,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["disponible",{"_index":428,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["disponibles",{"_index":2047,"title":{},"body":{"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{}}}],["distance",{"_index":876,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["distancemin",{"_index":1835,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["distances",{"_index":1101,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["ditez",{"_index":2990,"title":{},"body":{"index.html":{}}}],["dition",{"_index":2967,"title":{},"body":{"index.html":{}}}],["document.createelement('input",{"_index":2595,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["documentation",{"_index":2871,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doit",{"_index":2305,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["doivent",{"_index":822,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["dom",{"_index":5,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}}}],["donn",{"_index":372,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["donnees",{"_index":284,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["donnees.configuration",{"_index":298,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["donnees.proprietes",{"_index":292,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["donnees.proprietes.nom",{"_index":293,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["donnees.proprietes.type",{"_index":294,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["donneesexport",{"_index":272,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["donneesjson",{"_index":163,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["donneesjson.trim",{"_index":277,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["données",{"_index":136,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CameraConfig.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["door",{"_index":1048,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["door_height_min",{"_index":2696,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["door_width_max",{"_index":2773,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["door_width_min",{"_index":2699,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["doux",{"_index":1135,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["droit",{"_index":240,"title":{},"body":{"injectables/BatimentService.html":{},"components/CalculateurFenetresComponent.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["droite",{"_index":1194,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["du",{"_index":117,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationMur.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["ducatif",{"_index":3036,"title":{},"body":{"index.html":{}}}],["duplicatemur",{"_index":1997,"title":{},"body":{"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["duplicateouverture",{"_index":2090,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["dupliquer",{"_index":2060,"title":{},"body":{"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{}}}],["dx",{"_index":880,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationMur.html":{}}}],["dy",{"_index":883,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationMur.html":{}}}],["dynamique",{"_index":1553,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["dz",{"_index":886,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationMur.html":{}}}],["début",{"_index":1239,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["décimales",{"_index":233,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["défaut",{"_index":336,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["définissant",{"_index":1052,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["démarrage",{"_index":2490,"title":{},"body":{"components/Scene3dCoreComponent.html":{},"index.html":{}}}],["dépannage",{"_index":3011,"title":{},"body":{"index.html":{}}}],["départ",{"_index":406,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["dépasser",{"_index":2694,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["dépendances",{"_index":2950,"title":{},"body":{"index.html":{}}}],["désactivée",{"_index":2807,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["détaill",{"_index":3010,"title":{},"body":{"index.html":{}}}],["détaillés",{"_index":3025,"title":{},"body":{"index.html":{}}}],["détails",{"_index":2051,"title":{},"body":{"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{}}}],["détectés",{"_index":1547,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["développement",{"_index":3000,"title":{},"body":{"index.html":{}}}],["e",{"_index":2603,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["e.id",{"_index":1319,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["e.severity",{"_index":2756,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["e2e8f0",{"_index":570,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["e83e8c",{"_index":1301,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["e9ecef",{"_index":1900,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["ease",{"_index":552,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["ecart",{"_index":376,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{}}}],["ecartmax",{"_index":357,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["ecartmin",{"_index":351,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["ecartoptimal",{"_index":314,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["effac",{"_index":2830,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["effacer",{"_index":1462,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["element",{"_index":36,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}}}],["element.name",{"_index":1331,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["element.type",{"_index":1332,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["elementdimensions",{"_index":1850,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["elementdimensions.depth",{"_index":1888,"title":{},"body":{"components/DimensionsControllerComponent.html":{}}}],["elementdimensions.height",{"_index":1887,"title":{},"body":{"components/DimensionsControllerComponent.html":{}}}],["elementdimensions.width",{"_index":1886,"title":{},"body":{"components/DimensionsControllerComponent.html":{}}}],["elementdimensionschange",{"_index":1854,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["elementid",{"_index":1290,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["elementname",{"_index":1849,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["elementref",{"_index":2445,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["elements",{"_index":1263,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["elementselected",{"_index":1271,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["emissive",{"_index":2148,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["emissiveintensity",{"_index":2150,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["emiterror(error",{"_index":1505,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["emitevent(event",{"_index":1378,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["emitmaterialchanged(materialid",{"_index":1490,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["emitopeningmodified(openingid",{"_index":1485,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["emitsceneupdated(scenedata",{"_index":1496,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["emitsuccess(message",{"_index":1509,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["emitvalidationresult(validationdata",{"_index":1500,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["emitwallmodified(wallid",{"_index":1480,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["en",{"_index":149,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{}}}],["enabled",{"_index":1728,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["enabledamping",{"_index":1698,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["enablepan",{"_index":1699,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["enablerotate",{"_index":1700,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["enablezoom",{"_index":1701,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["enregistrer",{"_index":1454,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["entre",{"_index":355,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ControlesScene.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["envoy",{"_index":1403,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["envoyer",{"_index":1398,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["epaisseur",{"_index":748,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Mur.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["erreur",{"_index":1560,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["erreurs",{"_index":750,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"index.html":{}}}],["erreurs.length",{"_index":857,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["error",{"_index":304,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["error('configuration",{"_index":1652,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["error('couleur",{"_index":2304,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["error('données",{"_index":279,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["error('format",{"_index":290,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["error('matériau",{"_index":2297,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["error('nom",{"_index":2301,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["error('ouverture",{"_index":976,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["error('paramètres",{"_index":815,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["error('position",{"_index":820,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["error('propriétés",{"_index":295,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["error(`mur",{"_index":826,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["error.code",{"_index":2820,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["error.message",{"_index":1506,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["error.stack",{"_index":1508,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["errors",{"_index":2662,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["errors.filter(e",{"_index":2755,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["errors.push",{"_index":2790,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["errors.push(...openingvalidation.errors",{"_index":2745,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["errors.push(...proportionsvalidation.errors",{"_index":2750,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["errors.push(...wallvalidation.errors",{"_index":2738,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["errorsbycategory",{"_index":2679,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["errorsbycategory[rule.category",{"_index":2821,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["espacement",{"_index":434,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["est",{"_index":840,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["esthétiques",{"_index":2720,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["estimation",{"_index":1808,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["et",{"_index":114,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["etage",{"_index":180,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["event",{"_index":1380,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/ServiceMessage.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["event.clientx",{"_index":2520,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["event.clienty",{"_index":2521,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["event.deltay",{"_index":2536,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["event.priority",{"_index":1397,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["event.source",{"_index":1393,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["event.target.files[0",{"_index":2599,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["event.timestamp",{"_index":1425,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["event.type",{"_index":1390,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["event_${date.now()}_${math.random().tostring(36).substr(2",{"_index":1381,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["eventemitter",{"_index":1279,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["events",{"_index":1370,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["eventsbypriority",{"_index":1363,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["eventsbysource",{"_index":1362,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["eventsbytype",{"_index":1361,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["eventsubject",{"_index":1367,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["eventtype",{"_index":1391,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["ex",{"_index":1042,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["example",{"_index":2948,"title":{},"body":{"index.html":{}}}],["exit_accessibility",{"_index":2711,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["export",{"_index":32,"title":{},"body":{"components/App.html":{},"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{}}}],["export/import",{"_index":2971,"title":{},"body":{"index.html":{}}}],["exportcommunicationdata",{"_index":1470,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["exportdate",{"_index":1472,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["exporter",{"_index":134,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["exporterdonnees",{"_index":89,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["exportstructure",{"_index":2590,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["exportvalidationdata",{"_index":2831,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["extrudegeometry",{"_index":1171,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["f12",{"_index":3022,"title":{},"body":{"index.html":{}}}],["f5c6cb",{"_index":527,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["f8d7da",{"_index":526,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["f8f9fa",{"_index":464,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["f\\d]{2})$/i.exec(hex",{"_index":2270,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["f\\d]{2})([a",{"_index":2269,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["faire",{"_index":2697,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["false",{"_index":308,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["family",{"_index":454,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["far",{"_index":1112,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["façade",{"_index":581,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["fd7e14",{"_index":1297,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["fenetre",{"_index":909,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["fenetre').length",{"_index":245,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["fenetre.dimensions.depth",{"_index":701,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetre.dimensions.height",{"_index":700,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetre.dimensions.width",{"_index":699,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetre.position.x.tofixed(2",{"_index":696,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetre.position.y.tofixed(2",{"_index":697,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetre.position.z.tofixed(2",{"_index":698,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetre.surface",{"_index":999,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["fenetre1",{"_index":1609,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["fenetre2",{"_index":1611,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["fenetre3",{"_index":1612,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["fenetre_bleue",{"_index":2214,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["fenetre_rouge",{"_index":2217,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["fenetreconfig",{"_index":323,"title":{"interfaces/FenetreConfig.html":{}},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{},"coverage.html":{}}}],["fenetres",{"_index":52,"title":{},"body":{"components/App.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{},"index.html":{}}}],["fenetres'},{'name",{"_index":44,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}}}],["fenetres.component').then(m",{"_index":3064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fenetres.component.ts",{"_index":441,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"coverage.html":{}}}],["fenetres.component.ts:400",{"_index":640,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetres.component.ts:401",{"_index":639,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetres.component.ts:404",{"_index":638,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetres.component.ts:405",{"_index":637,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetres.component.ts:406",{"_index":636,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetres.component.ts:407",{"_index":641,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetres.component.ts:410",{"_index":635,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetres.component.ts:411",{"_index":622,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetres.component.ts:415",{"_index":632,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetres.component.ts:419",{"_index":633,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetres.component.ts:434",{"_index":630,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetres.component.ts:474",{"_index":624,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetres.component.ts:485",{"_index":628,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetres.component.ts:504",{"_index":634,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetres.component.ts:523",{"_index":627,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetres.component.ts:539",{"_index":625,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetres.foreach((fenetre",{"_index":694,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["fenetres.reduce((total",{"_index":998,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["fenetres.service",{"_index":645,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["fenetres.service.ts",{"_index":313,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{},"coverage.html":{}}}],["fenetres.service.ts:134",{"_index":724,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["fenetres.service.ts:175",{"_index":733,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["fenetres.service.ts:263",{"_index":727,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["fenetres.service.ts:321",{"_index":730,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["fenetres.service.ts:365",{"_index":715,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["fenetres.service.ts:50",{"_index":736,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["fenetres.service.ts:59",{"_index":712,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["fenetres.service.ts:68",{"_index":722,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["fenetres/calculateur",{"_index":312,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fenetrescalculatorcomponent",{"_index":51,"title":{"components/FenetresCalculatorComponent.html":{}},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{},"coverage.html":{}}}],["fenetresparams",{"_index":1948,"title":{"interfaces/FenetresParams.html":{}},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"coverage.html":{}}}],["fenêtre",{"_index":342,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"interfaces/OpeningConfig.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["fenêtre(s",{"_index":399,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["fenêtres",{"_index":356,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{}}}],["ff0000",{"_index":2218,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["ffc107",{"_index":1295,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["fff",{"_index":1907,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["ffffff",{"_index":1305,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["fichier",{"_index":1606,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"index.html":{}}}],["field",{"_index":1107,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["file",{"_index":7,"title":{},"body":{"components/App.html":{},"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{}}}],["filereader",{"_index":2601,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["filter",{"_index":1351,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["filter(event",{"_index":1389,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["filter(materiau",{"_index":2362,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["filter(message",{"_index":1407,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["finalscore",{"_index":2753,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["fit",{"_index":482,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["flex",{"_index":495,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["flexibles",{"_index":2965,"title":{},"body":{"index.html":{}}}],["fogcolor",{"_index":1712,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["fogfar",{"_index":1714,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["fognear",{"_index":1713,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["fonctionnalités",{"_index":2959,"title":{},"body":{"index.html":{}}}],["fonctions",{"_index":1223,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["fond",{"_index":1097,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["font",{"_index":453,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["forcer",{"_index":1545,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["form",{"_index":575,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["format",{"_index":2158,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["formaterconfiguration",{"_index":615,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["formaterconfiguration(fenetres",{"_index":626,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["forme",{"_index":1053,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["formsmodule",{"_index":446,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["fov",{"_index":1106,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["fps",{"_index":1734,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["fr",{"_index":3040,"title":{},"body":{"index.html":{}}}],["frame",{"_index":1818,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["framework",{"_index":2996,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":2997,"title":{},"body":{"index.html":{}}}],["fullevent",{"_index":1379,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["fullmessage",{"_index":1400,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["g",{"_index":2135,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["gap",{"_index":485,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["garder",{"_index":2552,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["gauche",{"_index":239,"title":{},"body":{"injectables/BatimentService.html":{},"components/CalculateurFenetresComponent.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["gauche/droite",{"_index":1215,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["generate",{"_index":3033,"title":{},"body":{"index.html":{}}}],["genererconfiguration",{"_index":616,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["genererconfigurationfenetres",{"_index":710,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["genererconfigurationfenetres(mur",{"_index":725,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["generercouleuraleatoire",{"_index":2371,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["genererpaletteharmonieuse(couleurbase",{"_index":2374,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["geneva",{"_index":458,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["gestion",{"_index":77,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"index.html":{}}}],["getallouvertures",{"_index":1666,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["getcamera",{"_index":2400,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["getconfiguration",{"_index":1521,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["getconfigurationobservable",{"_index":1646,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["getcontrolesscene",{"_index":1771,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["getcontrolessceneobservable",{"_index":1773,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["getcouleurmurs",{"_index":1522,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["getcouleursutilisees",{"_index":1020,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["getdatecreation",{"_index":90,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["getdernieremodification",{"_index":91,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["getdescription",{"_index":92,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["getdimensionsbatiment",{"_index":1523,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["getdoorhole",{"_index":2866,"title":{},"body":{"classes/WallCalculations.html":{}}}],["getdoorhole(config",{"_index":1229,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["getevents",{"_index":1412,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["geteventsbypriority(priority",{"_index":1428,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["geteventsbyprioritystats",{"_index":1443,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["geteventsbysource(source",{"_index":1427,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["geteventsbysourcestats",{"_index":1441,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["geteventsbytype(type",{"_index":1426,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["geteventsbytypestats",{"_index":1438,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["getfenetres",{"_index":961,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["getlumieres",{"_index":1781,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["getlumieresobservable",{"_index":1783,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["getmateriauparid(id",{"_index":2281,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["getmateriauxfenetres",{"_index":2292,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["getmateriauxmurs",{"_index":2288,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["getmateriauxpartype(type",{"_index":2284,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["getmateriauxportes",{"_index":2290,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["getmessages",{"_index":1414,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["getmur",{"_index":1669,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["getmur(nommur",{"_index":1663,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["getmurarriere",{"_index":806,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["getmurdroit",{"_index":810,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["getmurfromconfig",{"_index":617,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["getmurfromconfig(nommur",{"_index":629,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["getmurgauche",{"_index":808,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["getmurname",{"_index":2098,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["getmurname(murid",{"_index":2097,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["getmurparid",{"_index":2003,"title":{},"body":{"injectables/MurService.html":{}}}],["getmurparid(id",{"_index":798,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["getmurpartype",{"_index":2004,"title":{},"body":{"injectables/MurService.html":{}}}],["getmurpartype(type",{"_index":802,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["getmurprincipal",{"_index":804,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["getmurs",{"_index":794,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["getmursadjacents",{"_index":2005,"title":{},"body":{"injectables/MurService.html":{}}}],["getmursadjacents(mur",{"_index":891,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["getmursavecplusouvertures",{"_index":870,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["getmurselectionne",{"_index":2045,"title":{},"body":{"components/MursControllerComponent.html":{}}}],["getmursobservable",{"_index":796,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["getmurssansouvertures",{"_index":874,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["getnom",{"_index":93,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["getnombremurs",{"_index":2622,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["getnombreouvertures",{"_index":2627,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["getnommur",{"_index":2006,"title":{},"body":{"injectables/MurService.html":{}}}],["getnommur(type",{"_index":778,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["getouvertureparid(id",{"_index":953,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["getouvertures",{"_index":948,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["getouvertureselectionnee",{"_index":2110,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["getouverturesobservable",{"_index":950,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["getouverturesparmur(murparent",{"_index":964,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["getouverturespartype(type",{"_index":956,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["getpaletteparid(id",{"_index":2324,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["getpalettes",{"_index":2320,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["getpalettesobservable",{"_index":2322,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["getpalettespartype(type",{"_index":2327,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["getperimetre",{"_index":2615,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["getplusgrandeouverture",{"_index":1004,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["getpluspetiteouverture",{"_index":1011,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["getpointleplusprochedecamera",{"_index":1833,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["getportes",{"_index":959,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["getproprietes",{"_index":94,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["getproprietescamera",{"_index":1764,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["getproprietescameraobservable",{"_index":1766,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["getproprietesobservable",{"_index":95,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["getproprietesscene",{"_index":1757,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["getproprietessceneobservable",{"_index":1759,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["getratiohauteurlongueur",{"_index":2617,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["getrecentevents(hours",{"_index":1419,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["getrenderer",{"_index":2401,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["getscene",{"_index":2402,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["getselectedelement",{"_index":1311,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["getstatistiques",{"_index":96,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["getstatistiquesmateriaux",{"_index":2356,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["getstatistiquesmurs",{"_index":858,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["getstatistiquesscene",{"_index":1804,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["getstats",{"_index":1458,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["getstatsobservable",{"_index":1460,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["getsurface",{"_index":97,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["getsurfacesol",{"_index":2611,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["gettextureparid(id",{"_index":2342,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["gettextures",{"_index":2338,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["gettexturesobservable",{"_index":2340,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["gettexturespartype(type",{"_index":2345,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["gettypebatiment",{"_index":98,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["getvalidationhistory",{"_index":2809,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["getvalidationrules",{"_index":2798,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["getvolume",{"_index":99,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["getvolumetotal",{"_index":2620,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["getwindowhole",{"_index":2867,"title":{},"body":{"classes/WallCalculations.html":{}}}],["getwindowhole(config",{"_index":1242,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["globale",{"_index":2560,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["globales",{"_index":2648,"title":{},"body":{"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["globaux",{"_index":2982,"title":{},"body":{"index.html":{}}}],["grand",{"_index":422,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{}}}],["grande",{"_index":415,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["grid",{"_index":479,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["gridhelper",{"_index":2512,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["grille",{"_index":2482,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["gris",{"_index":1182,"title":{},"body":{"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["ground",{"_index":1152,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["group",{"_index":1905,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["guide",{"_index":3005,"title":{},"body":{"index.html":{}}}],["génère",{"_index":728,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["général",{"_index":1084,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["générale",{"_index":1096,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["générales",{"_index":2647,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["génération",{"_index":3032,"title":{},"body":{"index.html":{}}}],["généraux",{"_index":1118,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["générer",{"_index":604,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["générée",{"_index":606,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["géométriques",{"_index":740,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["h",{"_index":2137,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["h3",{"_index":473,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["h4",{"_index":1901,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["halfwidth",{"_index":1230,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["harmonie",{"_index":2722,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["harmonieuses",{"_index":2373,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["hasconfigurationchanged",{"_index":1524,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["haut",{"_index":1179,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["haute",{"_index":424,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["hauteur",{"_index":348,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{}}}],["hauteur/longueur",{"_index":2582,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["hauteurfenetre",{"_index":377,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["hauteurfenetremax",{"_index":349,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["hauteurfenetremin",{"_index":346,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["hauteurfenetre}m",{"_index":426,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["hauteurmur",{"_index":383,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["hauteurmurmin",{"_index":365,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["height",{"_index":329,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["helpers",{"_index":2553,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["hexadécimale",{"_index":1041,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["hextorgb(hex",{"_index":2268,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["high",{"_index":1348,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["high').length",{"_index":2757,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["history",{"_index":2833,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["horizontale",{"_index":1069,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["hours",{"_index":1423,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["hsl",{"_index":2275,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["html",{"_index":35,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}}}],["http://localhost:4200",{"_index":2958,"title":{},"body":{"index.html":{}}}],["ici",{"_index":1117,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["icon",{"_index":1915,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["icone",{"_index":529,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["id",{"_index":747,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["identifier",{"_index":2872,"title":{},"body":{"coverage.html":{}}}],["idouverture",{"_index":1654,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["immédiatement",{"_index":2993,"title":{},"body":{"index.html":{}}}],["implements",{"_index":442,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/Scene3dCoreComponent.html":{}}}],["import",{"_index":27,"title":{},"body":{"components/App.html":{},"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["import('./components/calculateur",{"_index":3063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["import('./components/scene3d/scene3d').then(m",{"_index":3061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["importante",{"_index":2764,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["importcommunicationdata(datajson",{"_index":1474,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["importedstructure",{"_index":2604,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["importer",{"_index":162,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["importerdonnees",{"_index":100,"title":{},"body":{"injectables/BatimentService.html":{}}}],["importerdonnees(donneesjson",{"_index":160,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["imports",{"_index":12,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["importstructure",{"_index":2592,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["importvalidationdata",{"_index":2837,"title":{},"body":{"injectables/ValidationService.html":{}}}],["importvalidationdata(datajson",{"_index":2834,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["importées",{"_index":287,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["inclinaison",{"_index":1142,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["incomplète",{"_index":977,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["incomplètes",{"_index":296,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["inconnu",{"_index":782,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["index",{"_index":15,"title":{"index.html":{}},"body":{"components/App.html":{},"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["industriel",{"_index":193,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{},"components/StructureControllerComponent.html":{}}}],["infinity",{"_index":1836,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/App.html":{},"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["informations",{"_index":582,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"components/StructureControllerComponent.html":{}}}],["inférieure",{"_index":901,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["inhabituel",{"_index":2777,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["initial",{"_index":1031,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["initiale",{"_index":1140,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["initialis",{"_index":368,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["initialisation",{"_index":2463,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["initialiser",{"_index":755,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["initialisermateriauxpardefaut",{"_index":2180,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["initialisermurs",{"_index":759,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["initialiserouvertures",{"_index":923,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["initialiserpalettespardefaut",{"_index":2227,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["initialisertexturespardefaut",{"_index":2254,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["initializevalidationrules",{"_index":2686,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["initiaux",{"_index":1060,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["initthreejs",{"_index":2403,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["inject",{"_index":2452,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["injectable",{"_index":70,"title":{"injectables/BatimentService.html":{},"injectables/CalculateurFenetresService.html":{},"injectables/ConfigDirectService.html":{},"injectables/ConfigurationService.html":{},"injectables/MurService.html":{},"injectables/ValidationService.html":{}},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"coverage.html":{}}}],["injectables",{"_index":72,"title":{},"body":{"injectables/BatimentService.html":{},"injectables/CalculateurFenetresService.html":{},"injectables/ConfigDirectService.html":{},"injectables/ConfigurationService.html":{},"injectables/MurService.html":{},"injectables/ValidationService.html":{},"overview.html":{}}}],["inline",{"_index":1909,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["input",{"_index":519,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["input.accept",{"_index":2597,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["input.click",{"_index":2608,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["input.onchange",{"_index":2598,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["input.type",{"_index":2596,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["inputs",{"_index":1262,"title":{},"body":{"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}}}],["inspirées",{"_index":2239,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["install",{"_index":2952,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2949,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":2549,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["intelligent",{"_index":578,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["intensit",{"_index":1090,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["intensity",{"_index":1089,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["interactive",{"_index":2987,"title":{},"body":{"index.html":{}}}],["interactives",{"_index":2964,"title":{},"body":{"index.html":{}}}],["interface",{"_index":189,"title":{"interfaces/CalculFenetres.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"interfaces/WallConfig.html":{}},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":310,"title":{},"body":{"interfaces/CalculFenetres.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"interfaces/WallConfig.html":{},"overview.html":{}}}],["intuitive",{"_index":2960,"title":{},"body":{"index.html":{}}}],["invalide",{"_index":291,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/ValidationMur.html":{}}}],["invalides",{"_index":283,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["ismousedown",{"_index":2516,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["isplatformbrowser",{"_index":2454,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["isplatformbrowser(this.platformid",{"_index":2457,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["isvalid",{"_index":315,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["isvisible",{"_index":1264,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["item",{"_index":536,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["item.invalid",{"_index":1914,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["item.valid",{"_index":1913,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["items",{"_index":497,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["jaune",{"_index":1294,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["jour",{"_index":167,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"index.html":{}}}],["jpg",{"_index":2159,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["json",{"_index":280,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["json.parse(datajson",{"_index":1475,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["json.parse(donneesjson",{"_index":285,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["json.parse(e.target.result",{"_index":2605,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["json.stringify(data",{"_index":1473,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["json.stringify(donneesexport",{"_index":274,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["jusqu",{"_index":1236,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["justify",{"_index":538,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["kb",{"_index":2162,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["key",{"_index":1963,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["keyof",{"_index":1664,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["l",{"_index":2139,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["l'application",{"_index":2954,"title":{},"body":{"index.html":{}}}],["l'apprentissage",{"_index":3038,"title":{},"body":{"index.html":{}}}],["l'espace",{"_index":427,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["l'historique",{"_index":1463,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["l'initialisation",{"_index":2387,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["l'interaction",{"_index":2542,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["l'interface",{"_index":3006,"title":{},"body":{"index.html":{}}}],["l'ouverture",{"_index":1045,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["l'écart",{"_index":420,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["l'éclairage",{"_index":1078,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["l'élément",{"_index":1046,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["l'épaisseur",{"_index":834,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["l'événement",{"_index":2759,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["l\\'ajout",{"_index":971,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["l\\'architecture",{"_index":2248,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["l\\'esthétique",{"_index":2727,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["l\\'importation",{"_index":307,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["l\\'isolation",{"_index":2796,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["l\\'origine",{"_index":856,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["l\\'ouverture",{"_index":2123,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["la",{"_index":112,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["label",{"_index":499,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["labels",{"_index":1214,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["labelsize",{"_index":1221,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["lancement",{"_index":2953,"title":{},"body":{"index.html":{}}}],["langage",{"_index":2999,"title":{},"body":{"index.html":{}}}],["large",{"_index":2701,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["largeur",{"_index":339,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{}}}],["largeur/hauteur",{"_index":911,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["largeurdisponible",{"_index":389,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["largeurfenetre",{"_index":374,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["largeurfenetremax",{"_index":343,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["largeurfenetremin",{"_index":337,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["largeurfenetreoptimale",{"_index":316,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["largeurminimale",{"_index":429,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["largeurmur",{"_index":381,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["largeurparfenetre",{"_index":391,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["largeurtotale",{"_index":405,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["largeurtotaleutilisee",{"_index":317,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["lastevent",{"_index":1365,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["lastvalidation",{"_index":2681,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["latérale",{"_index":2985,"title":{},"body":{"index.html":{}}}],["latéraux",{"_index":1196,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["le",{"_index":115,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CameraConfig.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesScene.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["lecture",{"_index":1552,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["left",{"_index":469,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":34,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}}}],["les",{"_index":135,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["leurs",{"_index":719,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["lev",{"_index":994,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["libre",{"_index":3037,"title":{},"body":{"index.html":{}}}],["licence",{"_index":3035,"title":{},"body":{"index.html":{}}}],["lighting",{"_index":1130,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["lightingconfig",{"_index":1088,"title":{"interfaces/LightingConfig.html":{}},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["line",{"_index":574,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["lint",{"_index":3031,"title":{},"body":{"index.html":{}}}],["linting",{"_index":3030,"title":{},"body":{"index.html":{}}}],["lisse",{"_index":2142,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["list",{"_index":535,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["listenfromservice(servicename",{"_index":1410,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["listentoeventtype(eventtype",{"_index":1387,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["listentomessages(servicename",{"_index":1405,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["listentopriority(priority",{"_index":1395,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["listentosource(source",{"_index":1392,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["lit",{"_index":1514,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["literal",{"_index":714,"title":{},"body":{"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"interfaces/Ouverture.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/Structure.html":{}}}],["loadcomponent",{"_index":3060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log",{"_index":3024,"title":{},"body":{"index.html":{}}}],["loignée",{"_index":855,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["loin",{"_index":1128,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["longueur",{"_index":1212,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["longueuroptimale",{"_index":2583,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["lors",{"_index":306,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["low",{"_index":1346,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["lumiere",{"_index":1754,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["lumiere.id",{"_index":1795,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["lumiere.length",{"_index":1807,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["lumiere_${date.now",{"_index":1788,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["lumiere_ambient",{"_index":1746,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["lumiere_directionnelle",{"_index":1749,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["lumiereactuelles",{"_index":1745,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["lumiereactuelles.filter(lumiere",{"_index":1794,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["lumiereactuelles.findindex(lumiere",{"_index":1799,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["lumiereactuelles.push(lumierecomplete",{"_index":1790,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["lumiereactuelles[lumiereindex",{"_index":1800,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["lumiereactuelles[lumiereindex].enabled",{"_index":1803,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["lumierecomplete",{"_index":1786,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["lumierefiltrees",{"_index":1793,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["lumiereindex",{"_index":1798,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["lumineuse",{"_index":1091,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["lumière",{"_index":1081,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["lumières",{"_index":1129,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["légèrement",{"_index":1153,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["lément",{"_index":1314,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"index.html":{}}}],["léments",{"_index":1250,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["m",{"_index":194,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{},"components/StructureControllerComponent.html":{}}}],["m.calculateurfenetrescomponent",{"_index":3065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["m.id",{"_index":1965,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["m.scene3d",{"_index":3062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mainwall",{"_index":1174,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["mainwallconfig",{"_index":1057,"title":{"interfaces/MainWallConfig.html":{}},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["manquant",{"_index":2298,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["manquantes",{"_index":978,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["manquants",{"_index":816,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["map",{"_index":1352,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["map(materiau",{"_index":2364,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["mapsize",{"_index":1092,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["marge",{"_index":362,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{}}}],["margemin",{"_index":360,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["margerestante",{"_index":318,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["margerestante.tofixed(2)}m",{"_index":401,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["margin",{"_index":449,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["marron",{"_index":1308,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["matching",{"_index":69,"title":{},"body":{"components/App.html":{},"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["material_changed",{"_index":1492,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["materialid",{"_index":1494,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["materials",{"_index":2670,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["materiau",{"_index":2557,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["materiau.couleur",{"_index":2361,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["materiau.id",{"_index":2283,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["materiau.texture",{"_index":2363,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["materiau.type",{"_index":2287,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["materiau_${date.now",{"_index":2308,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["materiaucomplete",{"_index":2307,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["materiauindex",{"_index":2313,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["materiauleplusutilise",{"_index":2169,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["materiauprincipal",{"_index":2558,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["materiauservice",{"_index":1493,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesMateriaux.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["materiautoit",{"_index":2559,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["materiaux",{"_index":2173,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["materiaux.foreach(materiau",{"_index":2358,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["materiaux.length",{"_index":2357,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["materiaux.map(materiau",{"_index":2360,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["materiauxactuels",{"_index":2170,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["materiauxactuels.filter(materiau",{"_index":2318,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["materiauxactuels.findindex(materiau",{"_index":2314,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["materiauxactuels.push(materiaucomplete",{"_index":2310,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["materiauxactuels[materiauindex",{"_index":2315,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["materiauxfiltres",{"_index":2317,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["math.abs(mur.position.x",{"_index":850,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["math.abs(mur.position.y",{"_index":852,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["math.abs(mur.position.z",{"_index":853,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["math.floor(largeurdisponible",{"_index":392,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["math.floor(math.random",{"_index":2372,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["math.max(...murs.map(mur",{"_index":872,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["math.max(0",{"_index":2769,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["math.max(0.1",{"_index":2530,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["math.max(r",{"_index":2277,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["math.max(this.contraintes.ecartmin",{"_index":435,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["math.min(math.pi",{"_index":2531,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["math.min(r",{"_index":2278,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["math.pi",{"_index":1744,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["math.round((calculs.surfaceouvertures",{"_index":773,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["math.round((surfaceouvertures",{"_index":260,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["math.round((this.structure.dimensions.hauteur",{"_index":2618,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["math.round((this.structure.dimensions.longueur",{"_index":2616,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["math.round((totalscore",{"_index":2754,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["math.round(averagescore",{"_index":2826,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["math.round(longueuroptimale",{"_index":2586,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["math.round(math.sqrt(dx",{"_index":889,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationMur.html":{}}}],["math.round(memoireutilisee",{"_index":1815,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["math.round(perimetre",{"_index":793,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["math.round(pourcentagefenetres",{"_index":1003,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["math.round(pourcentageouverturesmoyen",{"_index":869,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["math.round(pourcentageportes",{"_index":1002,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["math.round(ratioaspect",{"_index":946,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["math.round(successrate",{"_index":2825,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["math.round(sum",{"_index":1453,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["math.round(surface",{"_index":229,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["math.round(surfacefenetres",{"_index":1001,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["math.round(surfacemurs",{"_index":261,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["math.round(surfacenet",{"_index":792,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["math.round(surfaceouvertures",{"_index":262,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/ValidationMur.html":{}}}],["math.round(surfaceportes",{"_index":1000,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["math.round(surfacetotale",{"_index":791,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["math.round(this.structure.dimensions.longueur",{"_index":2612,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["math.round(volume",{"_index":234,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["math.round(volumetotal",{"_index":868,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["math.sqrt(this.getvolume",{"_index":2584,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["matériau",{"_index":1489,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesMateriaux.html":{},"components/StructureControllerComponent.html":{}}}],["matériaux",{"_index":2163,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"components/StructureControllerComponent.html":{}}}],["max",{"_index":380,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["maxdimensions",{"_index":1852,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["maxdistance",{"_index":1702,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["maximale",{"_index":345,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":359,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["maxouvertures",{"_index":871,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["maxpolarangle",{"_index":1703,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["maxscore",{"_index":2731,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["maxzoom",{"_index":1074,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["mb",{"_index":1813,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["medium",{"_index":1347,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["memoireutilisee",{"_index":1733,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["message",{"_index":319,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["message.from",{"_index":1411,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["message.to",{"_index":1408,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["messages",{"_index":1354,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"index.html":{}}}],["messagesubject",{"_index":1368,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["metadata",{"_index":9,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}}}],["metallic",{"_index":2144,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["methods",{"_index":84,"title":{},"body":{"injectables/BatimentService.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"components/ColorSelectorComponent.html":{},"injectables/ConfigDirectService.html":{},"injectables/ConfigurationService.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{},"injectables/ValidationService.html":{},"classes/WallCalculations.html":{}}}],["mettre",{"_index":166,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["mettreajourconfiguration",{"_index":1525,"title":{},"body":{"injectables/ConfigDirectService.html":{},"injectables/ConfigurationService.html":{}}}],["mettreajourconfiguration(config",{"_index":1539,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["mettreajourconfiguration(nouvelleconfiguration",{"_index":1648,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["mettreajourcontrolesscene(nouveauxcontroles",{"_index":1775,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["mettreajourdatemodification",{"_index":101,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["mettreajourmur",{"_index":1670,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["mettreajourmur(nommur",{"_index":1684,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["mettreajourproprietes",{"_index":102,"title":{},"body":{"injectables/BatimentService.html":{}}}],["mettreajourproprietes(nouvellesproprietes",{"_index":168,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["mettreajourproprietescamera(nouvellesproprietes",{"_index":1768,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["mettreajourproprietesscene(nouvellesproprietes",{"_index":1761,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["min",{"_index":500,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["mindimensions",{"_index":1851,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["mindistance",{"_index":1704,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["minimale",{"_index":340,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["minimum",{"_index":354,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["minmax(120px",{"_index":1903,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["minmax(150px",{"_index":1916,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["minmax(200px",{"_index":483,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["minmax(250px",{"_index":533,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["minpolarangle",{"_index":1705,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["minsurface",{"_index":1013,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["minzoom",{"_index":1073,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["mis",{"_index":1386,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesScene.html":{}}}],["miscellaneous",{"_index":3045,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mise",{"_index":1495,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ServiceMessage.html":{},"index.html":{}}}],["mises",{"_index":221,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ControlesScene.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesScene.html":{}}}],["mission",{"_index":2486,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["missive",{"_index":2149,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["moderne",{"_index":2127,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["modernes",{"_index":2230,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["modification",{"_index":143,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/MurService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/ValidationMur.html":{},"index.html":{}}}],["modifications",{"_index":1518,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"index.html":{}}}],["modifier",{"_index":812,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/ControlesScene.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"index.html":{}}}],["modifiercouleurmur",{"_index":2007,"title":{},"body":{"injectables/MurService.html":{}}}],["modifiercouleurmur(type",{"_index":832,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["modifiercouleurouverture(id",{"_index":987,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["modifierdimensionsmur",{"_index":2008,"title":{},"body":{"injectables/MurService.html":{}}}],["modifierdimensionsmur(type",{"_index":830,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["modifierdimensionsouverture(id",{"_index":983,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["modifierepaisseurmur",{"_index":2009,"title":{},"body":{"injectables/MurService.html":{}}}],["modifierepaisseurmur(type",{"_index":835,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["modifierlumiere(id",{"_index":1797,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["modifiermateriau(id",{"_index":2312,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["modifierpositionmur",{"_index":2010,"title":{},"body":{"injectables/MurService.html":{}}}],["modifierpositionmur(type",{"_index":813,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["modules",{"_index":3041,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["modèle",{"_index":1114,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["modélisation",{"_index":2943,"title":{},"body":{"index.html":{}}}],["moins",{"_index":2698,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["molette",{"_index":1148,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["monospace",{"_index":545,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["mousex",{"_index":2517,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["mousey",{"_index":2518,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["moyen",{"_index":1447,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/ServiceMessage.html":{}}}],["mur",{"_index":364,"title":{"interfaces/Mur.html":{}},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["mur.dimensions.depth",{"_index":2048,"title":{},"body":{"components/MursControllerComponent.html":{}}}],["mur.dimensions.height",{"_index":384,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{},"components/MursControllerComponent.html":{}}}],["mur.dimensions.height}m",{"_index":425,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["mur.dimensions.width",{"_index":382,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["mur.id",{"_index":801,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["mur.nom",{"_index":1919,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["mur.nombreouvertures",{"_index":867,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["mur.ouvertures.length",{"_index":2049,"title":{},"body":{"components/MursControllerComponent.html":{}}}],["mur.position.x",{"_index":409,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["mur.position.y",{"_index":412,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["mur.pourcentageouvertures",{"_index":846,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["mur.surface",{"_index":865,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["mur.type",{"_index":803,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["mur.volume",{"_index":866,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["mur/mur.service",{"_index":1708,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["mur1",{"_index":2014,"title":{},"body":{"injectables/MurService.html":{}}}],["mur1.position.x",{"_index":881,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["mur1.position.y",{"_index":884,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["mur1.position.z",{"_index":887,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["mur2",{"_index":879,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["mur2.position.x",{"_index":882,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["mur2.position.y",{"_index":885,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["mur2.position.z",{"_index":888,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["mur_${type",{"_index":762,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["mur_beton",{"_index":2181,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["mur_bois",{"_index":2197,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["mur_brique",{"_index":2189,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["murchanged",{"_index":1983,"title":{},"body":{"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["murconfig",{"_index":332,"title":{"interfaces/MurConfig.html":{}},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"coverage.html":{}}}],["murconfig.couleur",{"_index":767,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["murconfig.dimensions",{"_index":766,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["murconfig.dimensions.depth",{"_index":787,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["murconfig.dimensions.height",{"_index":785,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["murconfig.dimensions.width",{"_index":784,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["murconfig.epaisseur",{"_index":768,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["murconfig.ouvertures.find(o",{"_index":986,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["murconfig.ouvertures.foreach(ouvertureconfig",{"_index":925,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["murconfig.ouvertures.length",{"_index":771,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["murconfig.ouvertures.reduce((total",{"_index":786,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["murconfig.position",{"_index":765,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["murconfig.position.x",{"_index":788,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["murconfig.position.y",{"_index":789,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["murconfig.position.z",{"_index":790,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["murdeleted",{"_index":1987,"title":{},"body":{"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["murduplicated",{"_index":1986,"title":{},"body":{"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["murfilter",{"_index":2068,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["murid",{"_index":1978,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["murinfo",{"_index":610,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["murinfo.dimensions.depth",{"_index":586,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["murinfo.dimensions.height",{"_index":584,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["murinfo.dimensions.width",{"_index":583,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["murinfo.position.x",{"_index":587,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["murinfo.position.y",{"_index":588,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["murinfo.position.z",{"_index":589,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["murmatch",{"_index":2080,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["murparent",{"_index":910,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["murs",{"_index":55,"title":{},"body":{"components/App.html":{},"injectables/BatimentService.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["murs.arriere.dimensions.height",{"_index":250,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["murs.arriere.dimensions.width",{"_index":249,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["murs.droit.dimensions.height",{"_index":254,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["murs.droit.dimensions.width",{"_index":253,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["murs.filter(mur",{"_index":873,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["murs.foreach(autremur",{"_index":893,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["murs.foreach(mur",{"_index":1837,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["murs.gauche.dimensions.height",{"_index":252,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["murs.gauche.dimensions.width",{"_index":251,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["murs.length",{"_index":863,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationMur.html":{}}}],["murs.principal.dimensions.height",{"_index":248,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["murs.principal.dimensions.width",{"_index":247,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["murs.push(mur",{"_index":774,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["murs.reduce((total",{"_index":864,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["mursactuels",{"_index":753,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["mursadjacents",{"_index":892,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["murscontrollercomponent",{"_index":54,"title":{"components/MursControllerComponent.html":{}},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{},"coverage.html":{}}}],["mursdisponibles",{"_index":1938,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["murselected",{"_index":1942,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["murselectionne",{"_index":611,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["murselectionne.couleur",{"_index":2056,"title":{},"body":{"components/MursControllerComponent.html":{}}}],["murselectionne.dimensions.depth",{"_index":1922,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"components/MursControllerComponent.html":{}}}],["murselectionne.dimensions.height",{"_index":1921,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"components/MursControllerComponent.html":{}}}],["murselectionne.dimensions.width",{"_index":1920,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"components/MursControllerComponent.html":{}}}],["murselectionne.epaisseur",{"_index":2057,"title":{},"body":{"components/MursControllerComponent.html":{}}}],["murselectionne.nom",{"_index":2052,"title":{},"body":{"components/MursControllerComponent.html":{}}}],["murselectionne.ouvertures.length",{"_index":2058,"title":{},"body":{"components/MursControllerComponent.html":{}}}],["murselectionne.position.x",{"_index":2053,"title":{},"body":{"components/MursControllerComponent.html":{}}}],["murselectionne.position.y",{"_index":2054,"title":{},"body":{"components/MursControllerComponent.html":{}}}],["murselectionne.position.z",{"_index":2055,"title":{},"body":{"components/MursControllerComponent.html":{}}}],["murservice",{"_index":752,"title":{"injectables/MurService.html":{}},"body":{"interfaces/CalculsMur.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationMur.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mètres",{"_index":1604,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["mémoire",{"_index":1812,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["métal",{"_index":2653,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["métallique",{"_index":2145,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["méthode",{"_index":2624,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["méthodes",{"_index":1478,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/ServiceMessage.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["métier",{"_index":2976,"title":{},"body":{"index.html":{}}}],["n",{"_index":693,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["name",{"_index":40,"title":{},"body":{"components/App.html":{},"injectables/BatimentService.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"injectables/ConfigDirectService.html":{},"injectables/ConfigurationService.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{}}}],["nature",{"_index":2240,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["naturel",{"_index":2199,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["naturelle",{"_index":1123,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["navigation",{"_index":2388,"title":{},"body":{"components/Scene3dCoreComponent.html":{},"index.html":{}}}],["ne",{"_index":2692,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"index.html":{}}}],["near",{"_index":1110,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["new",{"_index":173,"title":{},"body":{"injectables/BatimentService.html":{},"components/CalculateurFenetresComponent.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"coverage.html":{},"index.html":{}}}],["newcolor",{"_index":1265,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["newmaterial",{"_index":1491,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["ng",{"_index":2955,"title":{},"body":{"index.html":{}}}],["ngonchanges",{"_index":2071,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["ngondestroy",{"_index":2404,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["ngoninit",{"_index":618,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{}}}],["niveau",{"_index":1155,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["noir",{"_index":1306,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["nom",{"_index":128,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"index.html":{}}}],["nombre",{"_index":370,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/ControlesScene.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesScene.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"index.html":{}}}],["nombrecouleurs",{"_index":2375,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["nombrefenetres",{"_index":198,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["nombrefenetressouhaitees",{"_index":612,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["nombrelumieres",{"_index":1731,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["nombremaxfenetres",{"_index":320,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["nombremurs",{"_index":195,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ControlesScene.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesScene.html":{}}}],["nombreobjets",{"_index":1730,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["nombreouvertures",{"_index":196,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationMur.html":{}}}],["nombrepartype",{"_index":2165,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["nombrepartype[a",{"_index":2368,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["nombrepartype[b",{"_index":2369,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["nombrepartype[materiau.type",{"_index":2359,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["nombreportes",{"_index":197,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["nombres",{"_index":824,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["nombretotal",{"_index":859,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["nombretriangles",{"_index":1732,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["nommur",{"_index":631,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"injectables/ConfigurationService.html":{}}}],["noms",{"_index":779,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["noms[type",{"_index":781,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["non",{"_index":827,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/ValidationMur.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["none",{"_index":509,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["normal",{"_index":2155,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["nouveau",{"_index":2294,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["nouveaumateriau",{"_index":2296,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["nouveaumateriau.couleur",{"_index":2303,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["nouveaumateriau.nom",{"_index":2299,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["nouveaumateriau.type",{"_index":2300,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["nouveaumur",{"_index":1685,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["nouveaunom",{"_index":129,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["nouveautype",{"_index":132,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["nouveauxcontroles",{"_index":1778,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["nouvelle",{"_index":967,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ControlesScene.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationOuverture.html":{}}}],["nouvelleconfig",{"_index":1563,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["nouvelleconfig.walls.back.color",{"_index":1595,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["nouvelleconfig.walls.back.dimensions.height",{"_index":1570,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["nouvelleconfig.walls.back.dimensions.width",{"_index":1568,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["nouvelleconfig.walls.left.dimensions.depth",{"_index":1569,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["nouvelleconfiguration",{"_index":1649,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["nouvelleconfiguration.dimensions",{"_index":1651,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["nouvelleconfiguration.dimensions.longueur",{"_index":1653,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["nouvelleconfiguration.nom",{"_index":1650,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["nouvellecouleur",{"_index":833,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["nouvelledescription",{"_index":125,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["nouvelleepaisseur",{"_index":836,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["nouvellelumiere",{"_index":1787,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["nouvelleouverture",{"_index":969,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["nouvelleouverture.dimensions",{"_index":974,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["nouvelleouverture.dimensions.width",{"_index":979,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["nouvelleouverture.position",{"_index":975,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["nouvelleouverture.type",{"_index":973,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["nouvellepalette",{"_index":2333,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["nouvelleposition",{"_index":814,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["nouvelleposition.x",{"_index":817,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["nouvelleposition.y",{"_index":818,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["nouvelleposition.z",{"_index":819,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["nouvelles",{"_index":1567,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["nouvellesdimensions",{"_index":831,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["nouvellesproprietes",{"_index":171,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ControlesScene.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesScene.html":{}}}],["nouvelletexture",{"_index":2351,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["npm",{"_index":2951,"title":{},"body":{"index.html":{}}}],["null",{"_index":275,"title":{},"body":{"injectables/BatimentService.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ControlesScene.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["number",{"_index":157,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["numero",{"_index":542,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["o.id",{"_index":980,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["o.type",{"_index":243,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["object",{"_index":289,"title":{},"body":{"injectables/BatimentService.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/ProprietesBatiment.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/StatistiquesBatiment.html":{},"miscellaneous/variables.html":{}}}],["object.entries(buildingdata.murs).foreach(([walltype",{"_index":2733,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["object.entries(config.murs).foreach(([type",{"_index":760,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["object.entries(config.murs).foreach(([typemur",{"_index":924,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["object.keys(nombrepartype).reduce((a",{"_index":2367,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["object.values(buildingdata.murs).foreach((wall",{"_index":2782,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["object.values(config.murs).foreach(mur",{"_index":1667,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["objet",{"_index":1034,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["objets",{"_index":1124,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":152,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["obtenir",{"_index":138,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["ombres",{"_index":1094,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["omit",{"_index":970,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ControlesScene.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationOuverture.html":{}}}],["oncolorchange",{"_index":1257,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["ondestroy",{"_index":2389,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["onelementchange",{"_index":1258,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["onelementdimensionschange",{"_index":1860,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["oninit",{"_index":443,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/Scene3dCoreComponent.html":{}}}],["onmurchange",{"_index":619,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["onouverturechange",{"_index":2085,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["onstructurechange",{"_index":2570,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["onstructuredimensionschange",{"_index":1857,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["opacity",{"_index":565,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["opaque",{"_index":2147,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["opening.dimensions.height",{"_index":2788,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["opening.dimensions.width",{"_index":2787,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["opening_modified",{"_index":1486,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["opening_ratio_high",{"_index":2794,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["opening_ratio_max",{"_index":2704,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["openingconfig",{"_index":1049,"title":{"interfaces/OpeningConfig.html":{}},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{}}}],["openingdata",{"_index":2859,"title":{},"body":{"injectables/ValidationService.html":{}}}],["openingdata.dimensions.height",{"_index":2772,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["openingdata.dimensions.width}m",{"_index":2774,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["openingdata.type",{"_index":2771,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["openingid",{"_index":1487,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["openingpercentage",{"_index":2789,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["openingpercentage.tofixed(1",{"_index":2791,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["openings",{"_index":692,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["openingvalidation",{"_index":2743,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["openingvalidation.score",{"_index":2747,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["optimal",{"_index":432,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["optimale",{"_index":436,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["optimales",{"_index":394,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["optimisation",{"_index":686,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["optimisation.ecart",{"_index":690,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["optimisation.isvalid",{"_index":688,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["optimisation.largeurfenetre",{"_index":689,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["optimise",{"_index":731,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["optimiser",{"_index":605,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["optimiserdimensions",{"_index":620,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{}}}],["optimiserdimensions(mur",{"_index":729,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["optimizedimensions",{"_index":2577,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["optimizedstructure",{"_index":2579,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["optimizedstructure.dimensions.hauteur",{"_index":2588,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["optimizedstructure.dimensions.largeur",{"_index":2587,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["optimizedstructure.dimensions.longueur",{"_index":2585,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["optional",{"_index":109,"title":{},"body":{"injectables/BatimentService.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"components/ColorSelectorComponent.html":{},"interfaces/CommunicationEvent.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"components/FenetresCalculatorComponent.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/ValidationError.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{}}}],["orange",{"_index":1296,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["orthographic",{"_index":1723,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["ou",{"_index":282,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["outils",{"_index":2968,"title":{},"body":{"index.html":{}}}],["outline",{"_index":508,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["output",{"_index":1313,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["outputs",{"_index":1267,"title":{},"body":{"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}}}],["ouverture",{"_index":256,"title":{"interfaces/Ouverture.html":{}},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{}}}],["ouverture(s",{"_index":2050,"title":{},"body":{"components/MursControllerComponent.html":{}}}],["ouverture.couleur",{"_index":1017,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouverture.dimensions.depth",{"_index":2111,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["ouverture.dimensions.height",{"_index":259,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouverture.dimensions.width",{"_index":258,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouverture.id",{"_index":955,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouverture.murparent",{"_index":965,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouverture.position.x",{"_index":2112,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["ouverture.position.y",{"_index":2113,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["ouverture.position.z",{"_index":2114,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["ouverture.surface",{"_index":995,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouverture.type",{"_index":958,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouverture/ouverture.service",{"_index":1709,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["ouverture_${date.now",{"_index":1993,"title":{},"body":{"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["ouvertureadded",{"_index":1984,"title":{},"body":{"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["ouverturechanged",{"_index":2064,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["ouvertureconfig",{"_index":981,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouvertureconfig.couleur",{"_index":933,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouvertureconfig.dimensions",{"_index":932,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouvertureconfig.dimensions.depth",{"_index":942,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouvertureconfig.dimensions.height",{"_index":941,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouvertureconfig.dimensions.width",{"_index":940,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouvertureconfig.id",{"_index":927,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouvertureconfig.nom",{"_index":928,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouvertureconfig.position",{"_index":931,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouvertureconfig.position.x",{"_index":943,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouvertureconfig.position.y",{"_index":944,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouvertureconfig.position.z",{"_index":945,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouvertureconfig.type",{"_index":930,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouvertureconfig.type}_${ouvertureconfig.id",{"_index":929,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouverturedeleted",{"_index":2066,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["ouvertureduplicated",{"_index":2065,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["ouverturedupliquee",{"_index":2091,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["ouvertureid",{"_index":2083,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["ouvertureremoved",{"_index":1985,"title":{},"body":{"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["ouvertures",{"_index":57,"title":{},"body":{"components/App.html":{},"injectables/BatimentService.html":{},"components/CalculateurFenetresComponent.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["ouvertures.foreach(ouverture",{"_index":1022,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouvertures.length",{"_index":1006,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouvertures.push",{"_index":1576,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["ouvertures.push(ouverture",{"_index":937,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouvertures.reduce((plusgrande",{"_index":1007,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouvertures.reduce((pluspetite",{"_index":1012,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouverturesactuelles",{"_index":920,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ouverturescontrollercomponent",{"_index":56,"title":{"components/OuverturesControllerComponent.html":{}},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{},"coverage.html":{}}}],["ouvertureselected",{"_index":2063,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["ouvertureselectionnee",{"_index":2072,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["ouvertureselectionnee.couleur",{"_index":2122,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["ouvertureselectionnee.dimensions.depth",{"_index":2121,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["ouvertureselectionnee.dimensions.height",{"_index":2120,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["ouvertureselectionnee.dimensions.width",{"_index":2119,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["ouvertureselectionnee.position.x",{"_index":2116,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["ouvertureselectionnee.position.y",{"_index":2117,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["ouvertureselectionnee.position.z",{"_index":2118,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["ouvertureselectionnee.type",{"_index":2115,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["ouvertureservice",{"_index":919,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationOuverture.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ouverturesfiltrees",{"_index":2069,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["ouvrez",{"_index":3021,"title":{},"body":{"index.html":{}}}],["overflow",{"_index":571,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["overview",{"_index":3042,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":487,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["package",{"_index":2929,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":451,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["paisse",{"_index":842,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["paisseur",{"_index":1055,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["palette",{"_index":2229,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["palette.id",{"_index":2326,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["palette.type",{"_index":2330,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["palette_${date.now",{"_index":2334,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["palette_architecturale",{"_index":2246,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["palette_classique",{"_index":2232,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["palette_moderne",{"_index":2228,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["palette_naturelle",{"_index":2238,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["palettecomplete",{"_index":2332,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["palettecouleurs",{"_index":2124,"title":{"interfaces/PaletteCouleurs.html":{}},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"coverage.html":{}}}],["palettecouleurs['type",{"_index":2328,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["palettelaplusutilisee",{"_index":2168,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["palettes",{"_index":2126,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["palettes.length",{"_index":2365,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["palettes[0].nom",{"_index":2366,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["palettesactuelles",{"_index":2171,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["palettesactuelles.push(palettecomplete",{"_index":2336,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["panspeed",{"_index":1706,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["papiers",{"_index":708,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["par",{"_index":335,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["param",{"_index":1035,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["parameters",{"_index":107,"title":{},"body":{"injectables/BatimentService.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"components/ColorSelectorComponent.html":{},"injectables/ConfigDirectService.html":{},"injectables/ConfigurationService.html":{},"components/FenetresCalculatorComponent.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"injectables/ValidationService.html":{},"classes/WallCalculations.html":{}}}],["parametre",{"_index":494,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["parametres",{"_index":493,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["parametresfenetres",{"_index":1939,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["parametresfenetres.ecart",{"_index":1928,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["parametresfenetres.nombrefenetres",{"_index":1929,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["parametresreset",{"_index":1943,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["params",{"_index":1904,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["paramètres",{"_index":590,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["parent",{"_index":2543,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["parseint(result[1",{"_index":2271,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["parseint(result[2",{"_index":2273,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["parseint(result[3",{"_index":2274,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["partant",{"_index":1234,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["partial",{"_index":169,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ControlesScene.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesScene.html":{}}}],["partir",{"_index":758,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["pas",{"_index":2693,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"index.html":{}}}],["path",{"_index":3059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":1358,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["pcf",{"_index":1718,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["pcfsoft",{"_index":1719,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["perimetre",{"_index":742,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["personnalisation",{"_index":2963,"title":{},"body":{"index.html":{}}}],["personnalisee",{"_index":2129,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["perspective",{"_index":1722,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["petit",{"_index":1923,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["petite",{"_index":1010,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["pierre",{"_index":2654,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["pièce",{"_index":2716,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["placement",{"_index":2718,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["placées",{"_index":2719,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["plateforme",{"_index":1150,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["platform_id",{"_index":2453,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["platformid",{"_index":2416,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["pleins",{"_index":1197,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["plus",{"_index":848,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["plusgrande",{"_index":1009,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["plusgrande.surface",{"_index":1008,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["png",{"_index":2160,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["poids",{"_index":2673,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["point",{"_index":1061,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["point.x",{"_index":1827,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["point.y",{"_index":1829,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["point.z",{"_index":1831,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["pointer",{"_index":515,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["pointleplusproche",{"_index":1834,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["points",{"_index":1051,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["porte",{"_index":908,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["porte').length",{"_index":244,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["porte.surface",{"_index":997,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["porte1",{"_index":1613,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["porte_bois_brun",{"_index":2212,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["porte_bois_vert",{"_index":2208,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["portes",{"_index":918,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"index.html":{}}}],["portes.reduce((total",{"_index":996,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["position",{"_index":324,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["position.x.tofixed(2",{"_index":601,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["position.y.tofixed(2",{"_index":602,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["position.z.tofixed(2",{"_index":603,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["position3d",{"_index":1033,"title":{"interfaces/Position3D.html":{}},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{}}}],["positions",{"_index":393,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{},"index.html":{}}}],["positionscalculees",{"_index":321,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["possible(s",{"_index":400,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["pour",{"_index":190,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["pourcentage",{"_index":844,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["pourcentagefenetres",{"_index":917,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["pourcentageouvertures",{"_index":201,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/ValidationMur.html":{}}}],["pourcentageouverturesmoyen",{"_index":861,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["pourcentageportes",{"_index":916,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["pre",{"_index":572,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["première",{"_index":1190,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["presetcolors",{"_index":1255,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["presse",{"_index":707,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["previewstructure",{"_index":2609,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["primary",{"_index":553,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["primary:hover:not(:disabled",{"_index":554,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["principal",{"_index":175,"title":{},"body":{"injectables/BatimentService.html":{},"components/CalculateurFenetresComponent.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["principale",{"_index":1113,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["principales",{"_index":1590,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"index.html":{}}}],["priorit",{"_index":1394,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["priority",{"_index":1344,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["private",{"_index":82,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["problèmes",{"_index":3012,"title":{},"body":{"index.html":{}}}],["proche",{"_index":1832,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["proches",{"_index":1125,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["professionnelles",{"_index":2247,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["profondeur",{"_index":585,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["programmation",{"_index":3001,"title":{},"body":{"index.html":{}}}],["projet",{"_index":2974,"title":{},"body":{"index.html":{}}}],["properties",{"_index":16,"title":{"properties.html":{}},"body":{"components/App.html":{},"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"interfaces/WallConfig.html":{},"properties.html":{}}}],["proportions",{"_index":2669,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["proportionsvalidation",{"_index":2748,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["proportionsvalidation.score",{"_index":2752,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["proprietes",{"_index":81,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["proprietesactuelles",{"_index":216,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ControlesScene.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesScene.html":{}}}],["proprietesbatiment",{"_index":83,"title":{"interfaces/ProprietesBatiment.html":{}},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{},"coverage.html":{}}}],["proprietesbatiment['type",{"_index":264,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["proprietescamera",{"_index":1721,"title":{"interfaces/ProprietesCamera.html":{}},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{},"coverage.html":{}}}],["proprieteslumiere",{"_index":1724,"title":{"interfaces/ProprietesLumiere.html":{}},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{},"coverage.html":{}}}],["proprietesmateriau",{"_index":2130,"title":{"interfaces/ProprietesMateriau.html":{}},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"coverage.html":{}}}],["proprietesmateriau['type",{"_index":2285,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["proprietesmisesajour",{"_index":218,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ControlesScene.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesScene.html":{}}}],["proprietesmur",{"_index":746,"title":{"interfaces/ProprietesMur.html":{}},"body":{"interfaces/CalculsMur.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationMur.html":{},"coverage.html":{}}}],["proprietesmur['type",{"_index":764,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["proprietesouverture",{"_index":907,"title":{"interfaces/ProprietesOuverture.html":{}},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationOuverture.html":{},"coverage.html":{}}}],["proprietesouverture['murparent",{"_index":936,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["proprietesscene",{"_index":1710,"title":{"interfaces/ProprietesScene.html":{}},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{},"coverage.html":{}}}],["proprietestexture",{"_index":2152,"title":{"interfaces/ProprietesTexture.html":{}},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"coverage.html":{}}}],["proprietestexture['type",{"_index":2346,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["propriétés",{"_index":147,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["protected",{"_index":17,"title":{},"body":{"components/App.html":{}}}],["providebrowserglobalerrorlisteners",{"_index":3052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideclienthydration(witheventreplay",{"_index":3055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providedin",{"_index":202,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["providerouter(routes",{"_index":3054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":3051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providezonelesschangedetection",{"_index":3053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prédéfinies",{"_index":1317,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["préférable",{"_index":2726,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["préférence",{"_index":2724,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["public",{"_index":80,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["publiques",{"_index":2541,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["purées",{"_index":2231,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["qu'observable",{"_index":151,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["qualit",{"_index":1093,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["que",{"_index":1062,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["quilibre",{"_index":433,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["r",{"_index":2134,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["r.id",{"_index":2802,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["racine",{"_index":2978,"title":{},"body":{"index.html":{}}}],["radius",{"_index":466,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["raisonnable",{"_index":2709,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["raisonnables",{"_index":2767,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["rapide",{"_index":2947,"title":{},"body":{"index.html":{}}}],["rapport",{"_index":1245,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["ratio",{"_index":993,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["ratioaspect",{"_index":905,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["ratiooptimal",{"_index":2581,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["reader",{"_index":2600,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["reader.onload",{"_index":2602,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["reader.readastext(file",{"_index":2607,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["readme",{"_index":2942,"title":{"index.html":{}},"body":{}}],["readonly",{"_index":18,"title":{},"body":{"components/App.html":{},"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["recalculer",{"_index":209,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["recevoir",{"_index":2626,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["rechargement",{"_index":1546,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["recharger",{"_index":1543,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"index.html":{}}}],["rechargerconfiguration",{"_index":1526,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["rechargersinecessaire",{"_index":1527,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["rechargée",{"_index":1566,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["record",{"_index":780,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["recordresponsetime(responsetime",{"_index":1455,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["rectangle",{"_index":1233,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["rectangulaire",{"_index":1175,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["redirectto",{"_index":3066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redémarrez",{"_index":3017,"title":{},"body":{"index.html":{}}}],["refactored.ts",{"_index":2893,"title":{},"body":{"coverage.html":{}}}],["regard",{"_index":1072,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["regarde",{"_index":1063,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["reinitialisercamera",{"_index":1820,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["reinitialiserconfiguration",{"_index":1656,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["reinitialiserparametres",{"_index":1937,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["removeobject",{"_index":2405,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["removeobject(object",{"_index":2438,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["removeouverture",{"_index":2036,"title":{},"body":{"components/MursControllerComponent.html":{}}}],["removeouverture(index",{"_index":1995,"title":{},"body":{"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["remplace",{"_index":1605,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["renderer",{"_index":2394,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["rendererready",{"_index":2412,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["rendu",{"_index":1111,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{}}}],["rendus",{"_index":1126,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["repeat(auto",{"_index":481,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["représenter",{"_index":2705,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["repère",{"_index":1210,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["requestanimationframe",{"_index":2539,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["requis",{"_index":2302,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["resetcamera",{"_index":2406,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["resetcolor",{"_index":1259,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["resetdimensions",{"_index":1863,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["resetrequested",{"_index":1855,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["resetstructure",{"_index":2628,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["resettodefault",{"_index":2575,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["residentiel",{"_index":179,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["resolution",{"_index":2157,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["responsable",{"_index":2386,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["responsetimes",{"_index":1371,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["ressources",{"_index":2980,"title":{},"body":{"index.html":{}}}],["restante",{"_index":597,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["result",{"_index":1911,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["resultat",{"_index":398,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["resultat.isvalid",{"_index":682,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["resultats",{"_index":439,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["resultats.invalid",{"_index":525,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["resultats.valid",{"_index":522,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["resultats[nommur",{"_index":437,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["results",{"_index":68,"title":{},"body":{"components/App.html":{},"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["retour",{"_index":1180,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["retourne",{"_index":718,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["return",{"_index":212,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["returns",{"_index":119,"title":{},"body":{"injectables/BatimentService.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"injectables/ConfigDirectService.html":{},"injectables/ConfigurationService.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Position3D.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"components/StructureControllerComponent.html":{},"injectables/ValidationService.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["rgb",{"_index":2267,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["rgb.b",{"_index":2380,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["rgb.g",{"_index":2379,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["rgba(0,0,0,0.1",{"_index":492,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["rgba(0,0,0,0.2",{"_index":1908,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["rgbtohsl(r",{"_index":2276,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["right",{"_index":1204,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["roof",{"_index":1161,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["root",{"_index":11,"title":{},"body":{"components/App.html":{},"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["root'},{'name",{"_index":41,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}}}],["rose",{"_index":1300,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["rotatespeed",{"_index":1707,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["rotation",{"_index":1066,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["rotationspeed",{"_index":1075,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["rotationx",{"_index":1065,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["rotationy",{"_index":1068,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["rouge",{"_index":1192,"title":{},"body":{"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["roughness",{"_index":2156,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["routeroutlet",{"_index":13,"title":{},"body":{"components/App.html":{}}}],["routes",{"_index":2879,"title":{"routes.html":{}},"body":{"coverage.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["royal",{"_index":1169,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["rugosite",{"_index":2141,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["rugueux",{"_index":2143,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["rule",{"_index":2800,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["rule.enabled",{"_index":2804,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["ruleid",{"_index":2803,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["rules",{"_index":2832,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["rxjs",{"_index":186,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"dependencies.html":{},"index.html":{}}}],["rxjs/operators",{"_index":1353,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["règle",{"_index":2674,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["règles",{"_index":2666,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["réactive",{"_index":3002,"title":{},"body":{"index.html":{}}}],["récents",{"_index":1416,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["récupérer",{"_index":652,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["réduire",{"_index":2792,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["réel",{"_index":1844,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"index.html":{}}}],["référence",{"_index":1209,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["réinitialiser",{"_index":1337,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{},"components/StructureControllerComponent.html":{}}}],["réinitialisée",{"_index":1659,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["réponse",{"_index":1446,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["résidentiel",{"_index":2580,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["résolution",{"_index":1095,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["résultat",{"_index":403,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["résultats",{"_index":592,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["s",{"_index":2138,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["s'appliquent",{"_index":2992,"title":{},"body":{"index.html":{}}}],["s'orienter",{"_index":1211,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["sa",{"_index":1819,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["safety",{"_index":2671,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["sans",{"_index":460,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["sauvegarde",{"_index":2972,"title":{},"body":{"index.html":{}}}],["scale",{"_index":2535,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["scene",{"_index":1119,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["scene3d",{"_index":58,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{},"coverage.html":{},"index.html":{}}}],["scene3d'},{'name",{"_index":59,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}}}],["scene3dcorecomponent",{"_index":60,"title":{"components/Scene3dCoreComponent.html":{}},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{},"coverage.html":{}}}],["scene3drefactored",{"_index":62,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{},"coverage.html":{}}}],["scene_principale",{"_index":1737,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["scene_updated",{"_index":1497,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["sceneactuelle",{"_index":1736,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["sceneconfig",{"_index":1102,"title":{"interfaces/SceneConfig.html":{}},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["scenedata",{"_index":1499,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["sceneready",{"_index":2413,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["sceneservice",{"_index":1498,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesScene.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["score",{"_index":2665,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["scène",{"_index":1079,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["se",{"_index":3013,"title":{},"body":{"index.html":{}}}],["secondary",{"_index":556,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["secondary:hover",{"_index":558,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["section",{"_index":462,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["segoe",{"_index":455,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["select",{"_index":1897,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["selectedelement",{"_index":1273,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["selectedelement.currentcolor",{"_index":1334,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["selectedelement.name",{"_index":1333,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["selectedelementid",{"_index":1266,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["selectedmurid",{"_index":1940,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["selectedouvertureid",{"_index":2062,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["selectelement",{"_index":1260,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["selectelement(elementid",{"_index":1288,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["selection",{"_index":1895,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["selectmur",{"_index":2037,"title":{},"body":{"components/MursControllerComponent.html":{}}}],["selectmur(murid",{"_index":1989,"title":{},"body":{"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["selector",{"_index":10,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["selector'},{'name",{"_index":47,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}}}],["selector.component.css",{"_index":1254,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["selector.component.html",{"_index":1252,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["selector.component.ts",{"_index":1247,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"coverage.html":{}}}],["selector.component.ts:26",{"_index":1276,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["selector.component.ts:27",{"_index":1275,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["selector.component.ts:28",{"_index":1278,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["selector.component.ts:29",{"_index":1277,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["selector.component.ts:31",{"_index":1283,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["selector.component.ts:32",{"_index":1281,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["selector.component.ts:33",{"_index":1280,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["selector.component.ts:34",{"_index":1282,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["selector.component.ts:37",{"_index":1310,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["selector.component.ts:52",{"_index":1312,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["selector.component.ts:56",{"_index":1286,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["selector.component.ts:63",{"_index":1285,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["selector.component.ts:69",{"_index":1292,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["selector.component.ts:74",{"_index":1284,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["selector.component.ts:80",{"_index":1287,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["selector.component.ts:86",{"_index":1289,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["selectouverture",{"_index":2099,"title":{},"body":{"components/OuverturesControllerComponent.html":{}}}],["selectouverture(ouvertureid",{"_index":2082,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["selectpresetcolor",{"_index":1261,"title":{},"body":{"components/ColorSelectorComponent.html":{}}}],["selectpresetcolor(color",{"_index":1291,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["selon",{"_index":776,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["sendmessage(message",{"_index":1399,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["sensibilit",{"_index":1147,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["serif",{"_index":461,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["serve",{"_index":2956,"title":{},"body":{"index.html":{}}}],["service",{"_index":75,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["servicemessage",{"_index":1356,"title":{"interfaces/ServiceMessage.html":{}},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"coverage.html":{}}}],["servicename",{"_index":1409,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["services",{"_index":1355,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["services/calculateur",{"_index":644,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["set",{"_index":1021,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["setupcontrols",{"_index":2407,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["setuplighting",{"_index":2408,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["severity",{"_index":2658,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["shadow",{"_index":491,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["shadowmapenabled",{"_index":1716,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["shadowmaptype",{"_index":1717,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["showaxes",{"_index":2409,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["showelementdimensions",{"_index":1848,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["showgrid",{"_index":2410,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["showstructuredimensions",{"_index":1847,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["si",{"_index":900,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/ValidationMur.html":{}}}],["signal",{"_index":28,"title":{},"body":{"components/App.html":{}}}],["signal('projet",{"_index":23,"title":{},"body":{"components/App.html":{}}}],["simple",{"_index":1038,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["simples",{"_index":2515,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["simulation",{"_index":2593,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["size",{"_index":530,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["slider",{"_index":504,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["sliders",{"_index":2962,"title":{},"body":{"index.html":{}}}],["sol",{"_index":1149,"title":{},"body":{"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"components/StructureControllerComponent.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sol_marron",{"_index":2225,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["soleil",{"_index":1087,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["solid",{"_index":471,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["son",{"_index":777,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["sont",{"_index":1115,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["sorties",{"_index":2713,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["souhaitées",{"_index":591,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/App.html":{},"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["souris",{"_index":1064,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["sous",{"_index":1154,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["space",{"_index":540,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["spherical",{"_index":2525,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["spherical.phi",{"_index":2529,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["spherical.setfromvector3(this.camera.position",{"_index":2527,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["spherical.theta",{"_index":2528,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["spot",{"_index":1725,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["spécifique",{"_index":963,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["src",{"_index":2975,"title":{},"body":{"index.html":{}}}],["src/.../app.config.ts",{"_index":3047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.routes.ts",{"_index":3049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../building",{"_index":3048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app.config.ts",{"_index":2874,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/app.routes.ts",{"_index":2878,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/app.ts",{"_index":8,"title":{},"body":{"components/App.html":{},"coverage.html":{}}}],["src/app/app.ts:13",{"_index":26,"title":{},"body":{"components/App.html":{}}}],["src/app/components/calculateur",{"_index":440,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"coverage.html":{}}}],["src/app/components/scene3d/calculators/fenetres",{"_index":1889,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"coverage.html":{}}}],["src/app/components/scene3d/controls/color",{"_index":1246,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"coverage.html":{}}}],["src/app/components/scene3d/controls/dimensions",{"_index":1840,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"coverage.html":{}}}],["src/app/components/scene3d/controls/murs",{"_index":1982,"title":{},"body":{"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"coverage.html":{}}}],["src/app/components/scene3d/controls/ouvertures",{"_index":2061,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"coverage.html":{}}}],["src/app/components/scene3d/controls/structure",{"_index":2556,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"coverage.html":{}}}],["src/app/components/scene3d/core/scene3d",{"_index":2382,"title":{},"body":{"components/Scene3dCoreComponent.html":{},"coverage.html":{}}}],["src/app/components/scene3d/scene3d",{"_index":2892,"title":{},"body":{"coverage.html":{}}}],["src/app/components/scene3d/scene3d.ts",{"_index":2895,"title":{},"body":{"coverage.html":{}}}],["src/app/config/building",{"_index":1026,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["src/app/config/config",{"_index":1511,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"coverage.html":{}}}],["src/app/services/batiment/batiment.service.ts",{"_index":73,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{},"coverage.html":{}}}],["src/app/services/batiment/batiment.service.ts:112",{"_index":165,"title":{},"body":{"injectables/BatimentService.html":{}}}],["src/app/services/batiment/batiment.service.ts:121",{"_index":153,"title":{},"body":{"injectables/BatimentService.html":{}}}],["src/app/services/batiment/batiment.service.ts:160",{"_index":158,"title":{},"body":{"injectables/BatimentService.html":{}}}],["src/app/services/batiment/batiment.service.ts:167",{"_index":131,"title":{},"body":{"injectables/BatimentService.html":{}}}],["src/app/services/batiment/batiment.service.ts:174",{"_index":156,"title":{},"body":{"injectables/BatimentService.html":{}}}],["src/app/services/batiment/batiment.service.ts:181",{"_index":159,"title":{},"body":{"injectables/BatimentService.html":{}}}],["src/app/services/batiment/batiment.service.ts:188",{"_index":145,"title":{},"body":{"injectables/BatimentService.html":{}}}],["src/app/services/batiment/batiment.service.ts:195",{"_index":127,"title":{},"body":{"injectables/BatimentService.html":{}}}],["src/app/services/batiment/batiment.service.ts:202",{"_index":144,"title":{},"body":{"injectables/BatimentService.html":{}}}],["src/app/services/batiment/batiment.service.ts:209",{"_index":123,"title":{},"body":{"injectables/BatimentService.html":{}}}],["src/app/services/batiment/batiment.service.ts:216",{"_index":137,"title":{},"body":{"injectables/BatimentService.html":{}}}],["src/app/services/batiment/batiment.service.ts:223",{"_index":141,"title":{},"body":{"injectables/BatimentService.html":{}}}],["src/app/services/batiment/batiment.service.ts:230",{"_index":133,"title":{},"body":{"injectables/BatimentService.html":{}}}],["src/app/services/batiment/batiment.service.ts:248",{"_index":161,"title":{},"body":{"injectables/BatimentService.html":{}}}],["src/app/services/batiment/batiment.service.ts:40",{"_index":185,"title":{},"body":{"injectables/BatimentService.html":{}}}],["src/app/services/batiment/batiment.service.ts:51",{"_index":106,"title":{},"body":{"injectables/BatimentService.html":{}}}],["src/app/services/batiment/batiment.service.ts:67",{"_index":146,"title":{},"body":{"injectables/BatimentService.html":{}}}],["src/app/services/batiment/batiment.service.ts:74",{"_index":148,"title":{},"body":{"injectables/BatimentService.html":{}}}],["src/app/services/batiment/batiment.service.ts:81",{"_index":170,"title":{},"body":{"injectables/BatimentService.html":{}}}],["src/app/services/batiment/batiment.service.ts:96",{"_index":110,"title":{},"body":{"injectables/BatimentService.html":{}}}],["src/app/services/calculateur",{"_index":311,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{},"coverage.html":{}}}],["src/app/services/communication/communication.service.ts",{"_index":1340,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"coverage.html":{}}}],["src/app/services/configuration/configuration.service.ts",{"_index":1599,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"coverage.html":{}}}],["src/app/services/configuration/configuration.service.ts:170",{"_index":1693,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/services/configuration/configuration.service.ts:173",{"_index":1674,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/services/configuration/configuration.service.ts:187",{"_index":1692,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/services/configuration/configuration.service.ts:272",{"_index":1687,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/services/configuration/configuration.service.ts:280",{"_index":1678,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/services/configuration/configuration.service.ts:287",{"_index":1679,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/services/configuration/configuration.service.ts:294",{"_index":1683,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/services/configuration/configuration.service.ts:318",{"_index":1686,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/services/configuration/configuration.service.ts:327",{"_index":1676,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/services/configuration/configuration.service.ts:336",{"_index":1690,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/services/configuration/configuration.service.ts:346",{"_index":1688,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/services/configuration/configuration.service.ts:354",{"_index":1680,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/services/configuration/configuration.service.ts:361",{"_index":1682,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/services/configuration/configuration.service.ts:368",{"_index":1681,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/services/configuration/configuration.service.ts:375",{"_index":1677,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/services/configuration/configuration.service.ts:84",{"_index":1694,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/app/services/materiau/materiau.service.ts",{"_index":2125,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"coverage.html":{}}}],["src/app/services/mur/mur.service.ts",{"_index":738,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{},"coverage.html":{}}}],["src/app/services/mur/mur.service.ts:100",{"_index":2027,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:113",{"_index":2015,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:141",{"_index":2022,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:148",{"_index":2025,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:155",{"_index":2019,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:162",{"_index":2020,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:169",{"_index":2021,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:176",{"_index":2016,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:183",{"_index":2018,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:190",{"_index":2017,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:197",{"_index":2033,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:228",{"_index":2031,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:241",{"_index":2030,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:254",{"_index":2032,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:268",{"_index":2034,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:311",{"_index":2028,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:339",{"_index":2024,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:348",{"_index":2026,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:355",{"_index":2013,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:366",{"_index":2023,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:53",{"_index":2035,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:54",{"_index":2012,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/mur/mur.service.ts:69",{"_index":2029,"title":{},"body":{"injectables/MurService.html":{}}}],["src/app/services/ouverture/ouverture.service.ts",{"_index":904,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{},"coverage.html":{}}}],["src/app/services/scene/scene.service.ts",{"_index":1696,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{},"coverage.html":{}}}],["src/app/services/validation/validation.service.ts",{"_index":2657,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"coverage.html":{}}}],["src/app/services/validation/validation.service.ts:193",{"_index":2856,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/app/services/validation/validation.service.ts:255",{"_index":2861,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/app/services/validation/validation.service.ts:307",{"_index":2858,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/app/services/validation/validation.service.ts:387",{"_index":2860,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/app/services/validation/validation.service.ts:440",{"_index":2850,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/app/services/validation/validation.service.ts:447",{"_index":2854,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/app/services/validation/validation.service.ts:458",{"_index":2849,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/app/services/validation/validation.service.ts:465",{"_index":2847,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/app/services/validation/validation.service.ts:472",{"_index":2848,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/app/services/validation/validation.service.ts:479",{"_index":2855,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/app/services/validation/validation.service.ts:520",{"_index":2845,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/app/services/validation/validation.service.ts:529",{"_index":2846,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/app/services/validation/validation.service.ts:543",{"_index":2851,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/app/services/validation/validation.service.ts:69",{"_index":2864,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/app/services/validation/validation.service.ts:70",{"_index":2863,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/app/services/validation/validation.service.ts:71",{"_index":2862,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/app/services/validation/validation.service.ts:80",{"_index":2844,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/app/services/validation/validation.service.ts:90",{"_index":2853,"title":{},"body":{"injectables/ValidationService.html":{}}}],["stack",{"_index":1507,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["standalone",{"_index":444,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["standard",{"_index":2766,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["start",{"_index":1912,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["statements",{"_index":2873,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1228,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["statique",{"_index":1607,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["statiques",{"_index":2981,"title":{},"body":{"index.html":{}}}],["statistiques",{"_index":154,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["statistiquesbatiment",{"_index":155,"title":{"interfaces/StatistiquesBatiment.html":{}},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{},"coverage.html":{}}}],["statistiquesmateriaux",{"_index":2164,"title":{"interfaces/StatistiquesMateriaux.html":{}},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"coverage.html":{}}}],["statistiquesouvertures",{"_index":913,"title":{"interfaces/StatistiquesOuvertures.html":{}},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{},"coverage.html":{}}}],["statistiquesscene",{"_index":1729,"title":{"interfaces/StatistiquesScene.html":{}},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{},"coverage.html":{}}}],["stats",{"_index":1374,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["stats[event.priority",{"_index":1444,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["stats[event.source",{"_index":1442,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["stats[event.type",{"_index":1440,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["statssubject",{"_index":1369,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["statut",{"_index":528,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["string",{"_index":122,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["structure",{"_index":64,"title":{"interfaces/Structure.html":{}},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"coverage.html":{},"index.html":{}}}],["structure.couleur",{"_index":2652,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["structure.dimensions.hauteur",{"_index":2651,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["structure.dimensions.largeur",{"_index":2650,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["structure.dimensions.longueur",{"_index":2649,"title":{},"body":{"components/StructureControllerComponent.html":{}}}],["structureapplied",{"_index":2564,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["structurechanged",{"_index":2563,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["structurecontrollercomponent",{"_index":63,"title":{"components/StructureControllerComponent.html":{}},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"coverage.html":{}}}],["structuredimensions",{"_index":1842,"title":{"interfaces/StructureDimensions.html":{}},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"coverage.html":{}}}],["structuredimensions.hauteur",{"_index":1885,"title":{},"body":{"components/DimensionsControllerComponent.html":{}}}],["structuredimensions.largeur",{"_index":1884,"title":{},"body":{"components/DimensionsControllerComponent.html":{}}}],["structuredimensions.longueur",{"_index":1883,"title":{},"body":{"components/DimensionsControllerComponent.html":{}}}],["structuredimensionschange",{"_index":1853,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["structureexported",{"_index":2567,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["structureimported",{"_index":2568,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["structureoptimized",{"_index":2566,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["structurepreviewed",{"_index":2569,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["structurereset",{"_index":2565,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["styles",{"_index":31,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"index.html":{}}}],["styleurl",{"_index":1253,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["subject",{"_index":1350,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ServiceMessage.html":{}}}],["success",{"_index":560,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["success:hover",{"_index":562,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["successfulvalidations",{"_index":2812,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["successrate",{"_index":2677,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["succès",{"_index":301,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["suggestion",{"_index":2659,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["sum",{"_index":1450,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["supprimer",{"_index":1691,"title":{},"body":{"injectables/ConfigurationService.html":{},"interfaces/ControlesScene.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesScene.html":{}}}],["supprimerlumiere(id",{"_index":1792,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["supprimermateriau(id",{"_index":2316,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["supprimerouverture",{"_index":1671,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["supprimerouverture(nommur",{"_index":1689,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["supérieure",{"_index":989,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["sur",{"_index":1823,"title":{},"body":{"interfaces/ControlesScene.html":{},"components/MursControllerComponent.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"index.html":{}}}],["surface",{"_index":113,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["surfacefenetres",{"_index":915,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["surfacemurs",{"_index":199,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["surfacenet",{"_index":743,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["surfaceouvertures",{"_index":200,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/ValidationMur.html":{}}}],["surfaceportes",{"_index":914,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["surfacetotale",{"_index":744,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["surélev",{"_index":1244,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["switch",{"_index":656,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["symmetry_preference",{"_index":2723,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["symétrie",{"_index":2725,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["synchronisation",{"_index":1643,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["synchroniser",{"_index":1624,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["synchroniseravecconfigdirect",{"_index":1672,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["synchroniseravecconfigdirect(config",{"_index":1625,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["synchronisée",{"_index":1642,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["syntaxe",{"_index":3020,"title":{},"body":{"index.html":{}}}],["system",{"_index":1467,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["sécurit",{"_index":2710,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["sélecteur",{"_index":1330,"title":{},"body":{"components/ColorSelectorComponent.html":{},"index.html":{}}}],["sélection",{"_index":579,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"index.html":{}}}],["sélectionner",{"_index":1249,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["sélectionnée",{"_index":1970,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["t",{"_index":2381,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["table",{"_index":2928,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2927,"title":{},"body":{"coverage.html":{}}}],["tahoma",{"_index":457,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["taille",{"_index":1040,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["taille.hauteur",{"_index":1975,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["taille.largeur",{"_index":1973,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["taillefenetre",{"_index":1949,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["tailles",{"_index":2966,"title":{},"body":{"index.html":{}}}],["taillesfenetres",{"_index":1934,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["tant",{"_index":150,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["target",{"_index":1032,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["tat",{"_index":3026,"title":{},"body":{"index.html":{}}}],["technologies",{"_index":2994,"title":{},"body":{"index.html":{}}}],["template",{"_index":14,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}}}],["templateurl",{"_index":1251,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["temporairement",{"_index":3056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["temps",{"_index":1445,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StructureDimensions.html":{},"index.html":{}}}],["tempsrendu",{"_index":1735,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["test",{"_index":3007,"title":{},"body":{"index.html":{}}}],["tests",{"_index":3008,"title":{},"body":{"index.html":{}}}],["text",{"_index":1216,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["texture",{"_index":2140,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["texture.id",{"_index":2344,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["texture.type",{"_index":2348,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["texture_${date.now",{"_index":2352,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["texture_beton",{"_index":2255,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["texture_bois",{"_index":2262,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["texture_brique",{"_index":2259,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["texturecomplete",{"_index":2350,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["textures",{"_index":2151,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["texturesactuelles",{"_index":2172,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["texturesactuelles.push(texturecomplete",{"_index":2354,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["texturesutilisees",{"_index":2167,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["thermique",{"_index":2797,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["thickness",{"_index":1054,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["this.addaxes",{"_index":2481,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.addgrid",{"_index":2484,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.animate",{"_index":2492,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.animationid",{"_index":2459,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.applyfilters",{"_index":2070,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["this.applyrequested.emit",{"_index":1866,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["this.calculateaverageresponsetime",{"_index":1434,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.calculateurfenetresservice.calculernombremaxfenetres",{"_index":1972,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["this.calculateurservice.calculernombremaxfenetres",{"_index":675,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["this.calculateurservice.genererconfigurationfenetres",{"_index":679,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["this.calculateurservice.optimiserdimensions",{"_index":687,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["this.calculercapacite",{"_index":655,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["this.calculerdistancecamera(mur.position",{"_index":1838,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.calculerdistancecamera(ouverture.position",{"_index":1839,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.calculerdistanceentremurs(mur",{"_index":895,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["this.calculerdistanceentreouvertures(ouverture",{"_index":1015,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["this.calculerfenetres",{"_index":1967,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["this.calculernombremaxfenetres(mur",{"_index":438,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["this.calculerpositionsoptimales",{"_index":395,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["this.calculerproprietesmur(murconfig",{"_index":761,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["this.calculerproprietesouverture(ouvertureconfig",{"_index":926,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["this.calculersurfaceetvolume",{"_index":205,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["this.calculresultat",{"_index":651,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["this.calculresultat?.isvalid",{"_index":1976,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["this.camera",{"_index":1767,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.camera.lookat(0",{"_index":2469,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.camera.position.multiplyscalar(scale",{"_index":2538,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.camera.position.set(10",{"_index":2468,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.camera.position.setfromspherical(spherical",{"_index":2532,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.cameraactuelle.asobservable",{"_index":1751,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.cameraactuelle.next(proprietesmisesajour",{"_index":1770,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.cameraactuelle.value",{"_index":1765,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.cameraready.emit(this.camera",{"_index":2488,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.canvascontainer.nativeelement.appendchild(this.renderer.domelement",{"_index":2477,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.canvascontainer.nativeelement.clientheight",{"_index":2467,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.canvascontainer.nativeelement.clientwidth",{"_index":2466,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.chargerconfiguration",{"_index":1564,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["this.colorapplied.emit",{"_index":1327,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["this.colorchanged.emit",{"_index":1325,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["this.colorreset.emit(this.selectedelementid",{"_index":1328,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["this.communicationservice.emitvalidationresult(result",{"_index":2760,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["this.configdirectservice.configuration$.subscribe(config",{"_index":1622,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["this.configdirectservice.rechargerconfiguration",{"_index":1644,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["this.configuration",{"_index":1647,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["this.configurationactuelle.asobservable",{"_index":1620,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["this.configurationactuelle.next(nouvelleconfig",{"_index":1641,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["this.configurationactuelle.next(this.configurationpardefaut",{"_index":1657,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["this.configurationactuelle.value",{"_index":1645,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["this.configurationapplied.emit",{"_index":1977,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["this.configurationgeneree",{"_index":683,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["this.configurationservice.getallouvertures",{"_index":236,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["this.configurationservice.getconfiguration",{"_index":223,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["this.configurationservice.getconfigurationobservable().subscribe",{"_index":210,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["this.configurationservice.mettreajourconfiguration(donnees.configuration",{"_index":299,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["this.configurationservice.mettreajourmur(ouverture.murparent",{"_index":982,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["this.configurationservice.mettreajourmur(type",{"_index":829,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["this.configurationsubject.asobservable",{"_index":1548,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["this.configurationsubject.next(config",{"_index":1571,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["this.configurationsubject.next(nouvelleconfig",{"_index":1565,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["this.configurationsubject.value",{"_index":1562,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["this.contraintes.ecartmax",{"_index":421,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["this.contraintes.ecartmax}m",{"_index":423,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["this.contraintes.hauteurfenetremax",{"_index":418,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["this.contraintes.hauteurfenetremax}m",{"_index":419,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["this.contraintes.largeurfenetremax",{"_index":413,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["this.contraintes.largeurfenetremax}m",{"_index":416,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["this.contraintes.margemin",{"_index":390,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["this.controles",{"_index":1774,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.controlesactuels.asobservable",{"_index":1753,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.controlesactuels.next(controlesmisesajour",{"_index":1779,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.controlesactuels.value",{"_index":1772,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.ecart",{"_index":677,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["this.elementdimensions",{"_index":1862,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["this.elementdimensionschange.emit",{"_index":1861,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["this.elements.find(e",{"_index":1318,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["this.elementselected.emit(this.selectedelementid",{"_index":1324,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["this.emitevent",{"_index":1482,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.events",{"_index":1413,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.events$.pipe",{"_index":1388,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.events.filter(event",{"_index":1424,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.events.foreach(event",{"_index":1439,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.events.length",{"_index":1430,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.events.push(fullevent",{"_index":1382,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.events[this.events.length",{"_index":1435,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.eventsubject.asobservable",{"_index":1372,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.eventsubject.next",{"_index":1465,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.eventsubject.next(fullevent",{"_index":1383,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.formaterconfiguration(resultat.fenetres",{"_index":684,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["this.getconfiguration",{"_index":1573,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["this.getconfiguration().dimensions",{"_index":1660,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["this.getconfiguration().murs",{"_index":1662,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["this.getconfiguration().murs[nommur",{"_index":1665,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["this.getcontrolesscene",{"_index":1776,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.geteventsbyprioritystats",{"_index":1433,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.geteventsbysourcestats",{"_index":1432,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.geteventsbytypestats",{"_index":1431,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.getlumieres",{"_index":1789,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.getmateriaux",{"_index":2309,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.getmateriauxpartype('fenetre",{"_index":2293,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.getmateriauxpartype('mur",{"_index":2289,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.getmateriauxpartype('porte",{"_index":2291,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.getmurfromconfig(this.murselectionne",{"_index":654,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["this.getmurpartype('arriere",{"_index":807,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["this.getmurpartype('droit",{"_index":811,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["this.getmurpartype('gauche",{"_index":809,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["this.getmurpartype('principal",{"_index":805,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["this.getmurs",{"_index":862,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["this.getmurs().filter(mur",{"_index":875,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["this.getnommur(type",{"_index":763,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["this.getouvertureparid(id",{"_index":984,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["this.getouvertures",{"_index":1005,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["this.getouverturespartype('fenetre",{"_index":962,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["this.getouverturespartype('porte",{"_index":960,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["this.getpalettes",{"_index":2335,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.getproprietes",{"_index":217,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["this.getproprietes().datecreation",{"_index":269,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["this.getproprietes().dernieremodification",{"_index":270,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["this.getproprietes().description",{"_index":268,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["this.getproprietes().nom",{"_index":267,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["this.getproprietes().surface",{"_index":265,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["this.getproprietes().type",{"_index":263,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["this.getproprietes().volume",{"_index":266,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["this.getproprietescamera",{"_index":1769,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.getproprietesscene",{"_index":1762,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.getstatistiques",{"_index":271,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["this.getstats",{"_index":1471,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["this.gettextures",{"_index":2353,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.getvolume",{"_index":2621,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["this.hasconfigurationchanged",{"_index":1596,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["this.hauteurfenetre",{"_index":678,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["this.hextorgb(this.numbertohex(couleurbase",{"_index":2377,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.initialisermateriauxpardefaut",{"_index":2177,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.initialisermurs",{"_index":757,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["this.initialiserouvertures",{"_index":922,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["this.initialiserpalettespardefaut",{"_index":2178,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.initialisertexturespardefaut",{"_index":2179,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.initializevalidationrules",{"_index":2684,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["this.initthreejs",{"_index":2458,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.largeurfenetre",{"_index":676,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["this.lumiere",{"_index":1784,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.lumiereactuelles.asobservable",{"_index":1755,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.lumiereactuelles.next(lumiereactuelles",{"_index":1791,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.lumiereactuelles.next(lumierefiltrees",{"_index":1796,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.lumiereactuelles.value",{"_index":1782,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.materiaux",{"_index":2280,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.materiauxactuels.asobservable",{"_index":2174,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.materiauxactuels.next(materiaux",{"_index":2226,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.materiauxactuels.next(materiauxactuels",{"_index":2311,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.materiauxactuels.next(materiauxfiltres",{"_index":2319,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.materiauxactuels.value.filter(materiau",{"_index":2286,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.materiauxactuels.value.find(materiau",{"_index":2282,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.messages",{"_index":1415,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.messages$.pipe",{"_index":1406,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.messages.push(fullmessage",{"_index":1401,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.messagesubject.asobservable",{"_index":1373,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.messagesubject.next",{"_index":1469,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.messagesubject.next(fullmessage",{"_index":1402,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.mettreajourconfiguration(configactuelle",{"_index":1655,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["this.mettreajourdatemodification",{"_index":211,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["this.mettreajourproprietes",{"_index":228,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["this.mettreajourproprietes(donnees.proprietes",{"_index":297,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["this.mettreajourproprietescamera",{"_index":1821,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.murchanged.emit",{"_index":1991,"title":{},"body":{"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["this.murdeleted.emit(this.murselectionne.id",{"_index":2000,"title":{},"body":{"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["this.murduplicated.emit",{"_index":1998,"title":{},"body":{"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["this.murfilter",{"_index":2081,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["this.murinfo",{"_index":650,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["this.murs",{"_index":797,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["this.murs.find(m",{"_index":1988,"title":{},"body":{"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["this.mursactuels.asobservable",{"_index":754,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["this.mursactuels.next(murs",{"_index":775,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["this.mursactuels.value",{"_index":795,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["this.mursactuels.value.find(mur",{"_index":800,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["this.mursdisponibles.find(m",{"_index":1964,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["this.mursdisponibles[0]?.id",{"_index":2088,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["this.murselected.emit(murid",{"_index":1990,"title":{},"body":{"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["this.murselected.emit(this.selectedmurid",{"_index":1968,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["this.murselectionne",{"_index":649,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["this.murselectionne.dimensions",{"_index":1969,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["this.murselectionne.id",{"_index":1979,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["this.murservice.getmurs",{"_index":1805,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.newcolor",{"_index":1322,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["this.nombrefenetressouhaitees",{"_index":680,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["this.oncolorchange",{"_index":1326,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["this.onelementchange",{"_index":1329,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["this.ouvertureadded.emit",{"_index":1994,"title":{},"body":{"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["this.ouvertureadded.emit(nouvelleouverture",{"_index":2089,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["this.ouverturechanged.emit",{"_index":2087,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["this.ouverturedeleted.emit(this.ouvertureselectionnee.id",{"_index":2096,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["this.ouvertureduplicated.emit(ouverturedupliquee",{"_index":2094,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["this.ouvertureremoved.emit",{"_index":1996,"title":{},"body":{"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["this.ouvertures",{"_index":951,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["this.ouvertures.filter(ouverture",{"_index":2077,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["this.ouvertures.find(o",{"_index":2073,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["this.ouverturesactuelles.asobservable",{"_index":921,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["this.ouverturesactuelles.next(ouvertures",{"_index":938,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["this.ouverturesactuelles.value",{"_index":949,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["this.ouverturesactuelles.value.filter(ouverture",{"_index":957,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["this.ouverturesactuelles.value.find(ouverture",{"_index":954,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["this.ouvertureselected.emit(ouvertureid",{"_index":2084,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["this.ouvertureselectionnee",{"_index":2086,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["this.ouvertureselectionnee.nom",{"_index":2092,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["this.ouvertureservice.getouvertures",{"_index":1806,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.ouverturesfiltrees",{"_index":2076,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["this.palettes",{"_index":2323,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.palettesactuelles.asobservable",{"_index":2175,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.palettesactuelles.next(palettes",{"_index":2253,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.palettesactuelles.next(palettesactuelles",{"_index":2337,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.palettesactuelles.value",{"_index":2321,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.palettesactuelles.value.filter(palette",{"_index":2329,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.palettesactuelles.value.find(palette",{"_index":2325,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.parametresfenetres",{"_index":1980,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["this.parametresfenetres.ecart",{"_index":1974,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["this.parametresreset.emit",{"_index":1981,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["this.proprietes",{"_index":214,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["this.proprietesbatiment.asobservable",{"_index":172,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["this.proprietesbatiment.next(proprietesmisesajour",{"_index":219,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["this.proprietesbatiment.value",{"_index":213,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["this.rechargerconfiguration",{"_index":1598,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{}}}],["this.renderer",{"_index":2461,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.renderer.dispose",{"_index":2462,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.renderer.domelement.addeventlistener('mousedown",{"_index":2519,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.renderer.domelement.addeventlistener('mousemove",{"_index":2522,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.renderer.domelement.addeventlistener('mouseup",{"_index":2533,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.renderer.domelement.addeventlistener('wheel",{"_index":2534,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.renderer.render(this.scene",{"_index":2540,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.renderer.setpixelratio(window.devicepixelratio",{"_index":2474,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.renderer.setsize",{"_index":2470,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.renderer.shadowmap.enabled",{"_index":2471,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.renderer.shadowmap.type",{"_index":2472,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.rendererready.emit(this.renderer",{"_index":2489,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.resetrequested.emit",{"_index":1864,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["this.resettodefault",{"_index":2629,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["this.responsetimes.length",{"_index":1449,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.responsetimes.push(responsetime",{"_index":1456,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.responsetimes.reduce((a",{"_index":1451,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["this.rgbtohsl(rgb.r",{"_index":2378,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.scene",{"_index":1760,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.scene.add(ambientlight",{"_index":2495,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.scene.add(axeshelper",{"_index":2511,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.scene.add(directionallight",{"_index":2508,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.scene.add(gridhelper",{"_index":2514,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.scene.add(object",{"_index":2544,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.scene.background",{"_index":2464,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.scene.children.length",{"_index":2546,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.scene.children[0",{"_index":2548,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.scene.remove(child",{"_index":2555,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.scene.remove(object",{"_index":2545,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.sceneactuelle.asobservable",{"_index":1750,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.sceneactuelle.next(proprietesmisesajour",{"_index":1763,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.sceneactuelle.value",{"_index":1758,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["this.sceneready.emit(this.scene",{"_index":2487,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.selectedelement",{"_index":1321,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["this.selectedelement.currentcolor",{"_index":1323,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["this.selectedelementid",{"_index":1320,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["this.selectedmurid",{"_index":1966,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"components/MursControllerComponent.html":{}}}],["this.selectedouvertureid",{"_index":2074,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["this.setupcontrols",{"_index":2485,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.setuplighting",{"_index":2478,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.showaxes",{"_index":2480,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.showgrid",{"_index":2483,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["this.stats",{"_index":1461,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["this.statssubject.asobservable",{"_index":1375,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["this.statssubject.next(stats",{"_index":1437,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["this.statssubject.value",{"_index":1459,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["this.structure",{"_index":2572,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["this.structure.dimensions.hauteur",{"_index":2614,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["this.structure.dimensions.largeur",{"_index":2613,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["this.structure.dimensions.longueur",{"_index":2619,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["this.structureapplied.emit",{"_index":2574,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["this.structurechanged.emit",{"_index":2571,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["this.structuredimensions",{"_index":1859,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["this.structuredimensionschange.emit",{"_index":1858,"title":{},"body":{"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/StructureDimensions.html":{}}}],["this.structureexported.emit",{"_index":2591,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["this.structureimported.emit(this.structure",{"_index":2606,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["this.structureoptimized.emit(optimizedstructure",{"_index":2589,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["this.structurepreviewed.emit",{"_index":2610,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["this.structurereset.emit",{"_index":2576,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["this.synchroniseravecconfigdirect(config",{"_index":1623,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["this.taillesfenetres[this.parametresfenetres.taillefenetre",{"_index":1971,"title":{},"body":{"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["this.textures",{"_index":2341,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.texturesactuelles.asobservable",{"_index":2176,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.texturesactuelles.next(textures",{"_index":2265,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.texturesactuelles.next(texturesactuelles",{"_index":2355,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.texturesactuelles.value",{"_index":2339,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.texturesactuelles.value.filter(texture",{"_index":2347,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.texturesactuelles.value.find(texture",{"_index":2343,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["this.typefilter",{"_index":2079,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["this.updatestats",{"_index":1384,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["this.validateopening(opening",{"_index":2744,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["this.validateproportions(buildingdata",{"_index":2749,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["this.validatewall(walldata",{"_index":2736,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["this.validationhistory",{"_index":2810,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["this.validationhistory.filter(v",{"_index":2813,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["this.validationhistory.foreach(validation",{"_index":2818,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["this.validationhistory.length",{"_index":2811,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["this.validationhistory.push(result",{"_index":2758,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["this.validationhistory.reduce((sum",{"_index":2815,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["this.validationhistory[totalvalidations",{"_index":2827,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["this.validationrules",{"_index":2687,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["this.validationrules.find(r",{"_index":2801,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["this.validercontraintes(mur",{"_index":385,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["three",{"_index":2455,"title":{},"body":{"components/Scene3dCoreComponent.html":{},"dependencies.html":{}}}],["three.ambientlight(0x404040",{"_index":2494,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["three.axeshelper",{"_index":2550,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["three.axeshelper(5",{"_index":2510,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["three.color(0xf0f0f0",{"_index":2465,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["three.directionallight(0xffffff",{"_index":2497,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["three.gridhelper",{"_index":2551,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["three.gridhelper(20",{"_index":2513,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["three.js",{"_index":2385,"title":{},"body":{"components/Scene3dCoreComponent.html":{},"index.html":{}}}],["three.object3d",{"_index":2425,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["three.pcfsoftshadowmap",{"_index":2473,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["three.perspectivecamera",{"_index":2430,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["three.scene",{"_index":2434,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["three.spherical",{"_index":2526,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["three.webglrenderer",{"_index":2432,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["throw",{"_index":278,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["thumb",{"_index":512,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["timestamp",{"_index":1345,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["title",{"_index":19,"title":{},"body":{"components/App.html":{}}}],["togglelumiere(id",{"_index":1802,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["togglerule",{"_index":2838,"title":{},"body":{"injectables/ValidationService.html":{}}}],["togglerule(ruleid",{"_index":2799,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["toit",{"_index":178,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["toit_bleu",{"_index":2219,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["top",{"_index":474,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["total",{"_index":257,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["totale",{"_index":396,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{}}}],["totalevents",{"_index":1360,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["totalopeningsurface",{"_index":2781,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["totalscore",{"_index":2730,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["totalvalidations",{"_index":2676,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["totalwallsurface",{"_index":2780,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["tous",{"_index":717,"title":{},"body":{"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationMur.html":{}}}],["toutes",{"_index":947,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["toutesouvertures",{"_index":235,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["toutesouvertures.filter(o",{"_index":242,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["toutesouvertures.length",{"_index":241,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["toutesouvertures.push(...mur.ouvertures",{"_index":1668,"title":{},"body":{"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{}}}],["toutesouvertures.reduce((total",{"_index":255,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["traditionnelles",{"_index":2233,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["transition",{"_index":550,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["transparent",{"_index":2146,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["tre",{"_index":823,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["tree",{"_index":6,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}}}],["triangles",{"_index":1809,"title":{},"body":{"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["trop",{"_index":414,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["trou",{"_index":1227,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["trouv",{"_index":828,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["true",{"_index":302,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["try",{"_index":276,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["très",{"_index":841,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["tslib",{"_index":2938,"title":{},"body":{"dependencies.html":{}}}],["tuile",{"_index":2562,"title":{},"body":{"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["type",{"_index":108,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typefilter",{"_index":2067,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["typematch",{"_index":2078,"title":{},"body":{"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{}}}],["typemur",{"_index":935,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["typeof",{"_index":288,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/ValidationMur.html":{}}}],["types/three",{"_index":2935,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":2998,"title":{},"body":{"index.html":{}}}],["ui",{"_index":456,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["un",{"_index":371,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["undefined",{"_index":799,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["une",{"_index":952,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ControlesScene.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["unités",{"_index":1213,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["updatestats",{"_index":1429,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["url",{"_index":2153,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["utiles",{"_index":3028,"title":{},"body":{"index.html":{}}}],["utilisation",{"_index":2983,"title":{},"body":{"index.html":{}}}],["utilise",{"_index":1170,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["utilisée",{"_index":397,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/ControlesScene.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/MurConfig.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{}}}],["utilisées",{"_index":1019,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["utilitaires",{"_index":1224,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"interfaces/ServiceMessage.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["v",{"_index":2816,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["v.isvalid).length",{"_index":2814,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["v.score",{"_index":2817,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["valeur",{"_index":516,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["validatebuilding",{"_index":2839,"title":{},"body":{"injectables/ValidationService.html":{}}}],["validatebuilding(buildingdata",{"_index":2729,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["validateopening",{"_index":2840,"title":{},"body":{"injectables/ValidationService.html":{}}}],["validateopening(openingdata",{"_index":2770,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["validateproportions",{"_index":2841,"title":{},"body":{"injectables/ValidationService.html":{}}}],["validateproportions(buildingdata",{"_index":2779,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["validatewall",{"_index":2842,"title":{},"body":{"injectables/ValidationService.html":{}}}],["validatewall(walldata",{"_index":2761,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["validation",{"_index":286,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"index.html":{}}}],["validation.errors.foreach(error",{"_index":2819,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["validation.isvalid",{"_index":386,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["validation.message",{"_index":387,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["validation.warnings.foreach(warning",{"_index":2822,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["validation_result",{"_index":1501,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["validationdata",{"_index":1503,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["validationerror",{"_index":2656,"title":{"interfaces/ValidationError.html":{}},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"coverage.html":{}}}],["validationhistory",{"_index":2683,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["validationmur",{"_index":749,"title":{"interfaces/ValidationMur.html":{}},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{},"coverage.html":{}}}],["validationouverture",{"_index":912,"title":{"interfaces/ValidationOuverture.html":{}},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{},"coverage.html":{}}}],["validationresult",{"_index":2661,"title":{"interfaces/ValidationResult.html":{}},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"coverage.html":{}}}],["validationrule",{"_index":2667,"title":{"interfaces/ValidationRule.html":{}},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"coverage.html":{}}}],["validationrules",{"_index":2682,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["validations",{"_index":2808,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["validationservice",{"_index":1502,"title":{"injectables/ValidationService.html":{}},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validationstats",{"_index":2675,"title":{"interfaces/ValidationStats.html":{}},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"coverage.html":{}}}],["validationwarning",{"_index":2664,"title":{"interfaces/ValidationWarning.html":{}},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{},"coverage.html":{}}}],["valide",{"_index":734,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["valider",{"_index":837,"title":{},"body":{"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["validercontraintes",{"_index":711,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["validercontraintes(mur",{"_index":732,"title":{},"body":{"injectables/CalculateurFenetresService.html":{}}}],["validermur",{"_index":2011,"title":{},"body":{"injectables/MurService.html":{}}}],["validermur(mur",{"_index":838,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["validerouverture(ouverture",{"_index":988,"title":{},"body":{"interfaces/CalculsOuverture.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/ValidationOuverture.html":{}}}],["value",{"_index":21,"title":{},"body":{"components/App.html":{},"injectables/BatimentService.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"injectables/ConfigDirectService.html":{},"injectables/ConfigurationService.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{},"injectables/ValidationService.html":{},"classes/WallCalculations.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":38,"title":{},"body":{"components/App.html":{},"components/CalculateurFenetresComponent.html":{},"components/ColorSelectorComponent.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"components/MursControllerComponent.html":{},"components/OuverturesControllerComponent.html":{},"components/Scene3dCoreComponent.html":{},"components/StructureControllerComponent.html":{}}}],["variable",{"_index":2875,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":3046,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verdana",{"_index":459,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["version",{"_index":3043,"title":{},"body":{"properties.html":{}}}],["vert",{"_index":1217,"title":{},"body":{"interfaces/CameraConfig.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["verte",{"_index":1189,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["verticale",{"_index":1067,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["verticalement",{"_index":410,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["via",{"_index":1572,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{}}}],["vides",{"_index":281,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/StatistiquesBatiment.html":{}}}],["view",{"_index":1108,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["viewchild",{"_index":2451,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["viewchild('canvascontainer",{"_index":2447,"title":{},"body":{"components/Scene3dCoreComponent.html":{}}}],["violet",{"_index":1298,"title":{},"body":{"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{}}}],["visibles",{"_index":3018,"title":{},"body":{"index.html":{}}}],["vision",{"_index":1100,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["visualisation",{"_index":2946,"title":{},"body":{"index.html":{}}}],["visuels",{"_index":2961,"title":{},"body":{"index.html":{}}}],["vitesse",{"_index":1076,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["void",{"_index":120,"title":{},"body":{"injectables/BatimentService.html":{},"components/CalculateurFenetresComponent.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"components/ColorSelectorComponent.html":{},"interfaces/ColorableElement.html":{},"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions.html":{},"components/DimensionsControllerComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/Mur.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/ProprietesTexture.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/ServiceMessage.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/Structure.html":{},"components/StructureControllerComponent.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["voir",{"_index":3023,"title":{},"body":{"index.html":{}}}],["volume",{"_index":116,"title":{},"body":{"injectables/BatimentService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"injectables/MurService.html":{},"interfaces/ProprietesBatiment.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/StatistiquesBatiment.html":{},"interfaces/StatistiquesOuvertures.html":{},"components/StructureControllerComponent.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{}}}],["volumetotal",{"_index":860,"title":{},"body":{"interfaces/CalculsMur.html":{},"injectables/MurService.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ValidationMur.html":{}}}],["vraies",{"_index":1173,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["vue",{"_index":1122,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["vénement",{"_index":1377,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["vénements",{"_index":1341,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/ServiceMessage.html":{}}}],["vérification",{"_index":417,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{},"index.html":{}}}],["vérifier",{"_index":1537,"title":{},"body":{"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ControlesScene.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["vérifiez",{"_index":3015,"title":{},"body":{"index.html":{}}}],["wall.dimensions.height",{"_index":2784,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["wall.dimensions.width",{"_index":2783,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["wall.ouvertures",{"_index":2785,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["wall.ouvertures.foreach((opening",{"_index":2786,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["wall_modified",{"_index":1483,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["wall_thickness_max",{"_index":2691,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["wall_thickness_min",{"_index":2688,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["wallcalculations",{"_index":1226,"title":{"classes/WallCalculations.html":{}},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{}}}],["wallconfig",{"_index":1044,"title":{"interfaces/WallConfig.html":{}},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["walldata",{"_index":2734,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["walldata.dimensions.height",{"_index":2768,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["walldata.epaisseur",{"_index":2762,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["walldata.epaisseur}m",{"_index":2765,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["walldata.ouvertures",{"_index":2741,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["walldata.ouvertures.foreach((opening",{"_index":2742,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["wallid",{"_index":1484,"title":{},"body":{"interfaces/CommunicationEvent.html":{},"interfaces/CommunicationStats.html":{},"interfaces/ServiceMessage.html":{}}}],["walls",{"_index":1198,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["walltype",{"_index":2737,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["wallvalidation",{"_index":2735,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["wallvalidation.score",{"_index":2740,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["warning.code",{"_index":2823,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["warnings",{"_index":2663,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["warnings.push",{"_index":2763,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["warnings.push(...openingvalidation.warnings",{"_index":2746,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["warnings.push(...proportionsvalidation.warnings",{"_index":2751,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["warnings.push(...wallvalidation.warnings",{"_index":2739,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["warningsbycategory",{"_index":2680,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["warningsbycategory[rule.category",{"_index":2824,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["webkit",{"_index":510,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["webp",{"_index":2161,"title":{},"body":{"interfaces/PaletteCouleurs.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/StatistiquesMateriaux.html":{}}}],["weight",{"_index":502,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["white",{"_index":488,"title":{},"body":{"components/CalculateurFenetresComponent.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{}}}],["width",{"_index":328,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions.html":{},"interfaces/Dimensions3D.html":{},"components/DimensionsControllerComponent.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/PaletteCouleurs.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesMateriau.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesTexture.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesMateriaux.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StructureDimensions.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["window",{"_index":331,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/MurConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["window${index",{"_index":695,"title":{},"body":{"components/CalculateurFenetresComponent.html":{}}}],["window1",{"_index":1058,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["window2",{"_index":1059,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["window5",{"_index":1202,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["window_height_min",{"_index":2702,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["window_placement",{"_index":2717,"title":{},"body":{"interfaces/ValidationError.html":{},"interfaces/ValidationResult.html":{},"interfaces/ValidationRule.html":{},"injectables/ValidationService.html":{},"interfaces/ValidationStats.html":{},"interfaces/ValidationWarning.html":{}}}],["x",{"_index":325,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["y",{"_index":326,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["y=0",{"_index":1235,"title":{},"body":{"interfaces/CameraConfig.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{}}}],["yposition",{"_index":411,"title":{},"body":{"interfaces/CalculFenetres.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/FenetreConfig.html":{},"interfaces/MurConfig.html":{}}}],["z",{"_index":327,"title":{},"body":{"interfaces/CalculFenetres.html":{},"components/CalculateurFenetresComponent.html":{},"injectables/CalculateurFenetresService.html":{},"interfaces/CalculsMur.html":{},"interfaces/CalculsOuverture.html":{},"interfaces/CameraConfig.html":{},"interfaces/ConfigurationBatiment.html":{},"interfaces/ConfigurationMur.html":{},"interfaces/ConfigurationOuverture.html":{},"injectables/ConfigurationService.html":{},"interfaces/ConfigurationSol.html":{},"interfaces/ConfigurationToit.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/FenetreConfig.html":{},"components/FenetresCalculatorComponent.html":{},"interfaces/FenetresParams.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/Mur.html":{},"interfaces/MurConfig.html":{},"injectables/MurService.html":{},"components/MursControllerComponent.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Ouverture.html":{},"components/OuverturesControllerComponent.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesMur.html":{},"interfaces/ProprietesOuverture.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesOuvertures.html":{},"interfaces/StatistiquesScene.html":{},"interfaces/ValidationMur.html":{},"interfaces/ValidationOuverture.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["zone",{"_index":2986,"title":{},"body":{"index.html":{}}}],["zone.js",{"_index":2940,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":1070,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"components/Scene3dCoreComponent.html":{},"interfaces/SceneConfig.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}],["zoomspeed",{"_index":1077,"title":{},"body":{"interfaces/CameraConfig.html":{},"injectables/ConfigDirectService.html":{},"interfaces/ConfigurationComplete.html":{},"interfaces/ControlesScene.html":{},"interfaces/Dimensions3D.html":{},"interfaces/LightingConfig.html":{},"interfaces/MainWallConfig.html":{},"interfaces/OpeningConfig.html":{},"interfaces/Position3D.html":{},"interfaces/ProprietesCamera.html":{},"interfaces/ProprietesLumiere.html":{},"interfaces/ProprietesScene.html":{},"interfaces/SceneConfig.html":{},"interfaces/StatistiquesScene.html":{},"classes/WallCalculations.html":{},"interfaces/WallConfig.html":{},"miscellaneous/variables.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/App.html":{"url":"components/App.html","title":"component - App","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  App\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n\n            \n                imports\n                \n                            RouterOutlet\n                \n            \n\n\n\n            \n                template\n                \n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal('projet-3D')\n                    \n                \n                    \n                        \n                                Defined in src/app/app.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, signal } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  imports: [RouterOutlet],\n  template: `\n    \n  `,\n  styles: []\n})\nexport class App {\n  protected readonly title = signal('projet-3D');\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'CalculateurFenetresComponent', 'selector': 'app-calculateur-fenetres'},{'name': 'ColorSelectorComponent', 'selector': 'app-color-selector'},{'name': 'DimensionsControllerComponent', 'selector': 'app-dimensions-controller'},{'name': 'FenetresCalculatorComponent', 'selector': 'app-fenetres-calculator'},{'name': 'MursControllerComponent', 'selector': 'app-murs-controller'},{'name': 'OuverturesControllerComponent', 'selector': 'app-ouvertures-controller'},{'name': 'Scene3d', 'selector': 'app-scene3d'},{'name': 'Scene3dCoreComponent', 'selector': 'app-scene3d-core'},{'name': 'Scene3dRefactored', 'selector': 'app-scene3d'},{'name': 'StructureControllerComponent', 'selector': 'app-structure-controller'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'App'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BatimentService.html":{"url":"injectables/BatimentService.html","title":"injectable - BatimentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  BatimentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/batiment/batiment.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service de gestion des bâtiments\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                proprietes$\n                            \n                            \n                                    Private\n                                proprietesBatiment\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                calculerSurfaceEtVolume\n                            \n                            \n                                changerDescription\n                            \n                            \n                                changerNom\n                            \n                            \n                                changerTypeBatiment\n                            \n                            \n                                exporterDonnees\n                            \n                            \n                                getDateCreation\n                            \n                            \n                                getDerniereModification\n                            \n                            \n                                getDescription\n                            \n                            \n                                getNom\n                            \n                            \n                                getProprietes\n                            \n                            \n                                getProprietesObservable\n                            \n                            \n                                getStatistiques\n                            \n                            \n                                getSurface\n                            \n                            \n                                getTypeBatiment\n                            \n                            \n                                getVolume\n                            \n                            \n                                importerDonnees\n                            \n                            \n                                    Private\n                                mettreAJourDateModification\n                            \n                            \n                                mettreAJourProprietes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configurationService: ConfigurationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/batiment/batiment.service.ts:51\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configurationService\n                                                  \n                                                        \n                                                                        ConfigurationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        calculerSurfaceEtVolume\n                        \n                    \n                \n            \n            \n                \n                        \n                    calculerSurfaceEtVolume()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/batiment/batiment.service.ts:96\n                        \n                    \n\n\n            \n                \n                        Calculer la surface et le volume du bâtiment\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        changerDescription\n                        \n                    \n                \n            \n            \n                \nchangerDescription(nouvelleDescription: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/batiment/batiment.service.ts:209\n                        \n                    \n\n\n            \n                \n                        Changer la description du bâtiment\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nouvelleDescription\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        changerNom\n                        \n                    \n                \n            \n            \n                \nchangerNom(nouveauNom: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/batiment/batiment.service.ts:195\n                        \n                    \n\n\n            \n                \n                        Changer le nom du bâtiment\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nouveauNom\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        changerTypeBatiment\n                        \n                    \n                \n            \n            \n                \nchangerTypeBatiment(nouveauType: ProprietesBatiment)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/batiment/batiment.service.ts:167\n                        \n                    \n\n\n            \n                \n                        Changer le type de bâtiment\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nouveauType\n                                            \n                                                            ProprietesBatiment\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exporterDonnees\n                        \n                    \n                \n            \n            \n                \nexporterDonnees()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/batiment/batiment.service.ts:230\n                        \n                    \n\n\n            \n                \n                        Exporter les données du bâtiment\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDateCreation\n                        \n                    \n                \n            \n            \n                \ngetDateCreation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/batiment/batiment.service.ts:216\n                        \n                    \n\n\n            \n                \n                        Obtenir la date de création\n\n\n                        \n                            Returns :         Date\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDerniereModification\n                        \n                    \n                \n            \n            \n                \ngetDerniereModification()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/batiment/batiment.service.ts:223\n                        \n                    \n\n\n            \n                \n                        Obtenir la date de dernière modification\n\n\n                        \n                            Returns :         Date\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDescription\n                        \n                    \n                \n            \n            \n                \ngetDescription()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/batiment/batiment.service.ts:202\n                        \n                    \n\n\n            \n                \n                        Obtenir la description du bâtiment\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNom\n                        \n                    \n                \n            \n            \n                \ngetNom()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/batiment/batiment.service.ts:188\n                        \n                    \n\n\n            \n                \n                        Obtenir le nom du bâtiment\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProprietes\n                        \n                    \n                \n            \n            \n                \ngetProprietes()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/batiment/batiment.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Obtenir les propriétés du bâtiment\n\n\n                        \n                            Returns :         ProprietesBatiment\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProprietesObservable\n                        \n                    \n                \n            \n            \n                \ngetProprietesObservable()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/batiment/batiment.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Obtenir les propriétés en tant qu'Observable\n\n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStatistiques\n                        \n                    \n                \n            \n            \n                \ngetStatistiques()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/batiment/batiment.service.ts:121\n                        \n                    \n\n\n            \n                \n                        Obtenir les statistiques du bâtiment\n\n\n                        \n                            Returns :         StatistiquesBatiment\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSurface\n                        \n                    \n                \n            \n            \n                \ngetSurface()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/batiment/batiment.service.ts:174\n                        \n                    \n\n\n            \n                \n                        Obtenir la surface du bâtiment\n\n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTypeBatiment\n                        \n                    \n                \n            \n            \n                \ngetTypeBatiment()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/batiment/batiment.service.ts:160\n                        \n                    \n\n\n            \n                \n                        Obtenir le type de bâtiment\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getVolume\n                        \n                    \n                \n            \n            \n                \ngetVolume()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/batiment/batiment.service.ts:181\n                        \n                    \n\n\n            \n                \n                        Obtenir le volume du bâtiment\n\n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        importerDonnees\n                        \n                    \n                \n            \n            \n                \nimporterDonnees(donneesJson: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/batiment/batiment.service.ts:248\n                        \n                    \n\n\n            \n                \n                        Importer les données du bâtiment\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                donneesJson\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mettreAJourDateModification\n                        \n                    \n                \n            \n            \n                \n                        \n                    mettreAJourDateModification()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/batiment/batiment.service.ts:112\n                        \n                    \n\n\n            \n                \n                        Mettre à jour la date de dernière modification\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mettreAJourProprietes\n                        \n                    \n                \n            \n            \n                \nmettreAJourProprietes(nouvellesProprietes: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/batiment/batiment.service.ts:81\n                        \n                    \n\n\n            \n                \n                        Mettre à jour les propriétés du bâtiment\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nouvellesProprietes\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        proprietes$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.proprietesBatiment.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/batiment/batiment.service.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        proprietesBatiment\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject({\n    nom: 'Bâtiment Principal',\n    description: 'Bâtiment architectural avec murs, ouvertures et toit',\n    type: 'residentiel',\n    etage: 1,\n    surface: 0,\n    volume: 0,\n    dateCreation: new Date(),\n    derniereModification: new Date()\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/services/batiment/batiment.service.ts:40\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigurationService, ConfigurationBatiment } from '../configuration/configuration.service';\n\n/**\n * Interface pour les propriétés d'un bâtiment\n */\nexport interface ProprietesBatiment {\n  nom: string;\n  description: string;\n  type: 'residentiel' | 'commercial' | 'industriel' | 'public';\n  etage: number;\n  surface: number; // en m²\n  volume: number;   // en m³\n  dateCreation: Date;\n  derniereModification: Date;\n}\n\n/**\n * Interface pour les statistiques du bâtiment\n */\nexport interface StatistiquesBatiment {\n  nombreMurs: number;\n  nombreOuvertures: number;\n  nombrePortes: number;\n  nombreFenetres: number;\n  surfaceMurs: number;\n  surfaceOuvertures: number;\n  pourcentageOuvertures: number;\n}\n\n/**\n * Service de gestion des bâtiments\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class BatimentService {\n  \n  private proprietesBatiment = new BehaviorSubject({\n    nom: 'Bâtiment Principal',\n    description: 'Bâtiment architectural avec murs, ouvertures et toit',\n    type: 'residentiel',\n    etage: 1,\n    surface: 0,\n    volume: 0,\n    dateCreation: new Date(),\n    derniereModification: new Date()\n  });\n\n  public proprietes$ = this.proprietesBatiment.asObservable();\n\n  constructor(private configurationService: ConfigurationService) {\n    // Calculer automatiquement la surface et le volume\n    this.calculerSurfaceEtVolume();\n    \n    // Écouter les changements de configuration pour recalculer\n    this.configurationService.getConfigurationObservable().subscribe(() => {\n      this.calculerSurfaceEtVolume();\n      this.mettreAJourDateModification();\n    });\n  }\n\n  /**\n   * Obtenir les propriétés du bâtiment\n   */\n  getProprietes(): ProprietesBatiment {\n    return this.proprietesBatiment.value;\n  }\n\n  /**\n   * Obtenir les propriétés en tant qu'Observable\n   */\n  getProprietesObservable(): Observable {\n    return this.proprietes$;\n  }\n\n  /**\n   * Mettre à jour les propriétés du bâtiment\n   */\n  mettreAJourProprietes(nouvellesProprietes: Partial): void {\n    const proprietesActuelles = this.getProprietes();\n    const proprietesMisesAJour = {\n      ...proprietesActuelles,\n      ...nouvellesProprietes,\n      derniereModification: new Date()\n    };\n    \n    this.proprietesBatiment.next(proprietesMisesAJour);\n    console.log('Propriétés du bâtiment mises à jour:', proprietesMisesAJour);\n  }\n\n  /**\n   * Calculer la surface et le volume du bâtiment\n   */\n  private calculerSurfaceEtVolume(): void {\n    const config = this.configurationService.getConfiguration();\n    const dimensions = config.dimensions;\n    \n    const surface = dimensions.longueur * dimensions.largeur;\n    const volume = surface * dimensions.hauteur;\n    \n    this.mettreAJourProprietes({\n      surface: Math.round(surface * 100) / 100, // Arrondir à 2 décimales\n      volume: Math.round(volume * 100) / 100\n    });\n  }\n\n  /**\n   * Mettre à jour la date de dernière modification\n   */\n  private mettreAJourDateModification(): void {\n    this.mettreAJourProprietes({\n      derniereModification: new Date()\n    });\n  }\n\n  /**\n   * Obtenir les statistiques du bâtiment\n   */\n  getStatistiques(): StatistiquesBatiment {\n    const config = this.configurationService.getConfiguration();\n    const toutesOuvertures = this.configurationService.getAllOuvertures();\n    \n    const nombreMurs = 4; // principal, arrière, gauche, droit\n    const nombreOuvertures = toutesOuvertures.length;\n    const nombrePortes = toutesOuvertures.filter(o => o.type === 'porte').length;\n    const nombreFenetres = toutesOuvertures.filter(o => o.type === 'fenetre').length;\n    \n    // Calculer la surface des murs\n    const murs = config.murs;\n    const surfaceMurs = \n      (murs.principal.dimensions.width * murs.principal.dimensions.height) +\n      (murs.arriere.dimensions.width * murs.arriere.dimensions.height) +\n      (murs.gauche.dimensions.width * murs.gauche.dimensions.height) +\n      (murs.droit.dimensions.width * murs.droit.dimensions.height);\n    \n    // Calculer la surface des ouvertures\n    const surfaceOuvertures = toutesOuvertures.reduce((total, ouverture) => {\n      return total + (ouverture.dimensions.width * ouverture.dimensions.height);\n    }, 0);\n    \n    const pourcentageOuvertures = surfaceMurs > 0 ? \n      Math.round((surfaceOuvertures / surfaceMurs) * 100 * 100) / 100 : 0;\n    \n    return {\n      nombreMurs,\n      nombreOuvertures,\n      nombrePortes,\n      nombreFenetres,\n      surfaceMurs: Math.round(surfaceMurs * 100) / 100,\n      surfaceOuvertures: Math.round(surfaceOuvertures * 100) / 100,\n      pourcentageOuvertures\n    };\n  }\n\n  /**\n   * Obtenir le type de bâtiment\n   */\n  getTypeBatiment(): string {\n    return this.getProprietes().type;\n  }\n\n  /**\n   * Changer le type de bâtiment\n   */\n  changerTypeBatiment(nouveauType: ProprietesBatiment['type']): void {\n    this.mettreAJourProprietes({ type: nouveauType });\n  }\n\n  /**\n   * Obtenir la surface du bâtiment\n   */\n  getSurface(): number {\n    return this.getProprietes().surface;\n  }\n\n  /**\n   * Obtenir le volume du bâtiment\n   */\n  getVolume(): number {\n    return this.getProprietes().volume;\n  }\n\n  /**\n   * Obtenir le nom du bâtiment\n   */\n  getNom(): string {\n    return this.getProprietes().nom;\n  }\n\n  /**\n   * Changer le nom du bâtiment\n   */\n  changerNom(nouveauNom: string): void {\n    this.mettreAJourProprietes({ nom: nouveauNom });\n  }\n\n  /**\n   * Obtenir la description du bâtiment\n   */\n  getDescription(): string {\n    return this.getProprietes().description;\n  }\n\n  /**\n   * Changer la description du bâtiment\n   */\n  changerDescription(nouvelleDescription: string): void {\n    this.mettreAJourProprietes({ description: nouvelleDescription });\n  }\n\n  /**\n   * Obtenir la date de création\n   */\n  getDateCreation(): Date {\n    return this.getProprietes().dateCreation;\n  }\n\n  /**\n   * Obtenir la date de dernière modification\n   */\n  getDerniereModification(): Date {\n    return this.getProprietes().derniereModification;\n  }\n\n  /**\n   * Exporter les données du bâtiment\n   */\n  exporterDonnees(): string {\n    const proprietes = this.getProprietes();\n    const config = this.configurationService.getConfiguration();\n    const statistiques = this.getStatistiques();\n    \n    const donneesExport = {\n      proprietes,\n      configuration: config,\n      statistiques,\n      dateExport: new Date()\n    };\n    \n    return JSON.stringify(donneesExport, null, 2);\n  }\n\n  /**\n   * Importer les données du bâtiment\n   */\n  importerDonnees(donneesJson: string): boolean {\n    try {\n      if (!donneesJson || donneesJson.trim() === '') {\n        throw new Error('Données JSON vides ou invalides');\n      }\n      \n      const donnees = JSON.parse(donneesJson);\n      \n      // Validation des données importées\n      if (!donnees || typeof donnees !== 'object') {\n        throw new Error('Format de données invalide');\n      }\n      \n      if (donnees.proprietes) {\n        // Validation des propriétés\n        if (!donnees.proprietes.nom || !donnees.proprietes.type) {\n          throw new Error('Propriétés du bâtiment incomplètes');\n        }\n        this.mettreAJourProprietes(donnees.proprietes);\n      }\n      \n      if (donnees.configuration) {\n        this.configurationService.mettreAJourConfiguration(donnees.configuration);\n      }\n      \n      console.log('Données importées avec succès');\n      return true;\n    } catch (error) {\n      console.error('Erreur lors de l\\'importation:', error);\n      return false;\n    }\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CalculFenetres.html":{"url":"interfaces/CalculFenetres.html","title":"interface - CalculFenetres","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CalculFenetres\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/calculateur-fenetres/calculateur-fenetres.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            ecartOptimal\n                                        \n                                \n                                \n                                        \n                                            isValid\n                                        \n                                \n                                \n                                        \n                                            largeurFenetreOptimale\n                                        \n                                \n                                \n                                        \n                                            largeurTotaleUtilisee\n                                        \n                                \n                                \n                                        \n                                            margeRestante\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            nombreMaxFenetres\n                                        \n                                \n                                \n                                        \n                                            positionsCalculees\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ecartOptimal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ecartOptimal:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isValid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isValid:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        largeurFenetreOptimale\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        largeurFenetreOptimale:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        largeurTotaleUtilisee\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        largeurTotaleUtilisee:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        margeRestante\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        margeRestante:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nombreMaxFenetres\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nombreMaxFenetres:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        positionsCalculees\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        positionsCalculees:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface FenetreConfig {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  color: number;\n  type: 'window';\n}\n\nexport interface MurConfig {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  color: number;\n}\n\nexport interface CalculFenetres {\n  nombreMaxFenetres: number;\n  largeurFenetreOptimale: number;\n  ecartOptimal: number;\n  positionsCalculees: Array;\n  largeurTotaleUtilisee: number;\n  margeRestante: number;\n  isValid: boolean;\n  message: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CalculateurFenetresService {\n\n  // Contraintes par défaut\n  private readonly CONTRAINTES = {\n    largeurFenetreMin: 0.5,      // Largeur minimale d'une fenêtre (m)\n    largeurFenetreMax: 3.0,      // Largeur maximale d'une fenêtre (m)\n    hauteurFenetreMin: 0.8,      // Hauteur minimale d'une fenêtre (m)\n    hauteurFenetreMax: 2.5,      // Hauteur maximale d'une fenêtre (m)\n    ecartMin: 0.1,               // Écart minimum entre fenêtres (m)\n    ecartMax: 2.0,               // Écart maximum entre fenêtres (m)\n    margeMin: 0.2,               // Marge minimum des bords du mur (m)\n    hauteurMurMin: 1.0           // Hauteur minimale du mur (m)\n  };\n\n  constructor() {\n    console.log('CalculateurFenetresService initialisé');\n  }\n\n  /**\n   * Calcule le nombre maximum de fenêtres pour un mur donné\n   */\n  public calculerNombreMaxFenetres(\n    mur: MurConfig,\n    largeurFenetre: number = 1.5,\n    ecart: number = 0.5,\n    hauteurFenetre: number = 1.2\n  ): CalculFenetres {\n    \n    console.log('Calcul du nombre max de fenêtres pour le mur:', {\n      largeurMur: mur.dimensions.width,\n      hauteurMur: mur.dimensions.height,\n      largeurFenetre,\n      ecart,\n      hauteurFenetre\n    });\n\n    // Validation des contraintes\n    const validation = this.validerContraintes(mur, largeurFenetre, ecart, hauteurFenetre);\n    if (!validation.isValid) {\n      return {\n        nombreMaxFenetres: 0,\n        largeurFenetreOptimale: 0,\n        ecartOptimal: 0,\n        positionsCalculees: [],\n        largeurTotaleUtilisee: 0,\n        margeRestante: 0,\n        isValid: false,\n        message: validation.message\n      };\n    }\n\n    // Calcul du nombre maximum de fenêtres\n    const largeurDisponible = mur.dimensions.width - (2 * this.CONTRAINTES.margeMin);\n    const largeurParFenetre = largeurFenetre + ecart;\n    const nombreMaxFenetres = Math.floor(largeurDisponible / largeurParFenetre);\n\n    // Calcul des positions optimales\n    const positions = this.calculerPositionsOptimales(\n      mur, \n      nombreMaxFenetres, \n      largeurFenetre, \n      ecart, \n      hauteurFenetre\n    );\n\n    // Calcul de la largeur totale utilisée\n    const largeurTotaleUtilisee = (nombreMaxFenetres * largeurFenetre) + ((nombreMaxFenetres - 1) * ecart);\n    const margeRestante = mur.dimensions.width - largeurTotaleUtilisee;\n\n    const resultat: CalculFenetres = {\n      nombreMaxFenetres,\n      largeurFenetreOptimale: largeurFenetre,\n      ecartOptimal: ecart,\n      positionsCalculees: positions,\n      largeurTotaleUtilisee,\n      margeRestante,\n      isValid: true,\n      message: `✅ ${nombreMaxFenetres} fenêtre(s) possible(s) avec ${margeRestante.toFixed(2)}m de marge`\n    };\n\n    console.log(' Résultat du calcul:', resultat);\n    return resultat;\n  }\n\n  /**\n   * Calcule les positions optimales pour les fenêtres\n   */\n  private calculerPositionsOptimales(\n    mur: MurConfig,\n    nombreFenetres: number,\n    largeurFenetre: number,\n    ecart: number,\n    hauteurFenetre: number\n  ): Array {\n    \n    const positions: Array = [];\n    \n    if (nombreFenetres === 0) {\n      return positions;\n    }\n\n    // Calcul de la largeur totale utilisée\n    const largeurTotale = (nombreFenetres * largeurFenetre) + ((nombreFenetres - 1) * ecart);\n    \n    // Position de départ (centrée)\n    const debut = mur.position.x - (largeurTotale / 2) + (largeurFenetre / 2);\n    \n    // Hauteur des fenêtres (centrée verticalement)\n    const hauteurMur = mur.dimensions.height;\n    const yPosition = mur.position.y + (hauteurMur / 2) - (hauteurFenetre / 2);\n    \n    // Calcul des positions\n    for (let i = 0; i  this.CONTRAINTES.largeurFenetreMax) {\n      return {\n        isValid: false,\n        message: `❌ Largeur de fenêtre trop grande (max: ${this.CONTRAINTES.largeurFenetreMax}m)`\n      };\n    }\n\n    // Vérification de la hauteur de la fenêtre\n    if (hauteurFenetre  this.CONTRAINTES.hauteurFenetreMax) {\n      return {\n        isValid: false,\n        message: `❌ Hauteur de fenêtre trop grande (max: ${this.CONTRAINTES.hauteurFenetreMax}m)`\n      };\n    }\n\n    // Vérification de l'écart\n    if (ecart  this.CONTRAINTES.ecartMax) {\n      return {\n        isValid: false,\n        message: `❌ Écart trop grand (max: ${this.CONTRAINTES.ecartMax}m)`\n      };\n    }\n\n    // Vérification de la hauteur du mur\n    if (mur.dimensions.height  mur.dimensions.height) {\n      return {\n        isValid: false,\n        message: `❌ Fenêtre trop haute pour le mur (mur: ${mur.dimensions.height}m, fenêtre: ${hauteurFenetre}m)`\n      };\n    }\n\n    // Vérification de l'espace disponible\n    const largeurDisponible = mur.dimensions.width - (2 * this.CONTRAINTES.margeMin);\n    const largeurMinimale = largeurFenetre + ecart;\n    \n    if (largeurDisponible  calcul.nombreMaxFenetres) {\n      return {\n        fenetres: [],\n        isValid: false,\n        message: `❌ Trop de fenêtres demandées (max: ${calcul.nombreMaxFenetres})`\n      };\n    }\n\n    const fenetres: FenetreConfig[] = [];\n    \n    for (let i = 0; i  0'\n      };\n    }\n\n    const largeurDisponible = mur.dimensions.width - (2 * this.CONTRAINTES.margeMin);\n    \n    // Calcul de l'écart optimal (équilibre entre fenêtres et espacement)\n    const ecartOptimal = Math.max(this.CONTRAINTES.ecartMin, largeurDisponible * 0.1);\n    \n    // Calcul de la largeur de fenêtre optimale\n    const largeurFenetreOptimale = (largeurDisponible - ((nombreFenetres - 1) * ecartOptimal)) / nombreFenetres;\n    \n    // Vérification des contraintes\n    if (largeurFenetreOptimale  {\n      resultats[nomMur] = this.calculerNombreMaxFenetres(mur);\n    });\n    \n    return resultats;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CalculateurFenetresComponent.html":{"url":"components/CalculateurFenetresComponent.html","title":"component - CalculateurFenetresComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  CalculateurFenetresComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/calculateur-fenetres/calculateur-fenetres.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-calculateur-fenetres\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                \n            \n\n\n            \n                styles\n                \n    .calculateur-container {\n      max-width: 800px;\n      margin: 0 auto;\n      padding: 20px;\n      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    }\n\n    .section {\n      background: #f8f9fa;\n      border-radius: 8px;\n      padding: 20px;\n      margin-bottom: 20px;\n      border-left: 4px solid #007bff;\n    }\n\n    .section h3 {\n      margin-top: 0;\n      color: #333;\n      border-bottom: 2px solid #007bff;\n      padding-bottom: 10px;\n    }\n\n    .mur-info {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 15px;\n      margin-top: 15px;\n    }\n\n    .mur-info p {\n      background: white;\n      padding: 10px;\n      border-radius: 5px;\n      margin: 0;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n\n    .parametres {\n      display: grid;\n      gap: 20px;\n      margin-top: 15px;\n    }\n\n    .parametre {\n      display: flex;\n      align-items: center;\n      gap: 15px;\n    }\n\n    .parametre label {\n      min-width: 200px;\n      font-weight: 500;\n    }\n\n    .slider {\n      flex: 1;\n      height: 6px;\n      border-radius: 3px;\n      background: #ddd;\n      outline: none;\n      -webkit-appearance: none;\n    }\n\n    .slider::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      appearance: none;\n      width: 20px;\n      height: 20px;\n      border-radius: 50%;\n      background: #007bff;\n      cursor: pointer;\n    }\n\n    .valeur {\n      min-width: 60px;\n      font-weight: bold;\n      color: #007bff;\n    }\n\n    .number-input {\n      width: 100px;\n      padding: 8px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n    }\n\n    .resultats {\n      padding: 15px;\n      border-radius: 8px;\n      margin-top: 15px;\n    }\n\n    .resultats.valid {\n      background: #d4edda;\n      border: 1px solid #c3e6cb;\n    }\n\n    .resultats.invalid {\n      background: #f8d7da;\n      border: 1px solid #f5c6cb;\n    }\n\n    .statut {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      margin-bottom: 15px;\n    }\n\n    .icone {\n      font-size: 1.2em;\n    }\n\n    .message {\n      font-weight: 500;\n    }\n\n    .details {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n      gap: 10px;\n    }\n\n    .detail {\n      background: white;\n      padding: 10px;\n      border-radius: 5px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n\n    .positions {\n      margin-top: 20px;\n    }\n\n    .position-list {\n      display: grid;\n      gap: 10px;\n      margin-top: 15px;\n    }\n\n    .position-item {\n      background: white;\n      padding: 12px;\n      border-radius: 5px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    .numero {\n      font-weight: bold;\n      color: #007bff;\n    }\n\n    .coordonnees {\n      font-family: 'Courier New', monospace;\n      color: #666;\n    }\n\n    .actions {\n      display: flex;\n      gap: 15px;\n      margin-top: 20px;\n    }\n\n    .btn {\n      padding: 12px 24px;\n      border: none;\n      border-radius: 6px;\n      cursor: pointer;\n      font-weight: 500;\n      transition: all 0.3s ease;\n    }\n\n    .btn-primary {\n      background: #007bff;\n      color: white;\n    }\n\n    .btn-primary:hover:not(:disabled) {\n      background: #0056b3;\n    }\n\n    .btn-secondary {\n      background: #6c757d;\n      color: white;\n    }\n\n    .btn-secondary:hover {\n      background: #545b62;\n    }\n\n    .btn-success {\n      background: #28a745;\n      color: white;\n    }\n\n    .btn-success:hover {\n      background: #1e7e34;\n    }\n\n    .btn:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n\n    .config-code {\n      background: #2d3748;\n      color: #e2e8f0;\n      padding: 20px;\n      border-radius: 8px;\n      margin-top: 15px;\n      overflow-x: auto;\n    }\n\n    .config-code pre {\n      margin: 0;\n      font-family: 'Courier New', monospace;\n      font-size: 14px;\n      line-height: 1.5;\n    }\n\n    .form-control {\n      width: 100%;\n      padding: 10px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      font-size: 16px;\n    }\n  \n            \n\n            \n                template\n                \n  Calculateur de Fenêtres Intelligent\n\n  \n  \n    Sélection du Mur\n    \n      -- Choisir un mur --\n      Mur Principal (Façade)\n      Mur Arrière\n      Mur Gauche\n      Mur Droit\n    \n  \n\n  \n  \n     Informations du Mur\n    \n      Largeur: {{ murInfo.dimensions.width }}m\n      Hauteur: {{ murInfo.dimensions.height }}m\n      Profondeur: {{ murInfo.dimensions.depth }}m\n      Position: ({{ murInfo.position.x }}, {{ murInfo.position.y }}, {{ murInfo.position.z }})\n    \n  \n\n  \n  \n    Paramètres des Fenêtres\n\n    \n      \n        Largeur des fenêtres (m):\n        \n        {{ largeurFenetre }}m\n      \n\n      \n        Hauteur des fenêtres (m):\n        \n        {{ hauteurFenetre }}m\n      \n\n      \n        Écart entre fenêtres (m):\n        \n        {{ ecart }}m\n      \n\n      \n        Nombre de fenêtres souhaitées:\n        \n      \n    \n  \n\n  \n  \n    Résultats du Calcul\n\n    \n      \n        {{ calculResultat.isValid ? '✅' : '❌' }}\n        {{ calculResultat.message }}\n      \n\n      \n        \n          Nombre max de fenêtres: {{ calculResultat.nombreMaxFenetres }}\n        \n        \n          Largeur totale utilisée: {{ calculResultat.largeurTotaleUtilisee.toFixed(2) }}m\n        \n        \n          Marge restante: {{ calculResultat.margeRestante.toFixed(2) }}m\n        \n        \n          Écart optimal: {{ calculResultat.ecartOptimal.toFixed(2) }}m\n        \n      \n    \n\n    \n     0\">\n      Positions Calculées\n      \n        \n          Fenêtre {{ i + 1 }}:\n          \n            X: {{ position.x.toFixed(2) }}m,\n            Y: {{ position.y.toFixed(2) }}m,\n            Z: {{ position.z.toFixed(2) }}m\n          \n        \n      \n    \n  \n\n  \n  \n     calculResultat.nombreMaxFenetres\">\n      Générer la Configuration\n    \n\n    \n      Optimiser les Dimensions\n    \n  \n\n  \n  \n    Configuration Générée\n    \n      {{ configurationGeneree }}\n    \n    Copier la Configuration\n  \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                calculResultat\n                            \n                            \n                                configurationGeneree\n                            \n                            \n                                ecart\n                            \n                            \n                                hauteurFenetre\n                            \n                            \n                                largeurFenetre\n                            \n                            \n                                murInfo\n                            \n                            \n                                murSelectionne\n                            \n                            \n                                nombreFenetresSouhaitees\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                calculerCapacite\n                            \n                            \n                                copierConfiguration\n                            \n                            \n                                    Private\n                                formaterConfiguration\n                            \n                            \n                                genererConfiguration\n                            \n                            \n                                    Private\n                                getMurFromConfig\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onMurChange\n                            \n                            \n                                optimiserDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(calculateurService: CalculateurFenetresService)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/calculateur-fenetres/calculateur-fenetres.component.ts:411\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        calculateurService\n                                                  \n                                                        \n                                                                        CalculateurFenetresService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        calculerCapacite\n                        \n                    \n                \n            \n            \n                \ncalculerCapacite()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/calculateur-fenetres/calculateur-fenetres.component.ts:474\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        copierConfiguration\n                        \n                    \n                \n            \n            \n                \ncopierConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/calculateur-fenetres/calculateur-fenetres.component.ts:539\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formaterConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    formaterConfiguration(fenetres: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/calculateur-fenetres/calculateur-fenetres.component.ts:523\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fenetres\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        genererConfiguration\n                        \n                    \n                \n            \n            \n                \ngenererConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/calculateur-fenetres/calculateur-fenetres.component.ts:485\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getMurFromConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMurFromConfig(nomMur: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/calculateur-fenetres/calculateur-fenetres.component.ts:434\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nomMur\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     MurConfig | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/calculateur-fenetres/calculateur-fenetres.component.ts:415\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onMurChange\n                        \n                    \n                \n            \n            \n                \nonMurChange()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/calculateur-fenetres/calculateur-fenetres.component.ts:419\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        optimiserDimensions\n                        \n                    \n                \n            \n            \n                \noptimiserDimensions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/calculateur-fenetres/calculateur-fenetres.component.ts:504\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        calculResultat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CalculFenetres | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/components/calculateur-fenetres/calculateur-fenetres.component.ts:410\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configurationGeneree\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/components/calculateur-fenetres/calculateur-fenetres.component.ts:411\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ecart\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0.5\n                    \n                \n                    \n                        \n                                Defined in src/app/components/calculateur-fenetres/calculateur-fenetres.component.ts:406\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hauteurFenetre\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1.2\n                    \n                \n                    \n                        \n                                Defined in src/app/components/calculateur-fenetres/calculateur-fenetres.component.ts:405\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        largeurFenetre\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1.5\n                    \n                \n                    \n                        \n                                Defined in src/app/components/calculateur-fenetres/calculateur-fenetres.component.ts:404\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        murInfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MurConfig | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/components/calculateur-fenetres/calculateur-fenetres.component.ts:401\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        murSelectionne\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/components/calculateur-fenetres/calculateur-fenetres.component.ts:400\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nombreFenetresSouhaitees\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 2\n                    \n                \n                    \n                        \n                                Defined in src/app/components/calculateur-fenetres/calculateur-fenetres.component.ts:407\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { CalculateurFenetresService, CalculFenetres, MurConfig } from '../../services/calculateur-fenetres/calculateur-fenetres.service';\nimport { BUILDING_CONFIG } from '../../config/building-config';\n\n@Component({\n  selector: 'app-calculateur-fenetres',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  template: `\n    \n      Calculateur de Fenêtres Intelligent\n      \n      \n      \n        Sélection du Mur\n        \n          -- Choisir un mur --\n          Mur Principal (Façade)\n          Mur Arrière\n          Mur Gauche\n          Mur Droit\n        \n      \n\n      \n      \n         Informations du Mur\n        \n          Largeur: {{ murInfo.dimensions.width }}m\n          Hauteur: {{ murInfo.dimensions.height }}m\n          Profondeur: {{ murInfo.dimensions.depth }}m\n          Position: ({{ murInfo.position.x }}, {{ murInfo.position.y }}, {{ murInfo.position.z }})\n        \n      \n\n      \n      \n        Paramètres des Fenêtres\n        \n        \n          \n            Largeur des fenêtres (m):\n            \n            {{ largeurFenetre }}m\n          \n\n          \n            Hauteur des fenêtres (m):\n            \n            {{ hauteurFenetre }}m\n          \n\n          \n            Écart entre fenêtres (m):\n            \n            {{ ecart }}m\n          \n\n          \n            Nombre de fenêtres souhaitées:\n            \n          \n        \n      \n\n      \n      \n        Résultats du Calcul\n        \n        \n          \n            {{ calculResultat.isValid ? '✅' : '❌' }}\n            {{ calculResultat.message }}\n          \n          \n          \n            \n              Nombre max de fenêtres: {{ calculResultat.nombreMaxFenetres }}\n            \n            \n              Largeur totale utilisée: {{ calculResultat.largeurTotaleUtilisee.toFixed(2) }}m\n            \n            \n              Marge restante: {{ calculResultat.margeRestante.toFixed(2) }}m\n            \n            \n              Écart optimal: {{ calculResultat.ecartOptimal.toFixed(2) }}m\n            \n          \n        \n\n        \n         0\">\n          Positions Calculées\n          \n            \n              Fenêtre {{ i + 1 }}:\n              \n                X: {{ position.x.toFixed(2) }}m, \n                Y: {{ position.y.toFixed(2) }}m, \n                Z: {{ position.z.toFixed(2) }}m\n              \n            \n          \n        \n      \n\n      \n      \n         calculResultat.nombreMaxFenetres\">\n          Générer la Configuration\n        \n        \n        \n          Optimiser les Dimensions\n        \n      \n\n      \n      \n        Configuration Générée\n        \n          {{ configurationGeneree }}\n        \n        Copier la Configuration\n      \n    \n  `,\n  styles: [`\n    .calculateur-container {\n      max-width: 800px;\n      margin: 0 auto;\n      padding: 20px;\n      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    }\n\n    .section {\n      background: #f8f9fa;\n      border-radius: 8px;\n      padding: 20px;\n      margin-bottom: 20px;\n      border-left: 4px solid #007bff;\n    }\n\n    .section h3 {\n      margin-top: 0;\n      color: #333;\n      border-bottom: 2px solid #007bff;\n      padding-bottom: 10px;\n    }\n\n    .mur-info {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 15px;\n      margin-top: 15px;\n    }\n\n    .mur-info p {\n      background: white;\n      padding: 10px;\n      border-radius: 5px;\n      margin: 0;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n\n    .parametres {\n      display: grid;\n      gap: 20px;\n      margin-top: 15px;\n    }\n\n    .parametre {\n      display: flex;\n      align-items: center;\n      gap: 15px;\n    }\n\n    .parametre label {\n      min-width: 200px;\n      font-weight: 500;\n    }\n\n    .slider {\n      flex: 1;\n      height: 6px;\n      border-radius: 3px;\n      background: #ddd;\n      outline: none;\n      -webkit-appearance: none;\n    }\n\n    .slider::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      appearance: none;\n      width: 20px;\n      height: 20px;\n      border-radius: 50%;\n      background: #007bff;\n      cursor: pointer;\n    }\n\n    .valeur {\n      min-width: 60px;\n      font-weight: bold;\n      color: #007bff;\n    }\n\n    .number-input {\n      width: 100px;\n      padding: 8px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n    }\n\n    .resultats {\n      padding: 15px;\n      border-radius: 8px;\n      margin-top: 15px;\n    }\n\n    .resultats.valid {\n      background: #d4edda;\n      border: 1px solid #c3e6cb;\n    }\n\n    .resultats.invalid {\n      background: #f8d7da;\n      border: 1px solid #f5c6cb;\n    }\n\n    .statut {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      margin-bottom: 15px;\n    }\n\n    .icone {\n      font-size: 1.2em;\n    }\n\n    .message {\n      font-weight: 500;\n    }\n\n    .details {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n      gap: 10px;\n    }\n\n    .detail {\n      background: white;\n      padding: 10px;\n      border-radius: 5px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n\n    .positions {\n      margin-top: 20px;\n    }\n\n    .position-list {\n      display: grid;\n      gap: 10px;\n      margin-top: 15px;\n    }\n\n    .position-item {\n      background: white;\n      padding: 12px;\n      border-radius: 5px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    .numero {\n      font-weight: bold;\n      color: #007bff;\n    }\n\n    .coordonnees {\n      font-family: 'Courier New', monospace;\n      color: #666;\n    }\n\n    .actions {\n      display: flex;\n      gap: 15px;\n      margin-top: 20px;\n    }\n\n    .btn {\n      padding: 12px 24px;\n      border: none;\n      border-radius: 6px;\n      cursor: pointer;\n      font-weight: 500;\n      transition: all 0.3s ease;\n    }\n\n    .btn-primary {\n      background: #007bff;\n      color: white;\n    }\n\n    .btn-primary:hover:not(:disabled) {\n      background: #0056b3;\n    }\n\n    .btn-secondary {\n      background: #6c757d;\n      color: white;\n    }\n\n    .btn-secondary:hover {\n      background: #545b62;\n    }\n\n    .btn-success {\n      background: #28a745;\n      color: white;\n    }\n\n    .btn-success:hover {\n      background: #1e7e34;\n    }\n\n    .btn:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n\n    .config-code {\n      background: #2d3748;\n      color: #e2e8f0;\n      padding: 20px;\n      border-radius: 8px;\n      margin-top: 15px;\n      overflow-x: auto;\n    }\n\n    .config-code pre {\n      margin: 0;\n      font-family: 'Courier New', monospace;\n      font-size: 14px;\n      line-height: 1.5;\n    }\n\n    .form-control {\n      width: 100%;\n      padding: 10px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      font-size: 16px;\n    }\n  `]\n})\nexport class CalculateurFenetresComponent implements OnInit {\n  \n  murSelectionne: string = '';\n  murInfo: MurConfig | null = null;\n  \n  // Paramètres des fenêtres\n  largeurFenetre: number = 1.5;\n  hauteurFenetre: number = 1.2;\n  ecart: number = 0.5;\n  nombreFenetresSouhaitees: number = 2;\n  \n  // Résultats\n  calculResultat: CalculFenetres | null = null;\n  configurationGeneree: string = '';\n\n  constructor(private calculateurService: CalculateurFenetresService) {}\n\n  ngOnInit() {\n    console.log('CalculateurFenetresComponent initialisé');\n  }\n\n  onMurChange() {\n    if (!this.murSelectionne) {\n      this.murInfo = null;\n      this.calculResultat = null;\n      return;\n    }\n\n    // Récupérer les informations du mur depuis BUILDING_CONFIG\n    this.murInfo = this.getMurFromConfig(this.murSelectionne);\n\n    if (this.murInfo) {\n      this.calculerCapacite();\n    }\n  }\n\n  private getMurFromConfig(nomMur: string): MurConfig | null {\n    const config = BUILDING_CONFIG;\n    switch (nomMur) {\n      case 'principal':\n        return {\n          position: config.mainWall.position,\n          dimensions: {\n            width: config.mainWall.contour[1].x - config.mainWall.contour[0].x,\n            height: config.mainWall.contour[2].y - config.mainWall.contour[0].y,\n            depth: config.mainWall.thickness\n          },\n          color: config.mainWall.color\n        };\n        \n      case 'arriere':\n        return {\n          position: config.walls.back.position,\n          dimensions: config.walls.back.dimensions,\n          color: config.walls.back.color\n        };\n      \n      case 'gauche':\n        return {\n          position: config.walls.left.position,\n          dimensions: config.walls.left.dimensions,\n          color: config.walls.left.color\n        };\n      \n      case 'droit':\n        return {\n          position: config.walls.right.position,\n          dimensions: config.walls.right.dimensions,\n          color: config.walls.right.color\n        };\n      \n      default:\n        return null;\n    }\n  }\n\n  calculerCapacite() {\n    if (!this.murInfo) return;\n\n    this.calculResultat = this.calculateurService.calculerNombreMaxFenetres(\n      this.murInfo,\n      this.largeurFenetre,\n      this.ecart,\n      this.hauteurFenetre\n    );\n  }\n\n  genererConfiguration() {\n    if (!this.murInfo || !this.calculResultat) return;\n\n    const resultat = this.calculateurService.genererConfigurationFenetres(\n      this.murInfo,\n      this.nombreFenetresSouhaitees,\n      this.largeurFenetre,\n      this.ecart,\n      this.hauteurFenetre,\n      0xff0000\n    );\n\n    if (resultat.isValid) {\n      this.configurationGeneree = this.formaterConfiguration(resultat.fenetres);\n    } else {\n      alert(resultat.message);\n    }\n  }\n\n  optimiserDimensions() {\n    if (!this.murInfo) return;\n\n    const optimisation = this.calculateurService.optimiserDimensions(\n      this.murInfo,\n      this.nombreFenetresSouhaitees,\n      this.hauteurFenetre\n    );\n\n    if (optimisation.isValid) {\n      this.largeurFenetre = optimisation.largeurFenetre;\n      this.ecart = optimisation.ecart;\n      this.calculerCapacite();\n      alert(optimisation.message);\n    } else {\n      alert(optimisation.message);\n    }\n  }\n\n  private formaterConfiguration(fenetres: any[]): string {\n    let config = 'openings: {\\n';\n    \n    fenetres.forEach((fenetre, index) => {\n      config += `  window${index + 1}: {\\n`;\n      config += `    position: { x: ${fenetre.position.x.toFixed(2)}, y: ${fenetre.position.y.toFixed(2)}, z: ${fenetre.position.z.toFixed(2)} },\\n`;\n      config += `    dimensions: { width: ${fenetre.dimensions.width}, height: ${fenetre.dimensions.height}, depth: ${fenetre.dimensions.depth} },\\n`;\n      config += `    color: 0x${fenetre.color.toString(16)},\\n`;\n      config += `    type: 'window' as const\\n`;\n      config += `  }${index  {\n      alert('Configuration copiée dans le presse-papiers !');\n    });\n  }\n}\n\n    \n\n\n    \n            \n    .calculateur-container {\n      max-width: 800px;\n      margin: 0 auto;\n      padding: 20px;\n      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    }\n\n    .section {\n      background: #f8f9fa;\n      border-radius: 8px;\n      padding: 20px;\n      margin-bottom: 20px;\n      border-left: 4px solid #007bff;\n    }\n\n    .section h3 {\n      margin-top: 0;\n      color: #333;\n      border-bottom: 2px solid #007bff;\n      padding-bottom: 10px;\n    }\n\n    .mur-info {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 15px;\n      margin-top: 15px;\n    }\n\n    .mur-info p {\n      background: white;\n      padding: 10px;\n      border-radius: 5px;\n      margin: 0;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n\n    .parametres {\n      display: grid;\n      gap: 20px;\n      margin-top: 15px;\n    }\n\n    .parametre {\n      display: flex;\n      align-items: center;\n      gap: 15px;\n    }\n\n    .parametre label {\n      min-width: 200px;\n      font-weight: 500;\n    }\n\n    .slider {\n      flex: 1;\n      height: 6px;\n      border-radius: 3px;\n      background: #ddd;\n      outline: none;\n      -webkit-appearance: none;\n    }\n\n    .slider::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      appearance: none;\n      width: 20px;\n      height: 20px;\n      border-radius: 50%;\n      background: #007bff;\n      cursor: pointer;\n    }\n\n    .valeur {\n      min-width: 60px;\n      font-weight: bold;\n      color: #007bff;\n    }\n\n    .number-input {\n      width: 100px;\n      padding: 8px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n    }\n\n    .resultats {\n      padding: 15px;\n      border-radius: 8px;\n      margin-top: 15px;\n    }\n\n    .resultats.valid {\n      background: #d4edda;\n      border: 1px solid #c3e6cb;\n    }\n\n    .resultats.invalid {\n      background: #f8d7da;\n      border: 1px solid #f5c6cb;\n    }\n\n    .statut {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      margin-bottom: 15px;\n    }\n\n    .icone {\n      font-size: 1.2em;\n    }\n\n    .message {\n      font-weight: 500;\n    }\n\n    .details {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n      gap: 10px;\n    }\n\n    .detail {\n      background: white;\n      padding: 10px;\n      border-radius: 5px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n\n    .positions {\n      margin-top: 20px;\n    }\n\n    .position-list {\n      display: grid;\n      gap: 10px;\n      margin-top: 15px;\n    }\n\n    .position-item {\n      background: white;\n      padding: 12px;\n      border-radius: 5px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    .numero {\n      font-weight: bold;\n      color: #007bff;\n    }\n\n    .coordonnees {\n      font-family: 'Courier New', monospace;\n      color: #666;\n    }\n\n    .actions {\n      display: flex;\n      gap: 15px;\n      margin-top: 20px;\n    }\n\n    .btn {\n      padding: 12px 24px;\n      border: none;\n      border-radius: 6px;\n      cursor: pointer;\n      font-weight: 500;\n      transition: all 0.3s ease;\n    }\n\n    .btn-primary {\n      background: #007bff;\n      color: white;\n    }\n\n    .btn-primary:hover:not(:disabled) {\n      background: #0056b3;\n    }\n\n    .btn-secondary {\n      background: #6c757d;\n      color: white;\n    }\n\n    .btn-secondary:hover {\n      background: #545b62;\n    }\n\n    .btn-success {\n      background: #28a745;\n      color: white;\n    }\n\n    .btn-success:hover {\n      background: #1e7e34;\n    }\n\n    .btn:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n\n    .config-code {\n      background: #2d3748;\n      color: #e2e8f0;\n      padding: 20px;\n      border-radius: 8px;\n      margin-top: 15px;\n      overflow-x: auto;\n    }\n\n    .config-code pre {\n      margin: 0;\n      font-family: 'Courier New', monospace;\n      font-size: 14px;\n      line-height: 1.5;\n    }\n\n    .form-control {\n      width: 100%;\n      padding: 10px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      font-size: 16px;\n    }\n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Calculateur de Fenêtres Intelligent        Sélection du Mur          -- Choisir un mur --      Mur Principal (Façade)      Mur Arrière      Mur Gauche      Mur Droit               Informations du Mur          Largeur: {{ murInfo.dimensions.width }}m      Hauteur: {{ murInfo.dimensions.height }}m      Profondeur: {{ murInfo.dimensions.depth }}m      Position: ({{ murInfo.position.x }}, {{ murInfo.position.y }}, {{ murInfo.position.z }})              Paramètres des Fenêtres                  Largeur des fenêtres (m):                {{ largeurFenetre }}m                    Hauteur des fenêtres (m):                {{ hauteurFenetre }}m                    Écart entre fenêtres (m):                {{ ecart }}m                    Nombre de fenêtres souhaitées:                            Résultats du Calcul                  {{ calculResultat.isValid ? \\'✅\\' : \\'❌\\' }}        {{ calculResultat.message }}                              Nombre max de fenêtres: {{ calculResultat.nombreMaxFenetres }}                          Largeur totale utilisée: {{ calculResultat.largeurTotaleUtilisee.toFixed(2) }}m                          Marge restante: {{ calculResultat.margeRestante.toFixed(2) }}m                          Écart optimal: {{ calculResultat.ecartOptimal.toFixed(2) }}m                           0\">      Positions Calculées                        Fenêtre {{ i + 1 }}:                      X: {{ position.x.toFixed(2) }}m,            Y: {{ position.y.toFixed(2) }}m,            Z: {{ position.z.toFixed(2) }}m                                       calculResultat.nombreMaxFenetres\">      Générer la Configuration              Optimiser les Dimensions              Configuration Générée          {{ configurationGeneree }}        Copier la Configuration  '\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'CalculateurFenetresComponent', 'selector': 'app-calculateur-fenetres'},{'name': 'ColorSelectorComponent', 'selector': 'app-color-selector'},{'name': 'DimensionsControllerComponent', 'selector': 'app-dimensions-controller'},{'name': 'FenetresCalculatorComponent', 'selector': 'app-fenetres-calculator'},{'name': 'MursControllerComponent', 'selector': 'app-murs-controller'},{'name': 'OuverturesControllerComponent', 'selector': 'app-ouvertures-controller'},{'name': 'Scene3d', 'selector': 'app-scene3d'},{'name': 'Scene3dCoreComponent', 'selector': 'app-scene3d-core'},{'name': 'Scene3dRefactored', 'selector': 'app-scene3d'},{'name': 'StructureControllerComponent', 'selector': 'app-structure-controller'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CalculateurFenetresComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CalculateurFenetresService.html":{"url":"injectables/CalculateurFenetresService.html","title":"injectable - CalculateurFenetresService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  CalculateurFenetresService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/calculateur-fenetres/calculateur-fenetres.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                CONTRAINTES\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                analyserCapaciteMurs\n                            \n                            \n                                    Public\n                                calculerNombreMaxFenetres\n                            \n                            \n                                    Private\n                                calculerPositionsOptimales\n                            \n                            \n                                    Public\n                                genererConfigurationFenetres\n                            \n                            \n                                    Public\n                                optimiserDimensions\n                            \n                            \n                                    Private\n                                validerContraintes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/calculateur-fenetres/calculateur-fenetres.service.ts:59\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        analyserCapaciteMurs\n                        \n                    \n                \n            \n            \n                \n                        \n                    analyserCapaciteMurs(murs: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/calculateur-fenetres/calculateur-fenetres.service.ts:365\n                        \n                    \n\n\n            \n                \n                        Analyse tous les murs et retourne leurs capacités\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                murs\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        calculerNombreMaxFenetres\n                        \n                    \n                \n            \n            \n                \n                        \n                    calculerNombreMaxFenetres(mur: MurConfig, largeurFenetre: number, ecart: number, hauteurFenetre: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/calculateur-fenetres/calculateur-fenetres.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Calcule le nombre maximum de fenêtres pour un mur donné\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                mur\n                                            \n                                                            MurConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                largeurFenetre\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1.5\n                                            \n\n                                        \n                                        \n                                                ecart\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    0.5\n                                            \n\n                                        \n                                        \n                                                hauteurFenetre\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1.2\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CalculFenetres\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        calculerPositionsOptimales\n                        \n                    \n                \n            \n            \n                \n                        \n                    calculerPositionsOptimales(mur: MurConfig, nombreFenetres: number, largeurFenetre: number, ecart: number, hauteurFenetre: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/calculateur-fenetres/calculateur-fenetres.service.ts:134\n                        \n                    \n\n\n            \n                \n                        Calcule les positions optimales pour les fenêtres\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                mur\n                                            \n                                                            MurConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                nombreFenetres\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                largeurFenetre\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ecart\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hauteurFenetre\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Array\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        genererConfigurationFenetres\n                        \n                    \n                \n            \n            \n                \n                        \n                    genererConfigurationFenetres(mur: MurConfig, nombreFenetres: number, largeurFenetre: number, ecart: number, hauteurFenetre: number, couleur: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/calculateur-fenetres/calculateur-fenetres.service.ts:263\n                        \n                    \n\n\n            \n                \n                        Génère automatiquement la configuration des fenêtres pour un mur\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                mur\n                                            \n                                                            MurConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                nombreFenetres\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                largeurFenetre\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1.5\n                                            \n\n                                        \n                                        \n                                                ecart\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    0.5\n                                            \n\n                                        \n                                        \n                                                hauteurFenetre\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1.2\n                                            \n\n                                        \n                                        \n                                                couleur\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    0xff0000\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        optimiserDimensions\n                        \n                    \n                \n            \n            \n                \n                        \n                    optimiserDimensions(mur: MurConfig, nombreFenetres: number, hauteurFenetre: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/calculateur-fenetres/calculateur-fenetres.service.ts:321\n                        \n                    \n\n\n            \n                \n                        Optimise automatiquement les dimensions pour un nombre de fenêtres donné\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                mur\n                                            \n                                                            MurConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                nombreFenetres\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                hauteurFenetre\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1.2\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        validerContraintes\n                        \n                    \n                \n            \n            \n                \n                        \n                    validerContraintes(mur: MurConfig, largeurFenetre: number, ecart: number, hauteurFenetre: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/calculateur-fenetres/calculateur-fenetres.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Valide les contraintes d'espacement\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                mur\n                                            \n                                                            MurConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                largeurFenetre\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ecart\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hauteurFenetre\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        CONTRAINTES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    largeurFenetreMin: 0.5,      // Largeur minimale d'une fenêtre (m)\n    largeurFenetreMax: 3.0,      // Largeur maximale d'une fenêtre (m)\n    hauteurFenetreMin: 0.8,      // Hauteur minimale d'une fenêtre (m)\n    hauteurFenetreMax: 2.5,      // Hauteur maximale d'une fenêtre (m)\n    ecartMin: 0.1,               // Écart minimum entre fenêtres (m)\n    ecartMax: 2.0,               // Écart maximum entre fenêtres (m)\n    margeMin: 0.2,               // Marge minimum des bords du mur (m)\n    hauteurMurMin: 1.0           // Hauteur minimale du mur (m)\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/services/calculateur-fenetres/calculateur-fenetres.service.ts:50\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface FenetreConfig {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  color: number;\n  type: 'window';\n}\n\nexport interface MurConfig {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  color: number;\n}\n\nexport interface CalculFenetres {\n  nombreMaxFenetres: number;\n  largeurFenetreOptimale: number;\n  ecartOptimal: number;\n  positionsCalculees: Array;\n  largeurTotaleUtilisee: number;\n  margeRestante: number;\n  isValid: boolean;\n  message: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CalculateurFenetresService {\n\n  // Contraintes par défaut\n  private readonly CONTRAINTES = {\n    largeurFenetreMin: 0.5,      // Largeur minimale d'une fenêtre (m)\n    largeurFenetreMax: 3.0,      // Largeur maximale d'une fenêtre (m)\n    hauteurFenetreMin: 0.8,      // Hauteur minimale d'une fenêtre (m)\n    hauteurFenetreMax: 2.5,      // Hauteur maximale d'une fenêtre (m)\n    ecartMin: 0.1,               // Écart minimum entre fenêtres (m)\n    ecartMax: 2.0,               // Écart maximum entre fenêtres (m)\n    margeMin: 0.2,               // Marge minimum des bords du mur (m)\n    hauteurMurMin: 1.0           // Hauteur minimale du mur (m)\n  };\n\n  constructor() {\n    console.log('CalculateurFenetresService initialisé');\n  }\n\n  /**\n   * Calcule le nombre maximum de fenêtres pour un mur donné\n   */\n  public calculerNombreMaxFenetres(\n    mur: MurConfig,\n    largeurFenetre: number = 1.5,\n    ecart: number = 0.5,\n    hauteurFenetre: number = 1.2\n  ): CalculFenetres {\n    \n    console.log('Calcul du nombre max de fenêtres pour le mur:', {\n      largeurMur: mur.dimensions.width,\n      hauteurMur: mur.dimensions.height,\n      largeurFenetre,\n      ecart,\n      hauteurFenetre\n    });\n\n    // Validation des contraintes\n    const validation = this.validerContraintes(mur, largeurFenetre, ecart, hauteurFenetre);\n    if (!validation.isValid) {\n      return {\n        nombreMaxFenetres: 0,\n        largeurFenetreOptimale: 0,\n        ecartOptimal: 0,\n        positionsCalculees: [],\n        largeurTotaleUtilisee: 0,\n        margeRestante: 0,\n        isValid: false,\n        message: validation.message\n      };\n    }\n\n    // Calcul du nombre maximum de fenêtres\n    const largeurDisponible = mur.dimensions.width - (2 * this.CONTRAINTES.margeMin);\n    const largeurParFenetre = largeurFenetre + ecart;\n    const nombreMaxFenetres = Math.floor(largeurDisponible / largeurParFenetre);\n\n    // Calcul des positions optimales\n    const positions = this.calculerPositionsOptimales(\n      mur, \n      nombreMaxFenetres, \n      largeurFenetre, \n      ecart, \n      hauteurFenetre\n    );\n\n    // Calcul de la largeur totale utilisée\n    const largeurTotaleUtilisee = (nombreMaxFenetres * largeurFenetre) + ((nombreMaxFenetres - 1) * ecart);\n    const margeRestante = mur.dimensions.width - largeurTotaleUtilisee;\n\n    const resultat: CalculFenetres = {\n      nombreMaxFenetres,\n      largeurFenetreOptimale: largeurFenetre,\n      ecartOptimal: ecart,\n      positionsCalculees: positions,\n      largeurTotaleUtilisee,\n      margeRestante,\n      isValid: true,\n      message: `✅ ${nombreMaxFenetres} fenêtre(s) possible(s) avec ${margeRestante.toFixed(2)}m de marge`\n    };\n\n    console.log(' Résultat du calcul:', resultat);\n    return resultat;\n  }\n\n  /**\n   * Calcule les positions optimales pour les fenêtres\n   */\n  private calculerPositionsOptimales(\n    mur: MurConfig,\n    nombreFenetres: number,\n    largeurFenetre: number,\n    ecart: number,\n    hauteurFenetre: number\n  ): Array {\n    \n    const positions: Array = [];\n    \n    if (nombreFenetres === 0) {\n      return positions;\n    }\n\n    // Calcul de la largeur totale utilisée\n    const largeurTotale = (nombreFenetres * largeurFenetre) + ((nombreFenetres - 1) * ecart);\n    \n    // Position de départ (centrée)\n    const debut = mur.position.x - (largeurTotale / 2) + (largeurFenetre / 2);\n    \n    // Hauteur des fenêtres (centrée verticalement)\n    const hauteurMur = mur.dimensions.height;\n    const yPosition = mur.position.y + (hauteurMur / 2) - (hauteurFenetre / 2);\n    \n    // Calcul des positions\n    for (let i = 0; i  this.CONTRAINTES.largeurFenetreMax) {\n      return {\n        isValid: false,\n        message: `❌ Largeur de fenêtre trop grande (max: ${this.CONTRAINTES.largeurFenetreMax}m)`\n      };\n    }\n\n    // Vérification de la hauteur de la fenêtre\n    if (hauteurFenetre  this.CONTRAINTES.hauteurFenetreMax) {\n      return {\n        isValid: false,\n        message: `❌ Hauteur de fenêtre trop grande (max: ${this.CONTRAINTES.hauteurFenetreMax}m)`\n      };\n    }\n\n    // Vérification de l'écart\n    if (ecart  this.CONTRAINTES.ecartMax) {\n      return {\n        isValid: false,\n        message: `❌ Écart trop grand (max: ${this.CONTRAINTES.ecartMax}m)`\n      };\n    }\n\n    // Vérification de la hauteur du mur\n    if (mur.dimensions.height  mur.dimensions.height) {\n      return {\n        isValid: false,\n        message: `❌ Fenêtre trop haute pour le mur (mur: ${mur.dimensions.height}m, fenêtre: ${hauteurFenetre}m)`\n      };\n    }\n\n    // Vérification de l'espace disponible\n    const largeurDisponible = mur.dimensions.width - (2 * this.CONTRAINTES.margeMin);\n    const largeurMinimale = largeurFenetre + ecart;\n    \n    if (largeurDisponible  calcul.nombreMaxFenetres) {\n      return {\n        fenetres: [],\n        isValid: false,\n        message: `❌ Trop de fenêtres demandées (max: ${calcul.nombreMaxFenetres})`\n      };\n    }\n\n    const fenetres: FenetreConfig[] = [];\n    \n    for (let i = 0; i  0'\n      };\n    }\n\n    const largeurDisponible = mur.dimensions.width - (2 * this.CONTRAINTES.margeMin);\n    \n    // Calcul de l'écart optimal (équilibre entre fenêtres et espacement)\n    const ecartOptimal = Math.max(this.CONTRAINTES.ecartMin, largeurDisponible * 0.1);\n    \n    // Calcul de la largeur de fenêtre optimale\n    const largeurFenetreOptimale = (largeurDisponible - ((nombreFenetres - 1) * ecartOptimal)) / nombreFenetres;\n    \n    // Vérification des contraintes\n    if (largeurFenetreOptimale  {\n      resultats[nomMur] = this.calculerNombreMaxFenetres(mur);\n    });\n    \n    return resultats;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CalculsMur.html":{"url":"interfaces/CalculsMur.html","title":"interface - CalculsMur","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CalculsMur\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/mur/mur.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les calculs géométriques d'un mur\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            centreGravite\n                                        \n                                \n                                \n                                        \n                                            perimetre\n                                        \n                                \n                                \n                                        \n                                            surfaceNet\n                                        \n                                \n                                \n                                        \n                                            surfaceOuvertures\n                                        \n                                \n                                \n                                        \n                                            surfaceTotale\n                                        \n                                \n                                \n                                        \n                                            volume\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        centreGravite\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        centreGravite:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        perimetre\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        perimetre:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surfaceNet\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        surfaceNet:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surfaceOuvertures\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        surfaceOuvertures:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surfaceTotale\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        surfaceTotale:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        volume\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        volume:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigurationService, ConfigurationMur } from '../configuration/configuration.service';\n\n/**\n * Interface pour les propriétés d'un mur\n */\nexport interface ProprietesMur {\n  id: string;\n  nom: string;\n  type: 'principal' | 'arriere' | 'gauche' | 'droit';\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n  epaisseur: number;\n  surface: number;\n  volume: number;\n  nombreOuvertures: number;\n  pourcentageOuvertures: number;\n  dateCreation: Date;\n  derniereModification: Date;\n}\n\n/**\n * Interface pour les calculs géométriques d'un mur\n */\nexport interface CalculsMur {\n  surfaceTotale: number;\n  surfaceOuvertures: number;\n  surfaceNet: number;\n  volume: number;\n  perimetre: number;\n  centreGravite: { x: number; y: number; z: number };\n}\n\n/**\n * Interface pour la validation d'un mur\n */\nexport interface ValidationMur {\n  isValid: boolean;\n  erreurs: string[];\n  avertissements: string[];\n}\n\n/**\n * Service de gestion des murs\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MurService {\n  \n  private mursActuels = new BehaviorSubject([]);\n  public murs$ = this.mursActuels.asObservable();\n\n  constructor(private configurationService: ConfigurationService) {\n    // Initialiser avec la configuration actuelle\n    this.initialiserMurs();\n    \n    // Écouter les changements de configuration\n    this.configurationService.getConfigurationObservable().subscribe(() => {\n      this.initialiserMurs();\n    });\n  }\n\n  /**\n   * Initialiser les murs à partir de la configuration\n   */\n  private initialiserMurs(): void {\n    const config = this.configurationService.getConfiguration();\n    const murs: ProprietesMur[] = [];\n    \n    Object.entries(config.murs).forEach(([type, murConfig]) => {\n      const calculs = this.calculerProprietesMur(murConfig);\n      const mur: ProprietesMur = {\n        id: `mur_${type}`,\n        nom: this.getNomMur(type),\n        type: type as ProprietesMur['type'],\n        position: murConfig.position,\n        dimensions: murConfig.dimensions,\n        couleur: murConfig.couleur,\n        epaisseur: murConfig.epaisseur,\n        surface: calculs.surfaceTotale,\n        volume: calculs.volume,\n        nombreOuvertures: murConfig.ouvertures.length,\n        pourcentageOuvertures: calculs.surfaceOuvertures > 0 ? \n          Math.round((calculs.surfaceOuvertures / calculs.surfaceTotale) * 100 * 100) / 100 : 0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      };\n      murs.push(mur);\n    });\n    \n    this.mursActuels.next(murs);\n  }\n\n  /**\n   * Obtenir le nom d'un mur selon son type\n   */\n  private getNomMur(type: string): string {\n    const noms: Record = {\n      principal: 'Mur Principal',\n      arriere: 'Mur Arrière',\n      gauche: 'Mur Gauche',\n      droit: 'Mur Droit'\n    };\n    return noms[type] || 'Mur Inconnu';\n  }\n\n  /**\n   * Calculer les propriétés géométriques d'un mur\n   */\n  private calculerProprietesMur(murConfig: ConfigurationMur): CalculsMur {\n    const surfaceTotale = murConfig.dimensions.width * murConfig.dimensions.height;\n    const surfaceOuvertures = murConfig.ouvertures.reduce((total, ouverture) => {\n      return total + (ouverture.dimensions.width * ouverture.dimensions.height);\n    }, 0);\n    const surfaceNet = surfaceTotale - surfaceOuvertures;\n    const volume = surfaceTotale * murConfig.dimensions.depth;\n    const perimetre = 2 * (murConfig.dimensions.width + murConfig.dimensions.height);\n    \n    const centreGravite = {\n      x: murConfig.position.x,\n      y: murConfig.position.y + (murConfig.dimensions.height / 2),\n      z: murConfig.position.z\n    };\n\n    return {\n      surfaceTotale: Math.round(surfaceTotale * 100) / 100,\n      surfaceOuvertures: Math.round(surfaceOuvertures * 100) / 100,\n      surfaceNet: Math.round(surfaceNet * 100) / 100,\n      volume: Math.round(volume * 100) / 100,\n      perimetre: Math.round(perimetre * 100) / 100,\n      centreGravite\n    };\n  }\n\n  /**\n   * Obtenir tous les murs\n   */\n  getMurs(): ProprietesMur[] {\n    return this.mursActuels.value;\n  }\n\n  /**\n   * Obtenir les murs en tant qu'Observable\n   */\n  getMursObservable(): Observable {\n    return this.murs$;\n  }\n\n  /**\n   * Obtenir un mur par son ID\n   */\n  getMurParId(id: string): ProprietesMur | undefined {\n    return this.mursActuels.value.find(mur => mur.id === id);\n  }\n\n  /**\n   * Obtenir un mur par son type\n   */\n  getMurParType(type: ProprietesMur['type']): ProprietesMur | undefined {\n    return this.mursActuels.value.find(mur => mur.type === type);\n  }\n\n  /**\n   * Obtenir le mur principal\n   */\n  getMurPrincipal(): ProprietesMur | undefined {\n    return this.getMurParType('principal');\n  }\n\n  /**\n   * Obtenir le mur arrière\n   */\n  getMurArriere(): ProprietesMur | undefined {\n    return this.getMurParType('arriere');\n  }\n\n  /**\n   * Obtenir le mur gauche\n   */\n  getMurGauche(): ProprietesMur | undefined {\n    return this.getMurParType('gauche');\n  }\n\n  /**\n   * Obtenir le mur droit\n   */\n  getMurDroit(): ProprietesMur | undefined {\n    return this.getMurParType('droit');\n  }\n\n  /**\n   * Modifier la position d'un mur\n   */\n  modifierPositionMur(type: ProprietesMur['type'], nouvellePosition: { x: number; y: number; z: number }): void {\n    try {\n      // Validation des paramètres\n      if (!type || !nouvellePosition) {\n        throw new Error('Paramètres manquants pour la modification de position');\n      }\n      \n      if (typeof nouvellePosition.x !== 'number' || \n          typeof nouvellePosition.y !== 'number' || \n          typeof nouvellePosition.z !== 'number') {\n        throw new Error('Position invalide: coordonnées doivent être des nombres');\n      }\n      \n      const config = this.configurationService.getConfiguration();\n      const murConfig = config.murs[type];\n      \n      if (!murConfig) {\n        throw new Error(`Mur de type '${type}' non trouvé`);\n      }\n      \n      murConfig.position = nouvellePosition;\n      this.configurationService.mettreAJourMur(type, murConfig);\n    } catch (error) {\n      console.error('Erreur lors de la modification de position du mur:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Modifier les dimensions d'un mur\n   */\n  modifierDimensionsMur(type: ProprietesMur['type'], nouvellesDimensions: { width: number; height: number; depth: number }): void {\n    const config = this.configurationService.getConfiguration();\n    const murConfig = config.murs[type];\n    \n    if (murConfig) {\n      murConfig.dimensions = nouvellesDimensions;\n      this.configurationService.mettreAJourMur(type, murConfig);\n    }\n  }\n\n  /**\n   * Modifier la couleur d'un mur\n   */\n  modifierCouleurMur(type: ProprietesMur['type'], nouvelleCouleur: number): void {\n    const config = this.configurationService.getConfiguration();\n    const murConfig = config.murs[type];\n    \n    if (murConfig) {\n      murConfig.couleur = nouvelleCouleur;\n      this.configurationService.mettreAJourMur(type, murConfig);\n    }\n  }\n\n  /**\n   * Modifier l'épaisseur d'un mur\n   */\n  modifierEpaisseurMur(type: ProprietesMur['type'], nouvelleEpaisseur: number): void {\n    const config = this.configurationService.getConfiguration();\n    const murConfig = config.murs[type];\n    \n    if (murConfig) {\n      murConfig.epaisseur = nouvelleEpaisseur;\n      murConfig.dimensions.depth = nouvelleEpaisseur;\n      this.configurationService.mettreAJourMur(type, murConfig);\n    }\n  }\n\n  /**\n   * Valider un mur\n   */\n  validerMur(mur: ProprietesMur): ValidationMur {\n    const erreurs: string[] = [];\n    const avertissements: string[] = [];\n\n    // Validation des dimensions\n    if (mur.dimensions.width  1) {\n      avertissements.push('L\\'épaisseur du mur est très épaisse (> 1m)');\n    }\n\n    // Validation du pourcentage d'ouvertures\n    if (mur.pourcentageOuvertures > 50) {\n      avertissements.push('Le mur a plus de 50% d\\'ouvertures');\n    }\n\n    // Validation de la position\n    if (Math.abs(mur.position.x) > 10 || Math.abs(mur.position.y) > 10 || Math.abs(mur.position.z) > 10) {\n      avertissements.push('La position du mur est très éloignée de l\\'origine');\n    }\n\n    return {\n      isValid: erreurs.length === 0,\n      erreurs,\n      avertissements\n    };\n  }\n\n  /**\n   * Obtenir les statistiques des murs\n   */\n  getStatistiquesMurs(): {\n    nombreTotal: number;\n    surfaceTotale: number;\n    volumeTotal: number;\n    nombreOuvertures: number;\n    pourcentageOuverturesMoyen: number;\n  } {\n    const murs = this.getMurs();\n    \n    const nombreTotal = murs.length;\n    const surfaceTotale = murs.reduce((total, mur) => total + mur.surface, 0);\n    const volumeTotal = murs.reduce((total, mur) => total + mur.volume, 0);\n    const nombreOuvertures = murs.reduce((total, mur) => total + mur.nombreOuvertures, 0);\n    const pourcentageOuverturesMoyen = murs.length > 0 ? \n      murs.reduce((total, mur) => total + mur.pourcentageOuvertures, 0) / murs.length : 0;\n\n    return {\n      nombreTotal,\n      surfaceTotale: Math.round(surfaceTotale * 100) / 100,\n      volumeTotal: Math.round(volumeTotal * 100) / 100,\n      nombreOuvertures,\n      pourcentageOuverturesMoyen: Math.round(pourcentageOuverturesMoyen * 100) / 100\n    };\n  }\n\n  /**\n   * Obtenir les murs avec le plus d'ouvertures\n   */\n  getMursAvecPlusOuvertures(): ProprietesMur[] {\n    const murs = this.getMurs();\n    const maxOuvertures = Math.max(...murs.map(mur => mur.nombreOuvertures));\n    return murs.filter(mur => mur.nombreOuvertures === maxOuvertures);\n  }\n\n  /**\n   * Obtenir les murs sans ouvertures\n   */\n  getMursSansOuvertures(): ProprietesMur[] {\n    return this.getMurs().filter(mur => mur.nombreOuvertures === 0);\n  }\n\n  /**\n   * Calculer la distance entre deux murs\n   */\n  calculerDistanceEntreMurs(mur1: ProprietesMur, mur2: ProprietesMur): number {\n    const dx = mur1.position.x - mur2.position.x;\n    const dy = mur1.position.y - mur2.position.y;\n    const dz = mur1.position.z - mur2.position.z;\n    \n    return Math.round(Math.sqrt(dx * dx + dy * dy + dz * dz) * 100) / 100;\n  }\n\n  /**\n   * Obtenir les murs adjacents\n   */\n  getMursAdjacents(mur: ProprietesMur): ProprietesMur[] {\n    const murs = this.getMurs();\n    const mursAdjacents: ProprietesMur[] = [];\n    \n    murs.forEach(autreMur => {\n      if (autreMur.id !== mur.id) {\n        const distance = this.calculerDistanceEntreMurs(mur, autreMur);\n        // Considérer comme adjacent si la distance est inférieure à 5m\n        if (distance \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CalculsOuverture.html":{"url":"interfaces/CalculsOuverture.html","title":"interface - CalculsOuverture","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CalculsOuverture\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/ouverture/ouverture.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les calculs d'une ouverture\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            centreGravite\n                                        \n                                \n                                \n                                        \n                                            perimetre\n                                        \n                                \n                                \n                                        \n                                            ratioAspect\n                                        \n                                \n                                \n                                        \n                                            surface\n                                        \n                                \n                                \n                                        \n                                            volume\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        centreGravite\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        centreGravite:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        perimetre\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        perimetre:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ratioAspect\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ratioAspect:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surface\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        surface:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        volume\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        volume:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigurationService, ConfigurationOuverture } from '../configuration/configuration.service';\n\n/**\n * Interface pour les propriétés d'une ouverture\n */\nexport interface ProprietesOuverture {\n  id: string;\n  nom: string;\n  type: 'porte' | 'fenetre';\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n  surface: number;\n  volume: number;\n  murParent: 'principal' | 'arriere' | 'gauche' | 'droit';\n  dateCreation: Date;\n  derniereModification: Date;\n}\n\n/**\n * Interface pour les calculs d'une ouverture\n */\nexport interface CalculsOuverture {\n  surface: number;\n  volume: number;\n  perimetre: number;\n  centreGravite: { x: number; y: number; z: number };\n  ratioAspect: number; // largeur/hauteur\n}\n\n/**\n * Interface pour la validation d'une ouverture\n */\nexport interface ValidationOuverture {\n  isValid: boolean;\n  erreurs: string[];\n  avertissements: string[];\n}\n\n/**\n * Interface pour les statistiques des ouvertures\n */\nexport interface StatistiquesOuvertures {\n  nombreTotal: number;\n  nombrePortes: number;\n  nombreFenetres: number;\n  surfaceTotale: number;\n  surfacePortes: number;\n  surfaceFenetres: number;\n  pourcentagePortes: number;\n  pourcentageFenetres: number;\n}\n\n/**\n * Service de gestion des ouvertures (portes et fenêtres)\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class OuvertureService {\n  \n  private ouverturesActuelles = new BehaviorSubject([]);\n  public ouvertures$ = this.ouverturesActuelles.asObservable();\n\n  constructor(private configurationService: ConfigurationService) {\n    // Initialiser avec la configuration actuelle\n    this.initialiserOuvertures();\n    \n    // Écouter les changements de configuration\n    this.configurationService.getConfigurationObservable().subscribe(() => {\n      this.initialiserOuvertures();\n    });\n  }\n\n  /**\n   * Initialiser les ouvertures à partir de la configuration\n   */\n  private initialiserOuvertures(): void {\n    const config = this.configurationService.getConfiguration();\n    const ouvertures: ProprietesOuverture[] = [];\n    \n    Object.entries(config.murs).forEach(([typeMur, murConfig]) => {\n      murConfig.ouvertures.forEach(ouvertureConfig => {\n        const calculs = this.calculerProprietesOuverture(ouvertureConfig);\n        const ouverture: ProprietesOuverture = {\n          id: ouvertureConfig.id,\n          nom: ouvertureConfig.nom || `${ouvertureConfig.type}_${ouvertureConfig.id}`,\n          type: ouvertureConfig.type,\n          position: ouvertureConfig.position,\n          dimensions: ouvertureConfig.dimensions,\n          couleur: ouvertureConfig.couleur,\n          surface: calculs.surface,\n          volume: calculs.volume,\n          murParent: typeMur as ProprietesOuverture['murParent'],\n          dateCreation: new Date(),\n          derniereModification: new Date()\n        };\n        ouvertures.push(ouverture);\n      });\n    });\n    \n    this.ouverturesActuelles.next(ouvertures);\n  }\n\n  /**\n   * Calculer les propriétés géométriques d'une ouverture\n   */\n  private calculerProprietesOuverture(ouvertureConfig: ConfigurationOuverture): CalculsOuverture {\n    const surface = ouvertureConfig.dimensions.width * ouvertureConfig.dimensions.height;\n    const volume = surface * ouvertureConfig.dimensions.depth;\n    const perimetre = 2 * (ouvertureConfig.dimensions.width + ouvertureConfig.dimensions.height);\n    const ratioAspect = ouvertureConfig.dimensions.width / ouvertureConfig.dimensions.height;\n    \n    const centreGravite = {\n      x: ouvertureConfig.position.x,\n      y: ouvertureConfig.position.y + (ouvertureConfig.dimensions.height / 2),\n      z: ouvertureConfig.position.z\n    };\n\n    return {\n      surface: Math.round(surface * 100) / 100,\n      volume: Math.round(volume * 100) / 100,\n      perimetre: Math.round(perimetre * 100) / 100,\n      centreGravite,\n      ratioAspect: Math.round(ratioAspect * 100) / 100\n    };\n  }\n\n  /**\n   * Obtenir toutes les ouvertures\n   */\n  getOuvertures(): ProprietesOuverture[] {\n    return this.ouverturesActuelles.value;\n  }\n\n  /**\n   * Obtenir les ouvertures en tant qu'Observable\n   */\n  getOuverturesObservable(): Observable {\n    return this.ouvertures$;\n  }\n\n  /**\n   * Obtenir une ouverture par son ID\n   */\n  getOuvertureParId(id: string): ProprietesOuverture | undefined {\n    return this.ouverturesActuelles.value.find(ouverture => ouverture.id === id);\n  }\n\n  /**\n   * Obtenir les ouvertures par type\n   */\n  getOuverturesParType(type: 'porte' | 'fenetre'): ProprietesOuverture[] {\n    return this.ouverturesActuelles.value.filter(ouverture => ouverture.type === type);\n  }\n\n  /**\n   * Obtenir toutes les portes\n   */\n  getPortes(): ProprietesOuverture[] {\n    return this.getOuverturesParType('porte');\n  }\n\n  /**\n   * Obtenir toutes les fenêtres\n   */\n  getFenetres(): ProprietesOuverture[] {\n    return this.getOuverturesParType('fenetre');\n  }\n\n  /**\n   * Obtenir les ouvertures d'un mur spécifique\n   */\n  getOuverturesParMur(murParent: ProprietesOuverture['murParent']): ProprietesOuverture[] {\n    return this.ouverturesActuelles.value.filter(ouverture => ouverture.murParent === murParent);\n  }\n\n  /**\n   * Ajouter une nouvelle ouverture\n   */\n  ajouterOuverture(\n    murParent: ProprietesOuverture['murParent'],\n    nouvelleOuverture: Omit\n  ): void {\n    try {\n      // Validation des paramètres\n      if (!murParent || !nouvelleOuverture) {\n        throw new Error('Paramètres manquants pour l\\'ajout d\\'ouverture');\n      }\n      \n      if (!nouvelleOuverture.type || !nouvelleOuverture.dimensions || !nouvelleOuverture.position) {\n        throw new Error('Ouverture incomplète: propriétés manquantes');\n      }\n      \n      if (nouvelleOuverture.dimensions.width  o.id === id);\n      \n      if (ouvertureConfig) {\n        ouvertureConfig.position = nouvellePosition;\n        this.configurationService.mettreAJourMur(ouverture.murParent, murConfig);\n      }\n    }\n  }\n\n  /**\n   * Modifier les dimensions d'une ouverture\n   */\n  modifierDimensionsOuverture(id: string, nouvellesDimensions: { width: number; height: number; depth: number }): void {\n    const ouverture = this.getOuvertureParId(id);\n    if (ouverture) {\n      const config = this.configurationService.getConfiguration();\n      const murConfig = config.murs[ouverture.murParent];\n      const ouvertureConfig = murConfig.ouvertures.find(o => o.id === id);\n      \n      if (ouvertureConfig) {\n        ouvertureConfig.dimensions = nouvellesDimensions;\n        this.configurationService.mettreAJourMur(ouverture.murParent, murConfig);\n      }\n    }\n  }\n\n  /**\n   * Modifier la couleur d'une ouverture\n   */\n  modifierCouleurOuverture(id: string, nouvelleCouleur: number): void {\n    const ouverture = this.getOuvertureParId(id);\n    if (ouverture) {\n      const config = this.configurationService.getConfiguration();\n      const murConfig = config.murs[ouverture.murParent];\n      const ouvertureConfig = murConfig.ouvertures.find(o => o.id === id);\n      \n      if (ouvertureConfig) {\n        ouvertureConfig.couleur = nouvelleCouleur;\n        this.configurationService.mettreAJourMur(ouverture.murParent, murConfig);\n      }\n    }\n  }\n\n  /**\n   * Valider une ouverture\n   */\n  validerOuverture(ouverture: ProprietesOuverture): ValidationOuverture {\n    const erreurs: string[] = [];\n    const avertissements: string[] = [];\n\n    // Validation des dimensions\n    if (ouverture.dimensions.width  1.2) {\n        avertissements.push('La largeur de la porte est supérieure à 1.2m');\n      }\n    }\n\n    // Validation spécifique aux fenêtres\n    if (ouverture.type === 'fenetre') {\n      if (ouverture.dimensions.height  3) {\n      avertissements.push('Le ratio largeur/hauteur est très élevé (> 3)');\n    }\n    if (ratioAspect  total + ouverture.surface, 0);\n    const surfacePortes = portes.reduce((total, porte) => total + porte.surface, 0);\n    const surfaceFenetres = fenetres.reduce((total, fenetre) => total + fenetre.surface, 0);\n    \n    const pourcentagePortes = surfaceTotale > 0 ? (surfacePortes / surfaceTotale) * 100 : 0;\n    const pourcentageFenetres = surfaceTotale > 0 ? (surfaceFenetres / surfaceTotale) * 100 : 0;\n\n    return {\n      nombreTotal,\n      nombrePortes,\n      nombreFenetres,\n      surfaceTotale: Math.round(surfaceTotale * 100) / 100,\n      surfacePortes: Math.round(surfacePortes * 100) / 100,\n      surfaceFenetres: Math.round(surfaceFenetres * 100) / 100,\n      pourcentagePortes: Math.round(pourcentagePortes * 100) / 100,\n      pourcentageFenetres: Math.round(pourcentageFenetres * 100) / 100\n    };\n  }\n\n  /**\n   * Obtenir la plus grande ouverture\n   */\n  getPlusGrandeOuverture(): ProprietesOuverture | undefined {\n    const ouvertures = this.getOuvertures();\n    if (ouvertures.length === 0) return undefined;\n    \n    return ouvertures.reduce((plusGrande, ouverture) => \n      ouverture.surface > plusGrande.surface ? ouverture : plusGrande\n    );\n  }\n\n  /**\n   * Obtenir la plus petite ouverture\n   */\n  getPlusPetiteOuverture(): ProprietesOuverture | undefined {\n    const ouvertures = this.getOuvertures();\n    if (ouvertures.length === 0) return undefined;\n    \n    return ouvertures.reduce((plusPetite, ouverture) => \n      ouverture.surface  \n      ouverture.surface >= minSurface && ouverture.surface  {\n      if (autreOuverture.id !== ouverture.id) {\n        const distance = this.calculerDistanceEntreOuvertures(ouverture, autreOuverture);\n        if (distance  ouverture.couleur === couleur);\n  }\n\n  /**\n   * Obtenir les couleurs utilisées\n   */\n  getCouleursUtilisees(): number[] {\n    const ouvertures = this.getOuvertures();\n    const couleurs = new Set();\n    \n    ouvertures.forEach(ouverture => {\n      couleurs.add(ouverture.couleur);\n    });\n    \n    return Array.from(couleurs);\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CameraConfig.html":{"url":"interfaces/CameraConfig.html","title":"interface - CameraConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CameraConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/config/building-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration de la caméra et des contrôles\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            controls\n                                        \n                                \n                                \n                                        \n                                            initial\n                                        \n                                \n                                \n                                        \n                                            target\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        controls\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        controls:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        initial\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        initial:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        target:         Position3D\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Position3D\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Position3D {\n  x: number;\n  y: number;\n  z: number;\n}\n\n/**\n * Dimensions 3D d'un objet\n * @param width - Largeur (axe X)\n * @param height - Hauteur (axe Y)\n * @param depth - Profondeur (axe Z)\n */\nexport interface Dimensions3D {\n  width: number;\n  height: number;\n  depth: number;\n}\n\n/**\n * Configuration d'un mur simple\n * @param position - Position du centre du mur\n * @param dimensions - Taille du mur\n * @param color - Couleur hexadécimale (ex: 0xaaaaaa)\n */\nexport interface WallConfig {\n  position: Position3D;\n  dimensions: Dimensions3D;\n  color: number;\n}\n\n/**\n * Configuration d'une ouverture (porte ou fenêtre)\n * @param position - Position du centre de l'ouverture\n * @param dimensions - Taille de l'ouverture\n * @param color - Couleur de l'élément\n * @param type - Type d'ouverture ('door' ou 'window')\n */\nexport interface OpeningConfig {\n  position: Position3D;\n  dimensions: Dimensions3D;\n  color: number;\n  type: 'door' | 'window';\n}\n\n/**\n * Configuration du mur principal avec ouvertures (façade)\n * @param contour - Points définissant la forme du mur\n * @param thickness - Épaisseur du mur\n * @param position - Position du mur dans l'espace\n * @param color - Couleur du mur\n * @param openings - Ouvertures (porte et fenêtres) dans ce mur\n */\nexport interface MainWallConfig {\n  contour: Position3D[];\n  thickness: number;\n  position: Position3D;\n  color: number;\n  openings: {\n    door: OpeningConfig;\n    window1: OpeningConfig;\n    window2: OpeningConfig;\n  };\n}\n\n/**\n * Configuration de la caméra et des contrôles\n * @param initial - Position et paramètres initiaux de la caméra\n * @param target - Point que la caméra regarde\n * @param controls - Paramètres des contrôles souris\n */\nexport interface CameraConfig {\n  initial: {\n    position: Position3D;\n    rotationX: number;  // Rotation verticale\n    rotationY: number;  // Rotation horizontale\n    zoom: number;       // Distance de la caméra\n  };\n  target: Position3D;   // Point central regardé par la caméra\n  controls: {\n    minZoom: number;      // Distance minimale\n    maxZoom: number;      // Distance maximale\n    rotationSpeed: number; // Vitesse de rotation\n    zoomSpeed: number;     // Vitesse de zoom\n  };\n}\n\n/**\n * Configuration de l'éclairage de la scène\n * @param ambient - Lumière ambiante (éclairage général)\n * @param directional - Lumière directionnelle (comme le soleil)\n */\nexport interface LightingConfig {\n  ambient: {\n    color: number;      // Couleur de la lumière ambiante\n    intensity: number;  // Intensité (0-1)\n  };\n  directional: {\n    color: number;      // Couleur de la lumière directionnelle\n    intensity: number;  // Intensité\n    position: Position3D; // Position de la source lumineuse\n    shadow: {\n      mapSize: number;  // Qualité des ombres (résolution)\n    };\n  };\n}\n\n/**\n * Configuration générale de la scène 3D\n * @param background - Couleur de fond de la scène\n * @param camera - Paramètres de la caméra (champ de vision, distances)\n */\nexport interface SceneConfig {\n  background: number;   // Couleur de fond (ex: 0xbfd1e5 = bleu ciel)\n  camera: {\n    fov: number;        // Champ de vision (field of view) en degrés\n    near: number;       // Distance de rendu minimale\n    far: number;        // Distance de rendu maximale\n  };\n}\n\n/**\n * ===============================================\n * CONFIGURATION PRINCIPALE DU BÂTIMENT\n * ===============================================\n * Toutes les données du modèle 3D sont centralisées ici\n */\nexport const BUILDING_CONFIG = {\n  \n  /**\n   * SCÈNE 3D - Paramètres généraux\n   */\n  scene: {\n    background: 0xbfd1e5,  // Couleur bleu ciel pour le fond\n    camera: {\n      fov: 75,             // Angle de vue (75° = vue naturelle)\n      near: 0.1,           // Objets plus proches que 0.1 non rendus\n      far: 1000            // Objets plus loin que 1000 non rendus\n    }\n  } as SceneConfig,\n\n  /**\n   * ÉCLAIRAGE - Lumières de la scène\n   */\n  lighting: {\n    ambient: {   \n      color: 0xffffff,     // Lumière blanche ambiante\n      intensity: 0.6       // 60% d'intensité (éclairage doux)\n    },\n    directional: {\n      color: 0xffffff,     // Lumière blanche directionnelle (soleil)\n      intensity: 1,        // 100% d'intensité\n      position: { x: 10, y: 20, z: 10 }, // Position du \"soleil\"\n      shadow: {\n        mapSize: 2048      // Résolution des ombres (2048x2048)\n      }\n    }\n  } as LightingConfig,\n\n  /**\n   * CAMÉRA - Point de vue et contrôles\n   */\n  camera: {\n    initial: {\n      position: { x: 10, y: 10, z: 9 }, // Position initiale de la caméra\n      rotationX: 0.3,                   // Inclinaison verticale\n      rotationY: 0.5,                   // Rotation horizontale\n      zoom: 15                          // Distance initiale\n    },\n    target: { x: 0, y: 1.25, z: 0 },   // Point regardé (centre du bâtiment)\n    controls: {\n      minZoom: 5,           // Distance minimale (zoom max)\n      maxZoom: 50,          // Distance maximale (zoom min)\n      rotationSpeed: 0.01,  // Sensibilité de rotation souris\n      zoomSpeed: 0.01       // Sensibilité du zoom molette\n    }\n  } as CameraConfig,\n\n  /**\n   * SOL - Plateforme de base\n   */\n  ground: {\n    position: { x: 0, y: -0.1, z: 0 }, // Légèrement sous le niveau 0\n    dimensions: { width: 8, height: 0.2, depth: 5 }, // 8x5m, épaisseur 20cm\n    color: 0x2E1E1A  \n  } as WallConfig,\n\n  /**\n   * TOIT - Couverture du bâtiment\n   */\n  roof: {\n    position: { x: 0, y: 2.6, z: 0 },  // Au-dessus des murs (2.5m + 0.1m)\n    dimensions: { width: 8.4, height: 0.2, depth: 5 }, \n    color: 0x4169e1       // Couleur bleu royal\n  } as WallConfig,\n\n  /**\n   * MUR PRINCIPAL (FAÇADE) - Mur avec ouvertures\n   * Ce mur utilise ExtrudeGeometry pour créer de vraies ouvertures\n   */\n  mainWall: {\n    contour: [\n      // Points définissant la forme rectangulaire du mur (8m x 2.5m)\n      { x: -4, y: 0, z: 0 },    // Coin bas gauche\n      { x: 4, y: 0, z: 0 },     // Coin bas droit\n      { x: 4, y: 2.5, z: 0 },   // Coin haut droit\n      { x: -4, y: 2.5, z: 0 },  // Coin haut gauche\n      { x: -4, y: 0, z: 0 }     // Retour au point de départ\n    ],\n    thickness: 0.2,             // Épaisseur du mur (20cm)\n    position: { x: 0, y: 0, z: 2.3 }, // Position du mur dans l'espace\n    color: 0xaaaaaa,            // Couleur gris clair\n    openings: {\n      // PORTE CENTRALE\n      door: {\n        position: { x: 0, y: 1.05, z: 2.3 },\n        dimensions: { width: 1, height: 2, depth: 0.05 }, // 1m x 2m\n        color: 0x00ff00,        // Couleur verte\n        type: 'door' as const\n      },\n      // PREMIÈRE FENÊTRE (gauche)\n      window1: {\n        position: { x: -2, y: 1.5, z: 2.3 }, \n        dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n        color: 0xff0000,        // Couleur rouge\n        type: 'window' as const\n      },\n      // DEUXIÈME FENÊTRE (droite)\n      window2: {\n        position: { x: 2, y: 1.5, z: 2.3 }, \n        dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n        color: 0xff0000,        // Couleur rouge\n        type: 'window' as const\n      }\n    }\n  } as MainWallConfig,\n\n\n  /**\n   * AUTRES MURS - Murs latéraux et arrière (murs pleins)\n   */\n  walls: {\n    // MUR ARRIÈRE\n    back: {\n      position: { x: 0, y: 0, z: -2.5 },\n      dimensions: { width: 8, height: 2.5, depth: 0.2 }, // 8m x 2.5m x 20cm\n      color: 0xaaaaaa,\n      openings: {\n        window1: {\n          position: { x: 0, y: 1.5, z: -2.2 },\n          dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n    },\n    // MUR GAUCHE\n    left: {\n      position: { x: -3.9, y: 1.25, z: 0 }, \n      dimensions: { width: 0.2, height: 2.5, depth: 5 }, // 20cm x 2.5m x 5m\n      color: 0xaaaaaa,\n      openings: {\n        window5: {\n          position: { x: -3.8, y: 1.5, z: 0 },\n          dimensions: { width: 1.2, height: 1.0, depth: 0.05 }, // 1.2m x 1m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n      // Couleur gris clair\n    },\n    // MUR DROIT\n    right: {\n      position: { x: 3.8, y: 0, z: 0 },\n      dimensions: { width: 0.2, height: 2.5, depth: 5 }, // 20cm x 2.5m x 5m\n      color: 0xaaaaaa,\n      openings: {\n        // PORTE D'ENTRÉE\n        door: {\n          position: { x: 3.8, y: 1.05, z: 0 },\n          dimensions: { width: 1, height: 2.1, depth: 0.05 }, // 1m x 2.1m\n          color: 0x00ff00,        // Couleur verte\n          type: 'door' as const\n        },\n        // FENÊTRE\n        window1: {\n          position: { x: 3.8, y: 1.5, z: 1.5 },\n          dimensions: { width: 1.2, height: 1.0, depth: 0.05 }, // 1.2m x 1m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n    }\n  },\n\n  /**\n   * AXES DE RÉFÉRENCE (REPÈRE) - Pour s'orienter dans l'espace\n   */\n  axes: {\n    size: 8,                  // Longueur des axes (8 unités)\n    labels: [\n      // Axe X (rouge) - gauche/droite\n      { text: 'X', position: { x: 10, y: 0, z: 0 }, color: 0xff0000 },\n      // Axe Y (vert) - bas/haut\n      { text: 'Y', position: { x: 0, y: 10, z: 0 }, color: 0x00ff00 },\n      // Axe Z (bleu) - avant/arrière\n      { text: 'Z', position: { x: 0, y: 0, z: 10 }, color: 0x0000ff }\n    ],\n    labelSize: { width: 0.2, height: 0.2, depth: 0.2 } // Taille des cubes de repère\n  }\n};\n\n/**\n * ===============================================\n * FONCTIONS UTILITAIRES\n * ===============================================\n * Calculs automatiques pour les ouvertures dans les murs\n */\nexport class WallCalculations {\n  \n  /**\n   * Calcule les coordonnées d'une ouverture de porte\n   * @param config - Configuration de la porte\n   * @returns Points définissant le trou rectangulaire pour la porte\n   */\n  static getDoorHole(config: OpeningConfig) {\n    const halfWidth = config.dimensions.width / 2;  // Demi-largeur de la porte\n    return [\n      // Rectangle partant du sol (y=0) jusqu'à la hauteur de la porte\n      { x: config.position.x - halfWidth, y: 0 },                    // Bas gauche\n      { x: config.position.x + halfWidth, y: 0 },                    // Bas droit\n      { x: config.position.x + halfWidth, y: config.dimensions.height }, // Haut droit\n      { x: config.position.x - halfWidth, y: config.dimensions.height }, // Haut gauche\n      { x: config.position.x - halfWidth, y: 0 }                     // Retour au début\n    ];\n  }\n\n  /**\n   * Calcule les coordonnées d'une ouverture de fenêtre\n   * @param config - Configuration de la fenêtre\n   * @param bottomOffset - Distance du sol au bas de la fenêtre (par défaut 0.9m)\n   * @returns Points définissant le trou rectangulaire pour la fenêtre\n   */\n  static getWindowHole(config: OpeningConfig, bottomOffset: number = 0.9) {\n    const halfWidth = config.dimensions.width / 2;  // Demi-largeur de la fenêtre\n    const bottom = bottomOffset;                     // Position du bas de la fenêtre\n    const top = bottom + config.dimensions.height;  // Position du haut de la fenêtre\n    \n    return [\n      // Rectangle surélevé par rapport au sol\n      { x: config.position.x - halfWidth, y: bottom }, // Bas gauche\n      { x: config.position.x + halfWidth, y: bottom }, // Bas droit\n      { x: config.position.x + halfWidth, y: top },    // Haut droit\n      { x: config.position.x - halfWidth, y: top },    // Haut gauche\n      { x: config.position.x - halfWidth, y: bottom }  // Retour au début\n    ];\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ColorSelectorComponent.html":{"url":"components/ColorSelectorComponent.html","title":"component - ColorSelectorComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  ColorSelectorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/scene3d/controls/color-selector.component.ts\n\n\n\n    \n        Description\n    \n    \n        Composant pour sélectionner et modifier les couleurs des éléments\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-color-selector\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./color-selector.component.html\n            \n\n\n\n            \n                styleUrl\n                ./color-selector.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                presetColors\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyColor\n                            \n                            \n                                onColorChange\n                            \n                            \n                                onElementChange\n                            \n                            \n                                resetColor\n                            \n                            \n                                selectElement\n                            \n                            \n                                selectPresetColor\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                elements\n                            \n                            \n                                isVisible\n                            \n                            \n                                newColor\n                            \n                            \n                                selectedElementId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                colorApplied\n                            \n                            \n                                colorChanged\n                            \n                            \n                                colorReset\n                            \n                            \n                                elementSelected\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    selectedElement\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        elements\n                    \n                \n                \n                    \n                        Type :         ColorableElement[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/color-selector.component.ts:27\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        isVisible\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/color-selector.component.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        newColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '#007bff'\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/color-selector.component.ts:29\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedElementId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/color-selector.component.ts:28\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        colorApplied\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/color-selector.component.ts:33\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        colorChanged\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/color-selector.component.ts:32\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        colorReset\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/color-selector.component.ts:34\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        elementSelected\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/color-selector.component.ts:31\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        applyColor\n                        \n                    \n                \n            \n            \n                \napplyColor()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/color-selector.component.ts:74\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onColorChange\n                        \n                    \n                \n            \n            \n                \nonColorChange()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/color-selector.component.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onElementChange\n                        \n                    \n                \n            \n            \n                \nonElementChange()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/color-selector.component.ts:56\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetColor\n                        \n                    \n                \n            \n            \n                \nresetColor()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/color-selector.component.ts:80\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectElement\n                        \n                    \n                \n            \n            \n                \nselectElement(elementId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/color-selector.component.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                elementId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectPresetColor\n                        \n                    \n                \n            \n            \n                \nselectPresetColor(color: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/color-selector.component.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                color\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        presetColors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    { name: 'Rouge', value: '#dc3545' },\n    { name: 'Vert', value: '#28a745' },\n    { name: 'Bleu', value: '#007bff' },\n    { name: 'Jaune', value: '#ffc107' },\n    { name: 'Orange', value: '#fd7e14' },\n    { name: 'Violet', value: '#6f42c1' },\n    { name: 'Rose', value: '#e83e8c' },\n    { name: 'Cyan', value: '#17a2b8' },\n    { name: 'Gris', value: '#6c757d' },\n    { name: 'Blanc', value: '#ffffff' },\n    { name: 'Noir', value: '#000000' },\n    { name: 'Marron', value: '#8b4513' }\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/components/scene3d/controls/color-selector.component.ts:37\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        selectedElement\n                    \n                \n\n                \n                    \n                        getselectedElement()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/scene3d/controls/color-selector.component.ts:52\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n/**\n * Interface pour un élément colorable\n */\nexport interface ColorableElement {\n  id: string;\n  name: string;\n  currentColor: string;\n  type: 'mur' | 'ouverture' | 'toit' | 'sol' | 'structure';\n}\n\n/**\n * Composant pour sélectionner et modifier les couleurs des éléments\n */\n@Component({\n  selector: 'app-color-selector',\n  imports: [CommonModule, FormsModule],\n  templateUrl: './color-selector.component.html',\n  styleUrl: './color-selector.component.css',\n  standalone: true\n})\nexport class ColorSelectorComponent {\n  @Input() isVisible: boolean = false;\n  @Input() elements: ColorableElement[] = [];\n  @Input() selectedElementId: string = '';\n  @Input() newColor: string = '#007bff';\n\n  @Output() elementSelected = new EventEmitter();\n  @Output() colorChanged = new EventEmitter();\n  @Output() colorApplied = new EventEmitter();\n  @Output() colorReset = new EventEmitter();\n\n  // Couleurs prédéfinies\n  presetColors = [\n    { name: 'Rouge', value: '#dc3545' },\n    { name: 'Vert', value: '#28a745' },\n    { name: 'Bleu', value: '#007bff' },\n    { name: 'Jaune', value: '#ffc107' },\n    { name: 'Orange', value: '#fd7e14' },\n    { name: 'Violet', value: '#6f42c1' },\n    { name: 'Rose', value: '#e83e8c' },\n    { name: 'Cyan', value: '#17a2b8' },\n    { name: 'Gris', value: '#6c757d' },\n    { name: 'Blanc', value: '#ffffff' },\n    { name: 'Noir', value: '#000000' },\n    { name: 'Marron', value: '#8b4513' }\n  ];\n\n  get selectedElement(): ColorableElement | null {\n    return this.elements.find(e => e.id === this.selectedElementId) || null;\n  }\n\n  onElementChange(): void {\n    if (this.selectedElement) {\n      this.newColor = this.selectedElement.currentColor;\n    }\n    this.elementSelected.emit(this.selectedElementId);\n  }\n\n  onColorChange(): void {\n    if (this.selectedElementId) {\n      this.colorChanged.emit({ elementId: this.selectedElementId, color: this.newColor });\n    }\n  }\n\n  selectPresetColor(color: string): void {\n    this.newColor = color;\n    this.onColorChange();\n  }\n\n  applyColor(): void {\n    if (this.selectedElementId && this.newColor) {\n      this.colorApplied.emit({ elementId: this.selectedElementId, color: this.newColor });\n    }\n  }\n\n  resetColor(): void {\n    if (this.selectedElementId) {\n      this.colorReset.emit(this.selectedElementId);\n    }\n  }\n\n  selectElement(elementId: string): void {\n    this.selectedElementId = elementId;\n    this.onElementChange();\n  }\n}\n\n    \n\n    \n        \n  🎨 Sélecteur de Couleurs\n  \n  \n  \n    Élément à modifier :\n    \n      -- Sélectionner un élément --\n      \n        {{ element.name }} ({{ element.type }})\n      \n    \n  \n\n  \n  \n    {{ selectedElement.name }}\n    \n    \n      Couleur actuelle :\n      \n      {{ selectedElement.currentColor }}\n    \n\n    \n      Nouvelle couleur :\n      \n    \n\n    \n    \n      Couleurs prédéfinies :\n      \n        \n          {{ color.name }}\n        \n      \n    \n\n    \n    \n      \n        ✅ Appliquer\n      \n      \n      \n        🔄 Réinitialiser\n      \n    \n  \n\n  \n   0\">\n    Aperçu des couleurs\n    \n      \n        \n        {{ element.name }}\n        {{ element.type }}\n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  🎨 Sélecteur de Couleurs          Élément à modifier :          -- Sélectionner un élément --              {{ element.name }} ({{ element.type }})                    {{ selectedElement.name }}              Couleur actuelle :            {{ selectedElement.currentColor }}              Nouvelle couleur :                        Couleurs prédéfinies :                        {{ color.name }}                                        ✅ Appliquer                          🔄 Réinitialiser                 0\">    Aperçu des couleurs                          {{ element.name }}        {{ element.type }}            '\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'CalculateurFenetresComponent', 'selector': 'app-calculateur-fenetres'},{'name': 'ColorSelectorComponent', 'selector': 'app-color-selector'},{'name': 'DimensionsControllerComponent', 'selector': 'app-dimensions-controller'},{'name': 'FenetresCalculatorComponent', 'selector': 'app-fenetres-calculator'},{'name': 'MursControllerComponent', 'selector': 'app-murs-controller'},{'name': 'OuverturesControllerComponent', 'selector': 'app-ouvertures-controller'},{'name': 'Scene3d', 'selector': 'app-scene3d'},{'name': 'Scene3dCoreComponent', 'selector': 'app-scene3d-core'},{'name': 'Scene3dRefactored', 'selector': 'app-scene3d'},{'name': 'StructureControllerComponent', 'selector': 'app-structure-controller'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ColorSelectorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ColorableElement.html":{"url":"interfaces/ColorableElement.html","title":"interface - ColorableElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ColorableElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/scene3d/controls/color-selector.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour un élément colorable\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            currentColor\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentColor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentColor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"mur\" | \"ouverture\" | \"toit\" | \"sol\" | \"structure\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"mur\" | \"ouverture\" | \"toit\" | \"sol\" | \"structure\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n/**\n * Interface pour un élément colorable\n */\nexport interface ColorableElement {\n  id: string;\n  name: string;\n  currentColor: string;\n  type: 'mur' | 'ouverture' | 'toit' | 'sol' | 'structure';\n}\n\n/**\n * Composant pour sélectionner et modifier les couleurs des éléments\n */\n@Component({\n  selector: 'app-color-selector',\n  imports: [CommonModule, FormsModule],\n  templateUrl: './color-selector.component.html',\n  styleUrl: './color-selector.component.css',\n  standalone: true\n})\nexport class ColorSelectorComponent {\n  @Input() isVisible: boolean = false;\n  @Input() elements: ColorableElement[] = [];\n  @Input() selectedElementId: string = '';\n  @Input() newColor: string = '#007bff';\n\n  @Output() elementSelected = new EventEmitter();\n  @Output() colorChanged = new EventEmitter();\n  @Output() colorApplied = new EventEmitter();\n  @Output() colorReset = new EventEmitter();\n\n  // Couleurs prédéfinies\n  presetColors = [\n    { name: 'Rouge', value: '#dc3545' },\n    { name: 'Vert', value: '#28a745' },\n    { name: 'Bleu', value: '#007bff' },\n    { name: 'Jaune', value: '#ffc107' },\n    { name: 'Orange', value: '#fd7e14' },\n    { name: 'Violet', value: '#6f42c1' },\n    { name: 'Rose', value: '#e83e8c' },\n    { name: 'Cyan', value: '#17a2b8' },\n    { name: 'Gris', value: '#6c757d' },\n    { name: 'Blanc', value: '#ffffff' },\n    { name: 'Noir', value: '#000000' },\n    { name: 'Marron', value: '#8b4513' }\n  ];\n\n  get selectedElement(): ColorableElement | null {\n    return this.elements.find(e => e.id === this.selectedElementId) || null;\n  }\n\n  onElementChange(): void {\n    if (this.selectedElement) {\n      this.newColor = this.selectedElement.currentColor;\n    }\n    this.elementSelected.emit(this.selectedElementId);\n  }\n\n  onColorChange(): void {\n    if (this.selectedElementId) {\n      this.colorChanged.emit({ elementId: this.selectedElementId, color: this.newColor });\n    }\n  }\n\n  selectPresetColor(color: string): void {\n    this.newColor = color;\n    this.onColorChange();\n  }\n\n  applyColor(): void {\n    if (this.selectedElementId && this.newColor) {\n      this.colorApplied.emit({ elementId: this.selectedElementId, color: this.newColor });\n    }\n  }\n\n  resetColor(): void {\n    if (this.selectedElementId) {\n      this.colorReset.emit(this.selectedElementId);\n    }\n  }\n\n  selectElement(elementId: string): void {\n    this.selectedElementId = elementId;\n    this.onElementChange();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CommunicationEvent.html":{"url":"interfaces/CommunicationEvent.html","title":"interface - CommunicationEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CommunicationEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/communication/communication.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les événements de communication\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            priority\n                                        \n                                \n                                \n                                        \n                                            source\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            target\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        priority\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        priority:     \"low\" | \"medium\" | \"high\" | \"critical\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"low\" | \"medium\" | \"high\" | \"critical\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        target:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n/**\n * Interface pour les événements de communication\n */\nexport interface CommunicationEvent {\n  id: string;\n  type: string;\n  source: string;\n  target?: string;\n  data: any;\n  timestamp: Date;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n}\n\n/**\n * Interface pour les messages entre services\n */\nexport interface ServiceMessage {\n  from: string;\n  to: string;\n  action: string;\n  payload: any;\n  timestamp: Date;\n}\n\n/**\n * Interface pour les statistiques de communication\n */\nexport interface CommunicationStats {\n  totalEvents: number;\n  eventsByType: Record;\n  eventsBySource: Record;\n  eventsByPriority: Record;\n  averageResponseTime: number;\n  lastEvent: Date | null;\n}\n\n/**\n * Service de communication entre les services\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommunicationService {\n  \n  private eventSubject = new Subject();\n  private messageSubject = new Subject();\n  private statsSubject = new BehaviorSubject({\n    totalEvents: 0,\n    eventsByType: {},\n    eventsBySource: {},\n    eventsByPriority: {},\n    averageResponseTime: 0,\n    lastEvent: null\n  });\n\n  private events: CommunicationEvent[] = [];\n  private messages: ServiceMessage[] = [];\n  private responseTimes: number[] = [];\n\n  public events$ = this.eventSubject.asObservable();\n  public messages$ = this.messageSubject.asObservable();\n  public stats$ = this.statsSubject.asObservable();\n\n  constructor() {\n    console.log('CommunicationService initialisé');\n  }\n\n  /**\n   * Émettre un événement\n   */\n  emitEvent(event: Omit): void {\n    const fullEvent: CommunicationEvent = {\n      ...event,\n      id: `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date()\n    };\n\n    this.events.push(fullEvent);\n    this.eventSubject.next(fullEvent);\n    this.updateStats();\n    \n    console.log(`[CommunicationService] Événement émis:`, fullEvent);\n  }\n\n  /**\n   * Écouter les événements par type\n   */\n  listenToEventType(eventType: string): Observable {\n    return this.events$.pipe(\n      filter(event => event.type === eventType)\n    );\n  }\n\n  /**\n   * Écouter les événements par source\n   */\n  listenToSource(source: string): Observable {\n    return this.events$.pipe(\n      filter(event => event.source === source)\n    );\n  }\n\n  /**\n   * Écouter les événements par priorité\n   */\n  listenToPriority(priority: CommunicationEvent['priority']): Observable {\n    return this.events$.pipe(\n      filter(event => event.priority === priority)\n    );\n  }\n\n  /**\n   * Envoyer un message entre services\n   */\n  sendMessage(message: Omit): void {\n    const fullMessage: ServiceMessage = {\n      ...message,\n      timestamp: new Date()\n    };\n\n    this.messages.push(fullMessage);\n    this.messageSubject.next(fullMessage);\n    \n    console.log(`[CommunicationService] Message envoyé:`, fullMessage);\n  }\n\n  /**\n   * Écouter les messages destinés à un service\n   */\n  listenToMessages(serviceName: string): Observable {\n    return this.messages$.pipe(\n      filter(message => message.to === serviceName)\n    );\n  }\n\n  /**\n   * Écouter les messages d'un service\n   */\n  listenFromService(serviceName: string): Observable {\n    return this.messages$.pipe(\n      filter(message => message.from === serviceName)\n    );\n  }\n\n  /**\n   * Obtenir tous les événements\n   */\n  getEvents(): CommunicationEvent[] {\n    return [...this.events];\n  }\n\n  /**\n   * Obtenir tous les messages\n   */\n  getMessages(): ServiceMessage[] {\n    return [...this.messages];\n  }\n\n  /**\n   * Obtenir les événements récents (dernières 24h)\n   */\n  getRecentEvents(hours: number = 24): CommunicationEvent[] {\n    const cutoff = new Date(Date.now() - hours * 60 * 60 * 1000);\n    return this.events.filter(event => event.timestamp > cutoff);\n  }\n\n  /**\n   * Obtenir les événements par type\n   */\n  getEventsByType(type: string): CommunicationEvent[] {\n    return this.events.filter(event => event.type === type);\n  }\n\n  /**\n   * Obtenir les événements par source\n   */\n  getEventsBySource(source: string): CommunicationEvent[] {\n    return this.events.filter(event => event.source === source);\n  }\n\n  /**\n   * Obtenir les événements par priorité\n   */\n  getEventsByPriority(priority: CommunicationEvent['priority']): CommunicationEvent[] {\n    return this.events.filter(event => event.priority === priority);\n  }\n\n  /**\n   * Mettre à jour les statistiques\n   */\n  private updateStats(): void {\n    const stats: CommunicationStats = {\n      totalEvents: this.events.length,\n      eventsByType: this.getEventsByTypeStats(),\n      eventsBySource: this.getEventsBySourceStats(),\n      eventsByPriority: this.getEventsByPriorityStats(),\n      averageResponseTime: this.calculateAverageResponseTime(),\n      lastEvent: this.events.length > 0 ? this.events[this.events.length - 1].timestamp : null\n    };\n\n    this.statsSubject.next(stats);\n  }\n\n  /**\n   * Obtenir les statistiques par type\n   */\n  private getEventsByTypeStats(): Record {\n    const stats: Record = {};\n    this.events.forEach(event => {\n      stats[event.type] = (stats[event.type] || 0) + 1;\n    });\n    return stats;\n  }\n\n  /**\n   * Obtenir les statistiques par source\n   */\n  private getEventsBySourceStats(): Record {\n    const stats: Record = {};\n    this.events.forEach(event => {\n      stats[event.source] = (stats[event.source] || 0) + 1;\n    });\n    return stats;\n  }\n\n  /**\n   * Obtenir les statistiques par priorité\n   */\n  private getEventsByPriorityStats(): Record {\n    const stats: Record = {};\n    this.events.forEach(event => {\n      stats[event.priority] = (stats[event.priority] || 0) + 1;\n    });\n    return stats;\n  }\n\n  /**\n   * Calculer le temps de réponse moyen\n   */\n  private calculateAverageResponseTime(): number {\n    if (this.responseTimes.length === 0) return 0;\n    const sum = this.responseTimes.reduce((a, b) => a + b, 0);\n    return Math.round(sum / this.responseTimes.length * 100) / 100;\n  }\n\n  /**\n   * Enregistrer un temps de réponse\n   */\n  recordResponseTime(responseTime: number): void {\n    this.responseTimes.push(responseTime);\n    this.updateStats();\n  }\n\n  /**\n   * Obtenir les statistiques actuelles\n   */\n  getStats(): CommunicationStats {\n    return this.statsSubject.value;\n  }\n\n  /**\n   * Obtenir les statistiques en tant qu'Observable\n   */\n  getStatsObservable(): Observable {\n    return this.stats$;\n  }\n\n  /**\n   * Effacer l'historique des événements\n   */\n  clearEvents(): void {\n    this.events = [];\n    this.eventSubject.next({\n      id: 'clear',\n      type: 'system',\n      source: 'CommunicationService',\n      data: { action: 'clear' },\n      timestamp: new Date(),\n      priority: 'medium'\n    });\n    this.updateStats();\n  }\n\n  /**\n   * Effacer l'historique des messages\n   */\n  clearMessages(): void {\n    this.messages = [];\n    this.messageSubject.next({\n      from: 'CommunicationService',\n      to: 'all',\n      action: 'clear',\n      payload: { action: 'clear' },\n      timestamp: new Date()\n    });\n  }\n\n  /**\n   * Exporter les données de communication\n   */\n  exportCommunicationData(): string {\n    const data = {\n      events: this.events,\n      messages: this.messages,\n      stats: this.getStats(),\n      exportDate: new Date()\n    };\n    \n    return JSON.stringify(data, null, 2);\n  }\n\n  /**\n   * Importer les données de communication\n   */\n  importCommunicationData(dataJson: string): boolean {\n    try {\n      const data = JSON.parse(dataJson);\n      \n      if (data.events) {\n        this.events = data.events;\n      }\n      \n      if (data.messages) {\n        this.messages = data.messages;\n      }\n      \n      this.updateStats();\n      console.log('Données de communication importées avec succès');\n      return true;\n    } catch (error) {\n      console.error('Erreur lors de l\\'importation des données de communication:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Méthodes utilitaires pour les événements courants\n   */\n\n  /**\n   * Émettre un événement de modification de mur\n   */\n  emitWallModified(wallId: string, changes: any): void {\n    this.emitEvent({\n      type: 'wall_modified',\n      source: 'MurService',\n      data: { wallId, changes },\n      priority: 'medium'\n    });\n  }\n\n  /**\n   * Émettre un événement de modification d'ouverture\n   */\n  emitOpeningModified(openingId: string, changes: any): void {\n    this.emitEvent({\n      type: 'opening_modified',\n      source: 'OuvertureService',\n      data: { openingId, changes },\n      priority: 'medium'\n    });\n  }\n\n  /**\n   * Émettre un événement de changement de matériau\n   */\n  emitMaterialChanged(materialId: string, newMaterial: any): void {\n    this.emitEvent({\n      type: 'material_changed',\n      source: 'MateriauService',\n      data: { materialId, newMaterial },\n      priority: 'low'\n    });\n  }\n\n  /**\n   * Émettre un événement de mise à jour de la scène\n   */\n  emitSceneUpdated(sceneData: any): void {\n    this.emitEvent({\n      type: 'scene_updated',\n      source: 'SceneService',\n      data: sceneData,\n      priority: 'high'\n    });\n  }\n\n  /**\n   * Émettre un événement de validation\n   */\n  emitValidationResult(validationData: any): void {\n    this.emitEvent({\n      type: 'validation_result',\n      source: 'ValidationService',\n      data: validationData,\n      priority: 'high'\n    });\n  }\n\n  /**\n   * Émettre un événement d'erreur\n   */\n  emitError(error: any, source: string): void {\n    this.emitEvent({\n      type: 'error',\n      source: source,\n      data: { error: error.message || error, stack: error.stack },\n      priority: 'critical'\n    });\n  }\n\n  /**\n   * Émettre un événement de succès\n   */\n  emitSuccess(message: string, source: string, data?: any): void {\n    this.emitEvent({\n      type: 'success',\n      source: source,\n      data: { message, ...data },\n      priority: 'low'\n    });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CommunicationStats.html":{"url":"interfaces/CommunicationStats.html","title":"interface - CommunicationStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CommunicationStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/communication/communication.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les statistiques de communication\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            averageResponseTime\n                                        \n                                \n                                \n                                        \n                                            eventsByPriority\n                                        \n                                \n                                \n                                        \n                                            eventsBySource\n                                        \n                                \n                                \n                                        \n                                            eventsByType\n                                        \n                                \n                                \n                                        \n                                            lastEvent\n                                        \n                                \n                                \n                                        \n                                            totalEvents\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        averageResponseTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        averageResponseTime:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventsByPriority\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventsByPriority:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventsBySource\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventsBySource:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventsByType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventsByType:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastEvent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastEvent:     Date | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalEvents\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalEvents:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n/**\n * Interface pour les événements de communication\n */\nexport interface CommunicationEvent {\n  id: string;\n  type: string;\n  source: string;\n  target?: string;\n  data: any;\n  timestamp: Date;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n}\n\n/**\n * Interface pour les messages entre services\n */\nexport interface ServiceMessage {\n  from: string;\n  to: string;\n  action: string;\n  payload: any;\n  timestamp: Date;\n}\n\n/**\n * Interface pour les statistiques de communication\n */\nexport interface CommunicationStats {\n  totalEvents: number;\n  eventsByType: Record;\n  eventsBySource: Record;\n  eventsByPriority: Record;\n  averageResponseTime: number;\n  lastEvent: Date | null;\n}\n\n/**\n * Service de communication entre les services\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommunicationService {\n  \n  private eventSubject = new Subject();\n  private messageSubject = new Subject();\n  private statsSubject = new BehaviorSubject({\n    totalEvents: 0,\n    eventsByType: {},\n    eventsBySource: {},\n    eventsByPriority: {},\n    averageResponseTime: 0,\n    lastEvent: null\n  });\n\n  private events: CommunicationEvent[] = [];\n  private messages: ServiceMessage[] = [];\n  private responseTimes: number[] = [];\n\n  public events$ = this.eventSubject.asObservable();\n  public messages$ = this.messageSubject.asObservable();\n  public stats$ = this.statsSubject.asObservable();\n\n  constructor() {\n    console.log('CommunicationService initialisé');\n  }\n\n  /**\n   * Émettre un événement\n   */\n  emitEvent(event: Omit): void {\n    const fullEvent: CommunicationEvent = {\n      ...event,\n      id: `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date()\n    };\n\n    this.events.push(fullEvent);\n    this.eventSubject.next(fullEvent);\n    this.updateStats();\n    \n    console.log(`[CommunicationService] Événement émis:`, fullEvent);\n  }\n\n  /**\n   * Écouter les événements par type\n   */\n  listenToEventType(eventType: string): Observable {\n    return this.events$.pipe(\n      filter(event => event.type === eventType)\n    );\n  }\n\n  /**\n   * Écouter les événements par source\n   */\n  listenToSource(source: string): Observable {\n    return this.events$.pipe(\n      filter(event => event.source === source)\n    );\n  }\n\n  /**\n   * Écouter les événements par priorité\n   */\n  listenToPriority(priority: CommunicationEvent['priority']): Observable {\n    return this.events$.pipe(\n      filter(event => event.priority === priority)\n    );\n  }\n\n  /**\n   * Envoyer un message entre services\n   */\n  sendMessage(message: Omit): void {\n    const fullMessage: ServiceMessage = {\n      ...message,\n      timestamp: new Date()\n    };\n\n    this.messages.push(fullMessage);\n    this.messageSubject.next(fullMessage);\n    \n    console.log(`[CommunicationService] Message envoyé:`, fullMessage);\n  }\n\n  /**\n   * Écouter les messages destinés à un service\n   */\n  listenToMessages(serviceName: string): Observable {\n    return this.messages$.pipe(\n      filter(message => message.to === serviceName)\n    );\n  }\n\n  /**\n   * Écouter les messages d'un service\n   */\n  listenFromService(serviceName: string): Observable {\n    return this.messages$.pipe(\n      filter(message => message.from === serviceName)\n    );\n  }\n\n  /**\n   * Obtenir tous les événements\n   */\n  getEvents(): CommunicationEvent[] {\n    return [...this.events];\n  }\n\n  /**\n   * Obtenir tous les messages\n   */\n  getMessages(): ServiceMessage[] {\n    return [...this.messages];\n  }\n\n  /**\n   * Obtenir les événements récents (dernières 24h)\n   */\n  getRecentEvents(hours: number = 24): CommunicationEvent[] {\n    const cutoff = new Date(Date.now() - hours * 60 * 60 * 1000);\n    return this.events.filter(event => event.timestamp > cutoff);\n  }\n\n  /**\n   * Obtenir les événements par type\n   */\n  getEventsByType(type: string): CommunicationEvent[] {\n    return this.events.filter(event => event.type === type);\n  }\n\n  /**\n   * Obtenir les événements par source\n   */\n  getEventsBySource(source: string): CommunicationEvent[] {\n    return this.events.filter(event => event.source === source);\n  }\n\n  /**\n   * Obtenir les événements par priorité\n   */\n  getEventsByPriority(priority: CommunicationEvent['priority']): CommunicationEvent[] {\n    return this.events.filter(event => event.priority === priority);\n  }\n\n  /**\n   * Mettre à jour les statistiques\n   */\n  private updateStats(): void {\n    const stats: CommunicationStats = {\n      totalEvents: this.events.length,\n      eventsByType: this.getEventsByTypeStats(),\n      eventsBySource: this.getEventsBySourceStats(),\n      eventsByPriority: this.getEventsByPriorityStats(),\n      averageResponseTime: this.calculateAverageResponseTime(),\n      lastEvent: this.events.length > 0 ? this.events[this.events.length - 1].timestamp : null\n    };\n\n    this.statsSubject.next(stats);\n  }\n\n  /**\n   * Obtenir les statistiques par type\n   */\n  private getEventsByTypeStats(): Record {\n    const stats: Record = {};\n    this.events.forEach(event => {\n      stats[event.type] = (stats[event.type] || 0) + 1;\n    });\n    return stats;\n  }\n\n  /**\n   * Obtenir les statistiques par source\n   */\n  private getEventsBySourceStats(): Record {\n    const stats: Record = {};\n    this.events.forEach(event => {\n      stats[event.source] = (stats[event.source] || 0) + 1;\n    });\n    return stats;\n  }\n\n  /**\n   * Obtenir les statistiques par priorité\n   */\n  private getEventsByPriorityStats(): Record {\n    const stats: Record = {};\n    this.events.forEach(event => {\n      stats[event.priority] = (stats[event.priority] || 0) + 1;\n    });\n    return stats;\n  }\n\n  /**\n   * Calculer le temps de réponse moyen\n   */\n  private calculateAverageResponseTime(): number {\n    if (this.responseTimes.length === 0) return 0;\n    const sum = this.responseTimes.reduce((a, b) => a + b, 0);\n    return Math.round(sum / this.responseTimes.length * 100) / 100;\n  }\n\n  /**\n   * Enregistrer un temps de réponse\n   */\n  recordResponseTime(responseTime: number): void {\n    this.responseTimes.push(responseTime);\n    this.updateStats();\n  }\n\n  /**\n   * Obtenir les statistiques actuelles\n   */\n  getStats(): CommunicationStats {\n    return this.statsSubject.value;\n  }\n\n  /**\n   * Obtenir les statistiques en tant qu'Observable\n   */\n  getStatsObservable(): Observable {\n    return this.stats$;\n  }\n\n  /**\n   * Effacer l'historique des événements\n   */\n  clearEvents(): void {\n    this.events = [];\n    this.eventSubject.next({\n      id: 'clear',\n      type: 'system',\n      source: 'CommunicationService',\n      data: { action: 'clear' },\n      timestamp: new Date(),\n      priority: 'medium'\n    });\n    this.updateStats();\n  }\n\n  /**\n   * Effacer l'historique des messages\n   */\n  clearMessages(): void {\n    this.messages = [];\n    this.messageSubject.next({\n      from: 'CommunicationService',\n      to: 'all',\n      action: 'clear',\n      payload: { action: 'clear' },\n      timestamp: new Date()\n    });\n  }\n\n  /**\n   * Exporter les données de communication\n   */\n  exportCommunicationData(): string {\n    const data = {\n      events: this.events,\n      messages: this.messages,\n      stats: this.getStats(),\n      exportDate: new Date()\n    };\n    \n    return JSON.stringify(data, null, 2);\n  }\n\n  /**\n   * Importer les données de communication\n   */\n  importCommunicationData(dataJson: string): boolean {\n    try {\n      const data = JSON.parse(dataJson);\n      \n      if (data.events) {\n        this.events = data.events;\n      }\n      \n      if (data.messages) {\n        this.messages = data.messages;\n      }\n      \n      this.updateStats();\n      console.log('Données de communication importées avec succès');\n      return true;\n    } catch (error) {\n      console.error('Erreur lors de l\\'importation des données de communication:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Méthodes utilitaires pour les événements courants\n   */\n\n  /**\n   * Émettre un événement de modification de mur\n   */\n  emitWallModified(wallId: string, changes: any): void {\n    this.emitEvent({\n      type: 'wall_modified',\n      source: 'MurService',\n      data: { wallId, changes },\n      priority: 'medium'\n    });\n  }\n\n  /**\n   * Émettre un événement de modification d'ouverture\n   */\n  emitOpeningModified(openingId: string, changes: any): void {\n    this.emitEvent({\n      type: 'opening_modified',\n      source: 'OuvertureService',\n      data: { openingId, changes },\n      priority: 'medium'\n    });\n  }\n\n  /**\n   * Émettre un événement de changement de matériau\n   */\n  emitMaterialChanged(materialId: string, newMaterial: any): void {\n    this.emitEvent({\n      type: 'material_changed',\n      source: 'MateriauService',\n      data: { materialId, newMaterial },\n      priority: 'low'\n    });\n  }\n\n  /**\n   * Émettre un événement de mise à jour de la scène\n   */\n  emitSceneUpdated(sceneData: any): void {\n    this.emitEvent({\n      type: 'scene_updated',\n      source: 'SceneService',\n      data: sceneData,\n      priority: 'high'\n    });\n  }\n\n  /**\n   * Émettre un événement de validation\n   */\n  emitValidationResult(validationData: any): void {\n    this.emitEvent({\n      type: 'validation_result',\n      source: 'ValidationService',\n      data: validationData,\n      priority: 'high'\n    });\n  }\n\n  /**\n   * Émettre un événement d'erreur\n   */\n  emitError(error: any, source: string): void {\n    this.emitEvent({\n      type: 'error',\n      source: source,\n      data: { error: error.message || error, stack: error.stack },\n      priority: 'critical'\n    });\n  }\n\n  /**\n   * Émettre un événement de succès\n   */\n  emitSuccess(message: string, source: string, data?: any): void {\n    this.emitEvent({\n      type: 'success',\n      source: source,\n      data: { message, ...data },\n      priority: 'low'\n    });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigDirectService.html":{"url":"injectables/ConfigDirectService.html","title":"injectable - ConfigDirectService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  ConfigDirectService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/config/config-direct.ts\n        \n\n\n            \n                Description\n            \n            \n                Service de configuration directe\nLit directement building-config.ts et applique les modifications\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                configuration$\n                            \n                            \n                                    Private\n                                configurationSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                chargerConfiguration\n                            \n                            \n                                    Public\n                                getConfiguration\n                            \n                            \n                                    Public\n                                getCouleurMurs\n                            \n                            \n                                    Public\n                                getDimensionsBatiment\n                            \n                            \n                                    Public\n                                getOuvertures\n                            \n                            \n                                    Public\n                                hasConfigurationChanged\n                            \n                            \n                                    Public\n                                mettreAJourConfiguration\n                            \n                            \n                                    Public\n                                rechargerConfiguration\n                            \n                            \n                                    Public\n                                rechargerSiNecessaire\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/config/config-direct.ts:97\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        chargerConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    chargerConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/config/config-direct.ts:106\n                        \n                    \n\n\n            \n                \n                        Charger la configuration directement depuis building-config.ts\n\n\n                        \n                            Returns :         ConfigurationComplete\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/config/config-direct.ts:129\n                        \n                    \n\n\n            \n                \n                        Obtenir la configuration actuelle\n\n\n                        \n                            Returns :         ConfigurationComplete\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCouleurMurs\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCouleurMurs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/config/config-direct.ts:176\n                        \n                    \n\n\n            \n                \n                        Obtenir la couleur des murs\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getDimensionsBatiment\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDimensionsBatiment()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/config/config-direct.ts:164\n                        \n                    \n\n\n            \n                \n                        Obtenir les dimensions du bâtiment\n\n\n                        \n                            Returns :     literal type\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getOuvertures\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOuvertures()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/config/config-direct.ts:184\n                        \n                    \n\n\n            \n                \n                        Obtenir les informations des ouvertures\n\n\n                        \n                            Returns :     Array\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasConfigurationChanged\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasConfigurationChanged()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/config/config-direct.ts:224\n                        \n                    \n\n\n            \n                \n                        Vérifier si la configuration a changé\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        mettreAJourConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    mettreAJourConfiguration(config: ConfigurationComplete)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/config/config-direct.ts:156\n                        \n                    \n\n\n            \n                \n                        Mettre à jour la configuration (pour compatibilité)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            ConfigurationComplete\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        rechargerConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    rechargerConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/config/config-direct.ts:136\n                        \n                    \n\n\n            \n                \n                        Recharger la configuration depuis building-config.ts\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        rechargerSiNecessaire\n                        \n                    \n                \n            \n            \n                \n                        \n                    rechargerSiNecessaire()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/config/config-direct.ts:245\n                        \n                    \n\n\n            \n                \n                        Forcer le rechargement si des changements sont détectés\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        configuration$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.configurationSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/config/config-direct.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        configurationSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(this.chargerConfiguration())\n                    \n                \n                    \n                        \n                                Defined in src/app/config/config-direct.ts:96\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { BUILDING_CONFIG, WallConfig, MainWallConfig, OpeningConfig, Position3D, Dimensions3D } from './building-config';\n\n/**\n * Interface pour la configuration complète du bâtiment\n */\nexport interface ConfigurationComplete {\n  scene: {\n    background: number;\n    camera: {\n      fov: number;\n      near: number;\n      far: number;\n    };\n  };\n  lighting: {\n    ambient: {\n      color: number;\n      intensity: number;\n    };\n    directional: {\n      color: number;\n      intensity: number;\n      position: Position3D;\n      shadow: {\n        mapSize: number;\n      };\n    };\n  };\n  camera: {\n    initial: {\n      position: Position3D;\n      rotationX: number;\n      rotationY: number;\n      zoom: number;\n    };\n    target: Position3D;\n    controls: {\n      minZoom: number;\n      maxZoom: number;\n      rotationSpeed: number;\n      zoomSpeed: number;\n    };\n  };\n  ground: WallConfig;\n  roof: WallConfig;\n  mainWall: MainWallConfig;\n  walls: {\n    back: WallConfig & { openings?: { window1: OpeningConfig } };\n    left: WallConfig;\n    right: WallConfig & { openings?: { door: OpeningConfig } };\n  };\n  axes: {\n    size: number;\n    labels: Array;\n    labelSize: Dimensions3D;\n  };\n}\n\n/**\n * Service de configuration directe\n * Lit directement building-config.ts et applique les modifications\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigDirectService {\n  \n  private configurationSubject = new BehaviorSubject(this.chargerConfiguration());\n  public configuration$ = this.configurationSubject.asObservable();\n\n  constructor() {\n    console.log('🔧 ConfigDirectService initialisé - Lecture directe de building-config.ts');\n  }\n\n  /**\n   * Charger la configuration directement depuis building-config.ts\n   */\n  public chargerConfiguration(): ConfigurationComplete {\n    try {\n      // Import dynamique pour forcer le rechargement\n      const config = { ...BUILDING_CONFIG } as ConfigurationComplete;\n      \n      console.log('📥 Configuration chargée directement depuis building-config.ts');\n      console.log('🏠 Bâtiment:', {\n        longueur: config.walls.back.dimensions.width,\n        largeur: config.walls.left.dimensions.depth,\n        hauteur: config.walls.back.dimensions.height,\n        couleur: `#${config.walls.back.color.toString(16)}`\n      });\n      \n      return config;\n    } catch (error) {\n      console.error('❌ Erreur lors du chargement de la configuration:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obtenir la configuration actuelle\n   */\n  public getConfiguration(): ConfigurationComplete {\n    return this.configurationSubject.value;\n  }\n\n  /**\n   * Recharger la configuration depuis building-config.ts\n   */\n  public rechargerConfiguration(): void {\n    try {\n      const nouvelleConfig = this.chargerConfiguration();\n      this.configurationSubject.next(nouvelleConfig);\n      \n      console.log('🔄 Configuration rechargée depuis building-config.ts');\n      console.log('📊 Nouvelles dimensions:', {\n        longueur: nouvelleConfig.walls.back.dimensions.width,\n        largeur: nouvelleConfig.walls.left.dimensions.depth,\n        hauteur: nouvelleConfig.walls.back.dimensions.height\n      });\n      \n    } catch (error) {\n      console.error('❌ Erreur lors du rechargement de la configuration:', error);\n    }\n  }\n\n  /**\n   * Mettre à jour la configuration (pour compatibilité)\n   */\n  public mettreAJourConfiguration(config: ConfigurationComplete): void {\n    this.configurationSubject.next(config);\n    console.log('📝 Configuration mise à jour via ConfigDirectService');\n  }\n\n  /**\n   * Obtenir les dimensions du bâtiment\n   */\n  public getDimensionsBatiment(): { longueur: number; largeur: number; hauteur: number } {\n    const config = this.getConfiguration();\n    return {\n      longueur: config.walls.back.dimensions.width,\n      largeur: config.walls.left.dimensions.depth,\n      hauteur: config.walls.back.dimensions.height\n    };\n  }\n\n  /**\n   * Obtenir la couleur des murs\n   */\n  public getCouleurMurs(): string {\n    const config = this.getConfiguration();\n    return `#${config.walls.back.color.toString(16).padStart(6, '0')}`;\n  }\n\n  /**\n   * Obtenir les informations des ouvertures\n   */\n  public getOuvertures(): Array {\n    const config = this.getConfiguration();\n    const ouvertures: Array = [];\n\n    // Fenêtres du mur principal\n    if (config.mainWall.openings.window2) {\n      ouvertures.push({\n        type: 'fenetre',\n        position: config.mainWall.openings.window2.position,\n        dimensions: config.mainWall.openings.window2.dimensions,\n        couleur: `#${config.mainWall.openings.window2.color.toString(16).padStart(6, '0')}`\n      });\n    }\n\n    // Fenêtres du mur arrière\n    if (config.walls.back.openings?.window1) {\n      ouvertures.push({\n        type: 'fenetre',\n        position: config.walls.back.openings.window1.position,\n        dimensions: config.walls.back.openings.window1.dimensions,\n        couleur: `#${config.walls.back.openings.window1.color.toString(16).padStart(6, '0')}`\n      });\n    }\n\n    // Porte du mur droit\n    if (config.walls.right.openings?.door) {\n      ouvertures.push({\n        type: 'porte',\n        position: config.walls.right.openings.door.position,\n        dimensions: config.walls.right.openings.door.dimensions,\n        couleur: `#${config.walls.right.openings.door.color.toString(16).padStart(6, '0')}`\n      });\n    }\n\n    return ouvertures;\n  }\n\n  /**\n   * Vérifier si la configuration a changé\n   */\n  public hasConfigurationChanged(): boolean {\n    try {\n      const configActuelle = this.getConfiguration();\n      const nouvelleConfig = this.chargerConfiguration();\n      \n      // Comparaison simple des dimensions principales\n      return (\n        configActuelle.walls.back.dimensions.width !== nouvelleConfig.walls.back.dimensions.width ||\n        configActuelle.walls.left.dimensions.depth !== nouvelleConfig.walls.left.dimensions.depth ||\n        configActuelle.walls.back.dimensions.height !== nouvelleConfig.walls.back.dimensions.height ||\n        configActuelle.walls.back.color !== nouvelleConfig.walls.back.color\n      );\n    } catch (error) {\n      console.error('❌ Erreur lors de la vérification des changements:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Forcer le rechargement si des changements sont détectés\n   */\n  public rechargerSiNecessaire(): boolean {\n    if (this.hasConfigurationChanged()) {\n      console.log('🔄 Changements détectés dans building-config.ts - Rechargement automatique');\n      this.rechargerConfiguration();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConfigurationBatiment.html":{"url":"interfaces/ConfigurationBatiment.html","title":"interface - ConfigurationBatiment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConfigurationBatiment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/configuration/configuration.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour la configuration d'un bâtiment\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            dimensions\n                                        \n                                \n                                \n                                        \n                                            murs\n                                        \n                                \n                                \n                                        \n                                            nom\n                                        \n                                \n                                \n                                        \n                                            sol\n                                        \n                                \n                                \n                                        \n                                            toit\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dimensions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dimensions:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        murs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        murs:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nom:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sol\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sol:         ConfigurationSol\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ConfigurationSol\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        toit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        toit:         ConfigurationToit\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ConfigurationToit\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigDirectService, ConfigurationComplete } from '../../config/config-direct';\n\n/**\n * Interface pour la configuration d'un bâtiment\n */\nexport interface ConfigurationBatiment {\n  // Configuration générale\n  nom: string;\n  description: string;\n  dimensions: {\n    longueur: number;  // en mètres\n    largeur: number;   // en mètres\n    hauteur: number;   // en mètres\n  };\n  \n  // Configuration des murs\n  murs: {\n    principal: ConfigurationMur;\n    arriere: ConfigurationMur;\n    gauche: ConfigurationMur;\n    droit: ConfigurationMur;\n  };\n  \n  // Configuration du toit\n  toit: ConfigurationToit;\n  \n  // Configuration du sol\n  sol: ConfigurationSol;\n}\n\n/**\n * Interface pour la configuration d'un mur\n */\nexport interface ConfigurationMur {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n  epaisseur: number;\n  ouvertures: ConfigurationOuverture[];\n}\n\n/**\n * Interface pour la configuration d'une ouverture\n */\nexport interface ConfigurationOuverture {\n  id: string;\n  type: 'porte' | 'fenetre';\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n  nom?: string;\n}\n\n/**\n * Interface pour la configuration du toit\n */\nexport interface ConfigurationToit {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n}\n\n/**\n * Interface pour la configuration du sol\n */\nexport interface ConfigurationSol {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n}\n\n/**\n * Service de gestion de la configuration du bâtiment\n * Remplace le fichier building-config.ts statique\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigurationService {\n  \n  // Configuration par défaut\n  private configurationParDefaut: ConfigurationBatiment = {\n    nom: 'Bâtiment Principal',\n    description: 'Bâtiment architectural avec murs, ouvertures et toit',\n    dimensions: {\n      longueur: 8,\n      largeur: 5,\n      hauteur: 2.5\n    },\n    murs: {\n      principal: {\n        position: { x: 0, y: 0, z: 2.3 },\n        dimensions: { width: 8, height: 2.5, depth: 0.2 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: [\n          {\n            id: 'fenetre1',\n            type: 'fenetre',\n            position: { x: -1.5, y: 1.5, z: 2.3 },\n            dimensions: { width: 1.5, height: 1.2, depth: 0.05 },\n            couleur: 0x0000ff,\n            nom: 'Fenêtre Bleue'\n          },\n          {\n            id: 'fenetre2',\n            type: 'fenetre',\n            position: { x: 0, y: 1.5, z: 2.3 },\n            dimensions: { width: 2, height: 1.2, depth: 0.05 },\n            couleur: 0xff0000,\n            nom: 'Fenêtre Rouge'\n          }\n        ]\n      },\n      arriere: {\n        position: { x: 0, y: 0, z: -2.5 },\n        dimensions: { width: 8, height: 2.5, depth: 0.2 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: [\n          {\n            id: 'fenetre3',\n            type: 'fenetre',\n            position: { x: 0, y: 1.5, z: -2.3 },\n            dimensions: { width: 1.5, height: 1.2, depth: 0.05 },\n            couleur: 0xff0000,\n            nom: 'Fenêtre Arrière'\n          }\n        ]\n      },\n      gauche: {\n        position: { x: -3.9, y: 1.25, z: 0 },\n        dimensions: { width: 0.2, height: 2.5, depth: 5 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: []\n      },\n      droit: {\n        position: { x: 3.8, y: 0, z: 0 },\n        dimensions: { width: 0.2, height: 2.5, depth: 5 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: [\n          {\n            id: 'porte1',\n            type: 'porte',\n            position: { x: 3.9, y: 1.05, z: 0 },\n            dimensions: { width: 1, height: 2.1, depth: 0.05 },\n            couleur: 0x00ff00,\n            nom: 'Porte d\\'Entrée'\n          }\n        ]\n      }\n    },\n    toit: {\n      position: { x: 0, y: 2.6, z: 0 },\n      dimensions: { width: 8.4, height: 0.2, depth: 5 },\n      couleur: 0x4169e1\n    },\n    sol: {\n      position: { x: 0, y: -0.1, z: 0 },\n      dimensions: { width: 8.2, height: 0.2, depth: 5.2 },\n      couleur: 0x8b4513\n    }\n  };\n\n  // Subject pour la configuration actuelle\n  private configurationActuelle = new BehaviorSubject(this.configurationParDefaut);\n  \n  // Observable public\n  public configuration$ = this.configurationActuelle.asObservable();\n\n  constructor(private configDirectService: ConfigDirectService) {\n    console.log('ConfigurationService initialisé avec ConfigDirectService');\n    \n    // Écouter les changements du ConfigDirectService\n    this.configDirectService.configuration$.subscribe(config => {\n      this.synchroniserAvecConfigDirect(config);\n    });\n  }\n\n  /**\n   * Synchroniser avec la configuration directe\n   */\n  private synchroniserAvecConfigDirect(config: ConfigurationComplete): void {\n    try {\n      const nouvelleConfig: ConfigurationBatiment = {\n        nom: 'Bâtiment Direct',\n        description: 'Configuration chargée directement depuis building-config.ts',\n        dimensions: {\n          longueur: config.walls.back.dimensions.width,\n          largeur: config.walls.left.dimensions.depth,\n          hauteur: config.walls.back.dimensions.height\n        },\n        murs: {\n          principal: {\n            position: config.mainWall.position,\n            dimensions: {\n              width: config.mainWall.contour[1].x - config.mainWall.contour[0].x, // Calcul de la largeur\n              height: config.mainWall.contour[2].y - config.mainWall.contour[0].y, // Calcul de la hauteur\n              depth: config.mainWall.thickness\n            },\n            couleur: config.mainWall.color,\n            epaisseur: config.mainWall.thickness,\n            ouvertures: []\n          },\n          arriere: {\n            position: config.walls.back.position,\n            dimensions: config.walls.back.dimensions,\n            couleur: config.walls.back.color,\n            epaisseur: config.walls.back.dimensions.depth,\n            ouvertures: config.walls.back.openings ? [\n              {\n                id: 'fenetre-arriere',\n                position: config.walls.back.openings.window1.position,\n                dimensions: config.walls.back.openings.window1.dimensions,\n                couleur: config.walls.back.openings.window1.color,\n                type: config.walls.back.openings.window1.type === 'window' ? 'fenetre' : 'porte',\n                nom: 'Fenêtre Arrière'\n              }\n            ] : []\n          },\n          gauche: {\n            position: config.walls.left.position,\n            dimensions: config.walls.left.dimensions,\n            couleur: config.walls.left.color,\n            epaisseur: config.walls.left.dimensions.width,\n            ouvertures: []\n          },\n          droit: {\n            position: config.walls.right.position,\n            dimensions: config.walls.right.dimensions,\n            couleur: config.walls.right.color,\n            epaisseur: config.walls.right.dimensions.width,\n            ouvertures: config.walls.right.openings ? [\n              {\n                id: 'porte-principale',\n                position: config.walls.right.openings.door.position,\n                dimensions: config.walls.right.openings.door.dimensions,\n                couleur: config.walls.right.openings.door.color,\n                type: config.walls.right.openings.door.type === 'door' ? 'porte' : 'fenetre',\n                nom: 'Porte Principale'\n              }\n            ] : []\n          }\n        },\n        toit: {\n          position: config.roof.position,\n          dimensions: config.roof.dimensions,\n          couleur: config.roof.color\n        },\n        sol: {\n          position: config.ground.position,\n          dimensions: config.ground.dimensions,\n          couleur: config.ground.color\n        }\n      };\n\n      this.configurationActuelle.next(nouvelleConfig);\n      console.log('🔄 Configuration synchronisée avec ConfigDirectService');\n      \n    } catch (error) {\n      console.error('❌ Erreur lors de la synchronisation:', error);\n    }\n  }\n\n  /**\n   * Recharger la configuration depuis building-config.ts\n   */\n  public rechargerConfiguration(): void {\n    this.configDirectService.rechargerConfiguration();\n    console.log('🔄 Configuration rechargée depuis building-config.ts');\n  }\n\n  /**\n   * Obtenir la configuration actuelle\n   */\n  getConfiguration(): ConfigurationBatiment {\n    return this.configurationActuelle.value;\n  }\n\n  /**\n   * Obtenir la configuration en tant qu'Observable\n   */\n  getConfigurationObservable(): Observable {\n    return this.configuration$;\n  }\n\n  /**\n   * Mettre à jour la configuration complète\n   */\n  mettreAJourConfiguration(nouvelleConfiguration: ConfigurationBatiment): void {\n    try {\n      // Validation de la configuration\n      if (!nouvelleConfiguration || !nouvelleConfiguration.nom || !nouvelleConfiguration.dimensions) {\n        throw new Error('Configuration invalide: propriétés manquantes');\n      }\n      \n      if (nouvelleConfiguration.dimensions.longueur  ouverture.id !== idOuverture);\n    this.mettreAJourConfiguration(configActuelle);\n  }\n\n  /**\n   * Réinitialiser à la configuration par défaut\n   */\n  reinitialiserConfiguration(): void {\n    this.configurationActuelle.next(this.configurationParDefaut);\n    console.log('Configuration réinitialisée');\n  }\n\n  /**\n   * Obtenir les dimensions du bâtiment\n   */\n  getDimensionsBatiment(): { longueur: number; largeur: number; hauteur: number } {\n    return this.getConfiguration().dimensions;\n  }\n\n  /**\n   * Obtenir tous les murs\n   */\n  getMurs(): ConfigurationBatiment['murs'] {\n    return this.getConfiguration().murs;\n  }\n\n  /**\n   * Obtenir un mur spécifique\n   */\n  getMur(nomMur: keyof ConfigurationBatiment['murs']): ConfigurationMur {\n    return this.getConfiguration().murs[nomMur];\n  }\n\n  /**\n   * Obtenir toutes les ouvertures de tous les murs\n   */\n  getAllOuvertures(): ConfigurationOuverture[] {\n    const config = this.getConfiguration();\n    const toutesOuvertures: ConfigurationOuverture[] = [];\n    \n    Object.values(config.murs).forEach(mur => {\n      toutesOuvertures.push(...mur.ouvertures);\n    });\n    \n    return toutesOuvertures;\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConfigurationComplete.html":{"url":"interfaces/ConfigurationComplete.html","title":"interface - ConfigurationComplete","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConfigurationComplete\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/config/config-direct.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour la configuration complète du bâtiment\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            axes\n                                        \n                                \n                                \n                                        \n                                            camera\n                                        \n                                \n                                \n                                        \n                                            ground\n                                        \n                                \n                                \n                                        \n                                            lighting\n                                        \n                                \n                                \n                                        \n                                            mainWall\n                                        \n                                \n                                \n                                        \n                                            roof\n                                        \n                                \n                                \n                                        \n                                            scene\n                                        \n                                \n                                \n                                        \n                                            walls\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        axes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        axes:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        camera\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        camera:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ground\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ground:         WallConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WallConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lighting\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lighting:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mainWall\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mainWall:         MainWallConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MainWallConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roof\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roof:         WallConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WallConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scene\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scene:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        walls\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        walls:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { BUILDING_CONFIG, WallConfig, MainWallConfig, OpeningConfig, Position3D, Dimensions3D } from './building-config';\n\n/**\n * Interface pour la configuration complète du bâtiment\n */\nexport interface ConfigurationComplete {\n  scene: {\n    background: number;\n    camera: {\n      fov: number;\n      near: number;\n      far: number;\n    };\n  };\n  lighting: {\n    ambient: {\n      color: number;\n      intensity: number;\n    };\n    directional: {\n      color: number;\n      intensity: number;\n      position: Position3D;\n      shadow: {\n        mapSize: number;\n      };\n    };\n  };\n  camera: {\n    initial: {\n      position: Position3D;\n      rotationX: number;\n      rotationY: number;\n      zoom: number;\n    };\n    target: Position3D;\n    controls: {\n      minZoom: number;\n      maxZoom: number;\n      rotationSpeed: number;\n      zoomSpeed: number;\n    };\n  };\n  ground: WallConfig;\n  roof: WallConfig;\n  mainWall: MainWallConfig;\n  walls: {\n    back: WallConfig & { openings?: { window1: OpeningConfig } };\n    left: WallConfig;\n    right: WallConfig & { openings?: { door: OpeningConfig } };\n  };\n  axes: {\n    size: number;\n    labels: Array;\n    labelSize: Dimensions3D;\n  };\n}\n\n/**\n * Service de configuration directe\n * Lit directement building-config.ts et applique les modifications\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigDirectService {\n  \n  private configurationSubject = new BehaviorSubject(this.chargerConfiguration());\n  public configuration$ = this.configurationSubject.asObservable();\n\n  constructor() {\n    console.log('🔧 ConfigDirectService initialisé - Lecture directe de building-config.ts');\n  }\n\n  /**\n   * Charger la configuration directement depuis building-config.ts\n   */\n  public chargerConfiguration(): ConfigurationComplete {\n    try {\n      // Import dynamique pour forcer le rechargement\n      const config = { ...BUILDING_CONFIG } as ConfigurationComplete;\n      \n      console.log('📥 Configuration chargée directement depuis building-config.ts');\n      console.log('🏠 Bâtiment:', {\n        longueur: config.walls.back.dimensions.width,\n        largeur: config.walls.left.dimensions.depth,\n        hauteur: config.walls.back.dimensions.height,\n        couleur: `#${config.walls.back.color.toString(16)}`\n      });\n      \n      return config;\n    } catch (error) {\n      console.error('❌ Erreur lors du chargement de la configuration:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obtenir la configuration actuelle\n   */\n  public getConfiguration(): ConfigurationComplete {\n    return this.configurationSubject.value;\n  }\n\n  /**\n   * Recharger la configuration depuis building-config.ts\n   */\n  public rechargerConfiguration(): void {\n    try {\n      const nouvelleConfig = this.chargerConfiguration();\n      this.configurationSubject.next(nouvelleConfig);\n      \n      console.log('🔄 Configuration rechargée depuis building-config.ts');\n      console.log('📊 Nouvelles dimensions:', {\n        longueur: nouvelleConfig.walls.back.dimensions.width,\n        largeur: nouvelleConfig.walls.left.dimensions.depth,\n        hauteur: nouvelleConfig.walls.back.dimensions.height\n      });\n      \n    } catch (error) {\n      console.error('❌ Erreur lors du rechargement de la configuration:', error);\n    }\n  }\n\n  /**\n   * Mettre à jour la configuration (pour compatibilité)\n   */\n  public mettreAJourConfiguration(config: ConfigurationComplete): void {\n    this.configurationSubject.next(config);\n    console.log('📝 Configuration mise à jour via ConfigDirectService');\n  }\n\n  /**\n   * Obtenir les dimensions du bâtiment\n   */\n  public getDimensionsBatiment(): { longueur: number; largeur: number; hauteur: number } {\n    const config = this.getConfiguration();\n    return {\n      longueur: config.walls.back.dimensions.width,\n      largeur: config.walls.left.dimensions.depth,\n      hauteur: config.walls.back.dimensions.height\n    };\n  }\n\n  /**\n   * Obtenir la couleur des murs\n   */\n  public getCouleurMurs(): string {\n    const config = this.getConfiguration();\n    return `#${config.walls.back.color.toString(16).padStart(6, '0')}`;\n  }\n\n  /**\n   * Obtenir les informations des ouvertures\n   */\n  public getOuvertures(): Array {\n    const config = this.getConfiguration();\n    const ouvertures: Array = [];\n\n    // Fenêtres du mur principal\n    if (config.mainWall.openings.window2) {\n      ouvertures.push({\n        type: 'fenetre',\n        position: config.mainWall.openings.window2.position,\n        dimensions: config.mainWall.openings.window2.dimensions,\n        couleur: `#${config.mainWall.openings.window2.color.toString(16).padStart(6, '0')}`\n      });\n    }\n\n    // Fenêtres du mur arrière\n    if (config.walls.back.openings?.window1) {\n      ouvertures.push({\n        type: 'fenetre',\n        position: config.walls.back.openings.window1.position,\n        dimensions: config.walls.back.openings.window1.dimensions,\n        couleur: `#${config.walls.back.openings.window1.color.toString(16).padStart(6, '0')}`\n      });\n    }\n\n    // Porte du mur droit\n    if (config.walls.right.openings?.door) {\n      ouvertures.push({\n        type: 'porte',\n        position: config.walls.right.openings.door.position,\n        dimensions: config.walls.right.openings.door.dimensions,\n        couleur: `#${config.walls.right.openings.door.color.toString(16).padStart(6, '0')}`\n      });\n    }\n\n    return ouvertures;\n  }\n\n  /**\n   * Vérifier si la configuration a changé\n   */\n  public hasConfigurationChanged(): boolean {\n    try {\n      const configActuelle = this.getConfiguration();\n      const nouvelleConfig = this.chargerConfiguration();\n      \n      // Comparaison simple des dimensions principales\n      return (\n        configActuelle.walls.back.dimensions.width !== nouvelleConfig.walls.back.dimensions.width ||\n        configActuelle.walls.left.dimensions.depth !== nouvelleConfig.walls.left.dimensions.depth ||\n        configActuelle.walls.back.dimensions.height !== nouvelleConfig.walls.back.dimensions.height ||\n        configActuelle.walls.back.color !== nouvelleConfig.walls.back.color\n      );\n    } catch (error) {\n      console.error('❌ Erreur lors de la vérification des changements:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Forcer le rechargement si des changements sont détectés\n   */\n  public rechargerSiNecessaire(): boolean {\n    if (this.hasConfigurationChanged()) {\n      console.log('🔄 Changements détectés dans building-config.ts - Rechargement automatique');\n      this.rechargerConfiguration();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConfigurationMur.html":{"url":"interfaces/ConfigurationMur.html","title":"interface - ConfigurationMur","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConfigurationMur\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/configuration/configuration.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour la configuration d'un mur\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            couleur\n                                        \n                                \n                                \n                                        \n                                            dimensions\n                                        \n                                \n                                \n                                        \n                                            epaisseur\n                                        \n                                \n                                \n                                        \n                                            ouvertures\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        couleur\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        couleur:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dimensions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dimensions:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        epaisseur\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        epaisseur:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ouvertures\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ouvertures:     ConfigurationOuverture[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ConfigurationOuverture[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigDirectService, ConfigurationComplete } from '../../config/config-direct';\n\n/**\n * Interface pour la configuration d'un bâtiment\n */\nexport interface ConfigurationBatiment {\n  // Configuration générale\n  nom: string;\n  description: string;\n  dimensions: {\n    longueur: number;  // en mètres\n    largeur: number;   // en mètres\n    hauteur: number;   // en mètres\n  };\n  \n  // Configuration des murs\n  murs: {\n    principal: ConfigurationMur;\n    arriere: ConfigurationMur;\n    gauche: ConfigurationMur;\n    droit: ConfigurationMur;\n  };\n  \n  // Configuration du toit\n  toit: ConfigurationToit;\n  \n  // Configuration du sol\n  sol: ConfigurationSol;\n}\n\n/**\n * Interface pour la configuration d'un mur\n */\nexport interface ConfigurationMur {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n  epaisseur: number;\n  ouvertures: ConfigurationOuverture[];\n}\n\n/**\n * Interface pour la configuration d'une ouverture\n */\nexport interface ConfigurationOuverture {\n  id: string;\n  type: 'porte' | 'fenetre';\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n  nom?: string;\n}\n\n/**\n * Interface pour la configuration du toit\n */\nexport interface ConfigurationToit {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n}\n\n/**\n * Interface pour la configuration du sol\n */\nexport interface ConfigurationSol {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n}\n\n/**\n * Service de gestion de la configuration du bâtiment\n * Remplace le fichier building-config.ts statique\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigurationService {\n  \n  // Configuration par défaut\n  private configurationParDefaut: ConfigurationBatiment = {\n    nom: 'Bâtiment Principal',\n    description: 'Bâtiment architectural avec murs, ouvertures et toit',\n    dimensions: {\n      longueur: 8,\n      largeur: 5,\n      hauteur: 2.5\n    },\n    murs: {\n      principal: {\n        position: { x: 0, y: 0, z: 2.3 },\n        dimensions: { width: 8, height: 2.5, depth: 0.2 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: [\n          {\n            id: 'fenetre1',\n            type: 'fenetre',\n            position: { x: -1.5, y: 1.5, z: 2.3 },\n            dimensions: { width: 1.5, height: 1.2, depth: 0.05 },\n            couleur: 0x0000ff,\n            nom: 'Fenêtre Bleue'\n          },\n          {\n            id: 'fenetre2',\n            type: 'fenetre',\n            position: { x: 0, y: 1.5, z: 2.3 },\n            dimensions: { width: 2, height: 1.2, depth: 0.05 },\n            couleur: 0xff0000,\n            nom: 'Fenêtre Rouge'\n          }\n        ]\n      },\n      arriere: {\n        position: { x: 0, y: 0, z: -2.5 },\n        dimensions: { width: 8, height: 2.5, depth: 0.2 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: [\n          {\n            id: 'fenetre3',\n            type: 'fenetre',\n            position: { x: 0, y: 1.5, z: -2.3 },\n            dimensions: { width: 1.5, height: 1.2, depth: 0.05 },\n            couleur: 0xff0000,\n            nom: 'Fenêtre Arrière'\n          }\n        ]\n      },\n      gauche: {\n        position: { x: -3.9, y: 1.25, z: 0 },\n        dimensions: { width: 0.2, height: 2.5, depth: 5 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: []\n      },\n      droit: {\n        position: { x: 3.8, y: 0, z: 0 },\n        dimensions: { width: 0.2, height: 2.5, depth: 5 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: [\n          {\n            id: 'porte1',\n            type: 'porte',\n            position: { x: 3.9, y: 1.05, z: 0 },\n            dimensions: { width: 1, height: 2.1, depth: 0.05 },\n            couleur: 0x00ff00,\n            nom: 'Porte d\\'Entrée'\n          }\n        ]\n      }\n    },\n    toit: {\n      position: { x: 0, y: 2.6, z: 0 },\n      dimensions: { width: 8.4, height: 0.2, depth: 5 },\n      couleur: 0x4169e1\n    },\n    sol: {\n      position: { x: 0, y: -0.1, z: 0 },\n      dimensions: { width: 8.2, height: 0.2, depth: 5.2 },\n      couleur: 0x8b4513\n    }\n  };\n\n  // Subject pour la configuration actuelle\n  private configurationActuelle = new BehaviorSubject(this.configurationParDefaut);\n  \n  // Observable public\n  public configuration$ = this.configurationActuelle.asObservable();\n\n  constructor(private configDirectService: ConfigDirectService) {\n    console.log('ConfigurationService initialisé avec ConfigDirectService');\n    \n    // Écouter les changements du ConfigDirectService\n    this.configDirectService.configuration$.subscribe(config => {\n      this.synchroniserAvecConfigDirect(config);\n    });\n  }\n\n  /**\n   * Synchroniser avec la configuration directe\n   */\n  private synchroniserAvecConfigDirect(config: ConfigurationComplete): void {\n    try {\n      const nouvelleConfig: ConfigurationBatiment = {\n        nom: 'Bâtiment Direct',\n        description: 'Configuration chargée directement depuis building-config.ts',\n        dimensions: {\n          longueur: config.walls.back.dimensions.width,\n          largeur: config.walls.left.dimensions.depth,\n          hauteur: config.walls.back.dimensions.height\n        },\n        murs: {\n          principal: {\n            position: config.mainWall.position,\n            dimensions: {\n              width: config.mainWall.contour[1].x - config.mainWall.contour[0].x, // Calcul de la largeur\n              height: config.mainWall.contour[2].y - config.mainWall.contour[0].y, // Calcul de la hauteur\n              depth: config.mainWall.thickness\n            },\n            couleur: config.mainWall.color,\n            epaisseur: config.mainWall.thickness,\n            ouvertures: []\n          },\n          arriere: {\n            position: config.walls.back.position,\n            dimensions: config.walls.back.dimensions,\n            couleur: config.walls.back.color,\n            epaisseur: config.walls.back.dimensions.depth,\n            ouvertures: config.walls.back.openings ? [\n              {\n                id: 'fenetre-arriere',\n                position: config.walls.back.openings.window1.position,\n                dimensions: config.walls.back.openings.window1.dimensions,\n                couleur: config.walls.back.openings.window1.color,\n                type: config.walls.back.openings.window1.type === 'window' ? 'fenetre' : 'porte',\n                nom: 'Fenêtre Arrière'\n              }\n            ] : []\n          },\n          gauche: {\n            position: config.walls.left.position,\n            dimensions: config.walls.left.dimensions,\n            couleur: config.walls.left.color,\n            epaisseur: config.walls.left.dimensions.width,\n            ouvertures: []\n          },\n          droit: {\n            position: config.walls.right.position,\n            dimensions: config.walls.right.dimensions,\n            couleur: config.walls.right.color,\n            epaisseur: config.walls.right.dimensions.width,\n            ouvertures: config.walls.right.openings ? [\n              {\n                id: 'porte-principale',\n                position: config.walls.right.openings.door.position,\n                dimensions: config.walls.right.openings.door.dimensions,\n                couleur: config.walls.right.openings.door.color,\n                type: config.walls.right.openings.door.type === 'door' ? 'porte' : 'fenetre',\n                nom: 'Porte Principale'\n              }\n            ] : []\n          }\n        },\n        toit: {\n          position: config.roof.position,\n          dimensions: config.roof.dimensions,\n          couleur: config.roof.color\n        },\n        sol: {\n          position: config.ground.position,\n          dimensions: config.ground.dimensions,\n          couleur: config.ground.color\n        }\n      };\n\n      this.configurationActuelle.next(nouvelleConfig);\n      console.log('🔄 Configuration synchronisée avec ConfigDirectService');\n      \n    } catch (error) {\n      console.error('❌ Erreur lors de la synchronisation:', error);\n    }\n  }\n\n  /**\n   * Recharger la configuration depuis building-config.ts\n   */\n  public rechargerConfiguration(): void {\n    this.configDirectService.rechargerConfiguration();\n    console.log('🔄 Configuration rechargée depuis building-config.ts');\n  }\n\n  /**\n   * Obtenir la configuration actuelle\n   */\n  getConfiguration(): ConfigurationBatiment {\n    return this.configurationActuelle.value;\n  }\n\n  /**\n   * Obtenir la configuration en tant qu'Observable\n   */\n  getConfigurationObservable(): Observable {\n    return this.configuration$;\n  }\n\n  /**\n   * Mettre à jour la configuration complète\n   */\n  mettreAJourConfiguration(nouvelleConfiguration: ConfigurationBatiment): void {\n    try {\n      // Validation de la configuration\n      if (!nouvelleConfiguration || !nouvelleConfiguration.nom || !nouvelleConfiguration.dimensions) {\n        throw new Error('Configuration invalide: propriétés manquantes');\n      }\n      \n      if (nouvelleConfiguration.dimensions.longueur  ouverture.id !== idOuverture);\n    this.mettreAJourConfiguration(configActuelle);\n  }\n\n  /**\n   * Réinitialiser à la configuration par défaut\n   */\n  reinitialiserConfiguration(): void {\n    this.configurationActuelle.next(this.configurationParDefaut);\n    console.log('Configuration réinitialisée');\n  }\n\n  /**\n   * Obtenir les dimensions du bâtiment\n   */\n  getDimensionsBatiment(): { longueur: number; largeur: number; hauteur: number } {\n    return this.getConfiguration().dimensions;\n  }\n\n  /**\n   * Obtenir tous les murs\n   */\n  getMurs(): ConfigurationBatiment['murs'] {\n    return this.getConfiguration().murs;\n  }\n\n  /**\n   * Obtenir un mur spécifique\n   */\n  getMur(nomMur: keyof ConfigurationBatiment['murs']): ConfigurationMur {\n    return this.getConfiguration().murs[nomMur];\n  }\n\n  /**\n   * Obtenir toutes les ouvertures de tous les murs\n   */\n  getAllOuvertures(): ConfigurationOuverture[] {\n    const config = this.getConfiguration();\n    const toutesOuvertures: ConfigurationOuverture[] = [];\n    \n    Object.values(config.murs).forEach(mur => {\n      toutesOuvertures.push(...mur.ouvertures);\n    });\n    \n    return toutesOuvertures;\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConfigurationOuverture.html":{"url":"interfaces/ConfigurationOuverture.html","title":"interface - ConfigurationOuverture","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConfigurationOuverture\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/configuration/configuration.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour la configuration d'une ouverture\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            couleur\n                                        \n                                \n                                \n                                        \n                                            dimensions\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nom\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        couleur\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        couleur:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dimensions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dimensions:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nom:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"porte\" | \"fenetre\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"porte\" | \"fenetre\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigDirectService, ConfigurationComplete } from '../../config/config-direct';\n\n/**\n * Interface pour la configuration d'un bâtiment\n */\nexport interface ConfigurationBatiment {\n  // Configuration générale\n  nom: string;\n  description: string;\n  dimensions: {\n    longueur: number;  // en mètres\n    largeur: number;   // en mètres\n    hauteur: number;   // en mètres\n  };\n  \n  // Configuration des murs\n  murs: {\n    principal: ConfigurationMur;\n    arriere: ConfigurationMur;\n    gauche: ConfigurationMur;\n    droit: ConfigurationMur;\n  };\n  \n  // Configuration du toit\n  toit: ConfigurationToit;\n  \n  // Configuration du sol\n  sol: ConfigurationSol;\n}\n\n/**\n * Interface pour la configuration d'un mur\n */\nexport interface ConfigurationMur {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n  epaisseur: number;\n  ouvertures: ConfigurationOuverture[];\n}\n\n/**\n * Interface pour la configuration d'une ouverture\n */\nexport interface ConfigurationOuverture {\n  id: string;\n  type: 'porte' | 'fenetre';\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n  nom?: string;\n}\n\n/**\n * Interface pour la configuration du toit\n */\nexport interface ConfigurationToit {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n}\n\n/**\n * Interface pour la configuration du sol\n */\nexport interface ConfigurationSol {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n}\n\n/**\n * Service de gestion de la configuration du bâtiment\n * Remplace le fichier building-config.ts statique\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigurationService {\n  \n  // Configuration par défaut\n  private configurationParDefaut: ConfigurationBatiment = {\n    nom: 'Bâtiment Principal',\n    description: 'Bâtiment architectural avec murs, ouvertures et toit',\n    dimensions: {\n      longueur: 8,\n      largeur: 5,\n      hauteur: 2.5\n    },\n    murs: {\n      principal: {\n        position: { x: 0, y: 0, z: 2.3 },\n        dimensions: { width: 8, height: 2.5, depth: 0.2 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: [\n          {\n            id: 'fenetre1',\n            type: 'fenetre',\n            position: { x: -1.5, y: 1.5, z: 2.3 },\n            dimensions: { width: 1.5, height: 1.2, depth: 0.05 },\n            couleur: 0x0000ff,\n            nom: 'Fenêtre Bleue'\n          },\n          {\n            id: 'fenetre2',\n            type: 'fenetre',\n            position: { x: 0, y: 1.5, z: 2.3 },\n            dimensions: { width: 2, height: 1.2, depth: 0.05 },\n            couleur: 0xff0000,\n            nom: 'Fenêtre Rouge'\n          }\n        ]\n      },\n      arriere: {\n        position: { x: 0, y: 0, z: -2.5 },\n        dimensions: { width: 8, height: 2.5, depth: 0.2 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: [\n          {\n            id: 'fenetre3',\n            type: 'fenetre',\n            position: { x: 0, y: 1.5, z: -2.3 },\n            dimensions: { width: 1.5, height: 1.2, depth: 0.05 },\n            couleur: 0xff0000,\n            nom: 'Fenêtre Arrière'\n          }\n        ]\n      },\n      gauche: {\n        position: { x: -3.9, y: 1.25, z: 0 },\n        dimensions: { width: 0.2, height: 2.5, depth: 5 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: []\n      },\n      droit: {\n        position: { x: 3.8, y: 0, z: 0 },\n        dimensions: { width: 0.2, height: 2.5, depth: 5 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: [\n          {\n            id: 'porte1',\n            type: 'porte',\n            position: { x: 3.9, y: 1.05, z: 0 },\n            dimensions: { width: 1, height: 2.1, depth: 0.05 },\n            couleur: 0x00ff00,\n            nom: 'Porte d\\'Entrée'\n          }\n        ]\n      }\n    },\n    toit: {\n      position: { x: 0, y: 2.6, z: 0 },\n      dimensions: { width: 8.4, height: 0.2, depth: 5 },\n      couleur: 0x4169e1\n    },\n    sol: {\n      position: { x: 0, y: -0.1, z: 0 },\n      dimensions: { width: 8.2, height: 0.2, depth: 5.2 },\n      couleur: 0x8b4513\n    }\n  };\n\n  // Subject pour la configuration actuelle\n  private configurationActuelle = new BehaviorSubject(this.configurationParDefaut);\n  \n  // Observable public\n  public configuration$ = this.configurationActuelle.asObservable();\n\n  constructor(private configDirectService: ConfigDirectService) {\n    console.log('ConfigurationService initialisé avec ConfigDirectService');\n    \n    // Écouter les changements du ConfigDirectService\n    this.configDirectService.configuration$.subscribe(config => {\n      this.synchroniserAvecConfigDirect(config);\n    });\n  }\n\n  /**\n   * Synchroniser avec la configuration directe\n   */\n  private synchroniserAvecConfigDirect(config: ConfigurationComplete): void {\n    try {\n      const nouvelleConfig: ConfigurationBatiment = {\n        nom: 'Bâtiment Direct',\n        description: 'Configuration chargée directement depuis building-config.ts',\n        dimensions: {\n          longueur: config.walls.back.dimensions.width,\n          largeur: config.walls.left.dimensions.depth,\n          hauteur: config.walls.back.dimensions.height\n        },\n        murs: {\n          principal: {\n            position: config.mainWall.position,\n            dimensions: {\n              width: config.mainWall.contour[1].x - config.mainWall.contour[0].x, // Calcul de la largeur\n              height: config.mainWall.contour[2].y - config.mainWall.contour[0].y, // Calcul de la hauteur\n              depth: config.mainWall.thickness\n            },\n            couleur: config.mainWall.color,\n            epaisseur: config.mainWall.thickness,\n            ouvertures: []\n          },\n          arriere: {\n            position: config.walls.back.position,\n            dimensions: config.walls.back.dimensions,\n            couleur: config.walls.back.color,\n            epaisseur: config.walls.back.dimensions.depth,\n            ouvertures: config.walls.back.openings ? [\n              {\n                id: 'fenetre-arriere',\n                position: config.walls.back.openings.window1.position,\n                dimensions: config.walls.back.openings.window1.dimensions,\n                couleur: config.walls.back.openings.window1.color,\n                type: config.walls.back.openings.window1.type === 'window' ? 'fenetre' : 'porte',\n                nom: 'Fenêtre Arrière'\n              }\n            ] : []\n          },\n          gauche: {\n            position: config.walls.left.position,\n            dimensions: config.walls.left.dimensions,\n            couleur: config.walls.left.color,\n            epaisseur: config.walls.left.dimensions.width,\n            ouvertures: []\n          },\n          droit: {\n            position: config.walls.right.position,\n            dimensions: config.walls.right.dimensions,\n            couleur: config.walls.right.color,\n            epaisseur: config.walls.right.dimensions.width,\n            ouvertures: config.walls.right.openings ? [\n              {\n                id: 'porte-principale',\n                position: config.walls.right.openings.door.position,\n                dimensions: config.walls.right.openings.door.dimensions,\n                couleur: config.walls.right.openings.door.color,\n                type: config.walls.right.openings.door.type === 'door' ? 'porte' : 'fenetre',\n                nom: 'Porte Principale'\n              }\n            ] : []\n          }\n        },\n        toit: {\n          position: config.roof.position,\n          dimensions: config.roof.dimensions,\n          couleur: config.roof.color\n        },\n        sol: {\n          position: config.ground.position,\n          dimensions: config.ground.dimensions,\n          couleur: config.ground.color\n        }\n      };\n\n      this.configurationActuelle.next(nouvelleConfig);\n      console.log('🔄 Configuration synchronisée avec ConfigDirectService');\n      \n    } catch (error) {\n      console.error('❌ Erreur lors de la synchronisation:', error);\n    }\n  }\n\n  /**\n   * Recharger la configuration depuis building-config.ts\n   */\n  public rechargerConfiguration(): void {\n    this.configDirectService.rechargerConfiguration();\n    console.log('🔄 Configuration rechargée depuis building-config.ts');\n  }\n\n  /**\n   * Obtenir la configuration actuelle\n   */\n  getConfiguration(): ConfigurationBatiment {\n    return this.configurationActuelle.value;\n  }\n\n  /**\n   * Obtenir la configuration en tant qu'Observable\n   */\n  getConfigurationObservable(): Observable {\n    return this.configuration$;\n  }\n\n  /**\n   * Mettre à jour la configuration complète\n   */\n  mettreAJourConfiguration(nouvelleConfiguration: ConfigurationBatiment): void {\n    try {\n      // Validation de la configuration\n      if (!nouvelleConfiguration || !nouvelleConfiguration.nom || !nouvelleConfiguration.dimensions) {\n        throw new Error('Configuration invalide: propriétés manquantes');\n      }\n      \n      if (nouvelleConfiguration.dimensions.longueur  ouverture.id !== idOuverture);\n    this.mettreAJourConfiguration(configActuelle);\n  }\n\n  /**\n   * Réinitialiser à la configuration par défaut\n   */\n  reinitialiserConfiguration(): void {\n    this.configurationActuelle.next(this.configurationParDefaut);\n    console.log('Configuration réinitialisée');\n  }\n\n  /**\n   * Obtenir les dimensions du bâtiment\n   */\n  getDimensionsBatiment(): { longueur: number; largeur: number; hauteur: number } {\n    return this.getConfiguration().dimensions;\n  }\n\n  /**\n   * Obtenir tous les murs\n   */\n  getMurs(): ConfigurationBatiment['murs'] {\n    return this.getConfiguration().murs;\n  }\n\n  /**\n   * Obtenir un mur spécifique\n   */\n  getMur(nomMur: keyof ConfigurationBatiment['murs']): ConfigurationMur {\n    return this.getConfiguration().murs[nomMur];\n  }\n\n  /**\n   * Obtenir toutes les ouvertures de tous les murs\n   */\n  getAllOuvertures(): ConfigurationOuverture[] {\n    const config = this.getConfiguration();\n    const toutesOuvertures: ConfigurationOuverture[] = [];\n    \n    Object.values(config.murs).forEach(mur => {\n      toutesOuvertures.push(...mur.ouvertures);\n    });\n    \n    return toutesOuvertures;\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigurationService.html":{"url":"injectables/ConfigurationService.html","title":"injectable - ConfigurationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  ConfigurationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/configuration/configuration.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service de gestion de la configuration du bâtiment\nRemplace le fichier building-config.ts statique\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                configuration$\n                            \n                            \n                                    Private\n                                configurationActuelle\n                            \n                            \n                                    Private\n                                configurationParDefaut\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ajouterOuverture\n                            \n                            \n                                getAllOuvertures\n                            \n                            \n                                getConfiguration\n                            \n                            \n                                getConfigurationObservable\n                            \n                            \n                                getDimensionsBatiment\n                            \n                            \n                                getMur\n                            \n                            \n                                getMurs\n                            \n                            \n                                mettreAJourConfiguration\n                            \n                            \n                                mettreAJourMur\n                            \n                            \n                                    Public\n                                rechargerConfiguration\n                            \n                            \n                                reinitialiserConfiguration\n                            \n                            \n                                supprimerOuverture\n                            \n                            \n                                    Private\n                                synchroniserAvecConfigDirect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configDirectService: ConfigDirectService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/configuration/configuration.service.ts:173\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configDirectService\n                                                  \n                                                        \n                                                                        ConfigDirectService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ajouterOuverture\n                        \n                    \n                \n            \n            \n                \najouterOuverture(nomMur, nouvelleOuverture: ConfigurationOuverture)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/configuration/configuration.service.ts:327\n                        \n                    \n\n\n            \n                \n                        Ajouter une ouverture à un mur\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nomMur\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                nouvelleOuverture\n                                            \n                                                            ConfigurationOuverture\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllOuvertures\n                        \n                    \n                \n            \n            \n                \ngetAllOuvertures()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/configuration/configuration.service.ts:375\n                        \n                    \n\n\n            \n                \n                        Obtenir toutes les ouvertures de tous les murs\n\n\n                        \n                            Returns :     ConfigurationOuverture[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getConfiguration\n                        \n                    \n                \n            \n            \n                \ngetConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/configuration/configuration.service.ts:280\n                        \n                    \n\n\n            \n                \n                        Obtenir la configuration actuelle\n\n\n                        \n                            Returns :         ConfigurationBatiment\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getConfigurationObservable\n                        \n                    \n                \n            \n            \n                \ngetConfigurationObservable()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/configuration/configuration.service.ts:287\n                        \n                    \n\n\n            \n                \n                        Obtenir la configuration en tant qu'Observable\n\n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDimensionsBatiment\n                        \n                    \n                \n            \n            \n                \ngetDimensionsBatiment()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/configuration/configuration.service.ts:354\n                        \n                    \n\n\n            \n                \n                        Obtenir les dimensions du bâtiment\n\n\n                        \n                            Returns :     literal type\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMur\n                        \n                    \n                \n            \n            \n                \ngetMur(nomMur)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/configuration/configuration.service.ts:368\n                        \n                    \n\n\n            \n                \n                        Obtenir un mur spécifique\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nomMur\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ConfigurationMur\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMurs\n                        \n                    \n                \n            \n            \n                \ngetMurs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/configuration/configuration.service.ts:361\n                        \n                    \n\n\n            \n                \n                        Obtenir tous les murs\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mettreAJourConfiguration\n                        \n                    \n                \n            \n            \n                \nmettreAJourConfiguration(nouvelleConfiguration: ConfigurationBatiment)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/configuration/configuration.service.ts:294\n                        \n                    \n\n\n            \n                \n                        Mettre à jour la configuration complète\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nouvelleConfiguration\n                                            \n                                                            ConfigurationBatiment\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mettreAJourMur\n                        \n                    \n                \n            \n            \n                \nmettreAJourMur(nomMur, nouveauMur: ConfigurationMur)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/configuration/configuration.service.ts:318\n                        \n                    \n\n\n            \n                \n                        Mettre à jour un mur spécifique\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nomMur\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                nouveauMur\n                                            \n                                                            ConfigurationMur\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        rechargerConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    rechargerConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/configuration/configuration.service.ts:272\n                        \n                    \n\n\n            \n                \n                        Recharger la configuration depuis building-config.ts\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reinitialiserConfiguration\n                        \n                    \n                \n            \n            \n                \nreinitialiserConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/configuration/configuration.service.ts:346\n                        \n                    \n\n\n            \n                \n                        Réinitialiser à la configuration par défaut\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        supprimerOuverture\n                        \n                    \n                \n            \n            \n                \nsupprimerOuverture(nomMur, idOuverture: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/configuration/configuration.service.ts:336\n                        \n                    \n\n\n            \n                \n                        Supprimer une ouverture d'un mur\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nomMur\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                idOuverture\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        synchroniserAvecConfigDirect\n                        \n                    \n                \n            \n            \n                \n                        \n                    synchroniserAvecConfigDirect(config: ConfigurationComplete)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/configuration/configuration.service.ts:187\n                        \n                    \n\n\n            \n                \n                        Synchroniser avec la configuration directe\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            ConfigurationComplete\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        configuration$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.configurationActuelle.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/configuration/configuration.service.ts:173\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        configurationActuelle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(this.configurationParDefaut)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/configuration/configuration.service.ts:170\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        configurationParDefaut\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ConfigurationBatiment\n\n                    \n                \n                \n                    \n                        Default value : {\n    nom: 'Bâtiment Principal',\n    description: 'Bâtiment architectural avec murs, ouvertures et toit',\n    dimensions: {\n      longueur: 8,\n      largeur: 5,\n      hauteur: 2.5\n    },\n    murs: {\n      principal: {\n        position: { x: 0, y: 0, z: 2.3 },\n        dimensions: { width: 8, height: 2.5, depth: 0.2 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: [\n          {\n            id: 'fenetre1',\n            type: 'fenetre',\n            position: { x: -1.5, y: 1.5, z: 2.3 },\n            dimensions: { width: 1.5, height: 1.2, depth: 0.05 },\n            couleur: 0x0000ff,\n            nom: 'Fenêtre Bleue'\n          },\n          {\n            id: 'fenetre2',\n            type: 'fenetre',\n            position: { x: 0, y: 1.5, z: 2.3 },\n            dimensions: { width: 2, height: 1.2, depth: 0.05 },\n            couleur: 0xff0000,\n            nom: 'Fenêtre Rouge'\n          }\n        ]\n      },\n      arriere: {\n        position: { x: 0, y: 0, z: -2.5 },\n        dimensions: { width: 8, height: 2.5, depth: 0.2 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: [\n          {\n            id: 'fenetre3',\n            type: 'fenetre',\n            position: { x: 0, y: 1.5, z: -2.3 },\n            dimensions: { width: 1.5, height: 1.2, depth: 0.05 },\n            couleur: 0xff0000,\n            nom: 'Fenêtre Arrière'\n          }\n        ]\n      },\n      gauche: {\n        position: { x: -3.9, y: 1.25, z: 0 },\n        dimensions: { width: 0.2, height: 2.5, depth: 5 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: []\n      },\n      droit: {\n        position: { x: 3.8, y: 0, z: 0 },\n        dimensions: { width: 0.2, height: 2.5, depth: 5 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: [\n          {\n            id: 'porte1',\n            type: 'porte',\n            position: { x: 3.9, y: 1.05, z: 0 },\n            dimensions: { width: 1, height: 2.1, depth: 0.05 },\n            couleur: 0x00ff00,\n            nom: 'Porte d\\'Entrée'\n          }\n        ]\n      }\n    },\n    toit: {\n      position: { x: 0, y: 2.6, z: 0 },\n      dimensions: { width: 8.4, height: 0.2, depth: 5 },\n      couleur: 0x4169e1\n    },\n    sol: {\n      position: { x: 0, y: -0.1, z: 0 },\n      dimensions: { width: 8.2, height: 0.2, depth: 5.2 },\n      couleur: 0x8b4513\n    }\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/services/configuration/configuration.service.ts:84\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigDirectService, ConfigurationComplete } from '../../config/config-direct';\n\n/**\n * Interface pour la configuration d'un bâtiment\n */\nexport interface ConfigurationBatiment {\n  // Configuration générale\n  nom: string;\n  description: string;\n  dimensions: {\n    longueur: number;  // en mètres\n    largeur: number;   // en mètres\n    hauteur: number;   // en mètres\n  };\n  \n  // Configuration des murs\n  murs: {\n    principal: ConfigurationMur;\n    arriere: ConfigurationMur;\n    gauche: ConfigurationMur;\n    droit: ConfigurationMur;\n  };\n  \n  // Configuration du toit\n  toit: ConfigurationToit;\n  \n  // Configuration du sol\n  sol: ConfigurationSol;\n}\n\n/**\n * Interface pour la configuration d'un mur\n */\nexport interface ConfigurationMur {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n  epaisseur: number;\n  ouvertures: ConfigurationOuverture[];\n}\n\n/**\n * Interface pour la configuration d'une ouverture\n */\nexport interface ConfigurationOuverture {\n  id: string;\n  type: 'porte' | 'fenetre';\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n  nom?: string;\n}\n\n/**\n * Interface pour la configuration du toit\n */\nexport interface ConfigurationToit {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n}\n\n/**\n * Interface pour la configuration du sol\n */\nexport interface ConfigurationSol {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n}\n\n/**\n * Service de gestion de la configuration du bâtiment\n * Remplace le fichier building-config.ts statique\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigurationService {\n  \n  // Configuration par défaut\n  private configurationParDefaut: ConfigurationBatiment = {\n    nom: 'Bâtiment Principal',\n    description: 'Bâtiment architectural avec murs, ouvertures et toit',\n    dimensions: {\n      longueur: 8,\n      largeur: 5,\n      hauteur: 2.5\n    },\n    murs: {\n      principal: {\n        position: { x: 0, y: 0, z: 2.3 },\n        dimensions: { width: 8, height: 2.5, depth: 0.2 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: [\n          {\n            id: 'fenetre1',\n            type: 'fenetre',\n            position: { x: -1.5, y: 1.5, z: 2.3 },\n            dimensions: { width: 1.5, height: 1.2, depth: 0.05 },\n            couleur: 0x0000ff,\n            nom: 'Fenêtre Bleue'\n          },\n          {\n            id: 'fenetre2',\n            type: 'fenetre',\n            position: { x: 0, y: 1.5, z: 2.3 },\n            dimensions: { width: 2, height: 1.2, depth: 0.05 },\n            couleur: 0xff0000,\n            nom: 'Fenêtre Rouge'\n          }\n        ]\n      },\n      arriere: {\n        position: { x: 0, y: 0, z: -2.5 },\n        dimensions: { width: 8, height: 2.5, depth: 0.2 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: [\n          {\n            id: 'fenetre3',\n            type: 'fenetre',\n            position: { x: 0, y: 1.5, z: -2.3 },\n            dimensions: { width: 1.5, height: 1.2, depth: 0.05 },\n            couleur: 0xff0000,\n            nom: 'Fenêtre Arrière'\n          }\n        ]\n      },\n      gauche: {\n        position: { x: -3.9, y: 1.25, z: 0 },\n        dimensions: { width: 0.2, height: 2.5, depth: 5 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: []\n      },\n      droit: {\n        position: { x: 3.8, y: 0, z: 0 },\n        dimensions: { width: 0.2, height: 2.5, depth: 5 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: [\n          {\n            id: 'porte1',\n            type: 'porte',\n            position: { x: 3.9, y: 1.05, z: 0 },\n            dimensions: { width: 1, height: 2.1, depth: 0.05 },\n            couleur: 0x00ff00,\n            nom: 'Porte d\\'Entrée'\n          }\n        ]\n      }\n    },\n    toit: {\n      position: { x: 0, y: 2.6, z: 0 },\n      dimensions: { width: 8.4, height: 0.2, depth: 5 },\n      couleur: 0x4169e1\n    },\n    sol: {\n      position: { x: 0, y: -0.1, z: 0 },\n      dimensions: { width: 8.2, height: 0.2, depth: 5.2 },\n      couleur: 0x8b4513\n    }\n  };\n\n  // Subject pour la configuration actuelle\n  private configurationActuelle = new BehaviorSubject(this.configurationParDefaut);\n  \n  // Observable public\n  public configuration$ = this.configurationActuelle.asObservable();\n\n  constructor(private configDirectService: ConfigDirectService) {\n    console.log('ConfigurationService initialisé avec ConfigDirectService');\n    \n    // Écouter les changements du ConfigDirectService\n    this.configDirectService.configuration$.subscribe(config => {\n      this.synchroniserAvecConfigDirect(config);\n    });\n  }\n\n  /**\n   * Synchroniser avec la configuration directe\n   */\n  private synchroniserAvecConfigDirect(config: ConfigurationComplete): void {\n    try {\n      const nouvelleConfig: ConfigurationBatiment = {\n        nom: 'Bâtiment Direct',\n        description: 'Configuration chargée directement depuis building-config.ts',\n        dimensions: {\n          longueur: config.walls.back.dimensions.width,\n          largeur: config.walls.left.dimensions.depth,\n          hauteur: config.walls.back.dimensions.height\n        },\n        murs: {\n          principal: {\n            position: config.mainWall.position,\n            dimensions: {\n              width: config.mainWall.contour[1].x - config.mainWall.contour[0].x, // Calcul de la largeur\n              height: config.mainWall.contour[2].y - config.mainWall.contour[0].y, // Calcul de la hauteur\n              depth: config.mainWall.thickness\n            },\n            couleur: config.mainWall.color,\n            epaisseur: config.mainWall.thickness,\n            ouvertures: []\n          },\n          arriere: {\n            position: config.walls.back.position,\n            dimensions: config.walls.back.dimensions,\n            couleur: config.walls.back.color,\n            epaisseur: config.walls.back.dimensions.depth,\n            ouvertures: config.walls.back.openings ? [\n              {\n                id: 'fenetre-arriere',\n                position: config.walls.back.openings.window1.position,\n                dimensions: config.walls.back.openings.window1.dimensions,\n                couleur: config.walls.back.openings.window1.color,\n                type: config.walls.back.openings.window1.type === 'window' ? 'fenetre' : 'porte',\n                nom: 'Fenêtre Arrière'\n              }\n            ] : []\n          },\n          gauche: {\n            position: config.walls.left.position,\n            dimensions: config.walls.left.dimensions,\n            couleur: config.walls.left.color,\n            epaisseur: config.walls.left.dimensions.width,\n            ouvertures: []\n          },\n          droit: {\n            position: config.walls.right.position,\n            dimensions: config.walls.right.dimensions,\n            couleur: config.walls.right.color,\n            epaisseur: config.walls.right.dimensions.width,\n            ouvertures: config.walls.right.openings ? [\n              {\n                id: 'porte-principale',\n                position: config.walls.right.openings.door.position,\n                dimensions: config.walls.right.openings.door.dimensions,\n                couleur: config.walls.right.openings.door.color,\n                type: config.walls.right.openings.door.type === 'door' ? 'porte' : 'fenetre',\n                nom: 'Porte Principale'\n              }\n            ] : []\n          }\n        },\n        toit: {\n          position: config.roof.position,\n          dimensions: config.roof.dimensions,\n          couleur: config.roof.color\n        },\n        sol: {\n          position: config.ground.position,\n          dimensions: config.ground.dimensions,\n          couleur: config.ground.color\n        }\n      };\n\n      this.configurationActuelle.next(nouvelleConfig);\n      console.log('🔄 Configuration synchronisée avec ConfigDirectService');\n      \n    } catch (error) {\n      console.error('❌ Erreur lors de la synchronisation:', error);\n    }\n  }\n\n  /**\n   * Recharger la configuration depuis building-config.ts\n   */\n  public rechargerConfiguration(): void {\n    this.configDirectService.rechargerConfiguration();\n    console.log('🔄 Configuration rechargée depuis building-config.ts');\n  }\n\n  /**\n   * Obtenir la configuration actuelle\n   */\n  getConfiguration(): ConfigurationBatiment {\n    return this.configurationActuelle.value;\n  }\n\n  /**\n   * Obtenir la configuration en tant qu'Observable\n   */\n  getConfigurationObservable(): Observable {\n    return this.configuration$;\n  }\n\n  /**\n   * Mettre à jour la configuration complète\n   */\n  mettreAJourConfiguration(nouvelleConfiguration: ConfigurationBatiment): void {\n    try {\n      // Validation de la configuration\n      if (!nouvelleConfiguration || !nouvelleConfiguration.nom || !nouvelleConfiguration.dimensions) {\n        throw new Error('Configuration invalide: propriétés manquantes');\n      }\n      \n      if (nouvelleConfiguration.dimensions.longueur  ouverture.id !== idOuverture);\n    this.mettreAJourConfiguration(configActuelle);\n  }\n\n  /**\n   * Réinitialiser à la configuration par défaut\n   */\n  reinitialiserConfiguration(): void {\n    this.configurationActuelle.next(this.configurationParDefaut);\n    console.log('Configuration réinitialisée');\n  }\n\n  /**\n   * Obtenir les dimensions du bâtiment\n   */\n  getDimensionsBatiment(): { longueur: number; largeur: number; hauteur: number } {\n    return this.getConfiguration().dimensions;\n  }\n\n  /**\n   * Obtenir tous les murs\n   */\n  getMurs(): ConfigurationBatiment['murs'] {\n    return this.getConfiguration().murs;\n  }\n\n  /**\n   * Obtenir un mur spécifique\n   */\n  getMur(nomMur: keyof ConfigurationBatiment['murs']): ConfigurationMur {\n    return this.getConfiguration().murs[nomMur];\n  }\n\n  /**\n   * Obtenir toutes les ouvertures de tous les murs\n   */\n  getAllOuvertures(): ConfigurationOuverture[] {\n    const config = this.getConfiguration();\n    const toutesOuvertures: ConfigurationOuverture[] = [];\n    \n    Object.values(config.murs).forEach(mur => {\n      toutesOuvertures.push(...mur.ouvertures);\n    });\n    \n    return toutesOuvertures;\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConfigurationSol.html":{"url":"interfaces/ConfigurationSol.html","title":"interface - ConfigurationSol","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConfigurationSol\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/configuration/configuration.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour la configuration du sol\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            couleur\n                                        \n                                \n                                \n                                        \n                                            dimensions\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        couleur\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        couleur:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dimensions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dimensions:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigDirectService, ConfigurationComplete } from '../../config/config-direct';\n\n/**\n * Interface pour la configuration d'un bâtiment\n */\nexport interface ConfigurationBatiment {\n  // Configuration générale\n  nom: string;\n  description: string;\n  dimensions: {\n    longueur: number;  // en mètres\n    largeur: number;   // en mètres\n    hauteur: number;   // en mètres\n  };\n  \n  // Configuration des murs\n  murs: {\n    principal: ConfigurationMur;\n    arriere: ConfigurationMur;\n    gauche: ConfigurationMur;\n    droit: ConfigurationMur;\n  };\n  \n  // Configuration du toit\n  toit: ConfigurationToit;\n  \n  // Configuration du sol\n  sol: ConfigurationSol;\n}\n\n/**\n * Interface pour la configuration d'un mur\n */\nexport interface ConfigurationMur {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n  epaisseur: number;\n  ouvertures: ConfigurationOuverture[];\n}\n\n/**\n * Interface pour la configuration d'une ouverture\n */\nexport interface ConfigurationOuverture {\n  id: string;\n  type: 'porte' | 'fenetre';\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n  nom?: string;\n}\n\n/**\n * Interface pour la configuration du toit\n */\nexport interface ConfigurationToit {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n}\n\n/**\n * Interface pour la configuration du sol\n */\nexport interface ConfigurationSol {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n}\n\n/**\n * Service de gestion de la configuration du bâtiment\n * Remplace le fichier building-config.ts statique\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigurationService {\n  \n  // Configuration par défaut\n  private configurationParDefaut: ConfigurationBatiment = {\n    nom: 'Bâtiment Principal',\n    description: 'Bâtiment architectural avec murs, ouvertures et toit',\n    dimensions: {\n      longueur: 8,\n      largeur: 5,\n      hauteur: 2.5\n    },\n    murs: {\n      principal: {\n        position: { x: 0, y: 0, z: 2.3 },\n        dimensions: { width: 8, height: 2.5, depth: 0.2 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: [\n          {\n            id: 'fenetre1',\n            type: 'fenetre',\n            position: { x: -1.5, y: 1.5, z: 2.3 },\n            dimensions: { width: 1.5, height: 1.2, depth: 0.05 },\n            couleur: 0x0000ff,\n            nom: 'Fenêtre Bleue'\n          },\n          {\n            id: 'fenetre2',\n            type: 'fenetre',\n            position: { x: 0, y: 1.5, z: 2.3 },\n            dimensions: { width: 2, height: 1.2, depth: 0.05 },\n            couleur: 0xff0000,\n            nom: 'Fenêtre Rouge'\n          }\n        ]\n      },\n      arriere: {\n        position: { x: 0, y: 0, z: -2.5 },\n        dimensions: { width: 8, height: 2.5, depth: 0.2 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: [\n          {\n            id: 'fenetre3',\n            type: 'fenetre',\n            position: { x: 0, y: 1.5, z: -2.3 },\n            dimensions: { width: 1.5, height: 1.2, depth: 0.05 },\n            couleur: 0xff0000,\n            nom: 'Fenêtre Arrière'\n          }\n        ]\n      },\n      gauche: {\n        position: { x: -3.9, y: 1.25, z: 0 },\n        dimensions: { width: 0.2, height: 2.5, depth: 5 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: []\n      },\n      droit: {\n        position: { x: 3.8, y: 0, z: 0 },\n        dimensions: { width: 0.2, height: 2.5, depth: 5 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: [\n          {\n            id: 'porte1',\n            type: 'porte',\n            position: { x: 3.9, y: 1.05, z: 0 },\n            dimensions: { width: 1, height: 2.1, depth: 0.05 },\n            couleur: 0x00ff00,\n            nom: 'Porte d\\'Entrée'\n          }\n        ]\n      }\n    },\n    toit: {\n      position: { x: 0, y: 2.6, z: 0 },\n      dimensions: { width: 8.4, height: 0.2, depth: 5 },\n      couleur: 0x4169e1\n    },\n    sol: {\n      position: { x: 0, y: -0.1, z: 0 },\n      dimensions: { width: 8.2, height: 0.2, depth: 5.2 },\n      couleur: 0x8b4513\n    }\n  };\n\n  // Subject pour la configuration actuelle\n  private configurationActuelle = new BehaviorSubject(this.configurationParDefaut);\n  \n  // Observable public\n  public configuration$ = this.configurationActuelle.asObservable();\n\n  constructor(private configDirectService: ConfigDirectService) {\n    console.log('ConfigurationService initialisé avec ConfigDirectService');\n    \n    // Écouter les changements du ConfigDirectService\n    this.configDirectService.configuration$.subscribe(config => {\n      this.synchroniserAvecConfigDirect(config);\n    });\n  }\n\n  /**\n   * Synchroniser avec la configuration directe\n   */\n  private synchroniserAvecConfigDirect(config: ConfigurationComplete): void {\n    try {\n      const nouvelleConfig: ConfigurationBatiment = {\n        nom: 'Bâtiment Direct',\n        description: 'Configuration chargée directement depuis building-config.ts',\n        dimensions: {\n          longueur: config.walls.back.dimensions.width,\n          largeur: config.walls.left.dimensions.depth,\n          hauteur: config.walls.back.dimensions.height\n        },\n        murs: {\n          principal: {\n            position: config.mainWall.position,\n            dimensions: {\n              width: config.mainWall.contour[1].x - config.mainWall.contour[0].x, // Calcul de la largeur\n              height: config.mainWall.contour[2].y - config.mainWall.contour[0].y, // Calcul de la hauteur\n              depth: config.mainWall.thickness\n            },\n            couleur: config.mainWall.color,\n            epaisseur: config.mainWall.thickness,\n            ouvertures: []\n          },\n          arriere: {\n            position: config.walls.back.position,\n            dimensions: config.walls.back.dimensions,\n            couleur: config.walls.back.color,\n            epaisseur: config.walls.back.dimensions.depth,\n            ouvertures: config.walls.back.openings ? [\n              {\n                id: 'fenetre-arriere',\n                position: config.walls.back.openings.window1.position,\n                dimensions: config.walls.back.openings.window1.dimensions,\n                couleur: config.walls.back.openings.window1.color,\n                type: config.walls.back.openings.window1.type === 'window' ? 'fenetre' : 'porte',\n                nom: 'Fenêtre Arrière'\n              }\n            ] : []\n          },\n          gauche: {\n            position: config.walls.left.position,\n            dimensions: config.walls.left.dimensions,\n            couleur: config.walls.left.color,\n            epaisseur: config.walls.left.dimensions.width,\n            ouvertures: []\n          },\n          droit: {\n            position: config.walls.right.position,\n            dimensions: config.walls.right.dimensions,\n            couleur: config.walls.right.color,\n            epaisseur: config.walls.right.dimensions.width,\n            ouvertures: config.walls.right.openings ? [\n              {\n                id: 'porte-principale',\n                position: config.walls.right.openings.door.position,\n                dimensions: config.walls.right.openings.door.dimensions,\n                couleur: config.walls.right.openings.door.color,\n                type: config.walls.right.openings.door.type === 'door' ? 'porte' : 'fenetre',\n                nom: 'Porte Principale'\n              }\n            ] : []\n          }\n        },\n        toit: {\n          position: config.roof.position,\n          dimensions: config.roof.dimensions,\n          couleur: config.roof.color\n        },\n        sol: {\n          position: config.ground.position,\n          dimensions: config.ground.dimensions,\n          couleur: config.ground.color\n        }\n      };\n\n      this.configurationActuelle.next(nouvelleConfig);\n      console.log('🔄 Configuration synchronisée avec ConfigDirectService');\n      \n    } catch (error) {\n      console.error('❌ Erreur lors de la synchronisation:', error);\n    }\n  }\n\n  /**\n   * Recharger la configuration depuis building-config.ts\n   */\n  public rechargerConfiguration(): void {\n    this.configDirectService.rechargerConfiguration();\n    console.log('🔄 Configuration rechargée depuis building-config.ts');\n  }\n\n  /**\n   * Obtenir la configuration actuelle\n   */\n  getConfiguration(): ConfigurationBatiment {\n    return this.configurationActuelle.value;\n  }\n\n  /**\n   * Obtenir la configuration en tant qu'Observable\n   */\n  getConfigurationObservable(): Observable {\n    return this.configuration$;\n  }\n\n  /**\n   * Mettre à jour la configuration complète\n   */\n  mettreAJourConfiguration(nouvelleConfiguration: ConfigurationBatiment): void {\n    try {\n      // Validation de la configuration\n      if (!nouvelleConfiguration || !nouvelleConfiguration.nom || !nouvelleConfiguration.dimensions) {\n        throw new Error('Configuration invalide: propriétés manquantes');\n      }\n      \n      if (nouvelleConfiguration.dimensions.longueur  ouverture.id !== idOuverture);\n    this.mettreAJourConfiguration(configActuelle);\n  }\n\n  /**\n   * Réinitialiser à la configuration par défaut\n   */\n  reinitialiserConfiguration(): void {\n    this.configurationActuelle.next(this.configurationParDefaut);\n    console.log('Configuration réinitialisée');\n  }\n\n  /**\n   * Obtenir les dimensions du bâtiment\n   */\n  getDimensionsBatiment(): { longueur: number; largeur: number; hauteur: number } {\n    return this.getConfiguration().dimensions;\n  }\n\n  /**\n   * Obtenir tous les murs\n   */\n  getMurs(): ConfigurationBatiment['murs'] {\n    return this.getConfiguration().murs;\n  }\n\n  /**\n   * Obtenir un mur spécifique\n   */\n  getMur(nomMur: keyof ConfigurationBatiment['murs']): ConfigurationMur {\n    return this.getConfiguration().murs[nomMur];\n  }\n\n  /**\n   * Obtenir toutes les ouvertures de tous les murs\n   */\n  getAllOuvertures(): ConfigurationOuverture[] {\n    const config = this.getConfiguration();\n    const toutesOuvertures: ConfigurationOuverture[] = [];\n    \n    Object.values(config.murs).forEach(mur => {\n      toutesOuvertures.push(...mur.ouvertures);\n    });\n    \n    return toutesOuvertures;\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConfigurationToit.html":{"url":"interfaces/ConfigurationToit.html","title":"interface - ConfigurationToit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConfigurationToit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/configuration/configuration.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour la configuration du toit\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            couleur\n                                        \n                                \n                                \n                                        \n                                            dimensions\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        couleur\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        couleur:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dimensions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dimensions:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigDirectService, ConfigurationComplete } from '../../config/config-direct';\n\n/**\n * Interface pour la configuration d'un bâtiment\n */\nexport interface ConfigurationBatiment {\n  // Configuration générale\n  nom: string;\n  description: string;\n  dimensions: {\n    longueur: number;  // en mètres\n    largeur: number;   // en mètres\n    hauteur: number;   // en mètres\n  };\n  \n  // Configuration des murs\n  murs: {\n    principal: ConfigurationMur;\n    arriere: ConfigurationMur;\n    gauche: ConfigurationMur;\n    droit: ConfigurationMur;\n  };\n  \n  // Configuration du toit\n  toit: ConfigurationToit;\n  \n  // Configuration du sol\n  sol: ConfigurationSol;\n}\n\n/**\n * Interface pour la configuration d'un mur\n */\nexport interface ConfigurationMur {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n  epaisseur: number;\n  ouvertures: ConfigurationOuverture[];\n}\n\n/**\n * Interface pour la configuration d'une ouverture\n */\nexport interface ConfigurationOuverture {\n  id: string;\n  type: 'porte' | 'fenetre';\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n  nom?: string;\n}\n\n/**\n * Interface pour la configuration du toit\n */\nexport interface ConfigurationToit {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n}\n\n/**\n * Interface pour la configuration du sol\n */\nexport interface ConfigurationSol {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n}\n\n/**\n * Service de gestion de la configuration du bâtiment\n * Remplace le fichier building-config.ts statique\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigurationService {\n  \n  // Configuration par défaut\n  private configurationParDefaut: ConfigurationBatiment = {\n    nom: 'Bâtiment Principal',\n    description: 'Bâtiment architectural avec murs, ouvertures et toit',\n    dimensions: {\n      longueur: 8,\n      largeur: 5,\n      hauteur: 2.5\n    },\n    murs: {\n      principal: {\n        position: { x: 0, y: 0, z: 2.3 },\n        dimensions: { width: 8, height: 2.5, depth: 0.2 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: [\n          {\n            id: 'fenetre1',\n            type: 'fenetre',\n            position: { x: -1.5, y: 1.5, z: 2.3 },\n            dimensions: { width: 1.5, height: 1.2, depth: 0.05 },\n            couleur: 0x0000ff,\n            nom: 'Fenêtre Bleue'\n          },\n          {\n            id: 'fenetre2',\n            type: 'fenetre',\n            position: { x: 0, y: 1.5, z: 2.3 },\n            dimensions: { width: 2, height: 1.2, depth: 0.05 },\n            couleur: 0xff0000,\n            nom: 'Fenêtre Rouge'\n          }\n        ]\n      },\n      arriere: {\n        position: { x: 0, y: 0, z: -2.5 },\n        dimensions: { width: 8, height: 2.5, depth: 0.2 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: [\n          {\n            id: 'fenetre3',\n            type: 'fenetre',\n            position: { x: 0, y: 1.5, z: -2.3 },\n            dimensions: { width: 1.5, height: 1.2, depth: 0.05 },\n            couleur: 0xff0000,\n            nom: 'Fenêtre Arrière'\n          }\n        ]\n      },\n      gauche: {\n        position: { x: -3.9, y: 1.25, z: 0 },\n        dimensions: { width: 0.2, height: 2.5, depth: 5 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: []\n      },\n      droit: {\n        position: { x: 3.8, y: 0, z: 0 },\n        dimensions: { width: 0.2, height: 2.5, depth: 5 },\n        couleur: 0xaaaaaa,\n        epaisseur: 0.2,\n        ouvertures: [\n          {\n            id: 'porte1',\n            type: 'porte',\n            position: { x: 3.9, y: 1.05, z: 0 },\n            dimensions: { width: 1, height: 2.1, depth: 0.05 },\n            couleur: 0x00ff00,\n            nom: 'Porte d\\'Entrée'\n          }\n        ]\n      }\n    },\n    toit: {\n      position: { x: 0, y: 2.6, z: 0 },\n      dimensions: { width: 8.4, height: 0.2, depth: 5 },\n      couleur: 0x4169e1\n    },\n    sol: {\n      position: { x: 0, y: -0.1, z: 0 },\n      dimensions: { width: 8.2, height: 0.2, depth: 5.2 },\n      couleur: 0x8b4513\n    }\n  };\n\n  // Subject pour la configuration actuelle\n  private configurationActuelle = new BehaviorSubject(this.configurationParDefaut);\n  \n  // Observable public\n  public configuration$ = this.configurationActuelle.asObservable();\n\n  constructor(private configDirectService: ConfigDirectService) {\n    console.log('ConfigurationService initialisé avec ConfigDirectService');\n    \n    // Écouter les changements du ConfigDirectService\n    this.configDirectService.configuration$.subscribe(config => {\n      this.synchroniserAvecConfigDirect(config);\n    });\n  }\n\n  /**\n   * Synchroniser avec la configuration directe\n   */\n  private synchroniserAvecConfigDirect(config: ConfigurationComplete): void {\n    try {\n      const nouvelleConfig: ConfigurationBatiment = {\n        nom: 'Bâtiment Direct',\n        description: 'Configuration chargée directement depuis building-config.ts',\n        dimensions: {\n          longueur: config.walls.back.dimensions.width,\n          largeur: config.walls.left.dimensions.depth,\n          hauteur: config.walls.back.dimensions.height\n        },\n        murs: {\n          principal: {\n            position: config.mainWall.position,\n            dimensions: {\n              width: config.mainWall.contour[1].x - config.mainWall.contour[0].x, // Calcul de la largeur\n              height: config.mainWall.contour[2].y - config.mainWall.contour[0].y, // Calcul de la hauteur\n              depth: config.mainWall.thickness\n            },\n            couleur: config.mainWall.color,\n            epaisseur: config.mainWall.thickness,\n            ouvertures: []\n          },\n          arriere: {\n            position: config.walls.back.position,\n            dimensions: config.walls.back.dimensions,\n            couleur: config.walls.back.color,\n            epaisseur: config.walls.back.dimensions.depth,\n            ouvertures: config.walls.back.openings ? [\n              {\n                id: 'fenetre-arriere',\n                position: config.walls.back.openings.window1.position,\n                dimensions: config.walls.back.openings.window1.dimensions,\n                couleur: config.walls.back.openings.window1.color,\n                type: config.walls.back.openings.window1.type === 'window' ? 'fenetre' : 'porte',\n                nom: 'Fenêtre Arrière'\n              }\n            ] : []\n          },\n          gauche: {\n            position: config.walls.left.position,\n            dimensions: config.walls.left.dimensions,\n            couleur: config.walls.left.color,\n            epaisseur: config.walls.left.dimensions.width,\n            ouvertures: []\n          },\n          droit: {\n            position: config.walls.right.position,\n            dimensions: config.walls.right.dimensions,\n            couleur: config.walls.right.color,\n            epaisseur: config.walls.right.dimensions.width,\n            ouvertures: config.walls.right.openings ? [\n              {\n                id: 'porte-principale',\n                position: config.walls.right.openings.door.position,\n                dimensions: config.walls.right.openings.door.dimensions,\n                couleur: config.walls.right.openings.door.color,\n                type: config.walls.right.openings.door.type === 'door' ? 'porte' : 'fenetre',\n                nom: 'Porte Principale'\n              }\n            ] : []\n          }\n        },\n        toit: {\n          position: config.roof.position,\n          dimensions: config.roof.dimensions,\n          couleur: config.roof.color\n        },\n        sol: {\n          position: config.ground.position,\n          dimensions: config.ground.dimensions,\n          couleur: config.ground.color\n        }\n      };\n\n      this.configurationActuelle.next(nouvelleConfig);\n      console.log('🔄 Configuration synchronisée avec ConfigDirectService');\n      \n    } catch (error) {\n      console.error('❌ Erreur lors de la synchronisation:', error);\n    }\n  }\n\n  /**\n   * Recharger la configuration depuis building-config.ts\n   */\n  public rechargerConfiguration(): void {\n    this.configDirectService.rechargerConfiguration();\n    console.log('🔄 Configuration rechargée depuis building-config.ts');\n  }\n\n  /**\n   * Obtenir la configuration actuelle\n   */\n  getConfiguration(): ConfigurationBatiment {\n    return this.configurationActuelle.value;\n  }\n\n  /**\n   * Obtenir la configuration en tant qu'Observable\n   */\n  getConfigurationObservable(): Observable {\n    return this.configuration$;\n  }\n\n  /**\n   * Mettre à jour la configuration complète\n   */\n  mettreAJourConfiguration(nouvelleConfiguration: ConfigurationBatiment): void {\n    try {\n      // Validation de la configuration\n      if (!nouvelleConfiguration || !nouvelleConfiguration.nom || !nouvelleConfiguration.dimensions) {\n        throw new Error('Configuration invalide: propriétés manquantes');\n      }\n      \n      if (nouvelleConfiguration.dimensions.longueur  ouverture.id !== idOuverture);\n    this.mettreAJourConfiguration(configActuelle);\n  }\n\n  /**\n   * Réinitialiser à la configuration par défaut\n   */\n  reinitialiserConfiguration(): void {\n    this.configurationActuelle.next(this.configurationParDefaut);\n    console.log('Configuration réinitialisée');\n  }\n\n  /**\n   * Obtenir les dimensions du bâtiment\n   */\n  getDimensionsBatiment(): { longueur: number; largeur: number; hauteur: number } {\n    return this.getConfiguration().dimensions;\n  }\n\n  /**\n   * Obtenir tous les murs\n   */\n  getMurs(): ConfigurationBatiment['murs'] {\n    return this.getConfiguration().murs;\n  }\n\n  /**\n   * Obtenir un mur spécifique\n   */\n  getMur(nomMur: keyof ConfigurationBatiment['murs']): ConfigurationMur {\n    return this.getConfiguration().murs[nomMur];\n  }\n\n  /**\n   * Obtenir toutes les ouvertures de tous les murs\n   */\n  getAllOuvertures(): ConfigurationOuverture[] {\n    const config = this.getConfiguration();\n    const toutesOuvertures: ConfigurationOuverture[] = [];\n    \n    Object.values(config.murs).forEach(mur => {\n      toutesOuvertures.push(...mur.ouvertures);\n    });\n    \n    return toutesOuvertures;\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ControlesScene.html":{"url":"interfaces/ControlesScene.html","title":"interface - ControlesScene","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ControlesScene\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/scene/scene.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les contrôles de la scène\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dampingFactor\n                                        \n                                \n                                \n                                        \n                                            enableDamping\n                                        \n                                \n                                \n                                        \n                                            enablePan\n                                        \n                                \n                                \n                                        \n                                            enableRotate\n                                        \n                                \n                                \n                                        \n                                            enableZoom\n                                        \n                                \n                                \n                                        \n                                            maxDistance\n                                        \n                                \n                                \n                                        \n                                            maxPolarAngle\n                                        \n                                \n                                \n                                        \n                                            minDistance\n                                        \n                                \n                                \n                                        \n                                            minPolarAngle\n                                        \n                                \n                                \n                                        \n                                            panSpeed\n                                        \n                                \n                                \n                                        \n                                            rotateSpeed\n                                        \n                                \n                                \n                                        \n                                            zoomSpeed\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dampingFactor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dampingFactor:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableDamping\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableDamping:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enablePan\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enablePan:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableRotate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableRotate:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableZoom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableZoom:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxDistance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxDistance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxPolarAngle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxPolarAngle:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        minDistance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        minDistance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        minPolarAngle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        minPolarAngle:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        panSpeed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        panSpeed:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rotateSpeed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rotateSpeed:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zoomSpeed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        zoomSpeed:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigurationService } from '../configuration/configuration.service';\nimport { MurService, ProprietesMur } from '../mur/mur.service';\nimport { OuvertureService, ProprietesOuverture } from '../ouverture/ouverture.service';\n\n/**\n * Interface pour les propriétés de la scène 3D\n */\nexport interface ProprietesScene {\n  id: string;\n  nom: string;\n  largeur: number;\n  hauteur: number;\n  backgroundColor: number;\n  fogColor: number;\n  fogNear: number;\n  fogFar: number;\n  antialias: boolean;\n  shadowMapEnabled: boolean;\n  shadowMapType: 'PCF' | 'PCFSoft' | 'Basic';\n  dateCreation: Date;\n  derniereModification: Date;\n}\n\n/**\n * Interface pour la caméra\n */\nexport interface ProprietesCamera {\n  position: { x: number; y: number; z: number };\n  target: { x: number; y: number; z: number };\n  fov: number;\n  near: number;\n  far: number;\n  type: 'perspective' | 'orthographic';\n}\n\n/**\n * Interface pour les contrôles de la scène\n */\nexport interface ControlesScene {\n  enableRotate: boolean;\n  enableZoom: boolean;\n  enablePan: boolean;\n  enableDamping: boolean;\n  dampingFactor: number;\n  rotateSpeed: number;\n  zoomSpeed: number;\n  panSpeed: number;\n  minDistance: number;\n  maxDistance: number;\n  minPolarAngle: number;\n  maxPolarAngle: number;\n}\n\n/**\n * Interface pour les lumières\n */\nexport interface ProprietesLumiere {\n  id: string;\n  type: 'ambient' | 'directional' | 'point' | 'spot';\n  position?: { x: number; y: number; z: number };\n  direction?: { x: number; y: number; z: number };\n  color: number;\n  intensity: number;\n  castShadow: boolean;\n  enabled: boolean;\n}\n\n/**\n * Interface pour les statistiques de la scène\n */\nexport interface StatistiquesScene {\n  nombreObjets: number;\n  nombreMurs: number;\n  nombreOuvertures: number;\n  nombreLumieres: number;\n  nombreTriangles: number;\n  memoireUtilisee: number;\n  fps: number;\n  tempsRendu: number;\n}\n\n/**\n * Service de gestion de la scène 3D\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SceneService {\n  \n  private sceneActuelle = new BehaviorSubject({\n    id: 'scene_principale',\n    nom: 'Scène Architecturale 3D',\n    largeur: 800,\n    hauteur: 600,\n    backgroundColor: 0x87CEEB, // Bleu ciel\n    fogColor: 0x87CEEB,\n    fogNear: 1,\n    fogFar: 100,\n    antialias: true,\n    shadowMapEnabled: true,\n    shadowMapType: 'PCFSoft',\n    dateCreation: new Date(),\n    derniereModification: new Date()\n  });\n\n  private cameraActuelle = new BehaviorSubject({\n    position: { x: 5, y: 5, z: 5 },\n    target: { x: 0, y: 0, z: 0 },\n    fov: 75,\n    near: 0.1,\n    far: 1000,\n    type: 'perspective'\n  });\n\n  private controlesActuels = new BehaviorSubject({\n    enableRotate: true,\n    enableZoom: true,\n    enablePan: true,\n    enableDamping: true,\n    dampingFactor: 0.05,\n    rotateSpeed: 1.0,\n    zoomSpeed: 1.0,\n    panSpeed: 1.0,\n    minDistance: 2,\n    maxDistance: 50,\n    minPolarAngle: 0,\n    maxPolarAngle: Math.PI\n  });\n\n  private lumiereActuelles = new BehaviorSubject([\n    {\n      id: 'lumiere_ambient',\n      type: 'ambient',\n      color: 0x404040,\n      intensity: 0.4,\n      castShadow: false,\n      enabled: true\n    },\n    {\n      id: 'lumiere_directionnelle',\n      type: 'directional',\n      position: { x: 10, y: 10, z: 5 },\n      direction: { x: -1, y: -1, z: -1 },\n      color: 0xffffff,\n      intensity: 1.0,\n      castShadow: true,\n      enabled: true\n    }\n  ]);\n\n  public scene$ = this.sceneActuelle.asObservable();\n  public camera$ = this.cameraActuelle.asObservable();\n  public controles$ = this.controlesActuels.asObservable();\n  public lumiere$ = this.lumiereActuelles.asObservable();\n\n  constructor(\n    private configurationService: ConfigurationService,\n    private murService: MurService,\n    private ouvertureService: OuvertureService\n  ) {\n    console.log('SceneService initialisé');\n  }\n\n  /**\n   * Obtenir les propriétés de la scène\n   */\n  getProprietesScene(): ProprietesScene {\n    return this.sceneActuelle.value;\n  }\n\n  /**\n   * Obtenir les propriétés de la scène en tant qu'Observable\n   */\n  getProprietesSceneObservable(): Observable {\n    return this.scene$;\n  }\n\n  /**\n   * Mettre à jour les propriétés de la scène\n   */\n  mettreAJourProprietesScene(nouvellesProprietes: Partial): void {\n    const proprietesActuelles = this.getProprietesScene();\n    const proprietesMisesAJour = {\n      ...proprietesActuelles,\n      ...nouvellesProprietes,\n      derniereModification: new Date()\n    };\n    \n    this.sceneActuelle.next(proprietesMisesAJour);\n    console.log('Propriétés de la scène mises à jour:', proprietesMisesAJour);\n  }\n\n  /**\n   * Obtenir les propriétés de la caméra\n   */\n  getProprietesCamera(): ProprietesCamera {\n    return this.cameraActuelle.value;\n  }\n\n  /**\n   * Obtenir les propriétés de la caméra en tant qu'Observable\n   */\n  getProprietesCameraObservable(): Observable {\n    return this.camera$;\n  }\n\n  /**\n   * Mettre à jour les propriétés de la caméra\n   */\n  mettreAJourProprietesCamera(nouvellesProprietes: Partial): void {\n    const proprietesActuelles = this.getProprietesCamera();\n    const proprietesMisesAJour = {\n      ...proprietesActuelles,\n      ...nouvellesProprietes\n    };\n    \n    this.cameraActuelle.next(proprietesMisesAJour);\n    console.log('Propriétés de la caméra mises à jour:', proprietesMisesAJour);\n  }\n\n  /**\n   * Obtenir les contrôles de la scène\n   */\n  getControlesScene(): ControlesScene {\n    return this.controlesActuels.value;\n  }\n\n  /**\n   * Obtenir les contrôles de la scène en tant qu'Observable\n   */\n  getControlesSceneObservable(): Observable {\n    return this.controles$;\n  }\n\n  /**\n   * Mettre à jour les contrôles de la scène\n   */\n  mettreAJourControlesScene(nouveauxControles: Partial): void {\n    const controlesActuels = this.getControlesScene();\n    const controlesMisesAJour = {\n      ...controlesActuels,\n      ...nouveauxControles\n    };\n    \n    this.controlesActuels.next(controlesMisesAJour);\n    console.log('Contrôles de la scène mis à jour:', controlesMisesAJour);\n  }\n\n  /**\n   * Obtenir les lumières\n   */\n  getLumieres(): ProprietesLumiere[] {\n    return this.lumiereActuelles.value;\n  }\n\n  /**\n   * Obtenir les lumières en tant qu'Observable\n   */\n  getLumieresObservable(): Observable {\n    return this.lumiere$;\n  }\n\n  /**\n   * Ajouter une nouvelle lumière\n   */\n  ajouterLumiere(nouvelleLumiere: Omit): void {\n    const lumiereComplete: ProprietesLumiere = {\n      ...nouvelleLumiere,\n      id: `lumiere_${Date.now()}`\n    };\n    \n    const lumiereActuelles = this.getLumieres();\n    lumiereActuelles.push(lumiereComplete);\n    this.lumiereActuelles.next(lumiereActuelles);\n  }\n\n  /**\n   * Supprimer une lumière\n   */\n  supprimerLumiere(id: string): void {\n    const lumiereActuelles = this.getLumieres();\n    const lumiereFiltrees = lumiereActuelles.filter(lumiere => lumiere.id !== id);\n    this.lumiereActuelles.next(lumiereFiltrees);\n  }\n\n  /**\n   * Modifier une lumière\n   */\n  modifierLumiere(id: string, nouvellesProprietes: Partial): void {\n    const lumiereActuelles = this.getLumieres();\n    const lumiereIndex = lumiereActuelles.findIndex(lumiere => lumiere.id === id);\n    \n    if (lumiereIndex !== -1) {\n      lumiereActuelles[lumiereIndex] = {\n        ...lumiereActuelles[lumiereIndex],\n        ...nouvellesProprietes\n      };\n      this.lumiereActuelles.next(lumiereActuelles);\n    }\n  }\n\n  /**\n   * Activer/Désactiver une lumière\n   */\n  toggleLumiere(id: string): void {\n    const lumiereActuelles = this.getLumieres();\n    const lumiereIndex = lumiereActuelles.findIndex(lumiere => lumiere.id === id);\n    \n    if (lumiereIndex !== -1) {\n      lumiereActuelles[lumiereIndex].enabled = !lumiereActuelles[lumiereIndex].enabled;\n      this.lumiereActuelles.next(lumiereActuelles);\n    }\n  }\n\n  /**\n   * Obtenir les statistiques de la scène\n   */\n  getStatistiquesScene(): StatistiquesScene {\n    const murs = this.murService.getMurs();\n    const ouvertures = this.ouvertureService.getOuvertures();\n    const lumiere = this.getLumieres();\n    \n    const nombreMurs = murs.length;\n    const nombreOuvertures = ouvertures.length;\n    const nombreLumieres = lumiere.length;\n    const nombreObjets = nombreMurs + nombreOuvertures + nombreLumieres;\n    \n    // Estimation du nombre de triangles (approximation)\n    const nombreTriangles = (nombreMurs * 12) + (nombreOuvertures * 8); // Estimation\n    \n    // Estimation de la mémoire utilisée (en MB)\n    const memoireUtilisee = (nombreTriangles * 0.001); // Approximation\n    \n    return {\n      nombreObjets,\n      nombreMurs,\n      nombreOuvertures,\n      nombreLumieres,\n      nombreTriangles,\n      memoireUtilisee: Math.round(memoireUtilisee * 100) / 100,\n      fps: 60, // Valeur par défaut\n      tempsRendu: 16.67 // 60 FPS = 16.67ms par frame\n    };\n  }\n\n  /**\n   * Réinitialiser la caméra à sa position par défaut\n   */\n  reinitialiserCamera(): void {\n    this.mettreAJourProprietesCamera({\n      position: { x: 5, y: 5, z: 5 },\n      target: { x: 0, y: 0, z: 0 }\n    });\n  }\n\n  /**\n   * Centrer la caméra sur un objet\n   */\n  centrerCameraSurObjet(position: { x: number; y: number; z: number }): void {\n    this.mettreAJourProprietesCamera({\n      target: position\n    });\n  }\n\n  /**\n   * Obtenir la distance entre la caméra et un point\n   */\n  calculerDistanceCamera(point: { x: number; y: number; z: number }): number {\n    const camera = this.getProprietesCamera();\n    const dx = camera.position.x - point.x;\n    const dy = camera.position.y - point.y;\n    const dz = camera.position.z - point.z;\n    \n    return Math.round(Math.sqrt(dx * dx + dy * dy + dz * dz) * 100) / 100;\n  }\n\n  /**\n   * Obtenir le point le plus proche de la caméra\n   */\n  getPointLePlusProcheDeCamera(): { x: number; y: number; z: number } | null {\n    const camera = this.getProprietesCamera();\n    const murs = this.murService.getMurs();\n    const ouvertures = this.ouvertureService.getOuvertures();\n    \n    let pointLePlusProche: { x: number; y: number; z: number } | null = null;\n    let distanceMin = Infinity;\n    \n    // Vérifier les murs\n    murs.forEach(mur => {\n      const distance = this.calculerDistanceCamera(mur.position);\n      if (distance  {\n      const distance = this.calculerDistanceCamera(ouverture.position);\n      if (distance \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Dimensions.html":{"url":"interfaces/Dimensions.html","title":"interface - Dimensions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Dimensions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/scene3d/controls/dimensions-controller.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les dimensions d'un élément\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            depth\n                                        \n                                \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        depth\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        depth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n/**\n * Interface pour les dimensions d'un élément\n */\nexport interface Dimensions {\n  width: number;\n  height: number;\n  depth: number;\n}\n\n/**\n * Interface pour les dimensions de structure\n */\nexport interface StructureDimensions {\n  longueur: number;\n  largeur: number;\n  hauteur: number;\n}\n\n/**\n * Composant pour contrôler les dimensions en temps réel\n */\n@Component({\n  selector: 'app-dimensions-controller',\n  imports: [CommonModule, FormsModule],\n  templateUrl: './dimensions-controller.component.html',\n  styleUrl: './dimensions-controller.component.css',\n  standalone: true\n})\nexport class DimensionsControllerComponent {\n  @Input() isVisible: boolean = false;\n  @Input() showStructureDimensions: boolean = true;\n  @Input() showElementDimensions: boolean = false;\n  @Input() elementName: string = 'Élément';\n  @Input() structureDimensions: StructureDimensions = { longueur: 8, largeur: 5, hauteur: 2.5 };\n  @Input() elementDimensions: Dimensions = { width: 1, height: 2, depth: 0.1 };\n  @Input() minDimensions: Dimensions = { width: 0.5, height: 1, depth: 0.01 };\n  @Input() maxDimensions: Dimensions = { width: 5, height: 4, depth: 1 };\n\n  @Output() structureDimensionsChange = new EventEmitter();\n  @Output() elementDimensionsChange = new EventEmitter();\n  @Output() resetRequested = new EventEmitter();\n  @Output() applyRequested = new EventEmitter();\n\n  onStructureDimensionsChange(): void {\n    this.structureDimensionsChange.emit({ ...this.structureDimensions });\n  }\n\n  onElementDimensionsChange(): void {\n    this.elementDimensionsChange.emit({ ...this.elementDimensions });\n  }\n\n  resetDimensions(): void {\n    this.structureDimensions = { longueur: 8, largeur: 5, hauteur: 2.5 };\n    this.elementDimensions = { width: 1, height: 2, depth: 0.1 };\n    this.resetRequested.emit();\n  }\n\n  applyDimensions(): void {\n    this.applyRequested.emit();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Dimensions3D.html":{"url":"interfaces/Dimensions3D.html","title":"interface - Dimensions3D","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Dimensions3D\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/config/building-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Dimensions 3D d'un objet\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            depth\n                                        \n                                \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        depth\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        depth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Position3D {\n  x: number;\n  y: number;\n  z: number;\n}\n\n/**\n * Dimensions 3D d'un objet\n * @param width - Largeur (axe X)\n * @param height - Hauteur (axe Y)\n * @param depth - Profondeur (axe Z)\n */\nexport interface Dimensions3D {\n  width: number;\n  height: number;\n  depth: number;\n}\n\n/**\n * Configuration d'un mur simple\n * @param position - Position du centre du mur\n * @param dimensions - Taille du mur\n * @param color - Couleur hexadécimale (ex: 0xaaaaaa)\n */\nexport interface WallConfig {\n  position: Position3D;\n  dimensions: Dimensions3D;\n  color: number;\n}\n\n/**\n * Configuration d'une ouverture (porte ou fenêtre)\n * @param position - Position du centre de l'ouverture\n * @param dimensions - Taille de l'ouverture\n * @param color - Couleur de l'élément\n * @param type - Type d'ouverture ('door' ou 'window')\n */\nexport interface OpeningConfig {\n  position: Position3D;\n  dimensions: Dimensions3D;\n  color: number;\n  type: 'door' | 'window';\n}\n\n/**\n * Configuration du mur principal avec ouvertures (façade)\n * @param contour - Points définissant la forme du mur\n * @param thickness - Épaisseur du mur\n * @param position - Position du mur dans l'espace\n * @param color - Couleur du mur\n * @param openings - Ouvertures (porte et fenêtres) dans ce mur\n */\nexport interface MainWallConfig {\n  contour: Position3D[];\n  thickness: number;\n  position: Position3D;\n  color: number;\n  openings: {\n    door: OpeningConfig;\n    window1: OpeningConfig;\n    window2: OpeningConfig;\n  };\n}\n\n/**\n * Configuration de la caméra et des contrôles\n * @param initial - Position et paramètres initiaux de la caméra\n * @param target - Point que la caméra regarde\n * @param controls - Paramètres des contrôles souris\n */\nexport interface CameraConfig {\n  initial: {\n    position: Position3D;\n    rotationX: number;  // Rotation verticale\n    rotationY: number;  // Rotation horizontale\n    zoom: number;       // Distance de la caméra\n  };\n  target: Position3D;   // Point central regardé par la caméra\n  controls: {\n    minZoom: number;      // Distance minimale\n    maxZoom: number;      // Distance maximale\n    rotationSpeed: number; // Vitesse de rotation\n    zoomSpeed: number;     // Vitesse de zoom\n  };\n}\n\n/**\n * Configuration de l'éclairage de la scène\n * @param ambient - Lumière ambiante (éclairage général)\n * @param directional - Lumière directionnelle (comme le soleil)\n */\nexport interface LightingConfig {\n  ambient: {\n    color: number;      // Couleur de la lumière ambiante\n    intensity: number;  // Intensité (0-1)\n  };\n  directional: {\n    color: number;      // Couleur de la lumière directionnelle\n    intensity: number;  // Intensité\n    position: Position3D; // Position de la source lumineuse\n    shadow: {\n      mapSize: number;  // Qualité des ombres (résolution)\n    };\n  };\n}\n\n/**\n * Configuration générale de la scène 3D\n * @param background - Couleur de fond de la scène\n * @param camera - Paramètres de la caméra (champ de vision, distances)\n */\nexport interface SceneConfig {\n  background: number;   // Couleur de fond (ex: 0xbfd1e5 = bleu ciel)\n  camera: {\n    fov: number;        // Champ de vision (field of view) en degrés\n    near: number;       // Distance de rendu minimale\n    far: number;        // Distance de rendu maximale\n  };\n}\n\n/**\n * ===============================================\n * CONFIGURATION PRINCIPALE DU BÂTIMENT\n * ===============================================\n * Toutes les données du modèle 3D sont centralisées ici\n */\nexport const BUILDING_CONFIG = {\n  \n  /**\n   * SCÈNE 3D - Paramètres généraux\n   */\n  scene: {\n    background: 0xbfd1e5,  // Couleur bleu ciel pour le fond\n    camera: {\n      fov: 75,             // Angle de vue (75° = vue naturelle)\n      near: 0.1,           // Objets plus proches que 0.1 non rendus\n      far: 1000            // Objets plus loin que 1000 non rendus\n    }\n  } as SceneConfig,\n\n  /**\n   * ÉCLAIRAGE - Lumières de la scène\n   */\n  lighting: {\n    ambient: {   \n      color: 0xffffff,     // Lumière blanche ambiante\n      intensity: 0.6       // 60% d'intensité (éclairage doux)\n    },\n    directional: {\n      color: 0xffffff,     // Lumière blanche directionnelle (soleil)\n      intensity: 1,        // 100% d'intensité\n      position: { x: 10, y: 20, z: 10 }, // Position du \"soleil\"\n      shadow: {\n        mapSize: 2048      // Résolution des ombres (2048x2048)\n      }\n    }\n  } as LightingConfig,\n\n  /**\n   * CAMÉRA - Point de vue et contrôles\n   */\n  camera: {\n    initial: {\n      position: { x: 10, y: 10, z: 9 }, // Position initiale de la caméra\n      rotationX: 0.3,                   // Inclinaison verticale\n      rotationY: 0.5,                   // Rotation horizontale\n      zoom: 15                          // Distance initiale\n    },\n    target: { x: 0, y: 1.25, z: 0 },   // Point regardé (centre du bâtiment)\n    controls: {\n      minZoom: 5,           // Distance minimale (zoom max)\n      maxZoom: 50,          // Distance maximale (zoom min)\n      rotationSpeed: 0.01,  // Sensibilité de rotation souris\n      zoomSpeed: 0.01       // Sensibilité du zoom molette\n    }\n  } as CameraConfig,\n\n  /**\n   * SOL - Plateforme de base\n   */\n  ground: {\n    position: { x: 0, y: -0.1, z: 0 }, // Légèrement sous le niveau 0\n    dimensions: { width: 8, height: 0.2, depth: 5 }, // 8x5m, épaisseur 20cm\n    color: 0x2E1E1A  \n  } as WallConfig,\n\n  /**\n   * TOIT - Couverture du bâtiment\n   */\n  roof: {\n    position: { x: 0, y: 2.6, z: 0 },  // Au-dessus des murs (2.5m + 0.1m)\n    dimensions: { width: 8.4, height: 0.2, depth: 5 }, \n    color: 0x4169e1       // Couleur bleu royal\n  } as WallConfig,\n\n  /**\n   * MUR PRINCIPAL (FAÇADE) - Mur avec ouvertures\n   * Ce mur utilise ExtrudeGeometry pour créer de vraies ouvertures\n   */\n  mainWall: {\n    contour: [\n      // Points définissant la forme rectangulaire du mur (8m x 2.5m)\n      { x: -4, y: 0, z: 0 },    // Coin bas gauche\n      { x: 4, y: 0, z: 0 },     // Coin bas droit\n      { x: 4, y: 2.5, z: 0 },   // Coin haut droit\n      { x: -4, y: 2.5, z: 0 },  // Coin haut gauche\n      { x: -4, y: 0, z: 0 }     // Retour au point de départ\n    ],\n    thickness: 0.2,             // Épaisseur du mur (20cm)\n    position: { x: 0, y: 0, z: 2.3 }, // Position du mur dans l'espace\n    color: 0xaaaaaa,            // Couleur gris clair\n    openings: {\n      // PORTE CENTRALE\n      door: {\n        position: { x: 0, y: 1.05, z: 2.3 },\n        dimensions: { width: 1, height: 2, depth: 0.05 }, // 1m x 2m\n        color: 0x00ff00,        // Couleur verte\n        type: 'door' as const\n      },\n      // PREMIÈRE FENÊTRE (gauche)\n      window1: {\n        position: { x: -2, y: 1.5, z: 2.3 }, \n        dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n        color: 0xff0000,        // Couleur rouge\n        type: 'window' as const\n      },\n      // DEUXIÈME FENÊTRE (droite)\n      window2: {\n        position: { x: 2, y: 1.5, z: 2.3 }, \n        dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n        color: 0xff0000,        // Couleur rouge\n        type: 'window' as const\n      }\n    }\n  } as MainWallConfig,\n\n\n  /**\n   * AUTRES MURS - Murs latéraux et arrière (murs pleins)\n   */\n  walls: {\n    // MUR ARRIÈRE\n    back: {\n      position: { x: 0, y: 0, z: -2.5 },\n      dimensions: { width: 8, height: 2.5, depth: 0.2 }, // 8m x 2.5m x 20cm\n      color: 0xaaaaaa,\n      openings: {\n        window1: {\n          position: { x: 0, y: 1.5, z: -2.2 },\n          dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n    },\n    // MUR GAUCHE\n    left: {\n      position: { x: -3.9, y: 1.25, z: 0 }, \n      dimensions: { width: 0.2, height: 2.5, depth: 5 }, // 20cm x 2.5m x 5m\n      color: 0xaaaaaa,\n      openings: {\n        window5: {\n          position: { x: -3.8, y: 1.5, z: 0 },\n          dimensions: { width: 1.2, height: 1.0, depth: 0.05 }, // 1.2m x 1m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n      // Couleur gris clair\n    },\n    // MUR DROIT\n    right: {\n      position: { x: 3.8, y: 0, z: 0 },\n      dimensions: { width: 0.2, height: 2.5, depth: 5 }, // 20cm x 2.5m x 5m\n      color: 0xaaaaaa,\n      openings: {\n        // PORTE D'ENTRÉE\n        door: {\n          position: { x: 3.8, y: 1.05, z: 0 },\n          dimensions: { width: 1, height: 2.1, depth: 0.05 }, // 1m x 2.1m\n          color: 0x00ff00,        // Couleur verte\n          type: 'door' as const\n        },\n        // FENÊTRE\n        window1: {\n          position: { x: 3.8, y: 1.5, z: 1.5 },\n          dimensions: { width: 1.2, height: 1.0, depth: 0.05 }, // 1.2m x 1m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n    }\n  },\n\n  /**\n   * AXES DE RÉFÉRENCE (REPÈRE) - Pour s'orienter dans l'espace\n   */\n  axes: {\n    size: 8,                  // Longueur des axes (8 unités)\n    labels: [\n      // Axe X (rouge) - gauche/droite\n      { text: 'X', position: { x: 10, y: 0, z: 0 }, color: 0xff0000 },\n      // Axe Y (vert) - bas/haut\n      { text: 'Y', position: { x: 0, y: 10, z: 0 }, color: 0x00ff00 },\n      // Axe Z (bleu) - avant/arrière\n      { text: 'Z', position: { x: 0, y: 0, z: 10 }, color: 0x0000ff }\n    ],\n    labelSize: { width: 0.2, height: 0.2, depth: 0.2 } // Taille des cubes de repère\n  }\n};\n\n/**\n * ===============================================\n * FONCTIONS UTILITAIRES\n * ===============================================\n * Calculs automatiques pour les ouvertures dans les murs\n */\nexport class WallCalculations {\n  \n  /**\n   * Calcule les coordonnées d'une ouverture de porte\n   * @param config - Configuration de la porte\n   * @returns Points définissant le trou rectangulaire pour la porte\n   */\n  static getDoorHole(config: OpeningConfig) {\n    const halfWidth = config.dimensions.width / 2;  // Demi-largeur de la porte\n    return [\n      // Rectangle partant du sol (y=0) jusqu'à la hauteur de la porte\n      { x: config.position.x - halfWidth, y: 0 },                    // Bas gauche\n      { x: config.position.x + halfWidth, y: 0 },                    // Bas droit\n      { x: config.position.x + halfWidth, y: config.dimensions.height }, // Haut droit\n      { x: config.position.x - halfWidth, y: config.dimensions.height }, // Haut gauche\n      { x: config.position.x - halfWidth, y: 0 }                     // Retour au début\n    ];\n  }\n\n  /**\n   * Calcule les coordonnées d'une ouverture de fenêtre\n   * @param config - Configuration de la fenêtre\n   * @param bottomOffset - Distance du sol au bas de la fenêtre (par défaut 0.9m)\n   * @returns Points définissant le trou rectangulaire pour la fenêtre\n   */\n  static getWindowHole(config: OpeningConfig, bottomOffset: number = 0.9) {\n    const halfWidth = config.dimensions.width / 2;  // Demi-largeur de la fenêtre\n    const bottom = bottomOffset;                     // Position du bas de la fenêtre\n    const top = bottom + config.dimensions.height;  // Position du haut de la fenêtre\n    \n    return [\n      // Rectangle surélevé par rapport au sol\n      { x: config.position.x - halfWidth, y: bottom }, // Bas gauche\n      { x: config.position.x + halfWidth, y: bottom }, // Bas droit\n      { x: config.position.x + halfWidth, y: top },    // Haut droit\n      { x: config.position.x - halfWidth, y: top },    // Haut gauche\n      { x: config.position.x - halfWidth, y: bottom }  // Retour au début\n    ];\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DimensionsControllerComponent.html":{"url":"components/DimensionsControllerComponent.html","title":"component - DimensionsControllerComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  DimensionsControllerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/scene3d/controls/dimensions-controller.component.ts\n\n\n\n    \n        Description\n    \n    \n        Composant pour contrôler les dimensions en temps réel\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-dimensions-controller\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./dimensions-controller.component.html\n            \n\n\n\n            \n                styleUrl\n                ./dimensions-controller.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyDimensions\n                            \n                            \n                                onElementDimensionsChange\n                            \n                            \n                                onStructureDimensionsChange\n                            \n                            \n                                resetDimensions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                elementDimensions\n                            \n                            \n                                elementName\n                            \n                            \n                                isVisible\n                            \n                            \n                                maxDimensions\n                            \n                            \n                                minDimensions\n                            \n                            \n                                showElementDimensions\n                            \n                            \n                                showStructureDimensions\n                            \n                            \n                                structureDimensions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                applyRequested\n                            \n                            \n                                elementDimensionsChange\n                            \n                            \n                                resetRequested\n                            \n                            \n                                structureDimensionsChange\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        elementDimensions\n                    \n                \n                \n                    \n                        Type :         Dimensions\n\n                    \n                \n                \n                    \n                        Default value : { width: 1, height: 2, depth: 0.1 }\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/dimensions-controller.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        elementName\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Élément'\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/dimensions-controller.component.ts:37\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        isVisible\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/dimensions-controller.component.ts:34\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        maxDimensions\n                    \n                \n                \n                    \n                        Type :         Dimensions\n\n                    \n                \n                \n                    \n                        Default value : { width: 5, height: 4, depth: 1 }\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/dimensions-controller.component.ts:41\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        minDimensions\n                    \n                \n                \n                    \n                        Type :         Dimensions\n\n                    \n                \n                \n                    \n                        Default value : { width: 0.5, height: 1, depth: 0.01 }\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/dimensions-controller.component.ts:40\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showElementDimensions\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/dimensions-controller.component.ts:36\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showStructureDimensions\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/dimensions-controller.component.ts:35\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        structureDimensions\n                    \n                \n                \n                    \n                        Type :         StructureDimensions\n\n                    \n                \n                \n                    \n                        Default value : { longueur: 8, largeur: 5, hauteur: 2.5 }\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/dimensions-controller.component.ts:38\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        applyRequested\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/dimensions-controller.component.ts:46\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        elementDimensionsChange\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/dimensions-controller.component.ts:44\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resetRequested\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/dimensions-controller.component.ts:45\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        structureDimensionsChange\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/dimensions-controller.component.ts:43\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        applyDimensions\n                        \n                    \n                \n            \n            \n                \napplyDimensions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/dimensions-controller.component.ts:62\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onElementDimensionsChange\n                        \n                    \n                \n            \n            \n                \nonElementDimensionsChange()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/dimensions-controller.component.ts:52\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onStructureDimensionsChange\n                        \n                    \n                \n            \n            \n                \nonStructureDimensionsChange()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/dimensions-controller.component.ts:48\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetDimensions\n                        \n                    \n                \n            \n            \n                \nresetDimensions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/dimensions-controller.component.ts:56\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n/**\n * Interface pour les dimensions d'un élément\n */\nexport interface Dimensions {\n  width: number;\n  height: number;\n  depth: number;\n}\n\n/**\n * Interface pour les dimensions de structure\n */\nexport interface StructureDimensions {\n  longueur: number;\n  largeur: number;\n  hauteur: number;\n}\n\n/**\n * Composant pour contrôler les dimensions en temps réel\n */\n@Component({\n  selector: 'app-dimensions-controller',\n  imports: [CommonModule, FormsModule],\n  templateUrl: './dimensions-controller.component.html',\n  styleUrl: './dimensions-controller.component.css',\n  standalone: true\n})\nexport class DimensionsControllerComponent {\n  @Input() isVisible: boolean = false;\n  @Input() showStructureDimensions: boolean = true;\n  @Input() showElementDimensions: boolean = false;\n  @Input() elementName: string = 'Élément';\n  @Input() structureDimensions: StructureDimensions = { longueur: 8, largeur: 5, hauteur: 2.5 };\n  @Input() elementDimensions: Dimensions = { width: 1, height: 2, depth: 0.1 };\n  @Input() minDimensions: Dimensions = { width: 0.5, height: 1, depth: 0.01 };\n  @Input() maxDimensions: Dimensions = { width: 5, height: 4, depth: 1 };\n\n  @Output() structureDimensionsChange = new EventEmitter();\n  @Output() elementDimensionsChange = new EventEmitter();\n  @Output() resetRequested = new EventEmitter();\n  @Output() applyRequested = new EventEmitter();\n\n  onStructureDimensionsChange(): void {\n    this.structureDimensionsChange.emit({ ...this.structureDimensions });\n  }\n\n  onElementDimensionsChange(): void {\n    this.elementDimensionsChange.emit({ ...this.elementDimensions });\n  }\n\n  resetDimensions(): void {\n    this.structureDimensions = { longueur: 8, largeur: 5, hauteur: 2.5 };\n    this.elementDimensions = { width: 1, height: 2, depth: 0.1 };\n    this.resetRequested.emit();\n  }\n\n  applyDimensions(): void {\n    this.applyRequested.emit();\n  }\n}\n\n    \n\n    \n        \n  📏 Dimensions Temps Réel\n  \n  \n    Structure\n    \n      Longueur (m)\n      \n      {{ structureDimensions.longueur }}m\n    \n\n    \n      Largeur (m)\n      \n      {{ structureDimensions.largeur }}m\n    \n\n    \n      Hauteur (m)\n      \n      {{ structureDimensions.hauteur }}m\n    \n  \n\n  \n  \n    {{ elementName }}\n    \n      Largeur (m)\n      \n      {{ elementDimensions.width }}m\n    \n\n    \n      Hauteur (m)\n      \n      {{ elementDimensions.height }}m\n    \n\n    \n      Profondeur (m)\n      \n      {{ elementDimensions.depth }}m\n    \n  \n\n  \n  \n    \n      🔄 Réinitialiser\n    \n\n    \n       Appliquer\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  📏 Dimensions Temps Réel        Structure          Longueur (m)            {{ structureDimensions.longueur }}m              Largeur (m)            {{ structureDimensions.largeur }}m              Hauteur (m)            {{ structureDimensions.hauteur }}m              {{ elementName }}          Largeur (m)            {{ elementDimensions.width }}m              Hauteur (m)            {{ elementDimensions.height }}m              Profondeur (m)            {{ elementDimensions.depth }}m                    🔄 Réinitialiser               Appliquer      '\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'CalculateurFenetresComponent', 'selector': 'app-calculateur-fenetres'},{'name': 'ColorSelectorComponent', 'selector': 'app-color-selector'},{'name': 'DimensionsControllerComponent', 'selector': 'app-dimensions-controller'},{'name': 'FenetresCalculatorComponent', 'selector': 'app-fenetres-calculator'},{'name': 'MursControllerComponent', 'selector': 'app-murs-controller'},{'name': 'OuverturesControllerComponent', 'selector': 'app-ouvertures-controller'},{'name': 'Scene3d', 'selector': 'app-scene3d'},{'name': 'Scene3dCoreComponent', 'selector': 'app-scene3d-core'},{'name': 'Scene3dRefactored', 'selector': 'app-scene3d'},{'name': 'StructureControllerComponent', 'selector': 'app-structure-controller'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DimensionsControllerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FenetreConfig.html":{"url":"interfaces/FenetreConfig.html","title":"interface - FenetreConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FenetreConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/calculateur-fenetres/calculateur-fenetres.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            dimensions\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dimensions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dimensions:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface FenetreConfig {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  color: number;\n  type: 'window';\n}\n\nexport interface MurConfig {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  color: number;\n}\n\nexport interface CalculFenetres {\n  nombreMaxFenetres: number;\n  largeurFenetreOptimale: number;\n  ecartOptimal: number;\n  positionsCalculees: Array;\n  largeurTotaleUtilisee: number;\n  margeRestante: number;\n  isValid: boolean;\n  message: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CalculateurFenetresService {\n\n  // Contraintes par défaut\n  private readonly CONTRAINTES = {\n    largeurFenetreMin: 0.5,      // Largeur minimale d'une fenêtre (m)\n    largeurFenetreMax: 3.0,      // Largeur maximale d'une fenêtre (m)\n    hauteurFenetreMin: 0.8,      // Hauteur minimale d'une fenêtre (m)\n    hauteurFenetreMax: 2.5,      // Hauteur maximale d'une fenêtre (m)\n    ecartMin: 0.1,               // Écart minimum entre fenêtres (m)\n    ecartMax: 2.0,               // Écart maximum entre fenêtres (m)\n    margeMin: 0.2,               // Marge minimum des bords du mur (m)\n    hauteurMurMin: 1.0           // Hauteur minimale du mur (m)\n  };\n\n  constructor() {\n    console.log('CalculateurFenetresService initialisé');\n  }\n\n  /**\n   * Calcule le nombre maximum de fenêtres pour un mur donné\n   */\n  public calculerNombreMaxFenetres(\n    mur: MurConfig,\n    largeurFenetre: number = 1.5,\n    ecart: number = 0.5,\n    hauteurFenetre: number = 1.2\n  ): CalculFenetres {\n    \n    console.log('Calcul du nombre max de fenêtres pour le mur:', {\n      largeurMur: mur.dimensions.width,\n      hauteurMur: mur.dimensions.height,\n      largeurFenetre,\n      ecart,\n      hauteurFenetre\n    });\n\n    // Validation des contraintes\n    const validation = this.validerContraintes(mur, largeurFenetre, ecart, hauteurFenetre);\n    if (!validation.isValid) {\n      return {\n        nombreMaxFenetres: 0,\n        largeurFenetreOptimale: 0,\n        ecartOptimal: 0,\n        positionsCalculees: [],\n        largeurTotaleUtilisee: 0,\n        margeRestante: 0,\n        isValid: false,\n        message: validation.message\n      };\n    }\n\n    // Calcul du nombre maximum de fenêtres\n    const largeurDisponible = mur.dimensions.width - (2 * this.CONTRAINTES.margeMin);\n    const largeurParFenetre = largeurFenetre + ecart;\n    const nombreMaxFenetres = Math.floor(largeurDisponible / largeurParFenetre);\n\n    // Calcul des positions optimales\n    const positions = this.calculerPositionsOptimales(\n      mur, \n      nombreMaxFenetres, \n      largeurFenetre, \n      ecart, \n      hauteurFenetre\n    );\n\n    // Calcul de la largeur totale utilisée\n    const largeurTotaleUtilisee = (nombreMaxFenetres * largeurFenetre) + ((nombreMaxFenetres - 1) * ecart);\n    const margeRestante = mur.dimensions.width - largeurTotaleUtilisee;\n\n    const resultat: CalculFenetres = {\n      nombreMaxFenetres,\n      largeurFenetreOptimale: largeurFenetre,\n      ecartOptimal: ecart,\n      positionsCalculees: positions,\n      largeurTotaleUtilisee,\n      margeRestante,\n      isValid: true,\n      message: `✅ ${nombreMaxFenetres} fenêtre(s) possible(s) avec ${margeRestante.toFixed(2)}m de marge`\n    };\n\n    console.log(' Résultat du calcul:', resultat);\n    return resultat;\n  }\n\n  /**\n   * Calcule les positions optimales pour les fenêtres\n   */\n  private calculerPositionsOptimales(\n    mur: MurConfig,\n    nombreFenetres: number,\n    largeurFenetre: number,\n    ecart: number,\n    hauteurFenetre: number\n  ): Array {\n    \n    const positions: Array = [];\n    \n    if (nombreFenetres === 0) {\n      return positions;\n    }\n\n    // Calcul de la largeur totale utilisée\n    const largeurTotale = (nombreFenetres * largeurFenetre) + ((nombreFenetres - 1) * ecart);\n    \n    // Position de départ (centrée)\n    const debut = mur.position.x - (largeurTotale / 2) + (largeurFenetre / 2);\n    \n    // Hauteur des fenêtres (centrée verticalement)\n    const hauteurMur = mur.dimensions.height;\n    const yPosition = mur.position.y + (hauteurMur / 2) - (hauteurFenetre / 2);\n    \n    // Calcul des positions\n    for (let i = 0; i  this.CONTRAINTES.largeurFenetreMax) {\n      return {\n        isValid: false,\n        message: `❌ Largeur de fenêtre trop grande (max: ${this.CONTRAINTES.largeurFenetreMax}m)`\n      };\n    }\n\n    // Vérification de la hauteur de la fenêtre\n    if (hauteurFenetre  this.CONTRAINTES.hauteurFenetreMax) {\n      return {\n        isValid: false,\n        message: `❌ Hauteur de fenêtre trop grande (max: ${this.CONTRAINTES.hauteurFenetreMax}m)`\n      };\n    }\n\n    // Vérification de l'écart\n    if (ecart  this.CONTRAINTES.ecartMax) {\n      return {\n        isValid: false,\n        message: `❌ Écart trop grand (max: ${this.CONTRAINTES.ecartMax}m)`\n      };\n    }\n\n    // Vérification de la hauteur du mur\n    if (mur.dimensions.height  mur.dimensions.height) {\n      return {\n        isValid: false,\n        message: `❌ Fenêtre trop haute pour le mur (mur: ${mur.dimensions.height}m, fenêtre: ${hauteurFenetre}m)`\n      };\n    }\n\n    // Vérification de l'espace disponible\n    const largeurDisponible = mur.dimensions.width - (2 * this.CONTRAINTES.margeMin);\n    const largeurMinimale = largeurFenetre + ecart;\n    \n    if (largeurDisponible  calcul.nombreMaxFenetres) {\n      return {\n        fenetres: [],\n        isValid: false,\n        message: `❌ Trop de fenêtres demandées (max: ${calcul.nombreMaxFenetres})`\n      };\n    }\n\n    const fenetres: FenetreConfig[] = [];\n    \n    for (let i = 0; i  0'\n      };\n    }\n\n    const largeurDisponible = mur.dimensions.width - (2 * this.CONTRAINTES.margeMin);\n    \n    // Calcul de l'écart optimal (équilibre entre fenêtres et espacement)\n    const ecartOptimal = Math.max(this.CONTRAINTES.ecartMin, largeurDisponible * 0.1);\n    \n    // Calcul de la largeur de fenêtre optimale\n    const largeurFenetreOptimale = (largeurDisponible - ((nombreFenetres - 1) * ecartOptimal)) / nombreFenetres;\n    \n    // Vérification des contraintes\n    if (largeurFenetreOptimale  {\n      resultats[nomMur] = this.calculerNombreMaxFenetres(mur);\n    });\n    \n    return resultats;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FenetresCalculatorComponent.html":{"url":"components/FenetresCalculatorComponent.html","title":"component - FenetresCalculatorComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  FenetresCalculatorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/scene3d/calculators/fenetres-calculator.component.ts\n\n\n\n    \n        Description\n    \n    \n        Composant pour le calculateur de fenêtres\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-fenetres-calculator\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                \n            \n\n\n            \n                styles\n                \n    .fenetres-calculator {\n      background: #f8f9fa;\n      border: 1px solid #dee2e6;\n      border-radius: 8px;\n      padding: 20px;\n      margin: 10px 0;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n\n    .fenetres-calculator h3 {\n      margin: 0 0 15px 0;\n      color: #495057;\n      font-size: 1.1em;\n      font-weight: 600;\n    }\n\n    .mur-selection {\n      margin-bottom: 20px;\n    }\n\n    .mur-selection label {\n      display: block;\n      margin-bottom: 5px;\n      font-weight: 500;\n      color: #495057;\n    }\n\n    .mur-select, .param-select {\n      width: 100%;\n      padding: 8px 12px;\n      border: 1px solid #ced4da;\n      border-radius: 4px;\n      background: white;\n      font-size: 0.9em;\n    }\n\n    .mur-info {\n      background: white;\n      border: 1px solid #e9ecef;\n      border-radius: 6px;\n      padding: 15px;\n      margin-bottom: 20px;\n    }\n\n    .mur-info h4 {\n      margin: 0 0 10px 0;\n      color: #495057;\n      font-size: 1em;\n    }\n\n    .info-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n      gap: 10px;\n    }\n\n    .info-item {\n      display: flex;\n      justify-content: space-between;\n      padding: 5px 0;\n    }\n\n    .label {\n      font-weight: 500;\n      color: #6c757d;\n    }\n\n    .value {\n      font-weight: 600;\n      color: #495057;\n    }\n\n    .fenetres-params {\n      background: white;\n      border: 1px solid #e9ecef;\n      border-radius: 6px;\n      padding: 15px;\n      margin-bottom: 20px;\n    }\n\n    .fenetres-params h4 {\n      margin: 0 0 15px 0;\n      color: #495057;\n      font-size: 1em;\n    }\n\n    .param-group {\n      margin-bottom: 15px;\n    }\n\n    .param-group label {\n      display: block;\n      margin-bottom: 5px;\n      font-weight: 500;\n      color: #495057;\n    }\n\n    .param-slider {\n      width: 100%;\n      height: 6px;\n      border-radius: 3px;\n      background: #ddd;\n      outline: none;\n      -webkit-appearance: none;\n    }\n\n    .param-slider::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      appearance: none;\n      width: 18px;\n      height: 18px;\n      border-radius: 50%;\n      background: #007bff;\n      cursor: pointer;\n      border: 2px solid #fff;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n    }\n\n    .slider-value {\n      display: inline-block;\n      margin-left: 10px;\n      font-weight: 600;\n      color: #007bff;\n    }\n\n    .param-color {\n      width: 100%;\n      height: 40px;\n      border: 1px solid #ced4da;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n\n    .calcul-results {\n      background: white;\n      border: 1px solid #e9ecef;\n      border-radius: 6px;\n      padding: 15px;\n      margin-bottom: 20px;\n    }\n\n    .calcul-results h4 {\n      margin: 0 0 15px 0;\n      color: #495057;\n      font-size: 1em;\n    }\n\n    .result-item {\n      display: flex;\n      align-items: flex-start;\n      gap: 10px;\n      padding: 10px;\n      border-radius: 4px;\n      border: 1px solid #e9ecef;\n    }\n\n    .result-item.valid {\n      background: #d4edda;\n      border-color: #c3e6cb;\n    }\n\n    .result-item.invalid {\n      background: #f8d7da;\n      border-color: #f5c6cb;\n    }\n\n    .result-icon {\n      font-size: 1.2em;\n    }\n\n    .result-content {\n      flex: 1;\n    }\n\n    .result-message {\n      font-weight: 500;\n      margin-bottom: 10px;\n    }\n\n    .result-details {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n      gap: 8px;\n    }\n\n    .detail-item {\n      display: flex;\n      justify-content: space-between;\n      font-size: 0.9em;\n    }\n\n    .action-buttons {\n      display: flex;\n      gap: 10px;\n    }\n\n    .btn {\n      padding: 8px 16px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      font-weight: 500;\n      transition: all 0.2s ease;\n    }\n\n    .btn:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n\n    .btn-primary {\n      background: #007bff;\n      color: white;\n    }\n\n    .btn-primary:hover:not(:disabled) {\n      background: #0056b3;\n    }\n\n    .btn-secondary {\n      background: #6c757d;\n      color: white;\n    }\n\n    .btn-secondary:hover {\n      background: #545b62;\n    }\n  \n            \n\n            \n                template\n                \n  🧮 Calculateur de Fenêtres\n\n  \n  \n    Mur à modifier :\n    \n      -- Sélectionner un mur --\n      \n        {{ mur.nom }} ({{ mur.dimensions.width }}m × {{ mur.dimensions.height }}m)\n      \n    \n  \n\n  \n  \n    📐 Informations du Mur\n    \n      \n        Largeur :\n        {{ murSelectionne.dimensions.width }}m\n      \n      \n        Hauteur :\n        {{ murSelectionne.dimensions.height }}m\n      \n      \n        Profondeur :\n        {{ murSelectionne.dimensions.depth }}m\n      \n    \n  \n\n  \n  \n    🪟 Paramètres des Fenêtres\n\n    \n    \n      Taille des fenêtres :\n      \n        Petit (0.8m × 1.0m)\n        Moyen (1.2m × 1.5m)\n        Grand (1.8m × 2.0m)\n      \n    \n\n    \n    \n      Écart entre fenêtres (m) :\n      \n      {{ parametresFenetres.ecart }}m\n    \n\n    \n    \n      Nombre de fenêtres :\n      \n      {{ parametresFenetres.nombreFenetres }}\n    \n\n    \n    \n      Couleur des fenêtres :\n      \n    \n  \n\n  \n  \n    📊 Résultats du Calcul\n\n    \n      \n        {{ calculResultat.isValid ? '✅' : '⚠️' }}\n      \n      \n        {{ calculResultat.message }}\n        \n          \n            Largeur fenêtre :\n            {{ calculResultat.largeurFenetreOptimale }}m\n          \n          \n            Écart optimal :\n            {{ calculResultat.ecartOptimal }}m\n          \n          \n            Largeur totale utilisée :\n            {{ calculResultat.largeurTotaleUtilisee }}m\n          \n          \n            Marge restante :\n            {{ calculResultat.margeRestante }}m\n          \n        \n      \n    \n  \n\n  \n  \n    \n      ✅ Appliquer Configuration\n    \n\n    \n      🔄 Réinitialiser\n    \n  \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                calculResultat\n                            \n                            \n                                murSelectionne\n                            \n                            \n                                taillesFenetres\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                appliquerConfiguration\n                            \n                            \n                                calculerFenetres\n                            \n                            \n                                onMurChange\n                            \n                            \n                                reinitialiserParametres\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                isVisible\n                            \n                            \n                                mursDisponibles\n                            \n                            \n                                parametresFenetres\n                            \n                            \n                                selectedMurId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                configurationApplied\n                            \n                            \n                                murSelected\n                            \n                            \n                                parametresReset\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(calculateurFenetresService: CalculateurFenetresService)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/scene3d/calculators/fenetres-calculator.component.ts:436\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        calculateurFenetresService\n                                                  \n                                                        \n                                                                        CalculateurFenetresService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        isVisible\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/calculators/fenetres-calculator.component.ts:415\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        mursDisponibles\n                    \n                \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/calculators/fenetres-calculator.component.ts:416\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        parametresFenetres\n                    \n                \n                \n                    \n                        Type :         FenetresParams\n\n                    \n                \n                \n                    \n                        Default value : {\n    tailleFenetre: 'moyen',\n    ecart: 0.5,\n    nombreFenetres: 2,\n    couleur: '#87CEEB'\n  }\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/calculators/fenetres-calculator.component.ts:418\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedMurId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/calculators/fenetres-calculator.component.ts:417\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        configurationApplied\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/calculators/fenetres-calculator.component.ts:426\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        murSelected\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/calculators/fenetres-calculator.component.ts:425\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        parametresReset\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/calculators/fenetres-calculator.component.ts:427\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        appliquerConfiguration\n                        \n                    \n                \n            \n            \n                \nappliquerConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/calculators/fenetres-calculator.component.ts:468\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        calculerFenetres\n                        \n                    \n                \n            \n            \n                \ncalculerFenetres()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/calculators/fenetres-calculator.component.ts:448\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onMurChange\n                        \n                    \n                \n            \n            \n                \nonMurChange()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/calculators/fenetres-calculator.component.ts:440\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reinitialiserParametres\n                        \n                    \n                \n            \n            \n                \nreinitialiserParametres()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/calculators/fenetres-calculator.component.ts:478\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        calculResultat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CalculFenetres | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/components/scene3d/calculators/fenetres-calculator.component.ts:429\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        murSelectionne\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/components/scene3d/calculators/fenetres-calculator.component.ts:436\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        taillesFenetres\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    petit: { largeur: 0.8, hauteur: 1.0, nom: 'Petit' },\n    moyen: { largeur: 1.2, hauteur: 1.5, nom: 'Moyen' },\n    grand: { largeur: 1.8, hauteur: 2.0, nom: 'Grand' }\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/components/scene3d/calculators/fenetres-calculator.component.ts:431\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { CalculateurFenetresService, MurConfig, CalculFenetres } from '../../../services/calculateur-fenetres/calculateur-fenetres.service';\n\n/**\n * Interface pour les paramètres de fenêtres\n */\nexport interface FenetresParams {\n  tailleFenetre: string;\n  ecart: number;\n  nombreFenetres: number;\n  couleur: string;\n}\n\n/**\n * Composant pour le calculateur de fenêtres\n */\n@Component({\n  selector: 'app-fenetres-calculator',\n  imports: [CommonModule, FormsModule],\n  template: `\n    \n      🧮 Calculateur de Fenêtres\n      \n      \n      \n        Mur à modifier :\n        \n          -- Sélectionner un mur --\n          \n            {{ mur.nom }} ({{ mur.dimensions.width }}m × {{ mur.dimensions.height }}m)\n          \n        \n      \n\n      \n      \n        📐 Informations du Mur\n        \n          \n            Largeur :\n            {{ murSelectionne.dimensions.width }}m\n          \n          \n            Hauteur :\n            {{ murSelectionne.dimensions.height }}m\n          \n          \n            Profondeur :\n            {{ murSelectionne.dimensions.depth }}m\n          \n        \n      \n\n      \n      \n        🪟 Paramètres des Fenêtres\n        \n        \n        \n          Taille des fenêtres :\n          \n            Petit (0.8m × 1.0m)\n            Moyen (1.2m × 1.5m)\n            Grand (1.8m × 2.0m)\n          \n        \n\n        \n        \n          Écart entre fenêtres (m) :\n          \n          {{ parametresFenetres.ecart }}m\n        \n\n        \n        \n          Nombre de fenêtres :\n          \n          {{ parametresFenetres.nombreFenetres }}\n        \n\n        \n        \n          Couleur des fenêtres :\n          \n        \n      \n\n      \n      \n        📊 Résultats du Calcul\n        \n        \n          \n            {{ calculResultat.isValid ? '✅' : '⚠️' }}\n          \n          \n            {{ calculResultat.message }}\n            \n              \n                Largeur fenêtre :\n                {{ calculResultat.largeurFenetreOptimale }}m\n              \n              \n                Écart optimal :\n                {{ calculResultat.ecartOptimal }}m\n              \n              \n                Largeur totale utilisée :\n                {{ calculResultat.largeurTotaleUtilisee }}m\n              \n              \n                Marge restante :\n                {{ calculResultat.margeRestante }}m\n              \n            \n          \n        \n      \n\n      \n      \n        \n          ✅ Appliquer Configuration\n        \n        \n        \n          🔄 Réinitialiser\n        \n      \n    \n  `,\n  styles: [`\n    .fenetres-calculator {\n      background: #f8f9fa;\n      border: 1px solid #dee2e6;\n      border-radius: 8px;\n      padding: 20px;\n      margin: 10px 0;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n\n    .fenetres-calculator h3 {\n      margin: 0 0 15px 0;\n      color: #495057;\n      font-size: 1.1em;\n      font-weight: 600;\n    }\n\n    .mur-selection {\n      margin-bottom: 20px;\n    }\n\n    .mur-selection label {\n      display: block;\n      margin-bottom: 5px;\n      font-weight: 500;\n      color: #495057;\n    }\n\n    .mur-select, .param-select {\n      width: 100%;\n      padding: 8px 12px;\n      border: 1px solid #ced4da;\n      border-radius: 4px;\n      background: white;\n      font-size: 0.9em;\n    }\n\n    .mur-info {\n      background: white;\n      border: 1px solid #e9ecef;\n      border-radius: 6px;\n      padding: 15px;\n      margin-bottom: 20px;\n    }\n\n    .mur-info h4 {\n      margin: 0 0 10px 0;\n      color: #495057;\n      font-size: 1em;\n    }\n\n    .info-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n      gap: 10px;\n    }\n\n    .info-item {\n      display: flex;\n      justify-content: space-between;\n      padding: 5px 0;\n    }\n\n    .label {\n      font-weight: 500;\n      color: #6c757d;\n    }\n\n    .value {\n      font-weight: 600;\n      color: #495057;\n    }\n\n    .fenetres-params {\n      background: white;\n      border: 1px solid #e9ecef;\n      border-radius: 6px;\n      padding: 15px;\n      margin-bottom: 20px;\n    }\n\n    .fenetres-params h4 {\n      margin: 0 0 15px 0;\n      color: #495057;\n      font-size: 1em;\n    }\n\n    .param-group {\n      margin-bottom: 15px;\n    }\n\n    .param-group label {\n      display: block;\n      margin-bottom: 5px;\n      font-weight: 500;\n      color: #495057;\n    }\n\n    .param-slider {\n      width: 100%;\n      height: 6px;\n      border-radius: 3px;\n      background: #ddd;\n      outline: none;\n      -webkit-appearance: none;\n    }\n\n    .param-slider::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      appearance: none;\n      width: 18px;\n      height: 18px;\n      border-radius: 50%;\n      background: #007bff;\n      cursor: pointer;\n      border: 2px solid #fff;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n    }\n\n    .slider-value {\n      display: inline-block;\n      margin-left: 10px;\n      font-weight: 600;\n      color: #007bff;\n    }\n\n    .param-color {\n      width: 100%;\n      height: 40px;\n      border: 1px solid #ced4da;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n\n    .calcul-results {\n      background: white;\n      border: 1px solid #e9ecef;\n      border-radius: 6px;\n      padding: 15px;\n      margin-bottom: 20px;\n    }\n\n    .calcul-results h4 {\n      margin: 0 0 15px 0;\n      color: #495057;\n      font-size: 1em;\n    }\n\n    .result-item {\n      display: flex;\n      align-items: flex-start;\n      gap: 10px;\n      padding: 10px;\n      border-radius: 4px;\n      border: 1px solid #e9ecef;\n    }\n\n    .result-item.valid {\n      background: #d4edda;\n      border-color: #c3e6cb;\n    }\n\n    .result-item.invalid {\n      background: #f8d7da;\n      border-color: #f5c6cb;\n    }\n\n    .result-icon {\n      font-size: 1.2em;\n    }\n\n    .result-content {\n      flex: 1;\n    }\n\n    .result-message {\n      font-weight: 500;\n      margin-bottom: 10px;\n    }\n\n    .result-details {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n      gap: 8px;\n    }\n\n    .detail-item {\n      display: flex;\n      justify-content: space-between;\n      font-size: 0.9em;\n    }\n\n    .action-buttons {\n      display: flex;\n      gap: 10px;\n    }\n\n    .btn {\n      padding: 8px 16px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      font-weight: 500;\n      transition: all 0.2s ease;\n    }\n\n    .btn:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n\n    .btn-primary {\n      background: #007bff;\n      color: white;\n    }\n\n    .btn-primary:hover:not(:disabled) {\n      background: #0056b3;\n    }\n\n    .btn-secondary {\n      background: #6c757d;\n      color: white;\n    }\n\n    .btn-secondary:hover {\n      background: #545b62;\n    }\n  `],\n  standalone: true\n})\nexport class FenetresCalculatorComponent {\n  @Input() isVisible: boolean = false;\n  @Input() mursDisponibles: Array = [];\n  @Input() selectedMurId: string = '';\n  @Input() parametresFenetres: FenetresParams = {\n    tailleFenetre: 'moyen',\n    ecart: 0.5,\n    nombreFenetres: 2,\n    couleur: '#87CEEB'\n  };\n\n  @Output() murSelected = new EventEmitter();\n  @Output() configurationApplied = new EventEmitter();\n  @Output() parametresReset = new EventEmitter();\n\n  calculResultat: CalculFenetres | null = null;\n\n  taillesFenetres: { [key: string]: { largeur: number; hauteur: number; nom: string } } = {\n    petit: { largeur: 0.8, hauteur: 1.0, nom: 'Petit' },\n    moyen: { largeur: 1.2, hauteur: 1.5, nom: 'Moyen' },\n    grand: { largeur: 1.8, hauteur: 2.0, nom: 'Grand' }\n  };\n  murSelectionne: { id: string; nom: string; dimensions: { width: number; height: number; depth: number } } | null = null;\n\n  constructor(private calculateurFenetresService: CalculateurFenetresService) {}\n\n  onMurChange(): void {\n    this.murSelectionne = this.mursDisponibles.find(m => m.id === this.selectedMurId) || null;\n    if (this.murSelectionne) {\n      this.calculerFenetres();\n    }\n    this.murSelected.emit(this.selectedMurId);\n  }\n\n  calculerFenetres(): void {\n    if (!this.murSelectionne) return;\n\n    const murConfig: MurConfig = {\n      position: { x: 0, y: 0, z: 0 },\n      dimensions: this.murSelectionne.dimensions,\n      color: 0xaaaaaa\n    };\n\n    // Récupérer les dimensions de la taille de fenêtre sélectionnée\n    const taille = this.taillesFenetres[this.parametresFenetres.tailleFenetre];\n    \n    this.calculResultat = this.calculateurFenetresService.calculerNombreMaxFenetres(\n      murConfig,\n      taille.largeur,\n      this.parametresFenetres.ecart,\n      taille.hauteur\n    );\n  }\n\n  appliquerConfiguration(): void {\n    if (this.murSelectionne && this.calculResultat?.isValid) {\n      this.configurationApplied.emit({\n        murId: this.murSelectionne.id,\n        parametres: { ...this.parametresFenetres },\n        calcul: this.calculResultat\n      });\n    }\n  }\n\n  reinitialiserParametres(): void {\n    this.parametresFenetres = {\n      tailleFenetre: 'moyen',\n      ecart: 0.5,\n      nombreFenetres: 2,\n      couleur: '#87CEEB'\n    };\n    this.calculResultat = null;\n    this.parametresReset.emit();\n  }\n}\n\n    \n\n\n    \n            \n    .fenetres-calculator {\n      background: #f8f9fa;\n      border: 1px solid #dee2e6;\n      border-radius: 8px;\n      padding: 20px;\n      margin: 10px 0;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n\n    .fenetres-calculator h3 {\n      margin: 0 0 15px 0;\n      color: #495057;\n      font-size: 1.1em;\n      font-weight: 600;\n    }\n\n    .mur-selection {\n      margin-bottom: 20px;\n    }\n\n    .mur-selection label {\n      display: block;\n      margin-bottom: 5px;\n      font-weight: 500;\n      color: #495057;\n    }\n\n    .mur-select, .param-select {\n      width: 100%;\n      padding: 8px 12px;\n      border: 1px solid #ced4da;\n      border-radius: 4px;\n      background: white;\n      font-size: 0.9em;\n    }\n\n    .mur-info {\n      background: white;\n      border: 1px solid #e9ecef;\n      border-radius: 6px;\n      padding: 15px;\n      margin-bottom: 20px;\n    }\n\n    .mur-info h4 {\n      margin: 0 0 10px 0;\n      color: #495057;\n      font-size: 1em;\n    }\n\n    .info-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n      gap: 10px;\n    }\n\n    .info-item {\n      display: flex;\n      justify-content: space-between;\n      padding: 5px 0;\n    }\n\n    .label {\n      font-weight: 500;\n      color: #6c757d;\n    }\n\n    .value {\n      font-weight: 600;\n      color: #495057;\n    }\n\n    .fenetres-params {\n      background: white;\n      border: 1px solid #e9ecef;\n      border-radius: 6px;\n      padding: 15px;\n      margin-bottom: 20px;\n    }\n\n    .fenetres-params h4 {\n      margin: 0 0 15px 0;\n      color: #495057;\n      font-size: 1em;\n    }\n\n    .param-group {\n      margin-bottom: 15px;\n    }\n\n    .param-group label {\n      display: block;\n      margin-bottom: 5px;\n      font-weight: 500;\n      color: #495057;\n    }\n\n    .param-slider {\n      width: 100%;\n      height: 6px;\n      border-radius: 3px;\n      background: #ddd;\n      outline: none;\n      -webkit-appearance: none;\n    }\n\n    .param-slider::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      appearance: none;\n      width: 18px;\n      height: 18px;\n      border-radius: 50%;\n      background: #007bff;\n      cursor: pointer;\n      border: 2px solid #fff;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n    }\n\n    .slider-value {\n      display: inline-block;\n      margin-left: 10px;\n      font-weight: 600;\n      color: #007bff;\n    }\n\n    .param-color {\n      width: 100%;\n      height: 40px;\n      border: 1px solid #ced4da;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n\n    .calcul-results {\n      background: white;\n      border: 1px solid #e9ecef;\n      border-radius: 6px;\n      padding: 15px;\n      margin-bottom: 20px;\n    }\n\n    .calcul-results h4 {\n      margin: 0 0 15px 0;\n      color: #495057;\n      font-size: 1em;\n    }\n\n    .result-item {\n      display: flex;\n      align-items: flex-start;\n      gap: 10px;\n      padding: 10px;\n      border-radius: 4px;\n      border: 1px solid #e9ecef;\n    }\n\n    .result-item.valid {\n      background: #d4edda;\n      border-color: #c3e6cb;\n    }\n\n    .result-item.invalid {\n      background: #f8d7da;\n      border-color: #f5c6cb;\n    }\n\n    .result-icon {\n      font-size: 1.2em;\n    }\n\n    .result-content {\n      flex: 1;\n    }\n\n    .result-message {\n      font-weight: 500;\n      margin-bottom: 10px;\n    }\n\n    .result-details {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n      gap: 8px;\n    }\n\n    .detail-item {\n      display: flex;\n      justify-content: space-between;\n      font-size: 0.9em;\n    }\n\n    .action-buttons {\n      display: flex;\n      gap: 10px;\n    }\n\n    .btn {\n      padding: 8px 16px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      font-weight: 500;\n      transition: all 0.2s ease;\n    }\n\n    .btn:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n\n    .btn-primary {\n      background: #007bff;\n      color: white;\n    }\n\n    .btn-primary:hover:not(:disabled) {\n      background: #0056b3;\n    }\n\n    .btn-secondary {\n      background: #6c757d;\n      color: white;\n    }\n\n    .btn-secondary:hover {\n      background: #545b62;\n    }\n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  🧮 Calculateur de Fenêtres        Mur à modifier :          -- Sélectionner un mur --              {{ mur.nom }} ({{ mur.dimensions.width }}m × {{ mur.dimensions.height }}m)                    📐 Informations du Mur                  Largeur :        {{ murSelectionne.dimensions.width }}m                    Hauteur :        {{ murSelectionne.dimensions.height }}m                    Profondeur :        {{ murSelectionne.dimensions.depth }}m                    🪟 Paramètres des Fenêtres              Taille des fenêtres :              Petit (0.8m × 1.0m)        Moyen (1.2m × 1.5m)        Grand (1.8m × 2.0m)                        Écart entre fenêtres (m) :            {{ parametresFenetres.ecart }}m                  Nombre de fenêtres :            {{ parametresFenetres.nombreFenetres }}                  Couleur des fenêtres :                    📊 Résultats du Calcul                  {{ calculResultat.isValid ? \\'✅\\' : \\'⚠️\\' }}                    {{ calculResultat.message }}                              Largeur fenêtre :            {{ calculResultat.largeurFenetreOptimale }}m                                Écart optimal :            {{ calculResultat.ecartOptimal }}m                                Largeur totale utilisée :            {{ calculResultat.largeurTotaleUtilisee }}m                                Marge restante :            {{ calculResultat.margeRestante }}m                                            ✅ Appliquer Configuration              🔄 Réinitialiser      '\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'CalculateurFenetresComponent', 'selector': 'app-calculateur-fenetres'},{'name': 'ColorSelectorComponent', 'selector': 'app-color-selector'},{'name': 'DimensionsControllerComponent', 'selector': 'app-dimensions-controller'},{'name': 'FenetresCalculatorComponent', 'selector': 'app-fenetres-calculator'},{'name': 'MursControllerComponent', 'selector': 'app-murs-controller'},{'name': 'OuverturesControllerComponent', 'selector': 'app-ouvertures-controller'},{'name': 'Scene3d', 'selector': 'app-scene3d'},{'name': 'Scene3dCoreComponent', 'selector': 'app-scene3d-core'},{'name': 'Scene3dRefactored', 'selector': 'app-scene3d'},{'name': 'StructureControllerComponent', 'selector': 'app-structure-controller'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FenetresCalculatorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FenetresParams.html":{"url":"interfaces/FenetresParams.html","title":"interface - FenetresParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FenetresParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/scene3d/calculators/fenetres-calculator.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les paramètres de fenêtres\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            couleur\n                                        \n                                \n                                \n                                        \n                                            ecart\n                                        \n                                \n                                \n                                        \n                                            nombreFenetres\n                                        \n                                \n                                \n                                        \n                                            tailleFenetre\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        couleur\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        couleur:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ecart\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ecart:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nombreFenetres\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nombreFenetres:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tailleFenetre\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tailleFenetre:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { CalculateurFenetresService, MurConfig, CalculFenetres } from '../../../services/calculateur-fenetres/calculateur-fenetres.service';\n\n/**\n * Interface pour les paramètres de fenêtres\n */\nexport interface FenetresParams {\n  tailleFenetre: string;\n  ecart: number;\n  nombreFenetres: number;\n  couleur: string;\n}\n\n/**\n * Composant pour le calculateur de fenêtres\n */\n@Component({\n  selector: 'app-fenetres-calculator',\n  imports: [CommonModule, FormsModule],\n  template: `\n    \n      🧮 Calculateur de Fenêtres\n      \n      \n      \n        Mur à modifier :\n        \n          -- Sélectionner un mur --\n          \n            {{ mur.nom }} ({{ mur.dimensions.width }}m × {{ mur.dimensions.height }}m)\n          \n        \n      \n\n      \n      \n        📐 Informations du Mur\n        \n          \n            Largeur :\n            {{ murSelectionne.dimensions.width }}m\n          \n          \n            Hauteur :\n            {{ murSelectionne.dimensions.height }}m\n          \n          \n            Profondeur :\n            {{ murSelectionne.dimensions.depth }}m\n          \n        \n      \n\n      \n      \n        🪟 Paramètres des Fenêtres\n        \n        \n        \n          Taille des fenêtres :\n          \n            Petit (0.8m × 1.0m)\n            Moyen (1.2m × 1.5m)\n            Grand (1.8m × 2.0m)\n          \n        \n\n        \n        \n          Écart entre fenêtres (m) :\n          \n          {{ parametresFenetres.ecart }}m\n        \n\n        \n        \n          Nombre de fenêtres :\n          \n          {{ parametresFenetres.nombreFenetres }}\n        \n\n        \n        \n          Couleur des fenêtres :\n          \n        \n      \n\n      \n      \n        📊 Résultats du Calcul\n        \n        \n          \n            {{ calculResultat.isValid ? '✅' : '⚠️' }}\n          \n          \n            {{ calculResultat.message }}\n            \n              \n                Largeur fenêtre :\n                {{ calculResultat.largeurFenetreOptimale }}m\n              \n              \n                Écart optimal :\n                {{ calculResultat.ecartOptimal }}m\n              \n              \n                Largeur totale utilisée :\n                {{ calculResultat.largeurTotaleUtilisee }}m\n              \n              \n                Marge restante :\n                {{ calculResultat.margeRestante }}m\n              \n            \n          \n        \n      \n\n      \n      \n        \n          ✅ Appliquer Configuration\n        \n        \n        \n          🔄 Réinitialiser\n        \n      \n    \n  `,\n  styles: [`\n    .fenetres-calculator {\n      background: #f8f9fa;\n      border: 1px solid #dee2e6;\n      border-radius: 8px;\n      padding: 20px;\n      margin: 10px 0;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n\n    .fenetres-calculator h3 {\n      margin: 0 0 15px 0;\n      color: #495057;\n      font-size: 1.1em;\n      font-weight: 600;\n    }\n\n    .mur-selection {\n      margin-bottom: 20px;\n    }\n\n    .mur-selection label {\n      display: block;\n      margin-bottom: 5px;\n      font-weight: 500;\n      color: #495057;\n    }\n\n    .mur-select, .param-select {\n      width: 100%;\n      padding: 8px 12px;\n      border: 1px solid #ced4da;\n      border-radius: 4px;\n      background: white;\n      font-size: 0.9em;\n    }\n\n    .mur-info {\n      background: white;\n      border: 1px solid #e9ecef;\n      border-radius: 6px;\n      padding: 15px;\n      margin-bottom: 20px;\n    }\n\n    .mur-info h4 {\n      margin: 0 0 10px 0;\n      color: #495057;\n      font-size: 1em;\n    }\n\n    .info-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n      gap: 10px;\n    }\n\n    .info-item {\n      display: flex;\n      justify-content: space-between;\n      padding: 5px 0;\n    }\n\n    .label {\n      font-weight: 500;\n      color: #6c757d;\n    }\n\n    .value {\n      font-weight: 600;\n      color: #495057;\n    }\n\n    .fenetres-params {\n      background: white;\n      border: 1px solid #e9ecef;\n      border-radius: 6px;\n      padding: 15px;\n      margin-bottom: 20px;\n    }\n\n    .fenetres-params h4 {\n      margin: 0 0 15px 0;\n      color: #495057;\n      font-size: 1em;\n    }\n\n    .param-group {\n      margin-bottom: 15px;\n    }\n\n    .param-group label {\n      display: block;\n      margin-bottom: 5px;\n      font-weight: 500;\n      color: #495057;\n    }\n\n    .param-slider {\n      width: 100%;\n      height: 6px;\n      border-radius: 3px;\n      background: #ddd;\n      outline: none;\n      -webkit-appearance: none;\n    }\n\n    .param-slider::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      appearance: none;\n      width: 18px;\n      height: 18px;\n      border-radius: 50%;\n      background: #007bff;\n      cursor: pointer;\n      border: 2px solid #fff;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n    }\n\n    .slider-value {\n      display: inline-block;\n      margin-left: 10px;\n      font-weight: 600;\n      color: #007bff;\n    }\n\n    .param-color {\n      width: 100%;\n      height: 40px;\n      border: 1px solid #ced4da;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n\n    .calcul-results {\n      background: white;\n      border: 1px solid #e9ecef;\n      border-radius: 6px;\n      padding: 15px;\n      margin-bottom: 20px;\n    }\n\n    .calcul-results h4 {\n      margin: 0 0 15px 0;\n      color: #495057;\n      font-size: 1em;\n    }\n\n    .result-item {\n      display: flex;\n      align-items: flex-start;\n      gap: 10px;\n      padding: 10px;\n      border-radius: 4px;\n      border: 1px solid #e9ecef;\n    }\n\n    .result-item.valid {\n      background: #d4edda;\n      border-color: #c3e6cb;\n    }\n\n    .result-item.invalid {\n      background: #f8d7da;\n      border-color: #f5c6cb;\n    }\n\n    .result-icon {\n      font-size: 1.2em;\n    }\n\n    .result-content {\n      flex: 1;\n    }\n\n    .result-message {\n      font-weight: 500;\n      margin-bottom: 10px;\n    }\n\n    .result-details {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n      gap: 8px;\n    }\n\n    .detail-item {\n      display: flex;\n      justify-content: space-between;\n      font-size: 0.9em;\n    }\n\n    .action-buttons {\n      display: flex;\n      gap: 10px;\n    }\n\n    .btn {\n      padding: 8px 16px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 0.9em;\n      font-weight: 500;\n      transition: all 0.2s ease;\n    }\n\n    .btn:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n\n    .btn-primary {\n      background: #007bff;\n      color: white;\n    }\n\n    .btn-primary:hover:not(:disabled) {\n      background: #0056b3;\n    }\n\n    .btn-secondary {\n      background: #6c757d;\n      color: white;\n    }\n\n    .btn-secondary:hover {\n      background: #545b62;\n    }\n  `],\n  standalone: true\n})\nexport class FenetresCalculatorComponent {\n  @Input() isVisible: boolean = false;\n  @Input() mursDisponibles: Array = [];\n  @Input() selectedMurId: string = '';\n  @Input() parametresFenetres: FenetresParams = {\n    tailleFenetre: 'moyen',\n    ecart: 0.5,\n    nombreFenetres: 2,\n    couleur: '#87CEEB'\n  };\n\n  @Output() murSelected = new EventEmitter();\n  @Output() configurationApplied = new EventEmitter();\n  @Output() parametresReset = new EventEmitter();\n\n  calculResultat: CalculFenetres | null = null;\n\n  taillesFenetres: { [key: string]: { largeur: number; hauteur: number; nom: string } } = {\n    petit: { largeur: 0.8, hauteur: 1.0, nom: 'Petit' },\n    moyen: { largeur: 1.2, hauteur: 1.5, nom: 'Moyen' },\n    grand: { largeur: 1.8, hauteur: 2.0, nom: 'Grand' }\n  };\n  murSelectionne: { id: string; nom: string; dimensions: { width: number; height: number; depth: number } } | null = null;\n\n  constructor(private calculateurFenetresService: CalculateurFenetresService) {}\n\n  onMurChange(): void {\n    this.murSelectionne = this.mursDisponibles.find(m => m.id === this.selectedMurId) || null;\n    if (this.murSelectionne) {\n      this.calculerFenetres();\n    }\n    this.murSelected.emit(this.selectedMurId);\n  }\n\n  calculerFenetres(): void {\n    if (!this.murSelectionne) return;\n\n    const murConfig: MurConfig = {\n      position: { x: 0, y: 0, z: 0 },\n      dimensions: this.murSelectionne.dimensions,\n      color: 0xaaaaaa\n    };\n\n    // Récupérer les dimensions de la taille de fenêtre sélectionnée\n    const taille = this.taillesFenetres[this.parametresFenetres.tailleFenetre];\n    \n    this.calculResultat = this.calculateurFenetresService.calculerNombreMaxFenetres(\n      murConfig,\n      taille.largeur,\n      this.parametresFenetres.ecart,\n      taille.hauteur\n    );\n  }\n\n  appliquerConfiguration(): void {\n    if (this.murSelectionne && this.calculResultat?.isValid) {\n      this.configurationApplied.emit({\n        murId: this.murSelectionne.id,\n        parametres: { ...this.parametresFenetres },\n        calcul: this.calculResultat\n      });\n    }\n  }\n\n  reinitialiserParametres(): void {\n    this.parametresFenetres = {\n      tailleFenetre: 'moyen',\n      ecart: 0.5,\n      nombreFenetres: 2,\n      couleur: '#87CEEB'\n    };\n    this.calculResultat = null;\n    this.parametresReset.emit();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LightingConfig.html":{"url":"interfaces/LightingConfig.html","title":"interface - LightingConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LightingConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/config/building-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration de l'éclairage de la scène\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            ambient\n                                        \n                                \n                                \n                                        \n                                            directional\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ambient\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ambient:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        directional\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        directional:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Position3D {\n  x: number;\n  y: number;\n  z: number;\n}\n\n/**\n * Dimensions 3D d'un objet\n * @param width - Largeur (axe X)\n * @param height - Hauteur (axe Y)\n * @param depth - Profondeur (axe Z)\n */\nexport interface Dimensions3D {\n  width: number;\n  height: number;\n  depth: number;\n}\n\n/**\n * Configuration d'un mur simple\n * @param position - Position du centre du mur\n * @param dimensions - Taille du mur\n * @param color - Couleur hexadécimale (ex: 0xaaaaaa)\n */\nexport interface WallConfig {\n  position: Position3D;\n  dimensions: Dimensions3D;\n  color: number;\n}\n\n/**\n * Configuration d'une ouverture (porte ou fenêtre)\n * @param position - Position du centre de l'ouverture\n * @param dimensions - Taille de l'ouverture\n * @param color - Couleur de l'élément\n * @param type - Type d'ouverture ('door' ou 'window')\n */\nexport interface OpeningConfig {\n  position: Position3D;\n  dimensions: Dimensions3D;\n  color: number;\n  type: 'door' | 'window';\n}\n\n/**\n * Configuration du mur principal avec ouvertures (façade)\n * @param contour - Points définissant la forme du mur\n * @param thickness - Épaisseur du mur\n * @param position - Position du mur dans l'espace\n * @param color - Couleur du mur\n * @param openings - Ouvertures (porte et fenêtres) dans ce mur\n */\nexport interface MainWallConfig {\n  contour: Position3D[];\n  thickness: number;\n  position: Position3D;\n  color: number;\n  openings: {\n    door: OpeningConfig;\n    window1: OpeningConfig;\n    window2: OpeningConfig;\n  };\n}\n\n/**\n * Configuration de la caméra et des contrôles\n * @param initial - Position et paramètres initiaux de la caméra\n * @param target - Point que la caméra regarde\n * @param controls - Paramètres des contrôles souris\n */\nexport interface CameraConfig {\n  initial: {\n    position: Position3D;\n    rotationX: number;  // Rotation verticale\n    rotationY: number;  // Rotation horizontale\n    zoom: number;       // Distance de la caméra\n  };\n  target: Position3D;   // Point central regardé par la caméra\n  controls: {\n    minZoom: number;      // Distance minimale\n    maxZoom: number;      // Distance maximale\n    rotationSpeed: number; // Vitesse de rotation\n    zoomSpeed: number;     // Vitesse de zoom\n  };\n}\n\n/**\n * Configuration de l'éclairage de la scène\n * @param ambient - Lumière ambiante (éclairage général)\n * @param directional - Lumière directionnelle (comme le soleil)\n */\nexport interface LightingConfig {\n  ambient: {\n    color: number;      // Couleur de la lumière ambiante\n    intensity: number;  // Intensité (0-1)\n  };\n  directional: {\n    color: number;      // Couleur de la lumière directionnelle\n    intensity: number;  // Intensité\n    position: Position3D; // Position de la source lumineuse\n    shadow: {\n      mapSize: number;  // Qualité des ombres (résolution)\n    };\n  };\n}\n\n/**\n * Configuration générale de la scène 3D\n * @param background - Couleur de fond de la scène\n * @param camera - Paramètres de la caméra (champ de vision, distances)\n */\nexport interface SceneConfig {\n  background: number;   // Couleur de fond (ex: 0xbfd1e5 = bleu ciel)\n  camera: {\n    fov: number;        // Champ de vision (field of view) en degrés\n    near: number;       // Distance de rendu minimale\n    far: number;        // Distance de rendu maximale\n  };\n}\n\n/**\n * ===============================================\n * CONFIGURATION PRINCIPALE DU BÂTIMENT\n * ===============================================\n * Toutes les données du modèle 3D sont centralisées ici\n */\nexport const BUILDING_CONFIG = {\n  \n  /**\n   * SCÈNE 3D - Paramètres généraux\n   */\n  scene: {\n    background: 0xbfd1e5,  // Couleur bleu ciel pour le fond\n    camera: {\n      fov: 75,             // Angle de vue (75° = vue naturelle)\n      near: 0.1,           // Objets plus proches que 0.1 non rendus\n      far: 1000            // Objets plus loin que 1000 non rendus\n    }\n  } as SceneConfig,\n\n  /**\n   * ÉCLAIRAGE - Lumières de la scène\n   */\n  lighting: {\n    ambient: {   \n      color: 0xffffff,     // Lumière blanche ambiante\n      intensity: 0.6       // 60% d'intensité (éclairage doux)\n    },\n    directional: {\n      color: 0xffffff,     // Lumière blanche directionnelle (soleil)\n      intensity: 1,        // 100% d'intensité\n      position: { x: 10, y: 20, z: 10 }, // Position du \"soleil\"\n      shadow: {\n        mapSize: 2048      // Résolution des ombres (2048x2048)\n      }\n    }\n  } as LightingConfig,\n\n  /**\n   * CAMÉRA - Point de vue et contrôles\n   */\n  camera: {\n    initial: {\n      position: { x: 10, y: 10, z: 9 }, // Position initiale de la caméra\n      rotationX: 0.3,                   // Inclinaison verticale\n      rotationY: 0.5,                   // Rotation horizontale\n      zoom: 15                          // Distance initiale\n    },\n    target: { x: 0, y: 1.25, z: 0 },   // Point regardé (centre du bâtiment)\n    controls: {\n      minZoom: 5,           // Distance minimale (zoom max)\n      maxZoom: 50,          // Distance maximale (zoom min)\n      rotationSpeed: 0.01,  // Sensibilité de rotation souris\n      zoomSpeed: 0.01       // Sensibilité du zoom molette\n    }\n  } as CameraConfig,\n\n  /**\n   * SOL - Plateforme de base\n   */\n  ground: {\n    position: { x: 0, y: -0.1, z: 0 }, // Légèrement sous le niveau 0\n    dimensions: { width: 8, height: 0.2, depth: 5 }, // 8x5m, épaisseur 20cm\n    color: 0x2E1E1A  \n  } as WallConfig,\n\n  /**\n   * TOIT - Couverture du bâtiment\n   */\n  roof: {\n    position: { x: 0, y: 2.6, z: 0 },  // Au-dessus des murs (2.5m + 0.1m)\n    dimensions: { width: 8.4, height: 0.2, depth: 5 }, \n    color: 0x4169e1       // Couleur bleu royal\n  } as WallConfig,\n\n  /**\n   * MUR PRINCIPAL (FAÇADE) - Mur avec ouvertures\n   * Ce mur utilise ExtrudeGeometry pour créer de vraies ouvertures\n   */\n  mainWall: {\n    contour: [\n      // Points définissant la forme rectangulaire du mur (8m x 2.5m)\n      { x: -4, y: 0, z: 0 },    // Coin bas gauche\n      { x: 4, y: 0, z: 0 },     // Coin bas droit\n      { x: 4, y: 2.5, z: 0 },   // Coin haut droit\n      { x: -4, y: 2.5, z: 0 },  // Coin haut gauche\n      { x: -4, y: 0, z: 0 }     // Retour au point de départ\n    ],\n    thickness: 0.2,             // Épaisseur du mur (20cm)\n    position: { x: 0, y: 0, z: 2.3 }, // Position du mur dans l'espace\n    color: 0xaaaaaa,            // Couleur gris clair\n    openings: {\n      // PORTE CENTRALE\n      door: {\n        position: { x: 0, y: 1.05, z: 2.3 },\n        dimensions: { width: 1, height: 2, depth: 0.05 }, // 1m x 2m\n        color: 0x00ff00,        // Couleur verte\n        type: 'door' as const\n      },\n      // PREMIÈRE FENÊTRE (gauche)\n      window1: {\n        position: { x: -2, y: 1.5, z: 2.3 }, \n        dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n        color: 0xff0000,        // Couleur rouge\n        type: 'window' as const\n      },\n      // DEUXIÈME FENÊTRE (droite)\n      window2: {\n        position: { x: 2, y: 1.5, z: 2.3 }, \n        dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n        color: 0xff0000,        // Couleur rouge\n        type: 'window' as const\n      }\n    }\n  } as MainWallConfig,\n\n\n  /**\n   * AUTRES MURS - Murs latéraux et arrière (murs pleins)\n   */\n  walls: {\n    // MUR ARRIÈRE\n    back: {\n      position: { x: 0, y: 0, z: -2.5 },\n      dimensions: { width: 8, height: 2.5, depth: 0.2 }, // 8m x 2.5m x 20cm\n      color: 0xaaaaaa,\n      openings: {\n        window1: {\n          position: { x: 0, y: 1.5, z: -2.2 },\n          dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n    },\n    // MUR GAUCHE\n    left: {\n      position: { x: -3.9, y: 1.25, z: 0 }, \n      dimensions: { width: 0.2, height: 2.5, depth: 5 }, // 20cm x 2.5m x 5m\n      color: 0xaaaaaa,\n      openings: {\n        window5: {\n          position: { x: -3.8, y: 1.5, z: 0 },\n          dimensions: { width: 1.2, height: 1.0, depth: 0.05 }, // 1.2m x 1m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n      // Couleur gris clair\n    },\n    // MUR DROIT\n    right: {\n      position: { x: 3.8, y: 0, z: 0 },\n      dimensions: { width: 0.2, height: 2.5, depth: 5 }, // 20cm x 2.5m x 5m\n      color: 0xaaaaaa,\n      openings: {\n        // PORTE D'ENTRÉE\n        door: {\n          position: { x: 3.8, y: 1.05, z: 0 },\n          dimensions: { width: 1, height: 2.1, depth: 0.05 }, // 1m x 2.1m\n          color: 0x00ff00,        // Couleur verte\n          type: 'door' as const\n        },\n        // FENÊTRE\n        window1: {\n          position: { x: 3.8, y: 1.5, z: 1.5 },\n          dimensions: { width: 1.2, height: 1.0, depth: 0.05 }, // 1.2m x 1m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n    }\n  },\n\n  /**\n   * AXES DE RÉFÉRENCE (REPÈRE) - Pour s'orienter dans l'espace\n   */\n  axes: {\n    size: 8,                  // Longueur des axes (8 unités)\n    labels: [\n      // Axe X (rouge) - gauche/droite\n      { text: 'X', position: { x: 10, y: 0, z: 0 }, color: 0xff0000 },\n      // Axe Y (vert) - bas/haut\n      { text: 'Y', position: { x: 0, y: 10, z: 0 }, color: 0x00ff00 },\n      // Axe Z (bleu) - avant/arrière\n      { text: 'Z', position: { x: 0, y: 0, z: 10 }, color: 0x0000ff }\n    ],\n    labelSize: { width: 0.2, height: 0.2, depth: 0.2 } // Taille des cubes de repère\n  }\n};\n\n/**\n * ===============================================\n * FONCTIONS UTILITAIRES\n * ===============================================\n * Calculs automatiques pour les ouvertures dans les murs\n */\nexport class WallCalculations {\n  \n  /**\n   * Calcule les coordonnées d'une ouverture de porte\n   * @param config - Configuration de la porte\n   * @returns Points définissant le trou rectangulaire pour la porte\n   */\n  static getDoorHole(config: OpeningConfig) {\n    const halfWidth = config.dimensions.width / 2;  // Demi-largeur de la porte\n    return [\n      // Rectangle partant du sol (y=0) jusqu'à la hauteur de la porte\n      { x: config.position.x - halfWidth, y: 0 },                    // Bas gauche\n      { x: config.position.x + halfWidth, y: 0 },                    // Bas droit\n      { x: config.position.x + halfWidth, y: config.dimensions.height }, // Haut droit\n      { x: config.position.x - halfWidth, y: config.dimensions.height }, // Haut gauche\n      { x: config.position.x - halfWidth, y: 0 }                     // Retour au début\n    ];\n  }\n\n  /**\n   * Calcule les coordonnées d'une ouverture de fenêtre\n   * @param config - Configuration de la fenêtre\n   * @param bottomOffset - Distance du sol au bas de la fenêtre (par défaut 0.9m)\n   * @returns Points définissant le trou rectangulaire pour la fenêtre\n   */\n  static getWindowHole(config: OpeningConfig, bottomOffset: number = 0.9) {\n    const halfWidth = config.dimensions.width / 2;  // Demi-largeur de la fenêtre\n    const bottom = bottomOffset;                     // Position du bas de la fenêtre\n    const top = bottom + config.dimensions.height;  // Position du haut de la fenêtre\n    \n    return [\n      // Rectangle surélevé par rapport au sol\n      { x: config.position.x - halfWidth, y: bottom }, // Bas gauche\n      { x: config.position.x + halfWidth, y: bottom }, // Bas droit\n      { x: config.position.x + halfWidth, y: top },    // Haut droit\n      { x: config.position.x - halfWidth, y: top },    // Haut gauche\n      { x: config.position.x - halfWidth, y: bottom }  // Retour au début\n    ];\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MainWallConfig.html":{"url":"interfaces/MainWallConfig.html","title":"interface - MainWallConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MainWallConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/config/building-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration du mur principal avec ouvertures (façade)\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            contour\n                                        \n                                \n                                \n                                        \n                                            openings\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            thickness\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        contour\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        contour:         Position3D[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Position3D[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        openings\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        openings:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         Position3D\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Position3D\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        thickness\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        thickness:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Position3D {\n  x: number;\n  y: number;\n  z: number;\n}\n\n/**\n * Dimensions 3D d'un objet\n * @param width - Largeur (axe X)\n * @param height - Hauteur (axe Y)\n * @param depth - Profondeur (axe Z)\n */\nexport interface Dimensions3D {\n  width: number;\n  height: number;\n  depth: number;\n}\n\n/**\n * Configuration d'un mur simple\n * @param position - Position du centre du mur\n * @param dimensions - Taille du mur\n * @param color - Couleur hexadécimale (ex: 0xaaaaaa)\n */\nexport interface WallConfig {\n  position: Position3D;\n  dimensions: Dimensions3D;\n  color: number;\n}\n\n/**\n * Configuration d'une ouverture (porte ou fenêtre)\n * @param position - Position du centre de l'ouverture\n * @param dimensions - Taille de l'ouverture\n * @param color - Couleur de l'élément\n * @param type - Type d'ouverture ('door' ou 'window')\n */\nexport interface OpeningConfig {\n  position: Position3D;\n  dimensions: Dimensions3D;\n  color: number;\n  type: 'door' | 'window';\n}\n\n/**\n * Configuration du mur principal avec ouvertures (façade)\n * @param contour - Points définissant la forme du mur\n * @param thickness - Épaisseur du mur\n * @param position - Position du mur dans l'espace\n * @param color - Couleur du mur\n * @param openings - Ouvertures (porte et fenêtres) dans ce mur\n */\nexport interface MainWallConfig {\n  contour: Position3D[];\n  thickness: number;\n  position: Position3D;\n  color: number;\n  openings: {\n    door: OpeningConfig;\n    window1: OpeningConfig;\n    window2: OpeningConfig;\n  };\n}\n\n/**\n * Configuration de la caméra et des contrôles\n * @param initial - Position et paramètres initiaux de la caméra\n * @param target - Point que la caméra regarde\n * @param controls - Paramètres des contrôles souris\n */\nexport interface CameraConfig {\n  initial: {\n    position: Position3D;\n    rotationX: number;  // Rotation verticale\n    rotationY: number;  // Rotation horizontale\n    zoom: number;       // Distance de la caméra\n  };\n  target: Position3D;   // Point central regardé par la caméra\n  controls: {\n    minZoom: number;      // Distance minimale\n    maxZoom: number;      // Distance maximale\n    rotationSpeed: number; // Vitesse de rotation\n    zoomSpeed: number;     // Vitesse de zoom\n  };\n}\n\n/**\n * Configuration de l'éclairage de la scène\n * @param ambient - Lumière ambiante (éclairage général)\n * @param directional - Lumière directionnelle (comme le soleil)\n */\nexport interface LightingConfig {\n  ambient: {\n    color: number;      // Couleur de la lumière ambiante\n    intensity: number;  // Intensité (0-1)\n  };\n  directional: {\n    color: number;      // Couleur de la lumière directionnelle\n    intensity: number;  // Intensité\n    position: Position3D; // Position de la source lumineuse\n    shadow: {\n      mapSize: number;  // Qualité des ombres (résolution)\n    };\n  };\n}\n\n/**\n * Configuration générale de la scène 3D\n * @param background - Couleur de fond de la scène\n * @param camera - Paramètres de la caméra (champ de vision, distances)\n */\nexport interface SceneConfig {\n  background: number;   // Couleur de fond (ex: 0xbfd1e5 = bleu ciel)\n  camera: {\n    fov: number;        // Champ de vision (field of view) en degrés\n    near: number;       // Distance de rendu minimale\n    far: number;        // Distance de rendu maximale\n  };\n}\n\n/**\n * ===============================================\n * CONFIGURATION PRINCIPALE DU BÂTIMENT\n * ===============================================\n * Toutes les données du modèle 3D sont centralisées ici\n */\nexport const BUILDING_CONFIG = {\n  \n  /**\n   * SCÈNE 3D - Paramètres généraux\n   */\n  scene: {\n    background: 0xbfd1e5,  // Couleur bleu ciel pour le fond\n    camera: {\n      fov: 75,             // Angle de vue (75° = vue naturelle)\n      near: 0.1,           // Objets plus proches que 0.1 non rendus\n      far: 1000            // Objets plus loin que 1000 non rendus\n    }\n  } as SceneConfig,\n\n  /**\n   * ÉCLAIRAGE - Lumières de la scène\n   */\n  lighting: {\n    ambient: {   \n      color: 0xffffff,     // Lumière blanche ambiante\n      intensity: 0.6       // 60% d'intensité (éclairage doux)\n    },\n    directional: {\n      color: 0xffffff,     // Lumière blanche directionnelle (soleil)\n      intensity: 1,        // 100% d'intensité\n      position: { x: 10, y: 20, z: 10 }, // Position du \"soleil\"\n      shadow: {\n        mapSize: 2048      // Résolution des ombres (2048x2048)\n      }\n    }\n  } as LightingConfig,\n\n  /**\n   * CAMÉRA - Point de vue et contrôles\n   */\n  camera: {\n    initial: {\n      position: { x: 10, y: 10, z: 9 }, // Position initiale de la caméra\n      rotationX: 0.3,                   // Inclinaison verticale\n      rotationY: 0.5,                   // Rotation horizontale\n      zoom: 15                          // Distance initiale\n    },\n    target: { x: 0, y: 1.25, z: 0 },   // Point regardé (centre du bâtiment)\n    controls: {\n      minZoom: 5,           // Distance minimale (zoom max)\n      maxZoom: 50,          // Distance maximale (zoom min)\n      rotationSpeed: 0.01,  // Sensibilité de rotation souris\n      zoomSpeed: 0.01       // Sensibilité du zoom molette\n    }\n  } as CameraConfig,\n\n  /**\n   * SOL - Plateforme de base\n   */\n  ground: {\n    position: { x: 0, y: -0.1, z: 0 }, // Légèrement sous le niveau 0\n    dimensions: { width: 8, height: 0.2, depth: 5 }, // 8x5m, épaisseur 20cm\n    color: 0x2E1E1A  \n  } as WallConfig,\n\n  /**\n   * TOIT - Couverture du bâtiment\n   */\n  roof: {\n    position: { x: 0, y: 2.6, z: 0 },  // Au-dessus des murs (2.5m + 0.1m)\n    dimensions: { width: 8.4, height: 0.2, depth: 5 }, \n    color: 0x4169e1       // Couleur bleu royal\n  } as WallConfig,\n\n  /**\n   * MUR PRINCIPAL (FAÇADE) - Mur avec ouvertures\n   * Ce mur utilise ExtrudeGeometry pour créer de vraies ouvertures\n   */\n  mainWall: {\n    contour: [\n      // Points définissant la forme rectangulaire du mur (8m x 2.5m)\n      { x: -4, y: 0, z: 0 },    // Coin bas gauche\n      { x: 4, y: 0, z: 0 },     // Coin bas droit\n      { x: 4, y: 2.5, z: 0 },   // Coin haut droit\n      { x: -4, y: 2.5, z: 0 },  // Coin haut gauche\n      { x: -4, y: 0, z: 0 }     // Retour au point de départ\n    ],\n    thickness: 0.2,             // Épaisseur du mur (20cm)\n    position: { x: 0, y: 0, z: 2.3 }, // Position du mur dans l'espace\n    color: 0xaaaaaa,            // Couleur gris clair\n    openings: {\n      // PORTE CENTRALE\n      door: {\n        position: { x: 0, y: 1.05, z: 2.3 },\n        dimensions: { width: 1, height: 2, depth: 0.05 }, // 1m x 2m\n        color: 0x00ff00,        // Couleur verte\n        type: 'door' as const\n      },\n      // PREMIÈRE FENÊTRE (gauche)\n      window1: {\n        position: { x: -2, y: 1.5, z: 2.3 }, \n        dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n        color: 0xff0000,        // Couleur rouge\n        type: 'window' as const\n      },\n      // DEUXIÈME FENÊTRE (droite)\n      window2: {\n        position: { x: 2, y: 1.5, z: 2.3 }, \n        dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n        color: 0xff0000,        // Couleur rouge\n        type: 'window' as const\n      }\n    }\n  } as MainWallConfig,\n\n\n  /**\n   * AUTRES MURS - Murs latéraux et arrière (murs pleins)\n   */\n  walls: {\n    // MUR ARRIÈRE\n    back: {\n      position: { x: 0, y: 0, z: -2.5 },\n      dimensions: { width: 8, height: 2.5, depth: 0.2 }, // 8m x 2.5m x 20cm\n      color: 0xaaaaaa,\n      openings: {\n        window1: {\n          position: { x: 0, y: 1.5, z: -2.2 },\n          dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n    },\n    // MUR GAUCHE\n    left: {\n      position: { x: -3.9, y: 1.25, z: 0 }, \n      dimensions: { width: 0.2, height: 2.5, depth: 5 }, // 20cm x 2.5m x 5m\n      color: 0xaaaaaa,\n      openings: {\n        window5: {\n          position: { x: -3.8, y: 1.5, z: 0 },\n          dimensions: { width: 1.2, height: 1.0, depth: 0.05 }, // 1.2m x 1m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n      // Couleur gris clair\n    },\n    // MUR DROIT\n    right: {\n      position: { x: 3.8, y: 0, z: 0 },\n      dimensions: { width: 0.2, height: 2.5, depth: 5 }, // 20cm x 2.5m x 5m\n      color: 0xaaaaaa,\n      openings: {\n        // PORTE D'ENTRÉE\n        door: {\n          position: { x: 3.8, y: 1.05, z: 0 },\n          dimensions: { width: 1, height: 2.1, depth: 0.05 }, // 1m x 2.1m\n          color: 0x00ff00,        // Couleur verte\n          type: 'door' as const\n        },\n        // FENÊTRE\n        window1: {\n          position: { x: 3.8, y: 1.5, z: 1.5 },\n          dimensions: { width: 1.2, height: 1.0, depth: 0.05 }, // 1.2m x 1m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n    }\n  },\n\n  /**\n   * AXES DE RÉFÉRENCE (REPÈRE) - Pour s'orienter dans l'espace\n   */\n  axes: {\n    size: 8,                  // Longueur des axes (8 unités)\n    labels: [\n      // Axe X (rouge) - gauche/droite\n      { text: 'X', position: { x: 10, y: 0, z: 0 }, color: 0xff0000 },\n      // Axe Y (vert) - bas/haut\n      { text: 'Y', position: { x: 0, y: 10, z: 0 }, color: 0x00ff00 },\n      // Axe Z (bleu) - avant/arrière\n      { text: 'Z', position: { x: 0, y: 0, z: 10 }, color: 0x0000ff }\n    ],\n    labelSize: { width: 0.2, height: 0.2, depth: 0.2 } // Taille des cubes de repère\n  }\n};\n\n/**\n * ===============================================\n * FONCTIONS UTILITAIRES\n * ===============================================\n * Calculs automatiques pour les ouvertures dans les murs\n */\nexport class WallCalculations {\n  \n  /**\n   * Calcule les coordonnées d'une ouverture de porte\n   * @param config - Configuration de la porte\n   * @returns Points définissant le trou rectangulaire pour la porte\n   */\n  static getDoorHole(config: OpeningConfig) {\n    const halfWidth = config.dimensions.width / 2;  // Demi-largeur de la porte\n    return [\n      // Rectangle partant du sol (y=0) jusqu'à la hauteur de la porte\n      { x: config.position.x - halfWidth, y: 0 },                    // Bas gauche\n      { x: config.position.x + halfWidth, y: 0 },                    // Bas droit\n      { x: config.position.x + halfWidth, y: config.dimensions.height }, // Haut droit\n      { x: config.position.x - halfWidth, y: config.dimensions.height }, // Haut gauche\n      { x: config.position.x - halfWidth, y: 0 }                     // Retour au début\n    ];\n  }\n\n  /**\n   * Calcule les coordonnées d'une ouverture de fenêtre\n   * @param config - Configuration de la fenêtre\n   * @param bottomOffset - Distance du sol au bas de la fenêtre (par défaut 0.9m)\n   * @returns Points définissant le trou rectangulaire pour la fenêtre\n   */\n  static getWindowHole(config: OpeningConfig, bottomOffset: number = 0.9) {\n    const halfWidth = config.dimensions.width / 2;  // Demi-largeur de la fenêtre\n    const bottom = bottomOffset;                     // Position du bas de la fenêtre\n    const top = bottom + config.dimensions.height;  // Position du haut de la fenêtre\n    \n    return [\n      // Rectangle surélevé par rapport au sol\n      { x: config.position.x - halfWidth, y: bottom }, // Bas gauche\n      { x: config.position.x + halfWidth, y: bottom }, // Bas droit\n      { x: config.position.x + halfWidth, y: top },    // Haut droit\n      { x: config.position.x - halfWidth, y: top },    // Haut gauche\n      { x: config.position.x - halfWidth, y: bottom }  // Retour au début\n    ];\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Mur.html":{"url":"interfaces/Mur.html","title":"interface - Mur","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Mur\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/scene3d/controls/murs-controller.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour un mur\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            couleur\n                                        \n                                \n                                \n                                        \n                                            dimensions\n                                        \n                                \n                                \n                                        \n                                            epaisseur\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            nom\n                                        \n                                \n                                \n                                        \n                                            ouvertures\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        couleur\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        couleur:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dimensions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dimensions:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        epaisseur\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        epaisseur:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nom:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ouvertures\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ouvertures:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n/**\n * Interface pour un mur\n */\nexport interface Mur {\n  id: string;\n  nom: string;\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: string;\n  epaisseur: number;\n  ouvertures: Array;\n}\n\n/**\n * Composant pour contrôler les murs\n */\n@Component({\n  selector: 'app-murs-controller',\n  imports: [CommonModule, FormsModule],\n  templateUrl: './murs-controller.component.html',\n  styleUrl: './murs-controller.component.css',\n  standalone: true\n})\nexport class MursControllerComponent {\n  @Input() isVisible: boolean = false;\n  @Input() murs: Mur[] = [];\n  @Input() selectedMurId: string = '';\n\n  @Output() murSelected = new EventEmitter();\n  @Output() murChanged = new EventEmitter();\n  @Output() ouvertureAdded = new EventEmitter();\n  @Output() ouvertureRemoved = new EventEmitter();\n  @Output() murDuplicated = new EventEmitter();\n  @Output() murDeleted = new EventEmitter();\n\n  get murSelectionne(): Mur | null {\n    return this.murs.find(m => m.id === this.selectedMurId) || null;\n  }\n\n  selectMur(murId: string): void {\n    this.selectedMurId = murId;\n    this.murSelected.emit(murId);\n  }\n\n  onMurChange(): void {\n    if (this.murSelectionne) {\n      this.murChanged.emit({ ...this.murSelectionne });\n    }\n  }\n\n  addOuverture(): void {\n    if (this.murSelectionne) {\n      const nouvelleOuverture = {\n        id: `ouverture_${Date.now()}`,\n        type: 'fenetre' as const,\n        position: { x: 0, y: 1, z: 0 },\n        dimensions: { width: 1.2, height: 1.5, depth: 0.05 },\n        couleur: '#87CEEB'\n      };\n      this.ouvertureAdded.emit({ murId: this.murSelectionne.id, ouverture: nouvelleOuverture });\n    }\n  }\n\n  removeOuverture(index: number): void {\n    if (this.murSelectionne) {\n      this.ouvertureRemoved.emit({ murId: this.murSelectionne.id, index });\n    }\n  }\n\n  duplicateMur(): void {\n    if (this.murSelectionne) {\n      this.murDuplicated.emit({ ...this.murSelectionne });\n    }\n  }\n\n  deleteMur(): void {\n    if (this.murSelectionne) {\n      this.murDeleted.emit(this.murSelectionne.id);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MurConfig.html":{"url":"interfaces/MurConfig.html","title":"interface - MurConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MurConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/calculateur-fenetres/calculateur-fenetres.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            dimensions\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dimensions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dimensions:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nexport interface FenetreConfig {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  color: number;\n  type: 'window';\n}\n\nexport interface MurConfig {\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  color: number;\n}\n\nexport interface CalculFenetres {\n  nombreMaxFenetres: number;\n  largeurFenetreOptimale: number;\n  ecartOptimal: number;\n  positionsCalculees: Array;\n  largeurTotaleUtilisee: number;\n  margeRestante: number;\n  isValid: boolean;\n  message: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CalculateurFenetresService {\n\n  // Contraintes par défaut\n  private readonly CONTRAINTES = {\n    largeurFenetreMin: 0.5,      // Largeur minimale d'une fenêtre (m)\n    largeurFenetreMax: 3.0,      // Largeur maximale d'une fenêtre (m)\n    hauteurFenetreMin: 0.8,      // Hauteur minimale d'une fenêtre (m)\n    hauteurFenetreMax: 2.5,      // Hauteur maximale d'une fenêtre (m)\n    ecartMin: 0.1,               // Écart minimum entre fenêtres (m)\n    ecartMax: 2.0,               // Écart maximum entre fenêtres (m)\n    margeMin: 0.2,               // Marge minimum des bords du mur (m)\n    hauteurMurMin: 1.0           // Hauteur minimale du mur (m)\n  };\n\n  constructor() {\n    console.log('CalculateurFenetresService initialisé');\n  }\n\n  /**\n   * Calcule le nombre maximum de fenêtres pour un mur donné\n   */\n  public calculerNombreMaxFenetres(\n    mur: MurConfig,\n    largeurFenetre: number = 1.5,\n    ecart: number = 0.5,\n    hauteurFenetre: number = 1.2\n  ): CalculFenetres {\n    \n    console.log('Calcul du nombre max de fenêtres pour le mur:', {\n      largeurMur: mur.dimensions.width,\n      hauteurMur: mur.dimensions.height,\n      largeurFenetre,\n      ecart,\n      hauteurFenetre\n    });\n\n    // Validation des contraintes\n    const validation = this.validerContraintes(mur, largeurFenetre, ecart, hauteurFenetre);\n    if (!validation.isValid) {\n      return {\n        nombreMaxFenetres: 0,\n        largeurFenetreOptimale: 0,\n        ecartOptimal: 0,\n        positionsCalculees: [],\n        largeurTotaleUtilisee: 0,\n        margeRestante: 0,\n        isValid: false,\n        message: validation.message\n      };\n    }\n\n    // Calcul du nombre maximum de fenêtres\n    const largeurDisponible = mur.dimensions.width - (2 * this.CONTRAINTES.margeMin);\n    const largeurParFenetre = largeurFenetre + ecart;\n    const nombreMaxFenetres = Math.floor(largeurDisponible / largeurParFenetre);\n\n    // Calcul des positions optimales\n    const positions = this.calculerPositionsOptimales(\n      mur, \n      nombreMaxFenetres, \n      largeurFenetre, \n      ecart, \n      hauteurFenetre\n    );\n\n    // Calcul de la largeur totale utilisée\n    const largeurTotaleUtilisee = (nombreMaxFenetres * largeurFenetre) + ((nombreMaxFenetres - 1) * ecart);\n    const margeRestante = mur.dimensions.width - largeurTotaleUtilisee;\n\n    const resultat: CalculFenetres = {\n      nombreMaxFenetres,\n      largeurFenetreOptimale: largeurFenetre,\n      ecartOptimal: ecart,\n      positionsCalculees: positions,\n      largeurTotaleUtilisee,\n      margeRestante,\n      isValid: true,\n      message: `✅ ${nombreMaxFenetres} fenêtre(s) possible(s) avec ${margeRestante.toFixed(2)}m de marge`\n    };\n\n    console.log(' Résultat du calcul:', resultat);\n    return resultat;\n  }\n\n  /**\n   * Calcule les positions optimales pour les fenêtres\n   */\n  private calculerPositionsOptimales(\n    mur: MurConfig,\n    nombreFenetres: number,\n    largeurFenetre: number,\n    ecart: number,\n    hauteurFenetre: number\n  ): Array {\n    \n    const positions: Array = [];\n    \n    if (nombreFenetres === 0) {\n      return positions;\n    }\n\n    // Calcul de la largeur totale utilisée\n    const largeurTotale = (nombreFenetres * largeurFenetre) + ((nombreFenetres - 1) * ecart);\n    \n    // Position de départ (centrée)\n    const debut = mur.position.x - (largeurTotale / 2) + (largeurFenetre / 2);\n    \n    // Hauteur des fenêtres (centrée verticalement)\n    const hauteurMur = mur.dimensions.height;\n    const yPosition = mur.position.y + (hauteurMur / 2) - (hauteurFenetre / 2);\n    \n    // Calcul des positions\n    for (let i = 0; i  this.CONTRAINTES.largeurFenetreMax) {\n      return {\n        isValid: false,\n        message: `❌ Largeur de fenêtre trop grande (max: ${this.CONTRAINTES.largeurFenetreMax}m)`\n      };\n    }\n\n    // Vérification de la hauteur de la fenêtre\n    if (hauteurFenetre  this.CONTRAINTES.hauteurFenetreMax) {\n      return {\n        isValid: false,\n        message: `❌ Hauteur de fenêtre trop grande (max: ${this.CONTRAINTES.hauteurFenetreMax}m)`\n      };\n    }\n\n    // Vérification de l'écart\n    if (ecart  this.CONTRAINTES.ecartMax) {\n      return {\n        isValid: false,\n        message: `❌ Écart trop grand (max: ${this.CONTRAINTES.ecartMax}m)`\n      };\n    }\n\n    // Vérification de la hauteur du mur\n    if (mur.dimensions.height  mur.dimensions.height) {\n      return {\n        isValid: false,\n        message: `❌ Fenêtre trop haute pour le mur (mur: ${mur.dimensions.height}m, fenêtre: ${hauteurFenetre}m)`\n      };\n    }\n\n    // Vérification de l'espace disponible\n    const largeurDisponible = mur.dimensions.width - (2 * this.CONTRAINTES.margeMin);\n    const largeurMinimale = largeurFenetre + ecart;\n    \n    if (largeurDisponible  calcul.nombreMaxFenetres) {\n      return {\n        fenetres: [],\n        isValid: false,\n        message: `❌ Trop de fenêtres demandées (max: ${calcul.nombreMaxFenetres})`\n      };\n    }\n\n    const fenetres: FenetreConfig[] = [];\n    \n    for (let i = 0; i  0'\n      };\n    }\n\n    const largeurDisponible = mur.dimensions.width - (2 * this.CONTRAINTES.margeMin);\n    \n    // Calcul de l'écart optimal (équilibre entre fenêtres et espacement)\n    const ecartOptimal = Math.max(this.CONTRAINTES.ecartMin, largeurDisponible * 0.1);\n    \n    // Calcul de la largeur de fenêtre optimale\n    const largeurFenetreOptimale = (largeurDisponible - ((nombreFenetres - 1) * ecartOptimal)) / nombreFenetres;\n    \n    // Vérification des contraintes\n    if (largeurFenetreOptimale  {\n      resultats[nomMur] = this.calculerNombreMaxFenetres(mur);\n    });\n    \n    return resultats;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MurService.html":{"url":"injectables/MurService.html","title":"injectable - MurService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  MurService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/mur/mur.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service de gestion des murs\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                murs$\n                            \n                            \n                                    Private\n                                mursActuels\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                calculerDistanceEntreMurs\n                            \n                            \n                                    Private\n                                calculerProprietesMur\n                            \n                            \n                                getMurArriere\n                            \n                            \n                                getMurDroit\n                            \n                            \n                                getMurGauche\n                            \n                            \n                                getMurParId\n                            \n                            \n                                getMurParType\n                            \n                            \n                                getMurPrincipal\n                            \n                            \n                                getMurs\n                            \n                            \n                                getMursAdjacents\n                            \n                            \n                                getMursAvecPlusOuvertures\n                            \n                            \n                                getMursObservable\n                            \n                            \n                                getMursSansOuvertures\n                            \n                            \n                                    Private\n                                getNomMur\n                            \n                            \n                                getStatistiquesMurs\n                            \n                            \n                                    Private\n                                initialiserMurs\n                            \n                            \n                                modifierCouleurMur\n                            \n                            \n                                modifierDimensionsMur\n                            \n                            \n                                modifierEpaisseurMur\n                            \n                            \n                                modifierPositionMur\n                            \n                            \n                                validerMur\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configurationService: ConfigurationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/mur/mur.service.ts:54\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configurationService\n                                                  \n                                                        \n                                                                        ConfigurationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        calculerDistanceEntreMurs\n                        \n                    \n                \n            \n            \n                \ncalculerDistanceEntreMurs(mur1: ProprietesMur, mur2: ProprietesMur)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/mur/mur.service.ts:355\n                        \n                    \n\n\n            \n                \n                        Calculer la distance entre deux murs\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                mur1\n                                            \n                                                            ProprietesMur\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                mur2\n                                            \n                                                            ProprietesMur\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        calculerProprietesMur\n                        \n                    \n                \n            \n            \n                \n                        \n                    calculerProprietesMur(murConfig: ConfigurationMur)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/mur/mur.service.ts:113\n                        \n                    \n\n\n            \n                \n                        Calculer les propriétés géométriques d'un mur\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                murConfig\n                                            \n                                                            ConfigurationMur\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CalculsMur\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMurArriere\n                        \n                    \n                \n            \n            \n                \ngetMurArriere()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/mur/mur.service.ts:176\n                        \n                    \n\n\n            \n                \n                        Obtenir le mur arrière\n\n\n                        \n                            Returns :     ProprietesMur | undefined\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMurDroit\n                        \n                    \n                \n            \n            \n                \ngetMurDroit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/mur/mur.service.ts:190\n                        \n                    \n\n\n            \n                \n                        Obtenir le mur droit\n\n\n                        \n                            Returns :     ProprietesMur | undefined\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMurGauche\n                        \n                    \n                \n            \n            \n                \ngetMurGauche()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/mur/mur.service.ts:183\n                        \n                    \n\n\n            \n                \n                        Obtenir le mur gauche\n\n\n                        \n                            Returns :     ProprietesMur | undefined\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMurParId\n                        \n                    \n                \n            \n            \n                \ngetMurParId(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/mur/mur.service.ts:155\n                        \n                    \n\n\n            \n                \n                        Obtenir un mur par son ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ProprietesMur | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMurParType\n                        \n                    \n                \n            \n            \n                \ngetMurParType(type: ProprietesMur)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/mur/mur.service.ts:162\n                        \n                    \n\n\n            \n                \n                        Obtenir un mur par son type\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            ProprietesMur\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ProprietesMur | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMurPrincipal\n                        \n                    \n                \n            \n            \n                \ngetMurPrincipal()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/mur/mur.service.ts:169\n                        \n                    \n\n\n            \n                \n                        Obtenir le mur principal\n\n\n                        \n                            Returns :     ProprietesMur | undefined\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMurs\n                        \n                    \n                \n            \n            \n                \ngetMurs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/mur/mur.service.ts:141\n                        \n                    \n\n\n            \n                \n                        Obtenir tous les murs\n\n\n                        \n                            Returns :     ProprietesMur[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMursAdjacents\n                        \n                    \n                \n            \n            \n                \ngetMursAdjacents(mur: ProprietesMur)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/mur/mur.service.ts:366\n                        \n                    \n\n\n            \n                \n                        Obtenir les murs adjacents\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                mur\n                                            \n                                                            ProprietesMur\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ProprietesMur[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMursAvecPlusOuvertures\n                        \n                    \n                \n            \n            \n                \ngetMursAvecPlusOuvertures()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/mur/mur.service.ts:339\n                        \n                    \n\n\n            \n                \n                        Obtenir les murs avec le plus d'ouvertures\n\n\n                        \n                            Returns :     ProprietesMur[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMursObservable\n                        \n                    \n                \n            \n            \n                \ngetMursObservable()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/mur/mur.service.ts:148\n                        \n                    \n\n\n            \n                \n                        Obtenir les murs en tant qu'Observable\n\n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMursSansOuvertures\n                        \n                    \n                \n            \n            \n                \ngetMursSansOuvertures()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/mur/mur.service.ts:348\n                        \n                    \n\n\n            \n                \n                        Obtenir les murs sans ouvertures\n\n\n                        \n                            Returns :     ProprietesMur[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getNomMur\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNomMur(type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/mur/mur.service.ts:100\n                        \n                    \n\n\n            \n                \n                        Obtenir le nom d'un mur selon son type\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStatistiquesMurs\n                        \n                    \n                \n            \n            \n                \ngetStatistiquesMurs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/mur/mur.service.ts:311\n                        \n                    \n\n\n            \n                \n                        Obtenir les statistiques des murs\n\n\n                        \n                            Returns :     literal type\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initialiserMurs\n                        \n                    \n                \n            \n            \n                \n                        \n                    initialiserMurs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/mur/mur.service.ts:69\n                        \n                    \n\n\n            \n                \n                        Initialiser les murs à partir de la configuration\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        modifierCouleurMur\n                        \n                    \n                \n            \n            \n                \nmodifierCouleurMur(type: ProprietesMur, nouvelleCouleur: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/mur/mur.service.ts:241\n                        \n                    \n\n\n            \n                \n                        Modifier la couleur d'un mur\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            ProprietesMur\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                nouvelleCouleur\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        modifierDimensionsMur\n                        \n                    \n                \n            \n            \n                \nmodifierDimensionsMur(type: ProprietesMur, nouvellesDimensions: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/mur/mur.service.ts:228\n                        \n                    \n\n\n            \n                \n                        Modifier les dimensions d'un mur\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            ProprietesMur\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                nouvellesDimensions\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        modifierEpaisseurMur\n                        \n                    \n                \n            \n            \n                \nmodifierEpaisseurMur(type: ProprietesMur, nouvelleEpaisseur: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/mur/mur.service.ts:254\n                        \n                    \n\n\n            \n                \n                        Modifier l'épaisseur d'un mur\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            ProprietesMur\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                nouvelleEpaisseur\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        modifierPositionMur\n                        \n                    \n                \n            \n            \n                \nmodifierPositionMur(type: ProprietesMur, nouvellePosition: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/mur/mur.service.ts:197\n                        \n                    \n\n\n            \n                \n                        Modifier la position d'un mur\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            ProprietesMur\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                nouvellePosition\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validerMur\n                        \n                    \n                \n            \n            \n                \nvaliderMur(mur: ProprietesMur)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/mur/mur.service.ts:268\n                        \n                    \n\n\n            \n                \n                        Valider un mur\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                mur\n                                            \n                                                            ProprietesMur\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ValidationMur\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        murs$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.mursActuels.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/mur/mur.service.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mursActuels\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in src/app/services/mur/mur.service.ts:53\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigurationService, ConfigurationMur } from '../configuration/configuration.service';\n\n/**\n * Interface pour les propriétés d'un mur\n */\nexport interface ProprietesMur {\n  id: string;\n  nom: string;\n  type: 'principal' | 'arriere' | 'gauche' | 'droit';\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n  epaisseur: number;\n  surface: number;\n  volume: number;\n  nombreOuvertures: number;\n  pourcentageOuvertures: number;\n  dateCreation: Date;\n  derniereModification: Date;\n}\n\n/**\n * Interface pour les calculs géométriques d'un mur\n */\nexport interface CalculsMur {\n  surfaceTotale: number;\n  surfaceOuvertures: number;\n  surfaceNet: number;\n  volume: number;\n  perimetre: number;\n  centreGravite: { x: number; y: number; z: number };\n}\n\n/**\n * Interface pour la validation d'un mur\n */\nexport interface ValidationMur {\n  isValid: boolean;\n  erreurs: string[];\n  avertissements: string[];\n}\n\n/**\n * Service de gestion des murs\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MurService {\n  \n  private mursActuels = new BehaviorSubject([]);\n  public murs$ = this.mursActuels.asObservable();\n\n  constructor(private configurationService: ConfigurationService) {\n    // Initialiser avec la configuration actuelle\n    this.initialiserMurs();\n    \n    // Écouter les changements de configuration\n    this.configurationService.getConfigurationObservable().subscribe(() => {\n      this.initialiserMurs();\n    });\n  }\n\n  /**\n   * Initialiser les murs à partir de la configuration\n   */\n  private initialiserMurs(): void {\n    const config = this.configurationService.getConfiguration();\n    const murs: ProprietesMur[] = [];\n    \n    Object.entries(config.murs).forEach(([type, murConfig]) => {\n      const calculs = this.calculerProprietesMur(murConfig);\n      const mur: ProprietesMur = {\n        id: `mur_${type}`,\n        nom: this.getNomMur(type),\n        type: type as ProprietesMur['type'],\n        position: murConfig.position,\n        dimensions: murConfig.dimensions,\n        couleur: murConfig.couleur,\n        epaisseur: murConfig.epaisseur,\n        surface: calculs.surfaceTotale,\n        volume: calculs.volume,\n        nombreOuvertures: murConfig.ouvertures.length,\n        pourcentageOuvertures: calculs.surfaceOuvertures > 0 ? \n          Math.round((calculs.surfaceOuvertures / calculs.surfaceTotale) * 100 * 100) / 100 : 0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      };\n      murs.push(mur);\n    });\n    \n    this.mursActuels.next(murs);\n  }\n\n  /**\n   * Obtenir le nom d'un mur selon son type\n   */\n  private getNomMur(type: string): string {\n    const noms: Record = {\n      principal: 'Mur Principal',\n      arriere: 'Mur Arrière',\n      gauche: 'Mur Gauche',\n      droit: 'Mur Droit'\n    };\n    return noms[type] || 'Mur Inconnu';\n  }\n\n  /**\n   * Calculer les propriétés géométriques d'un mur\n   */\n  private calculerProprietesMur(murConfig: ConfigurationMur): CalculsMur {\n    const surfaceTotale = murConfig.dimensions.width * murConfig.dimensions.height;\n    const surfaceOuvertures = murConfig.ouvertures.reduce((total, ouverture) => {\n      return total + (ouverture.dimensions.width * ouverture.dimensions.height);\n    }, 0);\n    const surfaceNet = surfaceTotale - surfaceOuvertures;\n    const volume = surfaceTotale * murConfig.dimensions.depth;\n    const perimetre = 2 * (murConfig.dimensions.width + murConfig.dimensions.height);\n    \n    const centreGravite = {\n      x: murConfig.position.x,\n      y: murConfig.position.y + (murConfig.dimensions.height / 2),\n      z: murConfig.position.z\n    };\n\n    return {\n      surfaceTotale: Math.round(surfaceTotale * 100) / 100,\n      surfaceOuvertures: Math.round(surfaceOuvertures * 100) / 100,\n      surfaceNet: Math.round(surfaceNet * 100) / 100,\n      volume: Math.round(volume * 100) / 100,\n      perimetre: Math.round(perimetre * 100) / 100,\n      centreGravite\n    };\n  }\n\n  /**\n   * Obtenir tous les murs\n   */\n  getMurs(): ProprietesMur[] {\n    return this.mursActuels.value;\n  }\n\n  /**\n   * Obtenir les murs en tant qu'Observable\n   */\n  getMursObservable(): Observable {\n    return this.murs$;\n  }\n\n  /**\n   * Obtenir un mur par son ID\n   */\n  getMurParId(id: string): ProprietesMur | undefined {\n    return this.mursActuels.value.find(mur => mur.id === id);\n  }\n\n  /**\n   * Obtenir un mur par son type\n   */\n  getMurParType(type: ProprietesMur['type']): ProprietesMur | undefined {\n    return this.mursActuels.value.find(mur => mur.type === type);\n  }\n\n  /**\n   * Obtenir le mur principal\n   */\n  getMurPrincipal(): ProprietesMur | undefined {\n    return this.getMurParType('principal');\n  }\n\n  /**\n   * Obtenir le mur arrière\n   */\n  getMurArriere(): ProprietesMur | undefined {\n    return this.getMurParType('arriere');\n  }\n\n  /**\n   * Obtenir le mur gauche\n   */\n  getMurGauche(): ProprietesMur | undefined {\n    return this.getMurParType('gauche');\n  }\n\n  /**\n   * Obtenir le mur droit\n   */\n  getMurDroit(): ProprietesMur | undefined {\n    return this.getMurParType('droit');\n  }\n\n  /**\n   * Modifier la position d'un mur\n   */\n  modifierPositionMur(type: ProprietesMur['type'], nouvellePosition: { x: number; y: number; z: number }): void {\n    try {\n      // Validation des paramètres\n      if (!type || !nouvellePosition) {\n        throw new Error('Paramètres manquants pour la modification de position');\n      }\n      \n      if (typeof nouvellePosition.x !== 'number' || \n          typeof nouvellePosition.y !== 'number' || \n          typeof nouvellePosition.z !== 'number') {\n        throw new Error('Position invalide: coordonnées doivent être des nombres');\n      }\n      \n      const config = this.configurationService.getConfiguration();\n      const murConfig = config.murs[type];\n      \n      if (!murConfig) {\n        throw new Error(`Mur de type '${type}' non trouvé`);\n      }\n      \n      murConfig.position = nouvellePosition;\n      this.configurationService.mettreAJourMur(type, murConfig);\n    } catch (error) {\n      console.error('Erreur lors de la modification de position du mur:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Modifier les dimensions d'un mur\n   */\n  modifierDimensionsMur(type: ProprietesMur['type'], nouvellesDimensions: { width: number; height: number; depth: number }): void {\n    const config = this.configurationService.getConfiguration();\n    const murConfig = config.murs[type];\n    \n    if (murConfig) {\n      murConfig.dimensions = nouvellesDimensions;\n      this.configurationService.mettreAJourMur(type, murConfig);\n    }\n  }\n\n  /**\n   * Modifier la couleur d'un mur\n   */\n  modifierCouleurMur(type: ProprietesMur['type'], nouvelleCouleur: number): void {\n    const config = this.configurationService.getConfiguration();\n    const murConfig = config.murs[type];\n    \n    if (murConfig) {\n      murConfig.couleur = nouvelleCouleur;\n      this.configurationService.mettreAJourMur(type, murConfig);\n    }\n  }\n\n  /**\n   * Modifier l'épaisseur d'un mur\n   */\n  modifierEpaisseurMur(type: ProprietesMur['type'], nouvelleEpaisseur: number): void {\n    const config = this.configurationService.getConfiguration();\n    const murConfig = config.murs[type];\n    \n    if (murConfig) {\n      murConfig.epaisseur = nouvelleEpaisseur;\n      murConfig.dimensions.depth = nouvelleEpaisseur;\n      this.configurationService.mettreAJourMur(type, murConfig);\n    }\n  }\n\n  /**\n   * Valider un mur\n   */\n  validerMur(mur: ProprietesMur): ValidationMur {\n    const erreurs: string[] = [];\n    const avertissements: string[] = [];\n\n    // Validation des dimensions\n    if (mur.dimensions.width  1) {\n      avertissements.push('L\\'épaisseur du mur est très épaisse (> 1m)');\n    }\n\n    // Validation du pourcentage d'ouvertures\n    if (mur.pourcentageOuvertures > 50) {\n      avertissements.push('Le mur a plus de 50% d\\'ouvertures');\n    }\n\n    // Validation de la position\n    if (Math.abs(mur.position.x) > 10 || Math.abs(mur.position.y) > 10 || Math.abs(mur.position.z) > 10) {\n      avertissements.push('La position du mur est très éloignée de l\\'origine');\n    }\n\n    return {\n      isValid: erreurs.length === 0,\n      erreurs,\n      avertissements\n    };\n  }\n\n  /**\n   * Obtenir les statistiques des murs\n   */\n  getStatistiquesMurs(): {\n    nombreTotal: number;\n    surfaceTotale: number;\n    volumeTotal: number;\n    nombreOuvertures: number;\n    pourcentageOuverturesMoyen: number;\n  } {\n    const murs = this.getMurs();\n    \n    const nombreTotal = murs.length;\n    const surfaceTotale = murs.reduce((total, mur) => total + mur.surface, 0);\n    const volumeTotal = murs.reduce((total, mur) => total + mur.volume, 0);\n    const nombreOuvertures = murs.reduce((total, mur) => total + mur.nombreOuvertures, 0);\n    const pourcentageOuverturesMoyen = murs.length > 0 ? \n      murs.reduce((total, mur) => total + mur.pourcentageOuvertures, 0) / murs.length : 0;\n\n    return {\n      nombreTotal,\n      surfaceTotale: Math.round(surfaceTotale * 100) / 100,\n      volumeTotal: Math.round(volumeTotal * 100) / 100,\n      nombreOuvertures,\n      pourcentageOuverturesMoyen: Math.round(pourcentageOuverturesMoyen * 100) / 100\n    };\n  }\n\n  /**\n   * Obtenir les murs avec le plus d'ouvertures\n   */\n  getMursAvecPlusOuvertures(): ProprietesMur[] {\n    const murs = this.getMurs();\n    const maxOuvertures = Math.max(...murs.map(mur => mur.nombreOuvertures));\n    return murs.filter(mur => mur.nombreOuvertures === maxOuvertures);\n  }\n\n  /**\n   * Obtenir les murs sans ouvertures\n   */\n  getMursSansOuvertures(): ProprietesMur[] {\n    return this.getMurs().filter(mur => mur.nombreOuvertures === 0);\n  }\n\n  /**\n   * Calculer la distance entre deux murs\n   */\n  calculerDistanceEntreMurs(mur1: ProprietesMur, mur2: ProprietesMur): number {\n    const dx = mur1.position.x - mur2.position.x;\n    const dy = mur1.position.y - mur2.position.y;\n    const dz = mur1.position.z - mur2.position.z;\n    \n    return Math.round(Math.sqrt(dx * dx + dy * dy + dz * dz) * 100) / 100;\n  }\n\n  /**\n   * Obtenir les murs adjacents\n   */\n  getMursAdjacents(mur: ProprietesMur): ProprietesMur[] {\n    const murs = this.getMurs();\n    const mursAdjacents: ProprietesMur[] = [];\n    \n    murs.forEach(autreMur => {\n      if (autreMur.id !== mur.id) {\n        const distance = this.calculerDistanceEntreMurs(mur, autreMur);\n        // Considérer comme adjacent si la distance est inférieure à 5m\n        if (distance \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MursControllerComponent.html":{"url":"components/MursControllerComponent.html","title":"component - MursControllerComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  MursControllerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/scene3d/controls/murs-controller.component.ts\n\n\n\n    \n        Description\n    \n    \n        Composant pour contrôler les murs\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-murs-controller\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./murs-controller.component.html\n            \n\n\n\n            \n                styleUrl\n                ./murs-controller.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addOuverture\n                            \n                            \n                                deleteMur\n                            \n                            \n                                duplicateMur\n                            \n                            \n                                onMurChange\n                            \n                            \n                                removeOuverture\n                            \n                            \n                                selectMur\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                isVisible\n                            \n                            \n                                murs\n                            \n                            \n                                selectedMurId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                murChanged\n                            \n                            \n                                murDeleted\n                            \n                            \n                                murDuplicated\n                            \n                            \n                                murSelected\n                            \n                            \n                                ouvertureAdded\n                            \n                            \n                                ouvertureRemoved\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    murSelectionne\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        isVisible\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/murs-controller.component.ts:35\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        murs\n                    \n                \n                \n                    \n                        Type :         Mur[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/murs-controller.component.ts:36\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedMurId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/murs-controller.component.ts:37\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        murChanged\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/murs-controller.component.ts:40\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        murDeleted\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/murs-controller.component.ts:44\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        murDuplicated\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/murs-controller.component.ts:43\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        murSelected\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/murs-controller.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ouvertureAdded\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/murs-controller.component.ts:41\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ouvertureRemoved\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/murs-controller.component.ts:42\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addOuverture\n                        \n                    \n                \n            \n            \n                \naddOuverture()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/murs-controller.component.ts:61\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteMur\n                        \n                    \n                \n            \n            \n                \ndeleteMur()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/murs-controller.component.ts:86\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        duplicateMur\n                        \n                    \n                \n            \n            \n                \nduplicateMur()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/murs-controller.component.ts:80\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onMurChange\n                        \n                    \n                \n            \n            \n                \nonMurChange()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/murs-controller.component.ts:55\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeOuverture\n                        \n                    \n                \n            \n            \n                \nremoveOuverture(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/murs-controller.component.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectMur\n                        \n                    \n                \n            \n            \n                \nselectMur(murId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/murs-controller.component.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                murId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        murSelectionne\n                    \n                \n\n                \n                    \n                        getmurSelectionne()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/scene3d/controls/murs-controller.component.ts:46\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n/**\n * Interface pour un mur\n */\nexport interface Mur {\n  id: string;\n  nom: string;\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: string;\n  epaisseur: number;\n  ouvertures: Array;\n}\n\n/**\n * Composant pour contrôler les murs\n */\n@Component({\n  selector: 'app-murs-controller',\n  imports: [CommonModule, FormsModule],\n  templateUrl: './murs-controller.component.html',\n  styleUrl: './murs-controller.component.css',\n  standalone: true\n})\nexport class MursControllerComponent {\n  @Input() isVisible: boolean = false;\n  @Input() murs: Mur[] = [];\n  @Input() selectedMurId: string = '';\n\n  @Output() murSelected = new EventEmitter();\n  @Output() murChanged = new EventEmitter();\n  @Output() ouvertureAdded = new EventEmitter();\n  @Output() ouvertureRemoved = new EventEmitter();\n  @Output() murDuplicated = new EventEmitter();\n  @Output() murDeleted = new EventEmitter();\n\n  get murSelectionne(): Mur | null {\n    return this.murs.find(m => m.id === this.selectedMurId) || null;\n  }\n\n  selectMur(murId: string): void {\n    this.selectedMurId = murId;\n    this.murSelected.emit(murId);\n  }\n\n  onMurChange(): void {\n    if (this.murSelectionne) {\n      this.murChanged.emit({ ...this.murSelectionne });\n    }\n  }\n\n  addOuverture(): void {\n    if (this.murSelectionne) {\n      const nouvelleOuverture = {\n        id: `ouverture_${Date.now()}`,\n        type: 'fenetre' as const,\n        position: { x: 0, y: 1, z: 0 },\n        dimensions: { width: 1.2, height: 1.5, depth: 0.05 },\n        couleur: '#87CEEB'\n      };\n      this.ouvertureAdded.emit({ murId: this.murSelectionne.id, ouverture: nouvelleOuverture });\n    }\n  }\n\n  removeOuverture(index: number): void {\n    if (this.murSelectionne) {\n      this.ouvertureRemoved.emit({ murId: this.murSelectionne.id, index });\n    }\n  }\n\n  duplicateMur(): void {\n    if (this.murSelectionne) {\n      this.murDuplicated.emit({ ...this.murSelectionne });\n    }\n  }\n\n  deleteMur(): void {\n    if (this.murSelectionne) {\n      this.murDeleted.emit(this.murSelectionne.id);\n    }\n  }\n}\n\n    \n\n    \n        \n  🧱 Contrôleur de Murs\n  \n  \n  \n    Murs disponibles\n    \n      \n        {{ mur.nom }}\n        \n          {{ mur.dimensions.width }}m × {{ mur.dimensions.height }}m × {{ mur.dimensions.depth }}m\n        \n        \n          {{ mur.ouvertures.length }} ouverture(s)\n        \n      \n      \n    \n  \n\n  \n  \n    📐 Détails du Mur : {{ murSelectionne.nom }}\n    \n    \n    \n      Position\n      \n        \n          X (m)\n          \n          {{ murSelectionne.position.x }}\n        \n        \n        \n          Y (m)\n          \n          {{ murSelectionne.position.y }}\n        \n        \n        \n          Z (m)\n          \n          {{ murSelectionne.position.z }}\n        \n      \n    \n\n    \n    \n      Dimensions\n      \n        \n          Largeur (m)\n          \n          {{ murSelectionne.dimensions.width }}\n        \n        \n        \n          Hauteur (m)\n          \n          {{ murSelectionne.dimensions.height }}\n        \n        \n        \n          Profondeur (m)\n          \n          {{ murSelectionne.dimensions.depth }}\n        \n      \n    \n\n    \n    \n      Couleur\n      \n        \n        {{ murSelectionne.couleur }}\n      \n    \n\n    \n    \n      Épaisseur\n      \n        \n        {{ murSelectionne.epaisseur }}m\n      \n    \n\n    \n    \n      Ouvertures ({{ murSelectionne.ouvertures.length }})\n       0\">\n        \n          \n            {{ ouverture.type }}\n            \n              {{ ouverture.dimensions.width }}m × {{ ouverture.dimensions.height }}m\n            \n          \n          \n          \n            ❌\n          \n        \n      \n      \n        Aucune ouverture sur ce mur\n      \n    \n\n    \n    \n      \n        ➕ Ajouter Ouverture\n      \n      \n      \n        📋 Dupliquer\n      \n      \n      \n        🗑️ Supprimer\n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  🧱 Contrôleur de Murs          Murs disponibles                  {{ mur.nom }}                  {{ mur.dimensions.width }}m × {{ mur.dimensions.height }}m × {{ mur.dimensions.depth }}m                          {{ mur.ouvertures.length }} ouverture(s)                                  📐 Détails du Mur : {{ murSelectionne.nom }}                  Position                        X (m)                    {{ murSelectionne.position.x }}                                  Y (m)                    {{ murSelectionne.position.y }}                                  Z (m)                    {{ murSelectionne.position.z }}                                Dimensions                        Largeur (m)                    {{ murSelectionne.dimensions.width }}                                  Hauteur (m)                    {{ murSelectionne.dimensions.height }}                                  Profondeur (m)                    {{ murSelectionne.dimensions.depth }}                                Couleur                      {{ murSelectionne.couleur }}                        Épaisseur                      {{ murSelectionne.epaisseur }}m                        Ouvertures ({{ murSelectionne.ouvertures.length }})       0\">                              {{ ouverture.type }}                          {{ ouverture.dimensions.width }}m × {{ ouverture.dimensions.height }}m                                                      ❌                                      Aucune ouverture sur ce mur                                ➕ Ajouter Ouverture                          📋 Dupliquer                          🗑️ Supprimer            '\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'CalculateurFenetresComponent', 'selector': 'app-calculateur-fenetres'},{'name': 'ColorSelectorComponent', 'selector': 'app-color-selector'},{'name': 'DimensionsControllerComponent', 'selector': 'app-dimensions-controller'},{'name': 'FenetresCalculatorComponent', 'selector': 'app-fenetres-calculator'},{'name': 'MursControllerComponent', 'selector': 'app-murs-controller'},{'name': 'OuverturesControllerComponent', 'selector': 'app-ouvertures-controller'},{'name': 'Scene3d', 'selector': 'app-scene3d'},{'name': 'Scene3dCoreComponent', 'selector': 'app-scene3d-core'},{'name': 'Scene3dRefactored', 'selector': 'app-scene3d'},{'name': 'StructureControllerComponent', 'selector': 'app-structure-controller'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MursControllerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OpeningConfig.html":{"url":"interfaces/OpeningConfig.html","title":"interface - OpeningConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OpeningConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/config/building-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration d'une ouverture (porte ou fenêtre)\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            dimensions\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dimensions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dimensions:         Dimensions3D\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Dimensions3D\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         Position3D\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Position3D\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"door\" | \"window\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"door\" | \"window\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Position3D {\n  x: number;\n  y: number;\n  z: number;\n}\n\n/**\n * Dimensions 3D d'un objet\n * @param width - Largeur (axe X)\n * @param height - Hauteur (axe Y)\n * @param depth - Profondeur (axe Z)\n */\nexport interface Dimensions3D {\n  width: number;\n  height: number;\n  depth: number;\n}\n\n/**\n * Configuration d'un mur simple\n * @param position - Position du centre du mur\n * @param dimensions - Taille du mur\n * @param color - Couleur hexadécimale (ex: 0xaaaaaa)\n */\nexport interface WallConfig {\n  position: Position3D;\n  dimensions: Dimensions3D;\n  color: number;\n}\n\n/**\n * Configuration d'une ouverture (porte ou fenêtre)\n * @param position - Position du centre de l'ouverture\n * @param dimensions - Taille de l'ouverture\n * @param color - Couleur de l'élément\n * @param type - Type d'ouverture ('door' ou 'window')\n */\nexport interface OpeningConfig {\n  position: Position3D;\n  dimensions: Dimensions3D;\n  color: number;\n  type: 'door' | 'window';\n}\n\n/**\n * Configuration du mur principal avec ouvertures (façade)\n * @param contour - Points définissant la forme du mur\n * @param thickness - Épaisseur du mur\n * @param position - Position du mur dans l'espace\n * @param color - Couleur du mur\n * @param openings - Ouvertures (porte et fenêtres) dans ce mur\n */\nexport interface MainWallConfig {\n  contour: Position3D[];\n  thickness: number;\n  position: Position3D;\n  color: number;\n  openings: {\n    door: OpeningConfig;\n    window1: OpeningConfig;\n    window2: OpeningConfig;\n  };\n}\n\n/**\n * Configuration de la caméra et des contrôles\n * @param initial - Position et paramètres initiaux de la caméra\n * @param target - Point que la caméra regarde\n * @param controls - Paramètres des contrôles souris\n */\nexport interface CameraConfig {\n  initial: {\n    position: Position3D;\n    rotationX: number;  // Rotation verticale\n    rotationY: number;  // Rotation horizontale\n    zoom: number;       // Distance de la caméra\n  };\n  target: Position3D;   // Point central regardé par la caméra\n  controls: {\n    minZoom: number;      // Distance minimale\n    maxZoom: number;      // Distance maximale\n    rotationSpeed: number; // Vitesse de rotation\n    zoomSpeed: number;     // Vitesse de zoom\n  };\n}\n\n/**\n * Configuration de l'éclairage de la scène\n * @param ambient - Lumière ambiante (éclairage général)\n * @param directional - Lumière directionnelle (comme le soleil)\n */\nexport interface LightingConfig {\n  ambient: {\n    color: number;      // Couleur de la lumière ambiante\n    intensity: number;  // Intensité (0-1)\n  };\n  directional: {\n    color: number;      // Couleur de la lumière directionnelle\n    intensity: number;  // Intensité\n    position: Position3D; // Position de la source lumineuse\n    shadow: {\n      mapSize: number;  // Qualité des ombres (résolution)\n    };\n  };\n}\n\n/**\n * Configuration générale de la scène 3D\n * @param background - Couleur de fond de la scène\n * @param camera - Paramètres de la caméra (champ de vision, distances)\n */\nexport interface SceneConfig {\n  background: number;   // Couleur de fond (ex: 0xbfd1e5 = bleu ciel)\n  camera: {\n    fov: number;        // Champ de vision (field of view) en degrés\n    near: number;       // Distance de rendu minimale\n    far: number;        // Distance de rendu maximale\n  };\n}\n\n/**\n * ===============================================\n * CONFIGURATION PRINCIPALE DU BÂTIMENT\n * ===============================================\n * Toutes les données du modèle 3D sont centralisées ici\n */\nexport const BUILDING_CONFIG = {\n  \n  /**\n   * SCÈNE 3D - Paramètres généraux\n   */\n  scene: {\n    background: 0xbfd1e5,  // Couleur bleu ciel pour le fond\n    camera: {\n      fov: 75,             // Angle de vue (75° = vue naturelle)\n      near: 0.1,           // Objets plus proches que 0.1 non rendus\n      far: 1000            // Objets plus loin que 1000 non rendus\n    }\n  } as SceneConfig,\n\n  /**\n   * ÉCLAIRAGE - Lumières de la scène\n   */\n  lighting: {\n    ambient: {   \n      color: 0xffffff,     // Lumière blanche ambiante\n      intensity: 0.6       // 60% d'intensité (éclairage doux)\n    },\n    directional: {\n      color: 0xffffff,     // Lumière blanche directionnelle (soleil)\n      intensity: 1,        // 100% d'intensité\n      position: { x: 10, y: 20, z: 10 }, // Position du \"soleil\"\n      shadow: {\n        mapSize: 2048      // Résolution des ombres (2048x2048)\n      }\n    }\n  } as LightingConfig,\n\n  /**\n   * CAMÉRA - Point de vue et contrôles\n   */\n  camera: {\n    initial: {\n      position: { x: 10, y: 10, z: 9 }, // Position initiale de la caméra\n      rotationX: 0.3,                   // Inclinaison verticale\n      rotationY: 0.5,                   // Rotation horizontale\n      zoom: 15                          // Distance initiale\n    },\n    target: { x: 0, y: 1.25, z: 0 },   // Point regardé (centre du bâtiment)\n    controls: {\n      minZoom: 5,           // Distance minimale (zoom max)\n      maxZoom: 50,          // Distance maximale (zoom min)\n      rotationSpeed: 0.01,  // Sensibilité de rotation souris\n      zoomSpeed: 0.01       // Sensibilité du zoom molette\n    }\n  } as CameraConfig,\n\n  /**\n   * SOL - Plateforme de base\n   */\n  ground: {\n    position: { x: 0, y: -0.1, z: 0 }, // Légèrement sous le niveau 0\n    dimensions: { width: 8, height: 0.2, depth: 5 }, // 8x5m, épaisseur 20cm\n    color: 0x2E1E1A  \n  } as WallConfig,\n\n  /**\n   * TOIT - Couverture du bâtiment\n   */\n  roof: {\n    position: { x: 0, y: 2.6, z: 0 },  // Au-dessus des murs (2.5m + 0.1m)\n    dimensions: { width: 8.4, height: 0.2, depth: 5 }, \n    color: 0x4169e1       // Couleur bleu royal\n  } as WallConfig,\n\n  /**\n   * MUR PRINCIPAL (FAÇADE) - Mur avec ouvertures\n   * Ce mur utilise ExtrudeGeometry pour créer de vraies ouvertures\n   */\n  mainWall: {\n    contour: [\n      // Points définissant la forme rectangulaire du mur (8m x 2.5m)\n      { x: -4, y: 0, z: 0 },    // Coin bas gauche\n      { x: 4, y: 0, z: 0 },     // Coin bas droit\n      { x: 4, y: 2.5, z: 0 },   // Coin haut droit\n      { x: -4, y: 2.5, z: 0 },  // Coin haut gauche\n      { x: -4, y: 0, z: 0 }     // Retour au point de départ\n    ],\n    thickness: 0.2,             // Épaisseur du mur (20cm)\n    position: { x: 0, y: 0, z: 2.3 }, // Position du mur dans l'espace\n    color: 0xaaaaaa,            // Couleur gris clair\n    openings: {\n      // PORTE CENTRALE\n      door: {\n        position: { x: 0, y: 1.05, z: 2.3 },\n        dimensions: { width: 1, height: 2, depth: 0.05 }, // 1m x 2m\n        color: 0x00ff00,        // Couleur verte\n        type: 'door' as const\n      },\n      // PREMIÈRE FENÊTRE (gauche)\n      window1: {\n        position: { x: -2, y: 1.5, z: 2.3 }, \n        dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n        color: 0xff0000,        // Couleur rouge\n        type: 'window' as const\n      },\n      // DEUXIÈME FENÊTRE (droite)\n      window2: {\n        position: { x: 2, y: 1.5, z: 2.3 }, \n        dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n        color: 0xff0000,        // Couleur rouge\n        type: 'window' as const\n      }\n    }\n  } as MainWallConfig,\n\n\n  /**\n   * AUTRES MURS - Murs latéraux et arrière (murs pleins)\n   */\n  walls: {\n    // MUR ARRIÈRE\n    back: {\n      position: { x: 0, y: 0, z: -2.5 },\n      dimensions: { width: 8, height: 2.5, depth: 0.2 }, // 8m x 2.5m x 20cm\n      color: 0xaaaaaa,\n      openings: {\n        window1: {\n          position: { x: 0, y: 1.5, z: -2.2 },\n          dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n    },\n    // MUR GAUCHE\n    left: {\n      position: { x: -3.9, y: 1.25, z: 0 }, \n      dimensions: { width: 0.2, height: 2.5, depth: 5 }, // 20cm x 2.5m x 5m\n      color: 0xaaaaaa,\n      openings: {\n        window5: {\n          position: { x: -3.8, y: 1.5, z: 0 },\n          dimensions: { width: 1.2, height: 1.0, depth: 0.05 }, // 1.2m x 1m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n      // Couleur gris clair\n    },\n    // MUR DROIT\n    right: {\n      position: { x: 3.8, y: 0, z: 0 },\n      dimensions: { width: 0.2, height: 2.5, depth: 5 }, // 20cm x 2.5m x 5m\n      color: 0xaaaaaa,\n      openings: {\n        // PORTE D'ENTRÉE\n        door: {\n          position: { x: 3.8, y: 1.05, z: 0 },\n          dimensions: { width: 1, height: 2.1, depth: 0.05 }, // 1m x 2.1m\n          color: 0x00ff00,        // Couleur verte\n          type: 'door' as const\n        },\n        // FENÊTRE\n        window1: {\n          position: { x: 3.8, y: 1.5, z: 1.5 },\n          dimensions: { width: 1.2, height: 1.0, depth: 0.05 }, // 1.2m x 1m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n    }\n  },\n\n  /**\n   * AXES DE RÉFÉRENCE (REPÈRE) - Pour s'orienter dans l'espace\n   */\n  axes: {\n    size: 8,                  // Longueur des axes (8 unités)\n    labels: [\n      // Axe X (rouge) - gauche/droite\n      { text: 'X', position: { x: 10, y: 0, z: 0 }, color: 0xff0000 },\n      // Axe Y (vert) - bas/haut\n      { text: 'Y', position: { x: 0, y: 10, z: 0 }, color: 0x00ff00 },\n      // Axe Z (bleu) - avant/arrière\n      { text: 'Z', position: { x: 0, y: 0, z: 10 }, color: 0x0000ff }\n    ],\n    labelSize: { width: 0.2, height: 0.2, depth: 0.2 } // Taille des cubes de repère\n  }\n};\n\n/**\n * ===============================================\n * FONCTIONS UTILITAIRES\n * ===============================================\n * Calculs automatiques pour les ouvertures dans les murs\n */\nexport class WallCalculations {\n  \n  /**\n   * Calcule les coordonnées d'une ouverture de porte\n   * @param config - Configuration de la porte\n   * @returns Points définissant le trou rectangulaire pour la porte\n   */\n  static getDoorHole(config: OpeningConfig) {\n    const halfWidth = config.dimensions.width / 2;  // Demi-largeur de la porte\n    return [\n      // Rectangle partant du sol (y=0) jusqu'à la hauteur de la porte\n      { x: config.position.x - halfWidth, y: 0 },                    // Bas gauche\n      { x: config.position.x + halfWidth, y: 0 },                    // Bas droit\n      { x: config.position.x + halfWidth, y: config.dimensions.height }, // Haut droit\n      { x: config.position.x - halfWidth, y: config.dimensions.height }, // Haut gauche\n      { x: config.position.x - halfWidth, y: 0 }                     // Retour au début\n    ];\n  }\n\n  /**\n   * Calcule les coordonnées d'une ouverture de fenêtre\n   * @param config - Configuration de la fenêtre\n   * @param bottomOffset - Distance du sol au bas de la fenêtre (par défaut 0.9m)\n   * @returns Points définissant le trou rectangulaire pour la fenêtre\n   */\n  static getWindowHole(config: OpeningConfig, bottomOffset: number = 0.9) {\n    const halfWidth = config.dimensions.width / 2;  // Demi-largeur de la fenêtre\n    const bottom = bottomOffset;                     // Position du bas de la fenêtre\n    const top = bottom + config.dimensions.height;  // Position du haut de la fenêtre\n    \n    return [\n      // Rectangle surélevé par rapport au sol\n      { x: config.position.x - halfWidth, y: bottom }, // Bas gauche\n      { x: config.position.x + halfWidth, y: bottom }, // Bas droit\n      { x: config.position.x + halfWidth, y: top },    // Haut droit\n      { x: config.position.x - halfWidth, y: top },    // Haut gauche\n      { x: config.position.x - halfWidth, y: bottom }  // Retour au début\n    ];\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Ouverture.html":{"url":"interfaces/Ouverture.html","title":"interface - Ouverture","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Ouverture\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/scene3d/controls/ouvertures-controller.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour une ouverture\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            couleur\n                                        \n                                \n                                \n                                        \n                                            dimensions\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            murParent\n                                        \n                                \n                                \n                                        \n                                            nom\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        couleur\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        couleur:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dimensions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dimensions:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        murParent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        murParent:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nom:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"porte\" | \"fenetre\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"porte\" | \"fenetre\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n/**\n * Interface pour une ouverture\n */\nexport interface Ouverture {\n  id: string;\n  nom: string;\n  type: 'porte' | 'fenetre';\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: string;\n  murParent: string;\n}\n\n/**\n * Composant pour contrôler les ouvertures\n */\n@Component({\n  selector: 'app-ouvertures-controller',\n  imports: [CommonModule, FormsModule],\n  templateUrl: './ouvertures-controller.component.html',\n  styleUrl: './ouvertures-controller.component.css',\n  standalone: true\n})\nexport class OuverturesControllerComponent {\n  @Input() isVisible: boolean = false;\n  @Input() ouvertures: Ouverture[] = [];\n  @Input() mursDisponibles: Array = [];\n  @Input() selectedOuvertureId: string = '';\n\n  @Output() ouvertureSelected = new EventEmitter();\n  @Output() ouvertureChanged = new EventEmitter();\n  @Output() ouvertureAdded = new EventEmitter();\n  @Output() ouvertureDuplicated = new EventEmitter();\n  @Output() ouvertureDeleted = new EventEmitter();\n\n  typeFilter: string = '';\n  murFilter: string = '';\n  ouverturesFiltrees: Ouverture[] = [];\n\n  ngOnInit(): void {\n    this.applyFilters();\n  }\n\n  ngOnChanges(): void {\n    this.applyFilters();\n  }\n\n  get ouvertureSelectionnee(): Ouverture | null {\n    return this.ouvertures.find(o => o.id === this.selectedOuvertureId) || null;\n  }\n\n  applyFilters(): void {\n    this.ouverturesFiltrees = this.ouvertures.filter(ouverture => {\n      const typeMatch = !this.typeFilter || ouverture.type === this.typeFilter;\n      const murMatch = !this.murFilter || ouverture.murParent === this.murFilter;\n      return typeMatch && murMatch;\n    });\n  }\n\n  selectOuverture(ouvertureId: string): void {\n    this.selectedOuvertureId = ouvertureId;\n    this.ouvertureSelected.emit(ouvertureId);\n  }\n\n  onOuvertureChange(): void {\n    if (this.ouvertureSelectionnee) {\n      this.ouvertureChanged.emit({ ...this.ouvertureSelectionnee });\n    }\n  }\n\n  addOuverture(): void {\n    const nouvelleOuverture: Ouverture = {\n      id: `ouverture_${Date.now()}`,\n      nom: 'Nouvelle ouverture',\n      type: 'fenetre',\n      position: { x: 0, y: 1, z: 0 },\n      dimensions: { width: 1.2, height: 1.5, depth: 0.05 },\n      couleur: '#87CEEB',\n      murParent: this.mursDisponibles[0]?.id || ''\n    };\n    this.ouvertureAdded.emit(nouvelleOuverture);\n  }\n\n  duplicateOuverture(): void {\n    if (this.ouvertureSelectionnee) {\n      const ouvertureDupliquee: Ouverture = {\n        ...this.ouvertureSelectionnee,\n        id: `ouverture_${Date.now()}`,\n        nom: `${this.ouvertureSelectionnee.nom} (copie)`\n      };\n      this.ouvertureDuplicated.emit(ouvertureDupliquee);\n    }\n  }\n\n  deleteOuverture(): void {\n    if (this.ouvertureSelectionnee) {\n      this.ouvertureDeleted.emit(this.ouvertureSelectionnee.id);\n    }\n  }\n\n  getMurName(murId: string): string {\n    const mur = this.mursDisponibles.find(m => m.id === murId);\n    return mur ? mur.nom : 'Mur inconnu';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OuverturesControllerComponent.html":{"url":"components/OuverturesControllerComponent.html","title":"component - OuverturesControllerComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  OuverturesControllerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/scene3d/controls/ouvertures-controller.component.ts\n\n\n\n    \n        Description\n    \n    \n        Composant pour contrôler les ouvertures\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-ouvertures-controller\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./ouvertures-controller.component.html\n            \n\n\n\n            \n                styleUrl\n                ./ouvertures-controller.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                murFilter\n                            \n                            \n                                ouverturesFiltrees\n                            \n                            \n                                typeFilter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addOuverture\n                            \n                            \n                                applyFilters\n                            \n                            \n                                deleteOuverture\n                            \n                            \n                                duplicateOuverture\n                            \n                            \n                                getMurName\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onOuvertureChange\n                            \n                            \n                                selectOuverture\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                isVisible\n                            \n                            \n                                mursDisponibles\n                            \n                            \n                                ouvertures\n                            \n                            \n                                selectedOuvertureId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                ouvertureAdded\n                            \n                            \n                                ouvertureChanged\n                            \n                            \n                                ouvertureDeleted\n                            \n                            \n                                ouvertureDuplicated\n                            \n                            \n                                ouvertureSelected\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    ouvertureSelectionnee\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        isVisible\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:29\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        mursDisponibles\n                    \n                \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:31\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ouvertures\n                    \n                \n                \n                    \n                        Type :         Ouverture[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:30\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedOuvertureId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:32\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        ouvertureAdded\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:36\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ouvertureChanged\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:35\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ouvertureDeleted\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:38\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ouvertureDuplicated\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:37\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ouvertureSelected\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:34\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addOuverture\n                        \n                    \n                \n            \n            \n                \naddOuverture()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:75\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        applyFilters\n                        \n                    \n                \n            \n            \n                \napplyFilters()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:56\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteOuverture\n                        \n                    \n                \n            \n            \n                \ndeleteOuverture()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:99\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        duplicateOuverture\n                        \n                    \n                \n            \n            \n                \nduplicateOuverture()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:88\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMurName\n                        \n                    \n                \n            \n            \n                \ngetMurName(murId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                murId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:48\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onOuvertureChange\n                        \n                    \n                \n            \n            \n                \nonOuvertureChange()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:69\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectOuverture\n                        \n                    \n                \n            \n            \n                \nselectOuverture(ouvertureId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ouvertureId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        murFilter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ouverturesFiltrees\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Ouverture[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        typeFilter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:40\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        ouvertureSelectionnee\n                    \n                \n\n                \n                    \n                        getouvertureSelectionnee()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/scene3d/controls/ouvertures-controller.component.ts:52\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n/**\n * Interface pour une ouverture\n */\nexport interface Ouverture {\n  id: string;\n  nom: string;\n  type: 'porte' | 'fenetre';\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: string;\n  murParent: string;\n}\n\n/**\n * Composant pour contrôler les ouvertures\n */\n@Component({\n  selector: 'app-ouvertures-controller',\n  imports: [CommonModule, FormsModule],\n  templateUrl: './ouvertures-controller.component.html',\n  styleUrl: './ouvertures-controller.component.css',\n  standalone: true\n})\nexport class OuverturesControllerComponent {\n  @Input() isVisible: boolean = false;\n  @Input() ouvertures: Ouverture[] = [];\n  @Input() mursDisponibles: Array = [];\n  @Input() selectedOuvertureId: string = '';\n\n  @Output() ouvertureSelected = new EventEmitter();\n  @Output() ouvertureChanged = new EventEmitter();\n  @Output() ouvertureAdded = new EventEmitter();\n  @Output() ouvertureDuplicated = new EventEmitter();\n  @Output() ouvertureDeleted = new EventEmitter();\n\n  typeFilter: string = '';\n  murFilter: string = '';\n  ouverturesFiltrees: Ouverture[] = [];\n\n  ngOnInit(): void {\n    this.applyFilters();\n  }\n\n  ngOnChanges(): void {\n    this.applyFilters();\n  }\n\n  get ouvertureSelectionnee(): Ouverture | null {\n    return this.ouvertures.find(o => o.id === this.selectedOuvertureId) || null;\n  }\n\n  applyFilters(): void {\n    this.ouverturesFiltrees = this.ouvertures.filter(ouverture => {\n      const typeMatch = !this.typeFilter || ouverture.type === this.typeFilter;\n      const murMatch = !this.murFilter || ouverture.murParent === this.murFilter;\n      return typeMatch && murMatch;\n    });\n  }\n\n  selectOuverture(ouvertureId: string): void {\n    this.selectedOuvertureId = ouvertureId;\n    this.ouvertureSelected.emit(ouvertureId);\n  }\n\n  onOuvertureChange(): void {\n    if (this.ouvertureSelectionnee) {\n      this.ouvertureChanged.emit({ ...this.ouvertureSelectionnee });\n    }\n  }\n\n  addOuverture(): void {\n    const nouvelleOuverture: Ouverture = {\n      id: `ouverture_${Date.now()}`,\n      nom: 'Nouvelle ouverture',\n      type: 'fenetre',\n      position: { x: 0, y: 1, z: 0 },\n      dimensions: { width: 1.2, height: 1.5, depth: 0.05 },\n      couleur: '#87CEEB',\n      murParent: this.mursDisponibles[0]?.id || ''\n    };\n    this.ouvertureAdded.emit(nouvelleOuverture);\n  }\n\n  duplicateOuverture(): void {\n    if (this.ouvertureSelectionnee) {\n      const ouvertureDupliquee: Ouverture = {\n        ...this.ouvertureSelectionnee,\n        id: `ouverture_${Date.now()}`,\n        nom: `${this.ouvertureSelectionnee.nom} (copie)`\n      };\n      this.ouvertureDuplicated.emit(ouvertureDupliquee);\n    }\n  }\n\n  deleteOuverture(): void {\n    if (this.ouvertureSelectionnee) {\n      this.ouvertureDeleted.emit(this.ouvertureSelectionnee.id);\n    }\n  }\n\n  getMurName(murId: string): string {\n    const mur = this.mursDisponibles.find(m => m.id === murId);\n    return mur ? mur.nom : 'Mur inconnu';\n  }\n}\n\n    \n\n    \n        \n  🚪 Gestion des Ouvertures\n  \n  \n  \n    Ouvertures disponibles\n    \n      \n        {{ ouverture.type }} #{{ i + 1 }}\n        \n          {{ ouverture.dimensions.width }}m × {{ ouverture.dimensions.height }}m × {{ ouverture.dimensions.depth }}m\n        \n        \n          Position: ({{ ouverture.position.x }}, {{ ouverture.position.y }}, {{ ouverture.position.z }})\n        \n      \n      \n    \n  \n\n  \n  \n    📐 Détails de l'Ouverture : {{ ouvertureSelectionnee.type }}\n    \n    \n    \n      Type\n      \n        Porte\n        Fenêtre\n      \n    \n\n    \n    \n      Position\n      \n        \n          X (m)\n          \n          {{ ouvertureSelectionnee.position.x }}\n        \n        \n        \n          Y (m)\n          \n          {{ ouvertureSelectionnee.position.y }}\n        \n        \n        \n          Z (m)\n          \n          {{ ouvertureSelectionnee.position.z }}\n        \n      \n    \n\n    \n    \n      Dimensions\n      \n        \n          Largeur (m)\n          \n          {{ ouvertureSelectionnee.dimensions.width }}\n        \n        \n        \n          Hauteur (m)\n          \n          {{ ouvertureSelectionnee.dimensions.height }}\n        \n        \n        \n          Profondeur (m)\n          \n          {{ ouvertureSelectionnee.dimensions.depth }}\n        \n      \n    \n\n    \n    \n      Couleur\n      \n        \n        {{ ouvertureSelectionnee.couleur }}\n      \n    \n\n    \n    \n      \n        📋 Dupliquer\n      \n      \n      \n        🗑️ Supprimer\n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  🚪 Gestion des Ouvertures          Ouvertures disponibles                  {{ ouverture.type }} #{{ i + 1 }}                  {{ ouverture.dimensions.width }}m × {{ ouverture.dimensions.height }}m × {{ ouverture.dimensions.depth }}m                          Position: ({{ ouverture.position.x }}, {{ ouverture.position.y }}, {{ ouverture.position.z }})                                  📐 Détails de l\\'Ouverture : {{ ouvertureSelectionnee.type }}                  Type              Porte        Fenêtre                        Position                        X (m)                    {{ ouvertureSelectionnee.position.x }}                                  Y (m)                    {{ ouvertureSelectionnee.position.y }}                                  Z (m)                    {{ ouvertureSelectionnee.position.z }}                                Dimensions                        Largeur (m)                    {{ ouvertureSelectionnee.dimensions.width }}                                  Hauteur (m)                    {{ ouvertureSelectionnee.dimensions.height }}                                  Profondeur (m)                    {{ ouvertureSelectionnee.dimensions.depth }}                                Couleur                      {{ ouvertureSelectionnee.couleur }}                                📋 Dupliquer                          🗑️ Supprimer            '\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'CalculateurFenetresComponent', 'selector': 'app-calculateur-fenetres'},{'name': 'ColorSelectorComponent', 'selector': 'app-color-selector'},{'name': 'DimensionsControllerComponent', 'selector': 'app-dimensions-controller'},{'name': 'FenetresCalculatorComponent', 'selector': 'app-fenetres-calculator'},{'name': 'MursControllerComponent', 'selector': 'app-murs-controller'},{'name': 'OuverturesControllerComponent', 'selector': 'app-ouvertures-controller'},{'name': 'Scene3d', 'selector': 'app-scene3d'},{'name': 'Scene3dCoreComponent', 'selector': 'app-scene3d-core'},{'name': 'Scene3dRefactored', 'selector': 'app-scene3d'},{'name': 'StructureControllerComponent', 'selector': 'app-structure-controller'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'OuverturesControllerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaletteCouleurs.html":{"url":"interfaces/PaletteCouleurs.html","title":"interface - PaletteCouleurs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaletteCouleurs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/materiau/materiau.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les palettes de couleurs\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            couleurs\n                                        \n                                \n                                \n                                        \n                                            dateCreation\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            nom\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        couleurs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        couleurs:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateCreation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dateCreation:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nom:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"architecturale\" | \"moderne\" | \"classique\" | \"naturelle\" | \"personnalisee\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"architecturale\" | \"moderne\" | \"classique\" | \"naturelle\" | \"personnalisee\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Interface pour les propriétés d'un matériau\n */\nexport interface ProprietesMateriau {\n  id: string;\n  nom: string;\n  type: 'mur' | 'porte' | 'fenetre' | 'toit' | 'sol' | 'decoration';\n  couleur: number;\n  couleurHex: string;\n  couleurRgb: { r: number; g: number; b: number };\n  couleurHsl: { h: number; s: number; l: number };\n  texture?: string;\n  rugosite: number; // 0 = lisse, 1 = rugueux\n  metallic: number; // 0 = non métallique, 1 = métallique\n  transparent: boolean;\n  opacity: number; // 0 = transparent, 1 = opaque\n  emissive: number; // Couleur émissive\n  emissiveIntensity: number;\n  dateCreation: Date;\n  derniereModification: Date;\n}\n\n/**\n * Interface pour les palettes de couleurs\n */\nexport interface PaletteCouleurs {\n  id: string;\n  nom: string;\n  description: string;\n  couleurs: number[];\n  type: 'architecturale' | 'moderne' | 'classique' | 'naturelle' | 'personnalisee';\n  dateCreation: Date;\n}\n\n/**\n * Interface pour les textures\n */\nexport interface ProprietesTexture {\n  id: string;\n  nom: string;\n  url: string;\n  type: 'diffuse' | 'normal' | 'roughness' | 'metallic' | 'emissive';\n  resolution: { width: number; height: number };\n  format: 'jpg' | 'png' | 'webp';\n  taille: number; // en KB\n}\n\n/**\n * Interface pour les statistiques des matériaux\n */\nexport interface StatistiquesMateriaux {\n  nombreTotal: number;\n  nombreParType: Record;\n  couleursUtilisees: number[];\n  texturesUtilisees: string[];\n  paletteLaPlusUtilisee: string;\n  materiauLePlusUtilise: string;\n}\n\n/**\n * Service de gestion des matériaux et couleurs\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MateriauService {\n  \n  private materiauxActuels = new BehaviorSubject([]);\n  private palettesActuelles = new BehaviorSubject([]);\n  private texturesActuelles = new BehaviorSubject([]);\n\n  public materiaux$ = this.materiauxActuels.asObservable();\n  public palettes$ = this.palettesActuelles.asObservable();\n  public textures$ = this.texturesActuelles.asObservable();\n\n  constructor() {\n    this.initialiserMateriauxParDefaut();\n    this.initialiserPalettesParDefaut();\n    this.initialiserTexturesParDefaut();\n  }\n\n  /**\n   * Initialiser les matériaux par défaut\n   */\n  private initialiserMateriauxParDefaut(): void {\n    const materiaux: ProprietesMateriau[] = [\n      // Matériaux pour murs\n      {\n        id: 'mur_beton',\n        nom: 'Béton Gris',\n        type: 'mur',\n        couleur: 0xaaaaaa,\n        couleurHex: '#aaaaaa',\n        couleurRgb: { r: 170, g: 170, b: 170 },\n        couleurHsl: { h: 0, s: 0, l: 67 },\n        rugosite: 0.7,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      {\n        id: 'mur_brique',\n        nom: 'Brique Rouge',\n        type: 'mur',\n        couleur: 0x8b4513,\n        couleurHex: '#8b4513',\n        couleurRgb: { r: 139, g: 69, b: 19 },\n        couleurHsl: { h: 25, s: 76, l: 31 },\n        rugosite: 0.8,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      {\n        id: 'mur_bois',\n        nom: 'Bois Naturel',\n        type: 'mur',\n        couleur: 0xdeb887,\n        couleurHex: '#deb887',\n        couleurRgb: { r: 222, g: 184, b: 135 },\n        couleurHsl: { h: 34, s: 57, l: 70 },\n        rugosite: 0.6,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      \n      // Matériaux pour portes\n      {\n        id: 'porte_bois_vert',\n        nom: 'Porte Bois Vert',\n        type: 'porte',\n        couleur: 0x00ff00,\n        couleurHex: '#00ff00',\n        couleurRgb: { r: 0, g: 255, b: 0 },\n        couleurHsl: { h: 120, s: 100, l: 50 },\n        rugosite: 0.4,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      {\n        id: 'porte_bois_brun',\n        nom: 'Porte Bois Brun',\n        type: 'porte',\n        couleur: 0x8b4513,\n        couleurHex: '#8b4513',\n        couleurRgb: { r: 139, g: 69, b: 19 },\n        couleurHsl: { h: 25, s: 76, l: 31 },\n        rugosite: 0.3,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      \n      // Matériaux pour fenêtres\n      {\n        id: 'fenetre_bleue',\n        nom: 'Fenêtre Bleue',\n        type: 'fenetre',\n        couleur: 0x0000ff,\n        couleurHex: '#0000ff',\n        couleurRgb: { r: 0, g: 0, b: 255 },\n        couleurHsl: { h: 240, s: 100, l: 50 },\n        rugosite: 0.1,\n        metallic: 0.0,\n        transparent: true,\n        opacity: 0.8,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      {\n        id: 'fenetre_rouge',\n        nom: 'Fenêtre Rouge',\n        type: 'fenetre',\n        couleur: 0xff0000,\n        couleurHex: '#ff0000',\n        couleurRgb: { r: 255, g: 0, b: 0 },\n        couleurHsl: { h: 0, s: 100, l: 50 },\n        rugosite: 0.1,\n        metallic: 0.0,\n        transparent: true,\n        opacity: 0.8,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      \n      // Matériaux pour toit\n      {\n        id: 'toit_bleu',\n        nom: 'Toit Bleu Royal',\n        type: 'toit',\n        couleur: 0x4169e1,\n        couleurHex: '#4169e1',\n        couleurRgb: { r: 65, g: 105, b: 225 },\n        couleurHsl: { h: 225, s: 73, l: 57 },\n        rugosite: 0.5,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      \n      // Matériaux pour sol\n      {\n        id: 'sol_marron',\n        nom: 'Sol Marron',\n        type: 'sol',\n        couleur: 0x8b4513,\n        couleurHex: '#8b4513',\n        couleurRgb: { r: 139, g: 69, b: 19 },\n        couleurHsl: { h: 25, s: 76, l: 31 },\n        rugosite: 0.9,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      }\n    ];\n    \n    this.materiauxActuels.next(materiaux);\n  }\n\n  /**\n   * Initialiser les palettes par défaut\n   */\n  private initialiserPalettesParDefaut(): void {\n    const palettes: PaletteCouleurs[] = [\n      {\n        id: 'palette_moderne',\n        nom: 'Palette Moderne',\n        description: 'Couleurs modernes et épurées',\n        couleurs: [0xaaaaaa, 0xffffff, 0x000000, 0x4169e1, 0x00ff00],\n        type: 'moderne',\n        dateCreation: new Date()\n      },\n      {\n        id: 'palette_classique',\n        nom: 'Palette Classique',\n        description: 'Couleurs traditionnelles et chaleureuses',\n        couleurs: [0x8b4513, 0xdeb887, 0x654321, 0xffd700, 0xcd853f],\n        type: 'classique',\n        dateCreation: new Date()\n      },\n      {\n        id: 'palette_naturelle',\n        nom: 'Palette Naturelle',\n        description: 'Couleurs inspirées de la nature',\n        couleurs: [0x228b22, 0x8fbc8f, 0x2e8b57, 0x90ee90, 0x32cd32],\n        type: 'naturelle',\n        dateCreation: new Date()\n      },\n      {\n        id: 'palette_architecturale',\n        nom: 'Palette Architecturale',\n        description: 'Couleurs professionnelles pour l\\'architecture',\n        couleurs: [0xaaaaaa, 0x696969, 0x2f4f4f, 0x708090, 0x778899],\n        type: 'architecturale',\n        dateCreation: new Date()\n      }\n    ];\n    \n    this.palettesActuelles.next(palettes);\n  }\n\n  /**\n   * Initialiser les textures par défaut\n   */\n  private initialiserTexturesParDefaut(): void {\n    const textures: ProprietesTexture[] = [\n      {\n        id: 'texture_beton',\n        nom: 'Texture Béton',\n        url: '/assets/textures/beton.jpg',\n        type: 'diffuse',\n        resolution: { width: 512, height: 512 },\n        format: 'jpg',\n        taille: 256\n      },\n      {\n        id: 'texture_brique',\n        nom: 'Texture Brique',\n        url: '/assets/textures/brique.jpg',\n        type: 'diffuse',\n        resolution: { width: 512, height: 512 },\n        format: 'jpg',\n        taille: 312\n      },\n      {\n        id: 'texture_bois',\n        nom: 'Texture Bois',\n        url: '/assets/textures/bois.jpg',\n        type: 'diffuse',\n        resolution: { width: 512, height: 512 },\n        format: 'jpg',\n        taille: 198\n      }\n    ];\n    \n    this.texturesActuelles.next(textures);\n  }\n\n  /**\n   * Convertir une couleur hexadécimale en RGB\n   */\n  hexToRgb(hex: string): { r: number; g: number; b: number } {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : { r: 0, g: 0, b: 0 };\n  }\n\n  /**\n   * Convertir une couleur RGB en HSL\n   */\n  rgbToHsl(r: number, g: number, b: number): { h: number; s: number; l: number } {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    \n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = 0, s = 0, l = (max + min) / 2;\n    \n    if (max !== min) {\n      const d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n      \n      switch (max) {\n        case r: h = (g - b) / d + (g  {\n    return this.materiaux$;\n  }\n\n  /**\n   * Obtenir un matériau par son ID\n   */\n  getMateriauParId(id: string): ProprietesMateriau | undefined {\n    return this.materiauxActuels.value.find(materiau => materiau.id === id);\n  }\n\n  /**\n   * Obtenir les matériaux par type\n   */\n  getMateriauxParType(type: ProprietesMateriau['type']): ProprietesMateriau[] {\n    return this.materiauxActuels.value.filter(materiau => materiau.type === type);\n  }\n\n  /**\n   * Obtenir les matériaux pour murs\n   */\n  getMateriauxMurs(): ProprietesMateriau[] {\n    return this.getMateriauxParType('mur');\n  }\n\n  /**\n   * Obtenir les matériaux pour portes\n   */\n  getMateriauxPortes(): ProprietesMateriau[] {\n    return this.getMateriauxParType('porte');\n  }\n\n  /**\n   * Obtenir les matériaux pour fenêtres\n   */\n  getMateriauxFenetres(): ProprietesMateriau[] {\n    return this.getMateriauxParType('fenetre');\n  }\n\n  /**\n   * Ajouter un nouveau matériau\n   */\n  ajouterMateriau(nouveauMateriau: Omit): void {\n    try {\n      // Validation des paramètres\n      if (!nouveauMateriau) {\n        throw new Error('Matériau manquant');\n      }\n      \n      if (!nouveauMateriau.nom || !nouveauMateriau.type) {\n        throw new Error('Nom et type du matériau requis');\n      }\n      \n      if (typeof nouveauMateriau.couleur !== 'number' || nouveauMateriau.couleur  0xFFFFFF) {\n        throw new Error('Couleur invalide: doit être un nombre entre 0 et 16777215');\n      }\n      \n      const materiauComplete: ProprietesMateriau = {\n        ...nouveauMateriau,\n        id: `materiau_${Date.now()}`,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      };\n      \n      const materiauxActuels = this.getMateriaux();\n      materiauxActuels.push(materiauComplete);\n      this.materiauxActuels.next(materiauxActuels);\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du matériau:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Modifier un matériau\n   */\n  modifierMateriau(id: string, nouvellesProprietes: Partial): void {\n    const materiauxActuels = this.getMateriaux();\n    const materiauIndex = materiauxActuels.findIndex(materiau => materiau.id === id);\n    \n    if (materiauIndex !== -1) {\n      materiauxActuels[materiauIndex] = {\n        ...materiauxActuels[materiauIndex],\n        ...nouvellesProprietes,\n        derniereModification: new Date()\n      };\n      this.materiauxActuels.next(materiauxActuels);\n    }\n  }\n\n  /**\n   * Supprimer un matériau\n   */\n  supprimerMateriau(id: string): void {\n    const materiauxActuels = this.getMateriaux();\n    const materiauxFiltres = materiauxActuels.filter(materiau => materiau.id !== id);\n    this.materiauxActuels.next(materiauxFiltres);\n  }\n\n  /**\n   * Obtenir toutes les palettes\n   */\n  getPalettes(): PaletteCouleurs[] {\n    return this.palettesActuelles.value;\n  }\n\n  /**\n   * Obtenir les palettes en tant qu'Observable\n   */\n  getPalettesObservable(): Observable {\n    return this.palettes$;\n  }\n\n  /**\n   * Obtenir une palette par son ID\n   */\n  getPaletteParId(id: string): PaletteCouleurs | undefined {\n    return this.palettesActuelles.value.find(palette => palette.id === id);\n  }\n\n  /**\n   * Obtenir les palettes par type\n   */\n  getPalettesParType(type: PaletteCouleurs['type']): PaletteCouleurs[] {\n    return this.palettesActuelles.value.filter(palette => palette.type === type);\n  }\n\n  /**\n   * Ajouter une nouvelle palette\n   */\n  ajouterPalette(nouvellePalette: Omit): void {\n    const paletteComplete: PaletteCouleurs = {\n      ...nouvellePalette,\n      id: `palette_${Date.now()}`,\n      dateCreation: new Date()\n    };\n    \n    const palettesActuelles = this.getPalettes();\n    palettesActuelles.push(paletteComplete);\n    this.palettesActuelles.next(palettesActuelles);\n  }\n\n  /**\n   * Obtenir toutes les textures\n   */\n  getTextures(): ProprietesTexture[] {\n    return this.texturesActuelles.value;\n  }\n\n  /**\n   * Obtenir les textures en tant qu'Observable\n   */\n  getTexturesObservable(): Observable {\n    return this.textures$;\n  }\n\n  /**\n   * Obtenir une texture par son ID\n   */\n  getTextureParId(id: string): ProprietesTexture | undefined {\n    return this.texturesActuelles.value.find(texture => texture.id === id);\n  }\n\n  /**\n   * Obtenir les textures par type\n   */\n  getTexturesParType(type: ProprietesTexture['type']): ProprietesTexture[] {\n    return this.texturesActuelles.value.filter(texture => texture.type === type);\n  }\n\n  /**\n   * Ajouter une nouvelle texture\n   */\n  ajouterTexture(nouvelleTexture: Omit): void {\n    const textureComplete: ProprietesTexture = {\n      ...nouvelleTexture,\n      id: `texture_${Date.now()}`\n    };\n    \n    const texturesActuelles = this.getTextures();\n    texturesActuelles.push(textureComplete);\n    this.texturesActuelles.next(texturesActuelles);\n  }\n\n  /**\n   * Obtenir les statistiques des matériaux\n   */\n  getStatistiquesMateriaux(): StatistiquesMateriaux {\n    const materiaux = this.getMateriaux();\n    const palettes = this.getPalettes();\n    const textures = this.getTextures();\n    \n    const nombreTotal = materiaux.length;\n    const nombreParType: Record = {};\n    \n    materiaux.forEach(materiau => {\n      nombreParType[materiau.type] = (nombreParType[materiau.type] || 0) + 1;\n    });\n    \n    const couleursUtilisees = materiaux.map(materiau => materiau.couleur);\n    const texturesUtilisees = materiaux\n      .filter(materiau => materiau.texture)\n      .map(materiau => materiau.texture!);\n    \n    const paletteLaPlusUtilisee = palettes.length > 0 ? palettes[0].nom : 'Aucune';\n    const materiauLePlusUtilise = Object.keys(nombreParType).reduce((a, b) => \n      nombreParType[a] > nombreParType[b] ? a : b\n    );\n\n    return {\n      nombreTotal,\n      nombreParType,\n      couleursUtilisees,\n      texturesUtilisees,\n      paletteLaPlusUtilisee,\n      materiauLePlusUtilise\n    };\n  }\n\n  /**\n   * Générer une couleur aléatoire\n   */\n  genererCouleurAleatoire(): number {\n    return Math.floor(Math.random() * 16777215);\n  }\n\n  /**\n   * Générer une palette de couleurs harmonieuses\n   */\n  genererPaletteHarmonieuse(couleurBase: number, nombreCouleurs: number = 5): number[] {\n    const couleurs: number[] = [couleurBase];\n    const rgb = this.hexToRgb(this.numberToHex(couleurBase));\n    const hsl = this.rgbToHsl(rgb.r, rgb.g, rgb.b);\n    \n    for (let i = 1; i  {\n      if (t  1) t -= 1;\n      if (t \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Position3D.html":{"url":"interfaces/Position3D.html","title":"interface - Position3D","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Position3D\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/config/building-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Position 3D dans l'espace\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                                \n                                        \n                                            z\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        z\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        z:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Position3D {\n  x: number;\n  y: number;\n  z: number;\n}\n\n/**\n * Dimensions 3D d'un objet\n * @param width - Largeur (axe X)\n * @param height - Hauteur (axe Y)\n * @param depth - Profondeur (axe Z)\n */\nexport interface Dimensions3D {\n  width: number;\n  height: number;\n  depth: number;\n}\n\n/**\n * Configuration d'un mur simple\n * @param position - Position du centre du mur\n * @param dimensions - Taille du mur\n * @param color - Couleur hexadécimale (ex: 0xaaaaaa)\n */\nexport interface WallConfig {\n  position: Position3D;\n  dimensions: Dimensions3D;\n  color: number;\n}\n\n/**\n * Configuration d'une ouverture (porte ou fenêtre)\n * @param position - Position du centre de l'ouverture\n * @param dimensions - Taille de l'ouverture\n * @param color - Couleur de l'élément\n * @param type - Type d'ouverture ('door' ou 'window')\n */\nexport interface OpeningConfig {\n  position: Position3D;\n  dimensions: Dimensions3D;\n  color: number;\n  type: 'door' | 'window';\n}\n\n/**\n * Configuration du mur principal avec ouvertures (façade)\n * @param contour - Points définissant la forme du mur\n * @param thickness - Épaisseur du mur\n * @param position - Position du mur dans l'espace\n * @param color - Couleur du mur\n * @param openings - Ouvertures (porte et fenêtres) dans ce mur\n */\nexport interface MainWallConfig {\n  contour: Position3D[];\n  thickness: number;\n  position: Position3D;\n  color: number;\n  openings: {\n    door: OpeningConfig;\n    window1: OpeningConfig;\n    window2: OpeningConfig;\n  };\n}\n\n/**\n * Configuration de la caméra et des contrôles\n * @param initial - Position et paramètres initiaux de la caméra\n * @param target - Point que la caméra regarde\n * @param controls - Paramètres des contrôles souris\n */\nexport interface CameraConfig {\n  initial: {\n    position: Position3D;\n    rotationX: number;  // Rotation verticale\n    rotationY: number;  // Rotation horizontale\n    zoom: number;       // Distance de la caméra\n  };\n  target: Position3D;   // Point central regardé par la caméra\n  controls: {\n    minZoom: number;      // Distance minimale\n    maxZoom: number;      // Distance maximale\n    rotationSpeed: number; // Vitesse de rotation\n    zoomSpeed: number;     // Vitesse de zoom\n  };\n}\n\n/**\n * Configuration de l'éclairage de la scène\n * @param ambient - Lumière ambiante (éclairage général)\n * @param directional - Lumière directionnelle (comme le soleil)\n */\nexport interface LightingConfig {\n  ambient: {\n    color: number;      // Couleur de la lumière ambiante\n    intensity: number;  // Intensité (0-1)\n  };\n  directional: {\n    color: number;      // Couleur de la lumière directionnelle\n    intensity: number;  // Intensité\n    position: Position3D; // Position de la source lumineuse\n    shadow: {\n      mapSize: number;  // Qualité des ombres (résolution)\n    };\n  };\n}\n\n/**\n * Configuration générale de la scène 3D\n * @param background - Couleur de fond de la scène\n * @param camera - Paramètres de la caméra (champ de vision, distances)\n */\nexport interface SceneConfig {\n  background: number;   // Couleur de fond (ex: 0xbfd1e5 = bleu ciel)\n  camera: {\n    fov: number;        // Champ de vision (field of view) en degrés\n    near: number;       // Distance de rendu minimale\n    far: number;        // Distance de rendu maximale\n  };\n}\n\n/**\n * ===============================================\n * CONFIGURATION PRINCIPALE DU BÂTIMENT\n * ===============================================\n * Toutes les données du modèle 3D sont centralisées ici\n */\nexport const BUILDING_CONFIG = {\n  \n  /**\n   * SCÈNE 3D - Paramètres généraux\n   */\n  scene: {\n    background: 0xbfd1e5,  // Couleur bleu ciel pour le fond\n    camera: {\n      fov: 75,             // Angle de vue (75° = vue naturelle)\n      near: 0.1,           // Objets plus proches que 0.1 non rendus\n      far: 1000            // Objets plus loin que 1000 non rendus\n    }\n  } as SceneConfig,\n\n  /**\n   * ÉCLAIRAGE - Lumières de la scène\n   */\n  lighting: {\n    ambient: {   \n      color: 0xffffff,     // Lumière blanche ambiante\n      intensity: 0.6       // 60% d'intensité (éclairage doux)\n    },\n    directional: {\n      color: 0xffffff,     // Lumière blanche directionnelle (soleil)\n      intensity: 1,        // 100% d'intensité\n      position: { x: 10, y: 20, z: 10 }, // Position du \"soleil\"\n      shadow: {\n        mapSize: 2048      // Résolution des ombres (2048x2048)\n      }\n    }\n  } as LightingConfig,\n\n  /**\n   * CAMÉRA - Point de vue et contrôles\n   */\n  camera: {\n    initial: {\n      position: { x: 10, y: 10, z: 9 }, // Position initiale de la caméra\n      rotationX: 0.3,                   // Inclinaison verticale\n      rotationY: 0.5,                   // Rotation horizontale\n      zoom: 15                          // Distance initiale\n    },\n    target: { x: 0, y: 1.25, z: 0 },   // Point regardé (centre du bâtiment)\n    controls: {\n      minZoom: 5,           // Distance minimale (zoom max)\n      maxZoom: 50,          // Distance maximale (zoom min)\n      rotationSpeed: 0.01,  // Sensibilité de rotation souris\n      zoomSpeed: 0.01       // Sensibilité du zoom molette\n    }\n  } as CameraConfig,\n\n  /**\n   * SOL - Plateforme de base\n   */\n  ground: {\n    position: { x: 0, y: -0.1, z: 0 }, // Légèrement sous le niveau 0\n    dimensions: { width: 8, height: 0.2, depth: 5 }, // 8x5m, épaisseur 20cm\n    color: 0x2E1E1A  \n  } as WallConfig,\n\n  /**\n   * TOIT - Couverture du bâtiment\n   */\n  roof: {\n    position: { x: 0, y: 2.6, z: 0 },  // Au-dessus des murs (2.5m + 0.1m)\n    dimensions: { width: 8.4, height: 0.2, depth: 5 }, \n    color: 0x4169e1       // Couleur bleu royal\n  } as WallConfig,\n\n  /**\n   * MUR PRINCIPAL (FAÇADE) - Mur avec ouvertures\n   * Ce mur utilise ExtrudeGeometry pour créer de vraies ouvertures\n   */\n  mainWall: {\n    contour: [\n      // Points définissant la forme rectangulaire du mur (8m x 2.5m)\n      { x: -4, y: 0, z: 0 },    // Coin bas gauche\n      { x: 4, y: 0, z: 0 },     // Coin bas droit\n      { x: 4, y: 2.5, z: 0 },   // Coin haut droit\n      { x: -4, y: 2.5, z: 0 },  // Coin haut gauche\n      { x: -4, y: 0, z: 0 }     // Retour au point de départ\n    ],\n    thickness: 0.2,             // Épaisseur du mur (20cm)\n    position: { x: 0, y: 0, z: 2.3 }, // Position du mur dans l'espace\n    color: 0xaaaaaa,            // Couleur gris clair\n    openings: {\n      // PORTE CENTRALE\n      door: {\n        position: { x: 0, y: 1.05, z: 2.3 },\n        dimensions: { width: 1, height: 2, depth: 0.05 }, // 1m x 2m\n        color: 0x00ff00,        // Couleur verte\n        type: 'door' as const\n      },\n      // PREMIÈRE FENÊTRE (gauche)\n      window1: {\n        position: { x: -2, y: 1.5, z: 2.3 }, \n        dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n        color: 0xff0000,        // Couleur rouge\n        type: 'window' as const\n      },\n      // DEUXIÈME FENÊTRE (droite)\n      window2: {\n        position: { x: 2, y: 1.5, z: 2.3 }, \n        dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n        color: 0xff0000,        // Couleur rouge\n        type: 'window' as const\n      }\n    }\n  } as MainWallConfig,\n\n\n  /**\n   * AUTRES MURS - Murs latéraux et arrière (murs pleins)\n   */\n  walls: {\n    // MUR ARRIÈRE\n    back: {\n      position: { x: 0, y: 0, z: -2.5 },\n      dimensions: { width: 8, height: 2.5, depth: 0.2 }, // 8m x 2.5m x 20cm\n      color: 0xaaaaaa,\n      openings: {\n        window1: {\n          position: { x: 0, y: 1.5, z: -2.2 },\n          dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n    },\n    // MUR GAUCHE\n    left: {\n      position: { x: -3.9, y: 1.25, z: 0 }, \n      dimensions: { width: 0.2, height: 2.5, depth: 5 }, // 20cm x 2.5m x 5m\n      color: 0xaaaaaa,\n      openings: {\n        window5: {\n          position: { x: -3.8, y: 1.5, z: 0 },\n          dimensions: { width: 1.2, height: 1.0, depth: 0.05 }, // 1.2m x 1m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n      // Couleur gris clair\n    },\n    // MUR DROIT\n    right: {\n      position: { x: 3.8, y: 0, z: 0 },\n      dimensions: { width: 0.2, height: 2.5, depth: 5 }, // 20cm x 2.5m x 5m\n      color: 0xaaaaaa,\n      openings: {\n        // PORTE D'ENTRÉE\n        door: {\n          position: { x: 3.8, y: 1.05, z: 0 },\n          dimensions: { width: 1, height: 2.1, depth: 0.05 }, // 1m x 2.1m\n          color: 0x00ff00,        // Couleur verte\n          type: 'door' as const\n        },\n        // FENÊTRE\n        window1: {\n          position: { x: 3.8, y: 1.5, z: 1.5 },\n          dimensions: { width: 1.2, height: 1.0, depth: 0.05 }, // 1.2m x 1m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n    }\n  },\n\n  /**\n   * AXES DE RÉFÉRENCE (REPÈRE) - Pour s'orienter dans l'espace\n   */\n  axes: {\n    size: 8,                  // Longueur des axes (8 unités)\n    labels: [\n      // Axe X (rouge) - gauche/droite\n      { text: 'X', position: { x: 10, y: 0, z: 0 }, color: 0xff0000 },\n      // Axe Y (vert) - bas/haut\n      { text: 'Y', position: { x: 0, y: 10, z: 0 }, color: 0x00ff00 },\n      // Axe Z (bleu) - avant/arrière\n      { text: 'Z', position: { x: 0, y: 0, z: 10 }, color: 0x0000ff }\n    ],\n    labelSize: { width: 0.2, height: 0.2, depth: 0.2 } // Taille des cubes de repère\n  }\n};\n\n/**\n * ===============================================\n * FONCTIONS UTILITAIRES\n * ===============================================\n * Calculs automatiques pour les ouvertures dans les murs\n */\nexport class WallCalculations {\n  \n  /**\n   * Calcule les coordonnées d'une ouverture de porte\n   * @param config - Configuration de la porte\n   * @returns Points définissant le trou rectangulaire pour la porte\n   */\n  static getDoorHole(config: OpeningConfig) {\n    const halfWidth = config.dimensions.width / 2;  // Demi-largeur de la porte\n    return [\n      // Rectangle partant du sol (y=0) jusqu'à la hauteur de la porte\n      { x: config.position.x - halfWidth, y: 0 },                    // Bas gauche\n      { x: config.position.x + halfWidth, y: 0 },                    // Bas droit\n      { x: config.position.x + halfWidth, y: config.dimensions.height }, // Haut droit\n      { x: config.position.x - halfWidth, y: config.dimensions.height }, // Haut gauche\n      { x: config.position.x - halfWidth, y: 0 }                     // Retour au début\n    ];\n  }\n\n  /**\n   * Calcule les coordonnées d'une ouverture de fenêtre\n   * @param config - Configuration de la fenêtre\n   * @param bottomOffset - Distance du sol au bas de la fenêtre (par défaut 0.9m)\n   * @returns Points définissant le trou rectangulaire pour la fenêtre\n   */\n  static getWindowHole(config: OpeningConfig, bottomOffset: number = 0.9) {\n    const halfWidth = config.dimensions.width / 2;  // Demi-largeur de la fenêtre\n    const bottom = bottomOffset;                     // Position du bas de la fenêtre\n    const top = bottom + config.dimensions.height;  // Position du haut de la fenêtre\n    \n    return [\n      // Rectangle surélevé par rapport au sol\n      { x: config.position.x - halfWidth, y: bottom }, // Bas gauche\n      { x: config.position.x + halfWidth, y: bottom }, // Bas droit\n      { x: config.position.x + halfWidth, y: top },    // Haut droit\n      { x: config.position.x - halfWidth, y: top },    // Haut gauche\n      { x: config.position.x - halfWidth, y: bottom }  // Retour au début\n    ];\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProprietesBatiment.html":{"url":"interfaces/ProprietesBatiment.html","title":"interface - ProprietesBatiment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProprietesBatiment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/batiment/batiment.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les propriétés d'un bâtiment\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dateCreation\n                                        \n                                \n                                \n                                        \n                                            derniereModification\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            etage\n                                        \n                                \n                                \n                                        \n                                            nom\n                                        \n                                \n                                \n                                        \n                                            surface\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            volume\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dateCreation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dateCreation:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        derniereModification\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        derniereModification:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        etage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        etage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nom:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surface\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        surface:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"residentiel\" | \"commercial\" | \"industriel\" | \"public\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"residentiel\" | \"commercial\" | \"industriel\" | \"public\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        volume\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        volume:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigurationService, ConfigurationBatiment } from '../configuration/configuration.service';\n\n/**\n * Interface pour les propriétés d'un bâtiment\n */\nexport interface ProprietesBatiment {\n  nom: string;\n  description: string;\n  type: 'residentiel' | 'commercial' | 'industriel' | 'public';\n  etage: number;\n  surface: number; // en m²\n  volume: number;   // en m³\n  dateCreation: Date;\n  derniereModification: Date;\n}\n\n/**\n * Interface pour les statistiques du bâtiment\n */\nexport interface StatistiquesBatiment {\n  nombreMurs: number;\n  nombreOuvertures: number;\n  nombrePortes: number;\n  nombreFenetres: number;\n  surfaceMurs: number;\n  surfaceOuvertures: number;\n  pourcentageOuvertures: number;\n}\n\n/**\n * Service de gestion des bâtiments\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class BatimentService {\n  \n  private proprietesBatiment = new BehaviorSubject({\n    nom: 'Bâtiment Principal',\n    description: 'Bâtiment architectural avec murs, ouvertures et toit',\n    type: 'residentiel',\n    etage: 1,\n    surface: 0,\n    volume: 0,\n    dateCreation: new Date(),\n    derniereModification: new Date()\n  });\n\n  public proprietes$ = this.proprietesBatiment.asObservable();\n\n  constructor(private configurationService: ConfigurationService) {\n    // Calculer automatiquement la surface et le volume\n    this.calculerSurfaceEtVolume();\n    \n    // Écouter les changements de configuration pour recalculer\n    this.configurationService.getConfigurationObservable().subscribe(() => {\n      this.calculerSurfaceEtVolume();\n      this.mettreAJourDateModification();\n    });\n  }\n\n  /**\n   * Obtenir les propriétés du bâtiment\n   */\n  getProprietes(): ProprietesBatiment {\n    return this.proprietesBatiment.value;\n  }\n\n  /**\n   * Obtenir les propriétés en tant qu'Observable\n   */\n  getProprietesObservable(): Observable {\n    return this.proprietes$;\n  }\n\n  /**\n   * Mettre à jour les propriétés du bâtiment\n   */\n  mettreAJourProprietes(nouvellesProprietes: Partial): void {\n    const proprietesActuelles = this.getProprietes();\n    const proprietesMisesAJour = {\n      ...proprietesActuelles,\n      ...nouvellesProprietes,\n      derniereModification: new Date()\n    };\n    \n    this.proprietesBatiment.next(proprietesMisesAJour);\n    console.log('Propriétés du bâtiment mises à jour:', proprietesMisesAJour);\n  }\n\n  /**\n   * Calculer la surface et le volume du bâtiment\n   */\n  private calculerSurfaceEtVolume(): void {\n    const config = this.configurationService.getConfiguration();\n    const dimensions = config.dimensions;\n    \n    const surface = dimensions.longueur * dimensions.largeur;\n    const volume = surface * dimensions.hauteur;\n    \n    this.mettreAJourProprietes({\n      surface: Math.round(surface * 100) / 100, // Arrondir à 2 décimales\n      volume: Math.round(volume * 100) / 100\n    });\n  }\n\n  /**\n   * Mettre à jour la date de dernière modification\n   */\n  private mettreAJourDateModification(): void {\n    this.mettreAJourProprietes({\n      derniereModification: new Date()\n    });\n  }\n\n  /**\n   * Obtenir les statistiques du bâtiment\n   */\n  getStatistiques(): StatistiquesBatiment {\n    const config = this.configurationService.getConfiguration();\n    const toutesOuvertures = this.configurationService.getAllOuvertures();\n    \n    const nombreMurs = 4; // principal, arrière, gauche, droit\n    const nombreOuvertures = toutesOuvertures.length;\n    const nombrePortes = toutesOuvertures.filter(o => o.type === 'porte').length;\n    const nombreFenetres = toutesOuvertures.filter(o => o.type === 'fenetre').length;\n    \n    // Calculer la surface des murs\n    const murs = config.murs;\n    const surfaceMurs = \n      (murs.principal.dimensions.width * murs.principal.dimensions.height) +\n      (murs.arriere.dimensions.width * murs.arriere.dimensions.height) +\n      (murs.gauche.dimensions.width * murs.gauche.dimensions.height) +\n      (murs.droit.dimensions.width * murs.droit.dimensions.height);\n    \n    // Calculer la surface des ouvertures\n    const surfaceOuvertures = toutesOuvertures.reduce((total, ouverture) => {\n      return total + (ouverture.dimensions.width * ouverture.dimensions.height);\n    }, 0);\n    \n    const pourcentageOuvertures = surfaceMurs > 0 ? \n      Math.round((surfaceOuvertures / surfaceMurs) * 100 * 100) / 100 : 0;\n    \n    return {\n      nombreMurs,\n      nombreOuvertures,\n      nombrePortes,\n      nombreFenetres,\n      surfaceMurs: Math.round(surfaceMurs * 100) / 100,\n      surfaceOuvertures: Math.round(surfaceOuvertures * 100) / 100,\n      pourcentageOuvertures\n    };\n  }\n\n  /**\n   * Obtenir le type de bâtiment\n   */\n  getTypeBatiment(): string {\n    return this.getProprietes().type;\n  }\n\n  /**\n   * Changer le type de bâtiment\n   */\n  changerTypeBatiment(nouveauType: ProprietesBatiment['type']): void {\n    this.mettreAJourProprietes({ type: nouveauType });\n  }\n\n  /**\n   * Obtenir la surface du bâtiment\n   */\n  getSurface(): number {\n    return this.getProprietes().surface;\n  }\n\n  /**\n   * Obtenir le volume du bâtiment\n   */\n  getVolume(): number {\n    return this.getProprietes().volume;\n  }\n\n  /**\n   * Obtenir le nom du bâtiment\n   */\n  getNom(): string {\n    return this.getProprietes().nom;\n  }\n\n  /**\n   * Changer le nom du bâtiment\n   */\n  changerNom(nouveauNom: string): void {\n    this.mettreAJourProprietes({ nom: nouveauNom });\n  }\n\n  /**\n   * Obtenir la description du bâtiment\n   */\n  getDescription(): string {\n    return this.getProprietes().description;\n  }\n\n  /**\n   * Changer la description du bâtiment\n   */\n  changerDescription(nouvelleDescription: string): void {\n    this.mettreAJourProprietes({ description: nouvelleDescription });\n  }\n\n  /**\n   * Obtenir la date de création\n   */\n  getDateCreation(): Date {\n    return this.getProprietes().dateCreation;\n  }\n\n  /**\n   * Obtenir la date de dernière modification\n   */\n  getDerniereModification(): Date {\n    return this.getProprietes().derniereModification;\n  }\n\n  /**\n   * Exporter les données du bâtiment\n   */\n  exporterDonnees(): string {\n    const proprietes = this.getProprietes();\n    const config = this.configurationService.getConfiguration();\n    const statistiques = this.getStatistiques();\n    \n    const donneesExport = {\n      proprietes,\n      configuration: config,\n      statistiques,\n      dateExport: new Date()\n    };\n    \n    return JSON.stringify(donneesExport, null, 2);\n  }\n\n  /**\n   * Importer les données du bâtiment\n   */\n  importerDonnees(donneesJson: string): boolean {\n    try {\n      if (!donneesJson || donneesJson.trim() === '') {\n        throw new Error('Données JSON vides ou invalides');\n      }\n      \n      const donnees = JSON.parse(donneesJson);\n      \n      // Validation des données importées\n      if (!donnees || typeof donnees !== 'object') {\n        throw new Error('Format de données invalide');\n      }\n      \n      if (donnees.proprietes) {\n        // Validation des propriétés\n        if (!donnees.proprietes.nom || !donnees.proprietes.type) {\n          throw new Error('Propriétés du bâtiment incomplètes');\n        }\n        this.mettreAJourProprietes(donnees.proprietes);\n      }\n      \n      if (donnees.configuration) {\n        this.configurationService.mettreAJourConfiguration(donnees.configuration);\n      }\n      \n      console.log('Données importées avec succès');\n      return true;\n    } catch (error) {\n      console.error('Erreur lors de l\\'importation:', error);\n      return false;\n    }\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProprietesCamera.html":{"url":"interfaces/ProprietesCamera.html","title":"interface - ProprietesCamera","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProprietesCamera\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/scene/scene.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour la caméra\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            far\n                                        \n                                \n                                \n                                        \n                                            fov\n                                        \n                                \n                                \n                                        \n                                            near\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            target\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        far\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        far:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fov\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fov:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        near\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        near:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        target:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"perspective\" | \"orthographic\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"perspective\" | \"orthographic\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigurationService } from '../configuration/configuration.service';\nimport { MurService, ProprietesMur } from '../mur/mur.service';\nimport { OuvertureService, ProprietesOuverture } from '../ouverture/ouverture.service';\n\n/**\n * Interface pour les propriétés de la scène 3D\n */\nexport interface ProprietesScene {\n  id: string;\n  nom: string;\n  largeur: number;\n  hauteur: number;\n  backgroundColor: number;\n  fogColor: number;\n  fogNear: number;\n  fogFar: number;\n  antialias: boolean;\n  shadowMapEnabled: boolean;\n  shadowMapType: 'PCF' | 'PCFSoft' | 'Basic';\n  dateCreation: Date;\n  derniereModification: Date;\n}\n\n/**\n * Interface pour la caméra\n */\nexport interface ProprietesCamera {\n  position: { x: number; y: number; z: number };\n  target: { x: number; y: number; z: number };\n  fov: number;\n  near: number;\n  far: number;\n  type: 'perspective' | 'orthographic';\n}\n\n/**\n * Interface pour les contrôles de la scène\n */\nexport interface ControlesScene {\n  enableRotate: boolean;\n  enableZoom: boolean;\n  enablePan: boolean;\n  enableDamping: boolean;\n  dampingFactor: number;\n  rotateSpeed: number;\n  zoomSpeed: number;\n  panSpeed: number;\n  minDistance: number;\n  maxDistance: number;\n  minPolarAngle: number;\n  maxPolarAngle: number;\n}\n\n/**\n * Interface pour les lumières\n */\nexport interface ProprietesLumiere {\n  id: string;\n  type: 'ambient' | 'directional' | 'point' | 'spot';\n  position?: { x: number; y: number; z: number };\n  direction?: { x: number; y: number; z: number };\n  color: number;\n  intensity: number;\n  castShadow: boolean;\n  enabled: boolean;\n}\n\n/**\n * Interface pour les statistiques de la scène\n */\nexport interface StatistiquesScene {\n  nombreObjets: number;\n  nombreMurs: number;\n  nombreOuvertures: number;\n  nombreLumieres: number;\n  nombreTriangles: number;\n  memoireUtilisee: number;\n  fps: number;\n  tempsRendu: number;\n}\n\n/**\n * Service de gestion de la scène 3D\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SceneService {\n  \n  private sceneActuelle = new BehaviorSubject({\n    id: 'scene_principale',\n    nom: 'Scène Architecturale 3D',\n    largeur: 800,\n    hauteur: 600,\n    backgroundColor: 0x87CEEB, // Bleu ciel\n    fogColor: 0x87CEEB,\n    fogNear: 1,\n    fogFar: 100,\n    antialias: true,\n    shadowMapEnabled: true,\n    shadowMapType: 'PCFSoft',\n    dateCreation: new Date(),\n    derniereModification: new Date()\n  });\n\n  private cameraActuelle = new BehaviorSubject({\n    position: { x: 5, y: 5, z: 5 },\n    target: { x: 0, y: 0, z: 0 },\n    fov: 75,\n    near: 0.1,\n    far: 1000,\n    type: 'perspective'\n  });\n\n  private controlesActuels = new BehaviorSubject({\n    enableRotate: true,\n    enableZoom: true,\n    enablePan: true,\n    enableDamping: true,\n    dampingFactor: 0.05,\n    rotateSpeed: 1.0,\n    zoomSpeed: 1.0,\n    panSpeed: 1.0,\n    minDistance: 2,\n    maxDistance: 50,\n    minPolarAngle: 0,\n    maxPolarAngle: Math.PI\n  });\n\n  private lumiereActuelles = new BehaviorSubject([\n    {\n      id: 'lumiere_ambient',\n      type: 'ambient',\n      color: 0x404040,\n      intensity: 0.4,\n      castShadow: false,\n      enabled: true\n    },\n    {\n      id: 'lumiere_directionnelle',\n      type: 'directional',\n      position: { x: 10, y: 10, z: 5 },\n      direction: { x: -1, y: -1, z: -1 },\n      color: 0xffffff,\n      intensity: 1.0,\n      castShadow: true,\n      enabled: true\n    }\n  ]);\n\n  public scene$ = this.sceneActuelle.asObservable();\n  public camera$ = this.cameraActuelle.asObservable();\n  public controles$ = this.controlesActuels.asObservable();\n  public lumiere$ = this.lumiereActuelles.asObservable();\n\n  constructor(\n    private configurationService: ConfigurationService,\n    private murService: MurService,\n    private ouvertureService: OuvertureService\n  ) {\n    console.log('SceneService initialisé');\n  }\n\n  /**\n   * Obtenir les propriétés de la scène\n   */\n  getProprietesScene(): ProprietesScene {\n    return this.sceneActuelle.value;\n  }\n\n  /**\n   * Obtenir les propriétés de la scène en tant qu'Observable\n   */\n  getProprietesSceneObservable(): Observable {\n    return this.scene$;\n  }\n\n  /**\n   * Mettre à jour les propriétés de la scène\n   */\n  mettreAJourProprietesScene(nouvellesProprietes: Partial): void {\n    const proprietesActuelles = this.getProprietesScene();\n    const proprietesMisesAJour = {\n      ...proprietesActuelles,\n      ...nouvellesProprietes,\n      derniereModification: new Date()\n    };\n    \n    this.sceneActuelle.next(proprietesMisesAJour);\n    console.log('Propriétés de la scène mises à jour:', proprietesMisesAJour);\n  }\n\n  /**\n   * Obtenir les propriétés de la caméra\n   */\n  getProprietesCamera(): ProprietesCamera {\n    return this.cameraActuelle.value;\n  }\n\n  /**\n   * Obtenir les propriétés de la caméra en tant qu'Observable\n   */\n  getProprietesCameraObservable(): Observable {\n    return this.camera$;\n  }\n\n  /**\n   * Mettre à jour les propriétés de la caméra\n   */\n  mettreAJourProprietesCamera(nouvellesProprietes: Partial): void {\n    const proprietesActuelles = this.getProprietesCamera();\n    const proprietesMisesAJour = {\n      ...proprietesActuelles,\n      ...nouvellesProprietes\n    };\n    \n    this.cameraActuelle.next(proprietesMisesAJour);\n    console.log('Propriétés de la caméra mises à jour:', proprietesMisesAJour);\n  }\n\n  /**\n   * Obtenir les contrôles de la scène\n   */\n  getControlesScene(): ControlesScene {\n    return this.controlesActuels.value;\n  }\n\n  /**\n   * Obtenir les contrôles de la scène en tant qu'Observable\n   */\n  getControlesSceneObservable(): Observable {\n    return this.controles$;\n  }\n\n  /**\n   * Mettre à jour les contrôles de la scène\n   */\n  mettreAJourControlesScene(nouveauxControles: Partial): void {\n    const controlesActuels = this.getControlesScene();\n    const controlesMisesAJour = {\n      ...controlesActuels,\n      ...nouveauxControles\n    };\n    \n    this.controlesActuels.next(controlesMisesAJour);\n    console.log('Contrôles de la scène mis à jour:', controlesMisesAJour);\n  }\n\n  /**\n   * Obtenir les lumières\n   */\n  getLumieres(): ProprietesLumiere[] {\n    return this.lumiereActuelles.value;\n  }\n\n  /**\n   * Obtenir les lumières en tant qu'Observable\n   */\n  getLumieresObservable(): Observable {\n    return this.lumiere$;\n  }\n\n  /**\n   * Ajouter une nouvelle lumière\n   */\n  ajouterLumiere(nouvelleLumiere: Omit): void {\n    const lumiereComplete: ProprietesLumiere = {\n      ...nouvelleLumiere,\n      id: `lumiere_${Date.now()}`\n    };\n    \n    const lumiereActuelles = this.getLumieres();\n    lumiereActuelles.push(lumiereComplete);\n    this.lumiereActuelles.next(lumiereActuelles);\n  }\n\n  /**\n   * Supprimer une lumière\n   */\n  supprimerLumiere(id: string): void {\n    const lumiereActuelles = this.getLumieres();\n    const lumiereFiltrees = lumiereActuelles.filter(lumiere => lumiere.id !== id);\n    this.lumiereActuelles.next(lumiereFiltrees);\n  }\n\n  /**\n   * Modifier une lumière\n   */\n  modifierLumiere(id: string, nouvellesProprietes: Partial): void {\n    const lumiereActuelles = this.getLumieres();\n    const lumiereIndex = lumiereActuelles.findIndex(lumiere => lumiere.id === id);\n    \n    if (lumiereIndex !== -1) {\n      lumiereActuelles[lumiereIndex] = {\n        ...lumiereActuelles[lumiereIndex],\n        ...nouvellesProprietes\n      };\n      this.lumiereActuelles.next(lumiereActuelles);\n    }\n  }\n\n  /**\n   * Activer/Désactiver une lumière\n   */\n  toggleLumiere(id: string): void {\n    const lumiereActuelles = this.getLumieres();\n    const lumiereIndex = lumiereActuelles.findIndex(lumiere => lumiere.id === id);\n    \n    if (lumiereIndex !== -1) {\n      lumiereActuelles[lumiereIndex].enabled = !lumiereActuelles[lumiereIndex].enabled;\n      this.lumiereActuelles.next(lumiereActuelles);\n    }\n  }\n\n  /**\n   * Obtenir les statistiques de la scène\n   */\n  getStatistiquesScene(): StatistiquesScene {\n    const murs = this.murService.getMurs();\n    const ouvertures = this.ouvertureService.getOuvertures();\n    const lumiere = this.getLumieres();\n    \n    const nombreMurs = murs.length;\n    const nombreOuvertures = ouvertures.length;\n    const nombreLumieres = lumiere.length;\n    const nombreObjets = nombreMurs + nombreOuvertures + nombreLumieres;\n    \n    // Estimation du nombre de triangles (approximation)\n    const nombreTriangles = (nombreMurs * 12) + (nombreOuvertures * 8); // Estimation\n    \n    // Estimation de la mémoire utilisée (en MB)\n    const memoireUtilisee = (nombreTriangles * 0.001); // Approximation\n    \n    return {\n      nombreObjets,\n      nombreMurs,\n      nombreOuvertures,\n      nombreLumieres,\n      nombreTriangles,\n      memoireUtilisee: Math.round(memoireUtilisee * 100) / 100,\n      fps: 60, // Valeur par défaut\n      tempsRendu: 16.67 // 60 FPS = 16.67ms par frame\n    };\n  }\n\n  /**\n   * Réinitialiser la caméra à sa position par défaut\n   */\n  reinitialiserCamera(): void {\n    this.mettreAJourProprietesCamera({\n      position: { x: 5, y: 5, z: 5 },\n      target: { x: 0, y: 0, z: 0 }\n    });\n  }\n\n  /**\n   * Centrer la caméra sur un objet\n   */\n  centrerCameraSurObjet(position: { x: number; y: number; z: number }): void {\n    this.mettreAJourProprietesCamera({\n      target: position\n    });\n  }\n\n  /**\n   * Obtenir la distance entre la caméra et un point\n   */\n  calculerDistanceCamera(point: { x: number; y: number; z: number }): number {\n    const camera = this.getProprietesCamera();\n    const dx = camera.position.x - point.x;\n    const dy = camera.position.y - point.y;\n    const dz = camera.position.z - point.z;\n    \n    return Math.round(Math.sqrt(dx * dx + dy * dy + dz * dz) * 100) / 100;\n  }\n\n  /**\n   * Obtenir le point le plus proche de la caméra\n   */\n  getPointLePlusProcheDeCamera(): { x: number; y: number; z: number } | null {\n    const camera = this.getProprietesCamera();\n    const murs = this.murService.getMurs();\n    const ouvertures = this.ouvertureService.getOuvertures();\n    \n    let pointLePlusProche: { x: number; y: number; z: number } | null = null;\n    let distanceMin = Infinity;\n    \n    // Vérifier les murs\n    murs.forEach(mur => {\n      const distance = this.calculerDistanceCamera(mur.position);\n      if (distance  {\n      const distance = this.calculerDistanceCamera(ouverture.position);\n      if (distance \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProprietesLumiere.html":{"url":"interfaces/ProprietesLumiere.html","title":"interface - ProprietesLumiere","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProprietesLumiere\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/scene/scene.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les lumières\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            castShadow\n                                        \n                                \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            direction\n                                        \n                                \n                                \n                                        \n                                            enabled\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            intensity\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        castShadow\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        castShadow:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        direction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        direction:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        intensity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        intensity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"ambient\" | \"directional\" | \"point\" | \"spot\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"ambient\" | \"directional\" | \"point\" | \"spot\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigurationService } from '../configuration/configuration.service';\nimport { MurService, ProprietesMur } from '../mur/mur.service';\nimport { OuvertureService, ProprietesOuverture } from '../ouverture/ouverture.service';\n\n/**\n * Interface pour les propriétés de la scène 3D\n */\nexport interface ProprietesScene {\n  id: string;\n  nom: string;\n  largeur: number;\n  hauteur: number;\n  backgroundColor: number;\n  fogColor: number;\n  fogNear: number;\n  fogFar: number;\n  antialias: boolean;\n  shadowMapEnabled: boolean;\n  shadowMapType: 'PCF' | 'PCFSoft' | 'Basic';\n  dateCreation: Date;\n  derniereModification: Date;\n}\n\n/**\n * Interface pour la caméra\n */\nexport interface ProprietesCamera {\n  position: { x: number; y: number; z: number };\n  target: { x: number; y: number; z: number };\n  fov: number;\n  near: number;\n  far: number;\n  type: 'perspective' | 'orthographic';\n}\n\n/**\n * Interface pour les contrôles de la scène\n */\nexport interface ControlesScene {\n  enableRotate: boolean;\n  enableZoom: boolean;\n  enablePan: boolean;\n  enableDamping: boolean;\n  dampingFactor: number;\n  rotateSpeed: number;\n  zoomSpeed: number;\n  panSpeed: number;\n  minDistance: number;\n  maxDistance: number;\n  minPolarAngle: number;\n  maxPolarAngle: number;\n}\n\n/**\n * Interface pour les lumières\n */\nexport interface ProprietesLumiere {\n  id: string;\n  type: 'ambient' | 'directional' | 'point' | 'spot';\n  position?: { x: number; y: number; z: number };\n  direction?: { x: number; y: number; z: number };\n  color: number;\n  intensity: number;\n  castShadow: boolean;\n  enabled: boolean;\n}\n\n/**\n * Interface pour les statistiques de la scène\n */\nexport interface StatistiquesScene {\n  nombreObjets: number;\n  nombreMurs: number;\n  nombreOuvertures: number;\n  nombreLumieres: number;\n  nombreTriangles: number;\n  memoireUtilisee: number;\n  fps: number;\n  tempsRendu: number;\n}\n\n/**\n * Service de gestion de la scène 3D\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SceneService {\n  \n  private sceneActuelle = new BehaviorSubject({\n    id: 'scene_principale',\n    nom: 'Scène Architecturale 3D',\n    largeur: 800,\n    hauteur: 600,\n    backgroundColor: 0x87CEEB, // Bleu ciel\n    fogColor: 0x87CEEB,\n    fogNear: 1,\n    fogFar: 100,\n    antialias: true,\n    shadowMapEnabled: true,\n    shadowMapType: 'PCFSoft',\n    dateCreation: new Date(),\n    derniereModification: new Date()\n  });\n\n  private cameraActuelle = new BehaviorSubject({\n    position: { x: 5, y: 5, z: 5 },\n    target: { x: 0, y: 0, z: 0 },\n    fov: 75,\n    near: 0.1,\n    far: 1000,\n    type: 'perspective'\n  });\n\n  private controlesActuels = new BehaviorSubject({\n    enableRotate: true,\n    enableZoom: true,\n    enablePan: true,\n    enableDamping: true,\n    dampingFactor: 0.05,\n    rotateSpeed: 1.0,\n    zoomSpeed: 1.0,\n    panSpeed: 1.0,\n    minDistance: 2,\n    maxDistance: 50,\n    minPolarAngle: 0,\n    maxPolarAngle: Math.PI\n  });\n\n  private lumiereActuelles = new BehaviorSubject([\n    {\n      id: 'lumiere_ambient',\n      type: 'ambient',\n      color: 0x404040,\n      intensity: 0.4,\n      castShadow: false,\n      enabled: true\n    },\n    {\n      id: 'lumiere_directionnelle',\n      type: 'directional',\n      position: { x: 10, y: 10, z: 5 },\n      direction: { x: -1, y: -1, z: -1 },\n      color: 0xffffff,\n      intensity: 1.0,\n      castShadow: true,\n      enabled: true\n    }\n  ]);\n\n  public scene$ = this.sceneActuelle.asObservable();\n  public camera$ = this.cameraActuelle.asObservable();\n  public controles$ = this.controlesActuels.asObservable();\n  public lumiere$ = this.lumiereActuelles.asObservable();\n\n  constructor(\n    private configurationService: ConfigurationService,\n    private murService: MurService,\n    private ouvertureService: OuvertureService\n  ) {\n    console.log('SceneService initialisé');\n  }\n\n  /**\n   * Obtenir les propriétés de la scène\n   */\n  getProprietesScene(): ProprietesScene {\n    return this.sceneActuelle.value;\n  }\n\n  /**\n   * Obtenir les propriétés de la scène en tant qu'Observable\n   */\n  getProprietesSceneObservable(): Observable {\n    return this.scene$;\n  }\n\n  /**\n   * Mettre à jour les propriétés de la scène\n   */\n  mettreAJourProprietesScene(nouvellesProprietes: Partial): void {\n    const proprietesActuelles = this.getProprietesScene();\n    const proprietesMisesAJour = {\n      ...proprietesActuelles,\n      ...nouvellesProprietes,\n      derniereModification: new Date()\n    };\n    \n    this.sceneActuelle.next(proprietesMisesAJour);\n    console.log('Propriétés de la scène mises à jour:', proprietesMisesAJour);\n  }\n\n  /**\n   * Obtenir les propriétés de la caméra\n   */\n  getProprietesCamera(): ProprietesCamera {\n    return this.cameraActuelle.value;\n  }\n\n  /**\n   * Obtenir les propriétés de la caméra en tant qu'Observable\n   */\n  getProprietesCameraObservable(): Observable {\n    return this.camera$;\n  }\n\n  /**\n   * Mettre à jour les propriétés de la caméra\n   */\n  mettreAJourProprietesCamera(nouvellesProprietes: Partial): void {\n    const proprietesActuelles = this.getProprietesCamera();\n    const proprietesMisesAJour = {\n      ...proprietesActuelles,\n      ...nouvellesProprietes\n    };\n    \n    this.cameraActuelle.next(proprietesMisesAJour);\n    console.log('Propriétés de la caméra mises à jour:', proprietesMisesAJour);\n  }\n\n  /**\n   * Obtenir les contrôles de la scène\n   */\n  getControlesScene(): ControlesScene {\n    return this.controlesActuels.value;\n  }\n\n  /**\n   * Obtenir les contrôles de la scène en tant qu'Observable\n   */\n  getControlesSceneObservable(): Observable {\n    return this.controles$;\n  }\n\n  /**\n   * Mettre à jour les contrôles de la scène\n   */\n  mettreAJourControlesScene(nouveauxControles: Partial): void {\n    const controlesActuels = this.getControlesScene();\n    const controlesMisesAJour = {\n      ...controlesActuels,\n      ...nouveauxControles\n    };\n    \n    this.controlesActuels.next(controlesMisesAJour);\n    console.log('Contrôles de la scène mis à jour:', controlesMisesAJour);\n  }\n\n  /**\n   * Obtenir les lumières\n   */\n  getLumieres(): ProprietesLumiere[] {\n    return this.lumiereActuelles.value;\n  }\n\n  /**\n   * Obtenir les lumières en tant qu'Observable\n   */\n  getLumieresObservable(): Observable {\n    return this.lumiere$;\n  }\n\n  /**\n   * Ajouter une nouvelle lumière\n   */\n  ajouterLumiere(nouvelleLumiere: Omit): void {\n    const lumiereComplete: ProprietesLumiere = {\n      ...nouvelleLumiere,\n      id: `lumiere_${Date.now()}`\n    };\n    \n    const lumiereActuelles = this.getLumieres();\n    lumiereActuelles.push(lumiereComplete);\n    this.lumiereActuelles.next(lumiereActuelles);\n  }\n\n  /**\n   * Supprimer une lumière\n   */\n  supprimerLumiere(id: string): void {\n    const lumiereActuelles = this.getLumieres();\n    const lumiereFiltrees = lumiereActuelles.filter(lumiere => lumiere.id !== id);\n    this.lumiereActuelles.next(lumiereFiltrees);\n  }\n\n  /**\n   * Modifier une lumière\n   */\n  modifierLumiere(id: string, nouvellesProprietes: Partial): void {\n    const lumiereActuelles = this.getLumieres();\n    const lumiereIndex = lumiereActuelles.findIndex(lumiere => lumiere.id === id);\n    \n    if (lumiereIndex !== -1) {\n      lumiereActuelles[lumiereIndex] = {\n        ...lumiereActuelles[lumiereIndex],\n        ...nouvellesProprietes\n      };\n      this.lumiereActuelles.next(lumiereActuelles);\n    }\n  }\n\n  /**\n   * Activer/Désactiver une lumière\n   */\n  toggleLumiere(id: string): void {\n    const lumiereActuelles = this.getLumieres();\n    const lumiereIndex = lumiereActuelles.findIndex(lumiere => lumiere.id === id);\n    \n    if (lumiereIndex !== -1) {\n      lumiereActuelles[lumiereIndex].enabled = !lumiereActuelles[lumiereIndex].enabled;\n      this.lumiereActuelles.next(lumiereActuelles);\n    }\n  }\n\n  /**\n   * Obtenir les statistiques de la scène\n   */\n  getStatistiquesScene(): StatistiquesScene {\n    const murs = this.murService.getMurs();\n    const ouvertures = this.ouvertureService.getOuvertures();\n    const lumiere = this.getLumieres();\n    \n    const nombreMurs = murs.length;\n    const nombreOuvertures = ouvertures.length;\n    const nombreLumieres = lumiere.length;\n    const nombreObjets = nombreMurs + nombreOuvertures + nombreLumieres;\n    \n    // Estimation du nombre de triangles (approximation)\n    const nombreTriangles = (nombreMurs * 12) + (nombreOuvertures * 8); // Estimation\n    \n    // Estimation de la mémoire utilisée (en MB)\n    const memoireUtilisee = (nombreTriangles * 0.001); // Approximation\n    \n    return {\n      nombreObjets,\n      nombreMurs,\n      nombreOuvertures,\n      nombreLumieres,\n      nombreTriangles,\n      memoireUtilisee: Math.round(memoireUtilisee * 100) / 100,\n      fps: 60, // Valeur par défaut\n      tempsRendu: 16.67 // 60 FPS = 16.67ms par frame\n    };\n  }\n\n  /**\n   * Réinitialiser la caméra à sa position par défaut\n   */\n  reinitialiserCamera(): void {\n    this.mettreAJourProprietesCamera({\n      position: { x: 5, y: 5, z: 5 },\n      target: { x: 0, y: 0, z: 0 }\n    });\n  }\n\n  /**\n   * Centrer la caméra sur un objet\n   */\n  centrerCameraSurObjet(position: { x: number; y: number; z: number }): void {\n    this.mettreAJourProprietesCamera({\n      target: position\n    });\n  }\n\n  /**\n   * Obtenir la distance entre la caméra et un point\n   */\n  calculerDistanceCamera(point: { x: number; y: number; z: number }): number {\n    const camera = this.getProprietesCamera();\n    const dx = camera.position.x - point.x;\n    const dy = camera.position.y - point.y;\n    const dz = camera.position.z - point.z;\n    \n    return Math.round(Math.sqrt(dx * dx + dy * dy + dz * dz) * 100) / 100;\n  }\n\n  /**\n   * Obtenir le point le plus proche de la caméra\n   */\n  getPointLePlusProcheDeCamera(): { x: number; y: number; z: number } | null {\n    const camera = this.getProprietesCamera();\n    const murs = this.murService.getMurs();\n    const ouvertures = this.ouvertureService.getOuvertures();\n    \n    let pointLePlusProche: { x: number; y: number; z: number } | null = null;\n    let distanceMin = Infinity;\n    \n    // Vérifier les murs\n    murs.forEach(mur => {\n      const distance = this.calculerDistanceCamera(mur.position);\n      if (distance  {\n      const distance = this.calculerDistanceCamera(ouverture.position);\n      if (distance \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProprietesMateriau.html":{"url":"interfaces/ProprietesMateriau.html","title":"interface - ProprietesMateriau","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProprietesMateriau\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/materiau/materiau.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les propriétés d'un matériau\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            couleur\n                                        \n                                \n                                \n                                        \n                                            couleurHex\n                                        \n                                \n                                \n                                        \n                                            couleurHsl\n                                        \n                                \n                                \n                                        \n                                            couleurRgb\n                                        \n                                \n                                \n                                        \n                                            dateCreation\n                                        \n                                \n                                \n                                        \n                                            derniereModification\n                                        \n                                \n                                \n                                        \n                                            emissive\n                                        \n                                \n                                \n                                        \n                                            emissiveIntensity\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            metallic\n                                        \n                                \n                                \n                                        \n                                            nom\n                                        \n                                \n                                \n                                        \n                                            opacity\n                                        \n                                \n                                \n                                        \n                                            rugosite\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            texture\n                                        \n                                \n                                \n                                        \n                                            transparent\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        couleur\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        couleur:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        couleurHex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        couleurHex:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        couleurHsl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        couleurHsl:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        couleurRgb\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        couleurRgb:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateCreation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dateCreation:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        derniereModification\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        derniereModification:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emissive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emissive:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emissiveIntensity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emissiveIntensity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metallic\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metallic:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nom:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        opacity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        opacity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rugosite\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rugosite:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        texture\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        texture:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transparent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        transparent:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"mur\" | \"porte\" | \"fenetre\" | \"toit\" | \"sol\" | \"decoration\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"mur\" | \"porte\" | \"fenetre\" | \"toit\" | \"sol\" | \"decoration\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Interface pour les propriétés d'un matériau\n */\nexport interface ProprietesMateriau {\n  id: string;\n  nom: string;\n  type: 'mur' | 'porte' | 'fenetre' | 'toit' | 'sol' | 'decoration';\n  couleur: number;\n  couleurHex: string;\n  couleurRgb: { r: number; g: number; b: number };\n  couleurHsl: { h: number; s: number; l: number };\n  texture?: string;\n  rugosite: number; // 0 = lisse, 1 = rugueux\n  metallic: number; // 0 = non métallique, 1 = métallique\n  transparent: boolean;\n  opacity: number; // 0 = transparent, 1 = opaque\n  emissive: number; // Couleur émissive\n  emissiveIntensity: number;\n  dateCreation: Date;\n  derniereModification: Date;\n}\n\n/**\n * Interface pour les palettes de couleurs\n */\nexport interface PaletteCouleurs {\n  id: string;\n  nom: string;\n  description: string;\n  couleurs: number[];\n  type: 'architecturale' | 'moderne' | 'classique' | 'naturelle' | 'personnalisee';\n  dateCreation: Date;\n}\n\n/**\n * Interface pour les textures\n */\nexport interface ProprietesTexture {\n  id: string;\n  nom: string;\n  url: string;\n  type: 'diffuse' | 'normal' | 'roughness' | 'metallic' | 'emissive';\n  resolution: { width: number; height: number };\n  format: 'jpg' | 'png' | 'webp';\n  taille: number; // en KB\n}\n\n/**\n * Interface pour les statistiques des matériaux\n */\nexport interface StatistiquesMateriaux {\n  nombreTotal: number;\n  nombreParType: Record;\n  couleursUtilisees: number[];\n  texturesUtilisees: string[];\n  paletteLaPlusUtilisee: string;\n  materiauLePlusUtilise: string;\n}\n\n/**\n * Service de gestion des matériaux et couleurs\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MateriauService {\n  \n  private materiauxActuels = new BehaviorSubject([]);\n  private palettesActuelles = new BehaviorSubject([]);\n  private texturesActuelles = new BehaviorSubject([]);\n\n  public materiaux$ = this.materiauxActuels.asObservable();\n  public palettes$ = this.palettesActuelles.asObservable();\n  public textures$ = this.texturesActuelles.asObservable();\n\n  constructor() {\n    this.initialiserMateriauxParDefaut();\n    this.initialiserPalettesParDefaut();\n    this.initialiserTexturesParDefaut();\n  }\n\n  /**\n   * Initialiser les matériaux par défaut\n   */\n  private initialiserMateriauxParDefaut(): void {\n    const materiaux: ProprietesMateriau[] = [\n      // Matériaux pour murs\n      {\n        id: 'mur_beton',\n        nom: 'Béton Gris',\n        type: 'mur',\n        couleur: 0xaaaaaa,\n        couleurHex: '#aaaaaa',\n        couleurRgb: { r: 170, g: 170, b: 170 },\n        couleurHsl: { h: 0, s: 0, l: 67 },\n        rugosite: 0.7,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      {\n        id: 'mur_brique',\n        nom: 'Brique Rouge',\n        type: 'mur',\n        couleur: 0x8b4513,\n        couleurHex: '#8b4513',\n        couleurRgb: { r: 139, g: 69, b: 19 },\n        couleurHsl: { h: 25, s: 76, l: 31 },\n        rugosite: 0.8,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      {\n        id: 'mur_bois',\n        nom: 'Bois Naturel',\n        type: 'mur',\n        couleur: 0xdeb887,\n        couleurHex: '#deb887',\n        couleurRgb: { r: 222, g: 184, b: 135 },\n        couleurHsl: { h: 34, s: 57, l: 70 },\n        rugosite: 0.6,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      \n      // Matériaux pour portes\n      {\n        id: 'porte_bois_vert',\n        nom: 'Porte Bois Vert',\n        type: 'porte',\n        couleur: 0x00ff00,\n        couleurHex: '#00ff00',\n        couleurRgb: { r: 0, g: 255, b: 0 },\n        couleurHsl: { h: 120, s: 100, l: 50 },\n        rugosite: 0.4,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      {\n        id: 'porte_bois_brun',\n        nom: 'Porte Bois Brun',\n        type: 'porte',\n        couleur: 0x8b4513,\n        couleurHex: '#8b4513',\n        couleurRgb: { r: 139, g: 69, b: 19 },\n        couleurHsl: { h: 25, s: 76, l: 31 },\n        rugosite: 0.3,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      \n      // Matériaux pour fenêtres\n      {\n        id: 'fenetre_bleue',\n        nom: 'Fenêtre Bleue',\n        type: 'fenetre',\n        couleur: 0x0000ff,\n        couleurHex: '#0000ff',\n        couleurRgb: { r: 0, g: 0, b: 255 },\n        couleurHsl: { h: 240, s: 100, l: 50 },\n        rugosite: 0.1,\n        metallic: 0.0,\n        transparent: true,\n        opacity: 0.8,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      {\n        id: 'fenetre_rouge',\n        nom: 'Fenêtre Rouge',\n        type: 'fenetre',\n        couleur: 0xff0000,\n        couleurHex: '#ff0000',\n        couleurRgb: { r: 255, g: 0, b: 0 },\n        couleurHsl: { h: 0, s: 100, l: 50 },\n        rugosite: 0.1,\n        metallic: 0.0,\n        transparent: true,\n        opacity: 0.8,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      \n      // Matériaux pour toit\n      {\n        id: 'toit_bleu',\n        nom: 'Toit Bleu Royal',\n        type: 'toit',\n        couleur: 0x4169e1,\n        couleurHex: '#4169e1',\n        couleurRgb: { r: 65, g: 105, b: 225 },\n        couleurHsl: { h: 225, s: 73, l: 57 },\n        rugosite: 0.5,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      \n      // Matériaux pour sol\n      {\n        id: 'sol_marron',\n        nom: 'Sol Marron',\n        type: 'sol',\n        couleur: 0x8b4513,\n        couleurHex: '#8b4513',\n        couleurRgb: { r: 139, g: 69, b: 19 },\n        couleurHsl: { h: 25, s: 76, l: 31 },\n        rugosite: 0.9,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      }\n    ];\n    \n    this.materiauxActuels.next(materiaux);\n  }\n\n  /**\n   * Initialiser les palettes par défaut\n   */\n  private initialiserPalettesParDefaut(): void {\n    const palettes: PaletteCouleurs[] = [\n      {\n        id: 'palette_moderne',\n        nom: 'Palette Moderne',\n        description: 'Couleurs modernes et épurées',\n        couleurs: [0xaaaaaa, 0xffffff, 0x000000, 0x4169e1, 0x00ff00],\n        type: 'moderne',\n        dateCreation: new Date()\n      },\n      {\n        id: 'palette_classique',\n        nom: 'Palette Classique',\n        description: 'Couleurs traditionnelles et chaleureuses',\n        couleurs: [0x8b4513, 0xdeb887, 0x654321, 0xffd700, 0xcd853f],\n        type: 'classique',\n        dateCreation: new Date()\n      },\n      {\n        id: 'palette_naturelle',\n        nom: 'Palette Naturelle',\n        description: 'Couleurs inspirées de la nature',\n        couleurs: [0x228b22, 0x8fbc8f, 0x2e8b57, 0x90ee90, 0x32cd32],\n        type: 'naturelle',\n        dateCreation: new Date()\n      },\n      {\n        id: 'palette_architecturale',\n        nom: 'Palette Architecturale',\n        description: 'Couleurs professionnelles pour l\\'architecture',\n        couleurs: [0xaaaaaa, 0x696969, 0x2f4f4f, 0x708090, 0x778899],\n        type: 'architecturale',\n        dateCreation: new Date()\n      }\n    ];\n    \n    this.palettesActuelles.next(palettes);\n  }\n\n  /**\n   * Initialiser les textures par défaut\n   */\n  private initialiserTexturesParDefaut(): void {\n    const textures: ProprietesTexture[] = [\n      {\n        id: 'texture_beton',\n        nom: 'Texture Béton',\n        url: '/assets/textures/beton.jpg',\n        type: 'diffuse',\n        resolution: { width: 512, height: 512 },\n        format: 'jpg',\n        taille: 256\n      },\n      {\n        id: 'texture_brique',\n        nom: 'Texture Brique',\n        url: '/assets/textures/brique.jpg',\n        type: 'diffuse',\n        resolution: { width: 512, height: 512 },\n        format: 'jpg',\n        taille: 312\n      },\n      {\n        id: 'texture_bois',\n        nom: 'Texture Bois',\n        url: '/assets/textures/bois.jpg',\n        type: 'diffuse',\n        resolution: { width: 512, height: 512 },\n        format: 'jpg',\n        taille: 198\n      }\n    ];\n    \n    this.texturesActuelles.next(textures);\n  }\n\n  /**\n   * Convertir une couleur hexadécimale en RGB\n   */\n  hexToRgb(hex: string): { r: number; g: number; b: number } {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : { r: 0, g: 0, b: 0 };\n  }\n\n  /**\n   * Convertir une couleur RGB en HSL\n   */\n  rgbToHsl(r: number, g: number, b: number): { h: number; s: number; l: number } {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    \n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = 0, s = 0, l = (max + min) / 2;\n    \n    if (max !== min) {\n      const d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n      \n      switch (max) {\n        case r: h = (g - b) / d + (g  {\n    return this.materiaux$;\n  }\n\n  /**\n   * Obtenir un matériau par son ID\n   */\n  getMateriauParId(id: string): ProprietesMateriau | undefined {\n    return this.materiauxActuels.value.find(materiau => materiau.id === id);\n  }\n\n  /**\n   * Obtenir les matériaux par type\n   */\n  getMateriauxParType(type: ProprietesMateriau['type']): ProprietesMateriau[] {\n    return this.materiauxActuels.value.filter(materiau => materiau.type === type);\n  }\n\n  /**\n   * Obtenir les matériaux pour murs\n   */\n  getMateriauxMurs(): ProprietesMateriau[] {\n    return this.getMateriauxParType('mur');\n  }\n\n  /**\n   * Obtenir les matériaux pour portes\n   */\n  getMateriauxPortes(): ProprietesMateriau[] {\n    return this.getMateriauxParType('porte');\n  }\n\n  /**\n   * Obtenir les matériaux pour fenêtres\n   */\n  getMateriauxFenetres(): ProprietesMateriau[] {\n    return this.getMateriauxParType('fenetre');\n  }\n\n  /**\n   * Ajouter un nouveau matériau\n   */\n  ajouterMateriau(nouveauMateriau: Omit): void {\n    try {\n      // Validation des paramètres\n      if (!nouveauMateriau) {\n        throw new Error('Matériau manquant');\n      }\n      \n      if (!nouveauMateriau.nom || !nouveauMateriau.type) {\n        throw new Error('Nom et type du matériau requis');\n      }\n      \n      if (typeof nouveauMateriau.couleur !== 'number' || nouveauMateriau.couleur  0xFFFFFF) {\n        throw new Error('Couleur invalide: doit être un nombre entre 0 et 16777215');\n      }\n      \n      const materiauComplete: ProprietesMateriau = {\n        ...nouveauMateriau,\n        id: `materiau_${Date.now()}`,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      };\n      \n      const materiauxActuels = this.getMateriaux();\n      materiauxActuels.push(materiauComplete);\n      this.materiauxActuels.next(materiauxActuels);\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du matériau:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Modifier un matériau\n   */\n  modifierMateriau(id: string, nouvellesProprietes: Partial): void {\n    const materiauxActuels = this.getMateriaux();\n    const materiauIndex = materiauxActuels.findIndex(materiau => materiau.id === id);\n    \n    if (materiauIndex !== -1) {\n      materiauxActuels[materiauIndex] = {\n        ...materiauxActuels[materiauIndex],\n        ...nouvellesProprietes,\n        derniereModification: new Date()\n      };\n      this.materiauxActuels.next(materiauxActuels);\n    }\n  }\n\n  /**\n   * Supprimer un matériau\n   */\n  supprimerMateriau(id: string): void {\n    const materiauxActuels = this.getMateriaux();\n    const materiauxFiltres = materiauxActuels.filter(materiau => materiau.id !== id);\n    this.materiauxActuels.next(materiauxFiltres);\n  }\n\n  /**\n   * Obtenir toutes les palettes\n   */\n  getPalettes(): PaletteCouleurs[] {\n    return this.palettesActuelles.value;\n  }\n\n  /**\n   * Obtenir les palettes en tant qu'Observable\n   */\n  getPalettesObservable(): Observable {\n    return this.palettes$;\n  }\n\n  /**\n   * Obtenir une palette par son ID\n   */\n  getPaletteParId(id: string): PaletteCouleurs | undefined {\n    return this.palettesActuelles.value.find(palette => palette.id === id);\n  }\n\n  /**\n   * Obtenir les palettes par type\n   */\n  getPalettesParType(type: PaletteCouleurs['type']): PaletteCouleurs[] {\n    return this.palettesActuelles.value.filter(palette => palette.type === type);\n  }\n\n  /**\n   * Ajouter une nouvelle palette\n   */\n  ajouterPalette(nouvellePalette: Omit): void {\n    const paletteComplete: PaletteCouleurs = {\n      ...nouvellePalette,\n      id: `palette_${Date.now()}`,\n      dateCreation: new Date()\n    };\n    \n    const palettesActuelles = this.getPalettes();\n    palettesActuelles.push(paletteComplete);\n    this.palettesActuelles.next(palettesActuelles);\n  }\n\n  /**\n   * Obtenir toutes les textures\n   */\n  getTextures(): ProprietesTexture[] {\n    return this.texturesActuelles.value;\n  }\n\n  /**\n   * Obtenir les textures en tant qu'Observable\n   */\n  getTexturesObservable(): Observable {\n    return this.textures$;\n  }\n\n  /**\n   * Obtenir une texture par son ID\n   */\n  getTextureParId(id: string): ProprietesTexture | undefined {\n    return this.texturesActuelles.value.find(texture => texture.id === id);\n  }\n\n  /**\n   * Obtenir les textures par type\n   */\n  getTexturesParType(type: ProprietesTexture['type']): ProprietesTexture[] {\n    return this.texturesActuelles.value.filter(texture => texture.type === type);\n  }\n\n  /**\n   * Ajouter une nouvelle texture\n   */\n  ajouterTexture(nouvelleTexture: Omit): void {\n    const textureComplete: ProprietesTexture = {\n      ...nouvelleTexture,\n      id: `texture_${Date.now()}`\n    };\n    \n    const texturesActuelles = this.getTextures();\n    texturesActuelles.push(textureComplete);\n    this.texturesActuelles.next(texturesActuelles);\n  }\n\n  /**\n   * Obtenir les statistiques des matériaux\n   */\n  getStatistiquesMateriaux(): StatistiquesMateriaux {\n    const materiaux = this.getMateriaux();\n    const palettes = this.getPalettes();\n    const textures = this.getTextures();\n    \n    const nombreTotal = materiaux.length;\n    const nombreParType: Record = {};\n    \n    materiaux.forEach(materiau => {\n      nombreParType[materiau.type] = (nombreParType[materiau.type] || 0) + 1;\n    });\n    \n    const couleursUtilisees = materiaux.map(materiau => materiau.couleur);\n    const texturesUtilisees = materiaux\n      .filter(materiau => materiau.texture)\n      .map(materiau => materiau.texture!);\n    \n    const paletteLaPlusUtilisee = palettes.length > 0 ? palettes[0].nom : 'Aucune';\n    const materiauLePlusUtilise = Object.keys(nombreParType).reduce((a, b) => \n      nombreParType[a] > nombreParType[b] ? a : b\n    );\n\n    return {\n      nombreTotal,\n      nombreParType,\n      couleursUtilisees,\n      texturesUtilisees,\n      paletteLaPlusUtilisee,\n      materiauLePlusUtilise\n    };\n  }\n\n  /**\n   * Générer une couleur aléatoire\n   */\n  genererCouleurAleatoire(): number {\n    return Math.floor(Math.random() * 16777215);\n  }\n\n  /**\n   * Générer une palette de couleurs harmonieuses\n   */\n  genererPaletteHarmonieuse(couleurBase: number, nombreCouleurs: number = 5): number[] {\n    const couleurs: number[] = [couleurBase];\n    const rgb = this.hexToRgb(this.numberToHex(couleurBase));\n    const hsl = this.rgbToHsl(rgb.r, rgb.g, rgb.b);\n    \n    for (let i = 1; i  {\n      if (t  1) t -= 1;\n      if (t \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProprietesMur.html":{"url":"interfaces/ProprietesMur.html","title":"interface - ProprietesMur","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProprietesMur\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/mur/mur.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les propriétés d'un mur\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            couleur\n                                        \n                                \n                                \n                                        \n                                            dateCreation\n                                        \n                                \n                                \n                                        \n                                            derniereModification\n                                        \n                                \n                                \n                                        \n                                            dimensions\n                                        \n                                \n                                \n                                        \n                                            epaisseur\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            nom\n                                        \n                                \n                                \n                                        \n                                            nombreOuvertures\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            pourcentageOuvertures\n                                        \n                                \n                                \n                                        \n                                            surface\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            volume\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        couleur\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        couleur:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateCreation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dateCreation:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        derniereModification\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        derniereModification:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dimensions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dimensions:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        epaisseur\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        epaisseur:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nom:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nombreOuvertures\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nombreOuvertures:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pourcentageOuvertures\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pourcentageOuvertures:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surface\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        surface:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"principal\" | \"arriere\" | \"gauche\" | \"droit\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"principal\" | \"arriere\" | \"gauche\" | \"droit\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        volume\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        volume:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigurationService, ConfigurationMur } from '../configuration/configuration.service';\n\n/**\n * Interface pour les propriétés d'un mur\n */\nexport interface ProprietesMur {\n  id: string;\n  nom: string;\n  type: 'principal' | 'arriere' | 'gauche' | 'droit';\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n  epaisseur: number;\n  surface: number;\n  volume: number;\n  nombreOuvertures: number;\n  pourcentageOuvertures: number;\n  dateCreation: Date;\n  derniereModification: Date;\n}\n\n/**\n * Interface pour les calculs géométriques d'un mur\n */\nexport interface CalculsMur {\n  surfaceTotale: number;\n  surfaceOuvertures: number;\n  surfaceNet: number;\n  volume: number;\n  perimetre: number;\n  centreGravite: { x: number; y: number; z: number };\n}\n\n/**\n * Interface pour la validation d'un mur\n */\nexport interface ValidationMur {\n  isValid: boolean;\n  erreurs: string[];\n  avertissements: string[];\n}\n\n/**\n * Service de gestion des murs\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MurService {\n  \n  private mursActuels = new BehaviorSubject([]);\n  public murs$ = this.mursActuels.asObservable();\n\n  constructor(private configurationService: ConfigurationService) {\n    // Initialiser avec la configuration actuelle\n    this.initialiserMurs();\n    \n    // Écouter les changements de configuration\n    this.configurationService.getConfigurationObservable().subscribe(() => {\n      this.initialiserMurs();\n    });\n  }\n\n  /**\n   * Initialiser les murs à partir de la configuration\n   */\n  private initialiserMurs(): void {\n    const config = this.configurationService.getConfiguration();\n    const murs: ProprietesMur[] = [];\n    \n    Object.entries(config.murs).forEach(([type, murConfig]) => {\n      const calculs = this.calculerProprietesMur(murConfig);\n      const mur: ProprietesMur = {\n        id: `mur_${type}`,\n        nom: this.getNomMur(type),\n        type: type as ProprietesMur['type'],\n        position: murConfig.position,\n        dimensions: murConfig.dimensions,\n        couleur: murConfig.couleur,\n        epaisseur: murConfig.epaisseur,\n        surface: calculs.surfaceTotale,\n        volume: calculs.volume,\n        nombreOuvertures: murConfig.ouvertures.length,\n        pourcentageOuvertures: calculs.surfaceOuvertures > 0 ? \n          Math.round((calculs.surfaceOuvertures / calculs.surfaceTotale) * 100 * 100) / 100 : 0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      };\n      murs.push(mur);\n    });\n    \n    this.mursActuels.next(murs);\n  }\n\n  /**\n   * Obtenir le nom d'un mur selon son type\n   */\n  private getNomMur(type: string): string {\n    const noms: Record = {\n      principal: 'Mur Principal',\n      arriere: 'Mur Arrière',\n      gauche: 'Mur Gauche',\n      droit: 'Mur Droit'\n    };\n    return noms[type] || 'Mur Inconnu';\n  }\n\n  /**\n   * Calculer les propriétés géométriques d'un mur\n   */\n  private calculerProprietesMur(murConfig: ConfigurationMur): CalculsMur {\n    const surfaceTotale = murConfig.dimensions.width * murConfig.dimensions.height;\n    const surfaceOuvertures = murConfig.ouvertures.reduce((total, ouverture) => {\n      return total + (ouverture.dimensions.width * ouverture.dimensions.height);\n    }, 0);\n    const surfaceNet = surfaceTotale - surfaceOuvertures;\n    const volume = surfaceTotale * murConfig.dimensions.depth;\n    const perimetre = 2 * (murConfig.dimensions.width + murConfig.dimensions.height);\n    \n    const centreGravite = {\n      x: murConfig.position.x,\n      y: murConfig.position.y + (murConfig.dimensions.height / 2),\n      z: murConfig.position.z\n    };\n\n    return {\n      surfaceTotale: Math.round(surfaceTotale * 100) / 100,\n      surfaceOuvertures: Math.round(surfaceOuvertures * 100) / 100,\n      surfaceNet: Math.round(surfaceNet * 100) / 100,\n      volume: Math.round(volume * 100) / 100,\n      perimetre: Math.round(perimetre * 100) / 100,\n      centreGravite\n    };\n  }\n\n  /**\n   * Obtenir tous les murs\n   */\n  getMurs(): ProprietesMur[] {\n    return this.mursActuels.value;\n  }\n\n  /**\n   * Obtenir les murs en tant qu'Observable\n   */\n  getMursObservable(): Observable {\n    return this.murs$;\n  }\n\n  /**\n   * Obtenir un mur par son ID\n   */\n  getMurParId(id: string): ProprietesMur | undefined {\n    return this.mursActuels.value.find(mur => mur.id === id);\n  }\n\n  /**\n   * Obtenir un mur par son type\n   */\n  getMurParType(type: ProprietesMur['type']): ProprietesMur | undefined {\n    return this.mursActuels.value.find(mur => mur.type === type);\n  }\n\n  /**\n   * Obtenir le mur principal\n   */\n  getMurPrincipal(): ProprietesMur | undefined {\n    return this.getMurParType('principal');\n  }\n\n  /**\n   * Obtenir le mur arrière\n   */\n  getMurArriere(): ProprietesMur | undefined {\n    return this.getMurParType('arriere');\n  }\n\n  /**\n   * Obtenir le mur gauche\n   */\n  getMurGauche(): ProprietesMur | undefined {\n    return this.getMurParType('gauche');\n  }\n\n  /**\n   * Obtenir le mur droit\n   */\n  getMurDroit(): ProprietesMur | undefined {\n    return this.getMurParType('droit');\n  }\n\n  /**\n   * Modifier la position d'un mur\n   */\n  modifierPositionMur(type: ProprietesMur['type'], nouvellePosition: { x: number; y: number; z: number }): void {\n    try {\n      // Validation des paramètres\n      if (!type || !nouvellePosition) {\n        throw new Error('Paramètres manquants pour la modification de position');\n      }\n      \n      if (typeof nouvellePosition.x !== 'number' || \n          typeof nouvellePosition.y !== 'number' || \n          typeof nouvellePosition.z !== 'number') {\n        throw new Error('Position invalide: coordonnées doivent être des nombres');\n      }\n      \n      const config = this.configurationService.getConfiguration();\n      const murConfig = config.murs[type];\n      \n      if (!murConfig) {\n        throw new Error(`Mur de type '${type}' non trouvé`);\n      }\n      \n      murConfig.position = nouvellePosition;\n      this.configurationService.mettreAJourMur(type, murConfig);\n    } catch (error) {\n      console.error('Erreur lors de la modification de position du mur:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Modifier les dimensions d'un mur\n   */\n  modifierDimensionsMur(type: ProprietesMur['type'], nouvellesDimensions: { width: number; height: number; depth: number }): void {\n    const config = this.configurationService.getConfiguration();\n    const murConfig = config.murs[type];\n    \n    if (murConfig) {\n      murConfig.dimensions = nouvellesDimensions;\n      this.configurationService.mettreAJourMur(type, murConfig);\n    }\n  }\n\n  /**\n   * Modifier la couleur d'un mur\n   */\n  modifierCouleurMur(type: ProprietesMur['type'], nouvelleCouleur: number): void {\n    const config = this.configurationService.getConfiguration();\n    const murConfig = config.murs[type];\n    \n    if (murConfig) {\n      murConfig.couleur = nouvelleCouleur;\n      this.configurationService.mettreAJourMur(type, murConfig);\n    }\n  }\n\n  /**\n   * Modifier l'épaisseur d'un mur\n   */\n  modifierEpaisseurMur(type: ProprietesMur['type'], nouvelleEpaisseur: number): void {\n    const config = this.configurationService.getConfiguration();\n    const murConfig = config.murs[type];\n    \n    if (murConfig) {\n      murConfig.epaisseur = nouvelleEpaisseur;\n      murConfig.dimensions.depth = nouvelleEpaisseur;\n      this.configurationService.mettreAJourMur(type, murConfig);\n    }\n  }\n\n  /**\n   * Valider un mur\n   */\n  validerMur(mur: ProprietesMur): ValidationMur {\n    const erreurs: string[] = [];\n    const avertissements: string[] = [];\n\n    // Validation des dimensions\n    if (mur.dimensions.width  1) {\n      avertissements.push('L\\'épaisseur du mur est très épaisse (> 1m)');\n    }\n\n    // Validation du pourcentage d'ouvertures\n    if (mur.pourcentageOuvertures > 50) {\n      avertissements.push('Le mur a plus de 50% d\\'ouvertures');\n    }\n\n    // Validation de la position\n    if (Math.abs(mur.position.x) > 10 || Math.abs(mur.position.y) > 10 || Math.abs(mur.position.z) > 10) {\n      avertissements.push('La position du mur est très éloignée de l\\'origine');\n    }\n\n    return {\n      isValid: erreurs.length === 0,\n      erreurs,\n      avertissements\n    };\n  }\n\n  /**\n   * Obtenir les statistiques des murs\n   */\n  getStatistiquesMurs(): {\n    nombreTotal: number;\n    surfaceTotale: number;\n    volumeTotal: number;\n    nombreOuvertures: number;\n    pourcentageOuverturesMoyen: number;\n  } {\n    const murs = this.getMurs();\n    \n    const nombreTotal = murs.length;\n    const surfaceTotale = murs.reduce((total, mur) => total + mur.surface, 0);\n    const volumeTotal = murs.reduce((total, mur) => total + mur.volume, 0);\n    const nombreOuvertures = murs.reduce((total, mur) => total + mur.nombreOuvertures, 0);\n    const pourcentageOuverturesMoyen = murs.length > 0 ? \n      murs.reduce((total, mur) => total + mur.pourcentageOuvertures, 0) / murs.length : 0;\n\n    return {\n      nombreTotal,\n      surfaceTotale: Math.round(surfaceTotale * 100) / 100,\n      volumeTotal: Math.round(volumeTotal * 100) / 100,\n      nombreOuvertures,\n      pourcentageOuverturesMoyen: Math.round(pourcentageOuverturesMoyen * 100) / 100\n    };\n  }\n\n  /**\n   * Obtenir les murs avec le plus d'ouvertures\n   */\n  getMursAvecPlusOuvertures(): ProprietesMur[] {\n    const murs = this.getMurs();\n    const maxOuvertures = Math.max(...murs.map(mur => mur.nombreOuvertures));\n    return murs.filter(mur => mur.nombreOuvertures === maxOuvertures);\n  }\n\n  /**\n   * Obtenir les murs sans ouvertures\n   */\n  getMursSansOuvertures(): ProprietesMur[] {\n    return this.getMurs().filter(mur => mur.nombreOuvertures === 0);\n  }\n\n  /**\n   * Calculer la distance entre deux murs\n   */\n  calculerDistanceEntreMurs(mur1: ProprietesMur, mur2: ProprietesMur): number {\n    const dx = mur1.position.x - mur2.position.x;\n    const dy = mur1.position.y - mur2.position.y;\n    const dz = mur1.position.z - mur2.position.z;\n    \n    return Math.round(Math.sqrt(dx * dx + dy * dy + dz * dz) * 100) / 100;\n  }\n\n  /**\n   * Obtenir les murs adjacents\n   */\n  getMursAdjacents(mur: ProprietesMur): ProprietesMur[] {\n    const murs = this.getMurs();\n    const mursAdjacents: ProprietesMur[] = [];\n    \n    murs.forEach(autreMur => {\n      if (autreMur.id !== mur.id) {\n        const distance = this.calculerDistanceEntreMurs(mur, autreMur);\n        // Considérer comme adjacent si la distance est inférieure à 5m\n        if (distance \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProprietesOuverture.html":{"url":"interfaces/ProprietesOuverture.html","title":"interface - ProprietesOuverture","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProprietesOuverture\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/ouverture/ouverture.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les propriétés d'une ouverture\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            couleur\n                                        \n                                \n                                \n                                        \n                                            dateCreation\n                                        \n                                \n                                \n                                        \n                                            derniereModification\n                                        \n                                \n                                \n                                        \n                                            dimensions\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            murParent\n                                        \n                                \n                                \n                                        \n                                            nom\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            surface\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            volume\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        couleur\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        couleur:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateCreation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dateCreation:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        derniereModification\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        derniereModification:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dimensions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dimensions:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        murParent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        murParent:     \"principal\" | \"arriere\" | \"gauche\" | \"droit\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"principal\" | \"arriere\" | \"gauche\" | \"droit\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nom:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surface\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        surface:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"porte\" | \"fenetre\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"porte\" | \"fenetre\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        volume\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        volume:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigurationService, ConfigurationOuverture } from '../configuration/configuration.service';\n\n/**\n * Interface pour les propriétés d'une ouverture\n */\nexport interface ProprietesOuverture {\n  id: string;\n  nom: string;\n  type: 'porte' | 'fenetre';\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n  surface: number;\n  volume: number;\n  murParent: 'principal' | 'arriere' | 'gauche' | 'droit';\n  dateCreation: Date;\n  derniereModification: Date;\n}\n\n/**\n * Interface pour les calculs d'une ouverture\n */\nexport interface CalculsOuverture {\n  surface: number;\n  volume: number;\n  perimetre: number;\n  centreGravite: { x: number; y: number; z: number };\n  ratioAspect: number; // largeur/hauteur\n}\n\n/**\n * Interface pour la validation d'une ouverture\n */\nexport interface ValidationOuverture {\n  isValid: boolean;\n  erreurs: string[];\n  avertissements: string[];\n}\n\n/**\n * Interface pour les statistiques des ouvertures\n */\nexport interface StatistiquesOuvertures {\n  nombreTotal: number;\n  nombrePortes: number;\n  nombreFenetres: number;\n  surfaceTotale: number;\n  surfacePortes: number;\n  surfaceFenetres: number;\n  pourcentagePortes: number;\n  pourcentageFenetres: number;\n}\n\n/**\n * Service de gestion des ouvertures (portes et fenêtres)\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class OuvertureService {\n  \n  private ouverturesActuelles = new BehaviorSubject([]);\n  public ouvertures$ = this.ouverturesActuelles.asObservable();\n\n  constructor(private configurationService: ConfigurationService) {\n    // Initialiser avec la configuration actuelle\n    this.initialiserOuvertures();\n    \n    // Écouter les changements de configuration\n    this.configurationService.getConfigurationObservable().subscribe(() => {\n      this.initialiserOuvertures();\n    });\n  }\n\n  /**\n   * Initialiser les ouvertures à partir de la configuration\n   */\n  private initialiserOuvertures(): void {\n    const config = this.configurationService.getConfiguration();\n    const ouvertures: ProprietesOuverture[] = [];\n    \n    Object.entries(config.murs).forEach(([typeMur, murConfig]) => {\n      murConfig.ouvertures.forEach(ouvertureConfig => {\n        const calculs = this.calculerProprietesOuverture(ouvertureConfig);\n        const ouverture: ProprietesOuverture = {\n          id: ouvertureConfig.id,\n          nom: ouvertureConfig.nom || `${ouvertureConfig.type}_${ouvertureConfig.id}`,\n          type: ouvertureConfig.type,\n          position: ouvertureConfig.position,\n          dimensions: ouvertureConfig.dimensions,\n          couleur: ouvertureConfig.couleur,\n          surface: calculs.surface,\n          volume: calculs.volume,\n          murParent: typeMur as ProprietesOuverture['murParent'],\n          dateCreation: new Date(),\n          derniereModification: new Date()\n        };\n        ouvertures.push(ouverture);\n      });\n    });\n    \n    this.ouverturesActuelles.next(ouvertures);\n  }\n\n  /**\n   * Calculer les propriétés géométriques d'une ouverture\n   */\n  private calculerProprietesOuverture(ouvertureConfig: ConfigurationOuverture): CalculsOuverture {\n    const surface = ouvertureConfig.dimensions.width * ouvertureConfig.dimensions.height;\n    const volume = surface * ouvertureConfig.dimensions.depth;\n    const perimetre = 2 * (ouvertureConfig.dimensions.width + ouvertureConfig.dimensions.height);\n    const ratioAspect = ouvertureConfig.dimensions.width / ouvertureConfig.dimensions.height;\n    \n    const centreGravite = {\n      x: ouvertureConfig.position.x,\n      y: ouvertureConfig.position.y + (ouvertureConfig.dimensions.height / 2),\n      z: ouvertureConfig.position.z\n    };\n\n    return {\n      surface: Math.round(surface * 100) / 100,\n      volume: Math.round(volume * 100) / 100,\n      perimetre: Math.round(perimetre * 100) / 100,\n      centreGravite,\n      ratioAspect: Math.round(ratioAspect * 100) / 100\n    };\n  }\n\n  /**\n   * Obtenir toutes les ouvertures\n   */\n  getOuvertures(): ProprietesOuverture[] {\n    return this.ouverturesActuelles.value;\n  }\n\n  /**\n   * Obtenir les ouvertures en tant qu'Observable\n   */\n  getOuverturesObservable(): Observable {\n    return this.ouvertures$;\n  }\n\n  /**\n   * Obtenir une ouverture par son ID\n   */\n  getOuvertureParId(id: string): ProprietesOuverture | undefined {\n    return this.ouverturesActuelles.value.find(ouverture => ouverture.id === id);\n  }\n\n  /**\n   * Obtenir les ouvertures par type\n   */\n  getOuverturesParType(type: 'porte' | 'fenetre'): ProprietesOuverture[] {\n    return this.ouverturesActuelles.value.filter(ouverture => ouverture.type === type);\n  }\n\n  /**\n   * Obtenir toutes les portes\n   */\n  getPortes(): ProprietesOuverture[] {\n    return this.getOuverturesParType('porte');\n  }\n\n  /**\n   * Obtenir toutes les fenêtres\n   */\n  getFenetres(): ProprietesOuverture[] {\n    return this.getOuverturesParType('fenetre');\n  }\n\n  /**\n   * Obtenir les ouvertures d'un mur spécifique\n   */\n  getOuverturesParMur(murParent: ProprietesOuverture['murParent']): ProprietesOuverture[] {\n    return this.ouverturesActuelles.value.filter(ouverture => ouverture.murParent === murParent);\n  }\n\n  /**\n   * Ajouter une nouvelle ouverture\n   */\n  ajouterOuverture(\n    murParent: ProprietesOuverture['murParent'],\n    nouvelleOuverture: Omit\n  ): void {\n    try {\n      // Validation des paramètres\n      if (!murParent || !nouvelleOuverture) {\n        throw new Error('Paramètres manquants pour l\\'ajout d\\'ouverture');\n      }\n      \n      if (!nouvelleOuverture.type || !nouvelleOuverture.dimensions || !nouvelleOuverture.position) {\n        throw new Error('Ouverture incomplète: propriétés manquantes');\n      }\n      \n      if (nouvelleOuverture.dimensions.width  o.id === id);\n      \n      if (ouvertureConfig) {\n        ouvertureConfig.position = nouvellePosition;\n        this.configurationService.mettreAJourMur(ouverture.murParent, murConfig);\n      }\n    }\n  }\n\n  /**\n   * Modifier les dimensions d'une ouverture\n   */\n  modifierDimensionsOuverture(id: string, nouvellesDimensions: { width: number; height: number; depth: number }): void {\n    const ouverture = this.getOuvertureParId(id);\n    if (ouverture) {\n      const config = this.configurationService.getConfiguration();\n      const murConfig = config.murs[ouverture.murParent];\n      const ouvertureConfig = murConfig.ouvertures.find(o => o.id === id);\n      \n      if (ouvertureConfig) {\n        ouvertureConfig.dimensions = nouvellesDimensions;\n        this.configurationService.mettreAJourMur(ouverture.murParent, murConfig);\n      }\n    }\n  }\n\n  /**\n   * Modifier la couleur d'une ouverture\n   */\n  modifierCouleurOuverture(id: string, nouvelleCouleur: number): void {\n    const ouverture = this.getOuvertureParId(id);\n    if (ouverture) {\n      const config = this.configurationService.getConfiguration();\n      const murConfig = config.murs[ouverture.murParent];\n      const ouvertureConfig = murConfig.ouvertures.find(o => o.id === id);\n      \n      if (ouvertureConfig) {\n        ouvertureConfig.couleur = nouvelleCouleur;\n        this.configurationService.mettreAJourMur(ouverture.murParent, murConfig);\n      }\n    }\n  }\n\n  /**\n   * Valider une ouverture\n   */\n  validerOuverture(ouverture: ProprietesOuverture): ValidationOuverture {\n    const erreurs: string[] = [];\n    const avertissements: string[] = [];\n\n    // Validation des dimensions\n    if (ouverture.dimensions.width  1.2) {\n        avertissements.push('La largeur de la porte est supérieure à 1.2m');\n      }\n    }\n\n    // Validation spécifique aux fenêtres\n    if (ouverture.type === 'fenetre') {\n      if (ouverture.dimensions.height  3) {\n      avertissements.push('Le ratio largeur/hauteur est très élevé (> 3)');\n    }\n    if (ratioAspect  total + ouverture.surface, 0);\n    const surfacePortes = portes.reduce((total, porte) => total + porte.surface, 0);\n    const surfaceFenetres = fenetres.reduce((total, fenetre) => total + fenetre.surface, 0);\n    \n    const pourcentagePortes = surfaceTotale > 0 ? (surfacePortes / surfaceTotale) * 100 : 0;\n    const pourcentageFenetres = surfaceTotale > 0 ? (surfaceFenetres / surfaceTotale) * 100 : 0;\n\n    return {\n      nombreTotal,\n      nombrePortes,\n      nombreFenetres,\n      surfaceTotale: Math.round(surfaceTotale * 100) / 100,\n      surfacePortes: Math.round(surfacePortes * 100) / 100,\n      surfaceFenetres: Math.round(surfaceFenetres * 100) / 100,\n      pourcentagePortes: Math.round(pourcentagePortes * 100) / 100,\n      pourcentageFenetres: Math.round(pourcentageFenetres * 100) / 100\n    };\n  }\n\n  /**\n   * Obtenir la plus grande ouverture\n   */\n  getPlusGrandeOuverture(): ProprietesOuverture | undefined {\n    const ouvertures = this.getOuvertures();\n    if (ouvertures.length === 0) return undefined;\n    \n    return ouvertures.reduce((plusGrande, ouverture) => \n      ouverture.surface > plusGrande.surface ? ouverture : plusGrande\n    );\n  }\n\n  /**\n   * Obtenir la plus petite ouverture\n   */\n  getPlusPetiteOuverture(): ProprietesOuverture | undefined {\n    const ouvertures = this.getOuvertures();\n    if (ouvertures.length === 0) return undefined;\n    \n    return ouvertures.reduce((plusPetite, ouverture) => \n      ouverture.surface  \n      ouverture.surface >= minSurface && ouverture.surface  {\n      if (autreOuverture.id !== ouverture.id) {\n        const distance = this.calculerDistanceEntreOuvertures(ouverture, autreOuverture);\n        if (distance  ouverture.couleur === couleur);\n  }\n\n  /**\n   * Obtenir les couleurs utilisées\n   */\n  getCouleursUtilisees(): number[] {\n    const ouvertures = this.getOuvertures();\n    const couleurs = new Set();\n    \n    ouvertures.forEach(ouverture => {\n      couleurs.add(ouverture.couleur);\n    });\n    \n    return Array.from(couleurs);\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProprietesScene.html":{"url":"interfaces/ProprietesScene.html","title":"interface - ProprietesScene","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProprietesScene\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/scene/scene.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les propriétés de la scène 3D\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            antialias\n                                        \n                                \n                                \n                                        \n                                            backgroundColor\n                                        \n                                \n                                \n                                        \n                                            dateCreation\n                                        \n                                \n                                \n                                        \n                                            derniereModification\n                                        \n                                \n                                \n                                        \n                                            fogColor\n                                        \n                                \n                                \n                                        \n                                            fogFar\n                                        \n                                \n                                \n                                        \n                                            fogNear\n                                        \n                                \n                                \n                                        \n                                            hauteur\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            largeur\n                                        \n                                \n                                \n                                        \n                                            nom\n                                        \n                                \n                                \n                                        \n                                            shadowMapEnabled\n                                        \n                                \n                                \n                                        \n                                            shadowMapType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        antialias\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        antialias:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        backgroundColor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        backgroundColor:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateCreation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dateCreation:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        derniereModification\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        derniereModification:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fogColor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fogColor:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fogFar\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fogFar:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fogNear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fogNear:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hauteur\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hauteur:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        largeur\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        largeur:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nom:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shadowMapEnabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        shadowMapEnabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shadowMapType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        shadowMapType:     \"PCF\" | \"PCFSoft\" | \"Basic\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"PCF\" | \"PCFSoft\" | \"Basic\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigurationService } from '../configuration/configuration.service';\nimport { MurService, ProprietesMur } from '../mur/mur.service';\nimport { OuvertureService, ProprietesOuverture } from '../ouverture/ouverture.service';\n\n/**\n * Interface pour les propriétés de la scène 3D\n */\nexport interface ProprietesScene {\n  id: string;\n  nom: string;\n  largeur: number;\n  hauteur: number;\n  backgroundColor: number;\n  fogColor: number;\n  fogNear: number;\n  fogFar: number;\n  antialias: boolean;\n  shadowMapEnabled: boolean;\n  shadowMapType: 'PCF' | 'PCFSoft' | 'Basic';\n  dateCreation: Date;\n  derniereModification: Date;\n}\n\n/**\n * Interface pour la caméra\n */\nexport interface ProprietesCamera {\n  position: { x: number; y: number; z: number };\n  target: { x: number; y: number; z: number };\n  fov: number;\n  near: number;\n  far: number;\n  type: 'perspective' | 'orthographic';\n}\n\n/**\n * Interface pour les contrôles de la scène\n */\nexport interface ControlesScene {\n  enableRotate: boolean;\n  enableZoom: boolean;\n  enablePan: boolean;\n  enableDamping: boolean;\n  dampingFactor: number;\n  rotateSpeed: number;\n  zoomSpeed: number;\n  panSpeed: number;\n  minDistance: number;\n  maxDistance: number;\n  minPolarAngle: number;\n  maxPolarAngle: number;\n}\n\n/**\n * Interface pour les lumières\n */\nexport interface ProprietesLumiere {\n  id: string;\n  type: 'ambient' | 'directional' | 'point' | 'spot';\n  position?: { x: number; y: number; z: number };\n  direction?: { x: number; y: number; z: number };\n  color: number;\n  intensity: number;\n  castShadow: boolean;\n  enabled: boolean;\n}\n\n/**\n * Interface pour les statistiques de la scène\n */\nexport interface StatistiquesScene {\n  nombreObjets: number;\n  nombreMurs: number;\n  nombreOuvertures: number;\n  nombreLumieres: number;\n  nombreTriangles: number;\n  memoireUtilisee: number;\n  fps: number;\n  tempsRendu: number;\n}\n\n/**\n * Service de gestion de la scène 3D\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SceneService {\n  \n  private sceneActuelle = new BehaviorSubject({\n    id: 'scene_principale',\n    nom: 'Scène Architecturale 3D',\n    largeur: 800,\n    hauteur: 600,\n    backgroundColor: 0x87CEEB, // Bleu ciel\n    fogColor: 0x87CEEB,\n    fogNear: 1,\n    fogFar: 100,\n    antialias: true,\n    shadowMapEnabled: true,\n    shadowMapType: 'PCFSoft',\n    dateCreation: new Date(),\n    derniereModification: new Date()\n  });\n\n  private cameraActuelle = new BehaviorSubject({\n    position: { x: 5, y: 5, z: 5 },\n    target: { x: 0, y: 0, z: 0 },\n    fov: 75,\n    near: 0.1,\n    far: 1000,\n    type: 'perspective'\n  });\n\n  private controlesActuels = new BehaviorSubject({\n    enableRotate: true,\n    enableZoom: true,\n    enablePan: true,\n    enableDamping: true,\n    dampingFactor: 0.05,\n    rotateSpeed: 1.0,\n    zoomSpeed: 1.0,\n    panSpeed: 1.0,\n    minDistance: 2,\n    maxDistance: 50,\n    minPolarAngle: 0,\n    maxPolarAngle: Math.PI\n  });\n\n  private lumiereActuelles = new BehaviorSubject([\n    {\n      id: 'lumiere_ambient',\n      type: 'ambient',\n      color: 0x404040,\n      intensity: 0.4,\n      castShadow: false,\n      enabled: true\n    },\n    {\n      id: 'lumiere_directionnelle',\n      type: 'directional',\n      position: { x: 10, y: 10, z: 5 },\n      direction: { x: -1, y: -1, z: -1 },\n      color: 0xffffff,\n      intensity: 1.0,\n      castShadow: true,\n      enabled: true\n    }\n  ]);\n\n  public scene$ = this.sceneActuelle.asObservable();\n  public camera$ = this.cameraActuelle.asObservable();\n  public controles$ = this.controlesActuels.asObservable();\n  public lumiere$ = this.lumiereActuelles.asObservable();\n\n  constructor(\n    private configurationService: ConfigurationService,\n    private murService: MurService,\n    private ouvertureService: OuvertureService\n  ) {\n    console.log('SceneService initialisé');\n  }\n\n  /**\n   * Obtenir les propriétés de la scène\n   */\n  getProprietesScene(): ProprietesScene {\n    return this.sceneActuelle.value;\n  }\n\n  /**\n   * Obtenir les propriétés de la scène en tant qu'Observable\n   */\n  getProprietesSceneObservable(): Observable {\n    return this.scene$;\n  }\n\n  /**\n   * Mettre à jour les propriétés de la scène\n   */\n  mettreAJourProprietesScene(nouvellesProprietes: Partial): void {\n    const proprietesActuelles = this.getProprietesScene();\n    const proprietesMisesAJour = {\n      ...proprietesActuelles,\n      ...nouvellesProprietes,\n      derniereModification: new Date()\n    };\n    \n    this.sceneActuelle.next(proprietesMisesAJour);\n    console.log('Propriétés de la scène mises à jour:', proprietesMisesAJour);\n  }\n\n  /**\n   * Obtenir les propriétés de la caméra\n   */\n  getProprietesCamera(): ProprietesCamera {\n    return this.cameraActuelle.value;\n  }\n\n  /**\n   * Obtenir les propriétés de la caméra en tant qu'Observable\n   */\n  getProprietesCameraObservable(): Observable {\n    return this.camera$;\n  }\n\n  /**\n   * Mettre à jour les propriétés de la caméra\n   */\n  mettreAJourProprietesCamera(nouvellesProprietes: Partial): void {\n    const proprietesActuelles = this.getProprietesCamera();\n    const proprietesMisesAJour = {\n      ...proprietesActuelles,\n      ...nouvellesProprietes\n    };\n    \n    this.cameraActuelle.next(proprietesMisesAJour);\n    console.log('Propriétés de la caméra mises à jour:', proprietesMisesAJour);\n  }\n\n  /**\n   * Obtenir les contrôles de la scène\n   */\n  getControlesScene(): ControlesScene {\n    return this.controlesActuels.value;\n  }\n\n  /**\n   * Obtenir les contrôles de la scène en tant qu'Observable\n   */\n  getControlesSceneObservable(): Observable {\n    return this.controles$;\n  }\n\n  /**\n   * Mettre à jour les contrôles de la scène\n   */\n  mettreAJourControlesScene(nouveauxControles: Partial): void {\n    const controlesActuels = this.getControlesScene();\n    const controlesMisesAJour = {\n      ...controlesActuels,\n      ...nouveauxControles\n    };\n    \n    this.controlesActuels.next(controlesMisesAJour);\n    console.log('Contrôles de la scène mis à jour:', controlesMisesAJour);\n  }\n\n  /**\n   * Obtenir les lumières\n   */\n  getLumieres(): ProprietesLumiere[] {\n    return this.lumiereActuelles.value;\n  }\n\n  /**\n   * Obtenir les lumières en tant qu'Observable\n   */\n  getLumieresObservable(): Observable {\n    return this.lumiere$;\n  }\n\n  /**\n   * Ajouter une nouvelle lumière\n   */\n  ajouterLumiere(nouvelleLumiere: Omit): void {\n    const lumiereComplete: ProprietesLumiere = {\n      ...nouvelleLumiere,\n      id: `lumiere_${Date.now()}`\n    };\n    \n    const lumiereActuelles = this.getLumieres();\n    lumiereActuelles.push(lumiereComplete);\n    this.lumiereActuelles.next(lumiereActuelles);\n  }\n\n  /**\n   * Supprimer une lumière\n   */\n  supprimerLumiere(id: string): void {\n    const lumiereActuelles = this.getLumieres();\n    const lumiereFiltrees = lumiereActuelles.filter(lumiere => lumiere.id !== id);\n    this.lumiereActuelles.next(lumiereFiltrees);\n  }\n\n  /**\n   * Modifier une lumière\n   */\n  modifierLumiere(id: string, nouvellesProprietes: Partial): void {\n    const lumiereActuelles = this.getLumieres();\n    const lumiereIndex = lumiereActuelles.findIndex(lumiere => lumiere.id === id);\n    \n    if (lumiereIndex !== -1) {\n      lumiereActuelles[lumiereIndex] = {\n        ...lumiereActuelles[lumiereIndex],\n        ...nouvellesProprietes\n      };\n      this.lumiereActuelles.next(lumiereActuelles);\n    }\n  }\n\n  /**\n   * Activer/Désactiver une lumière\n   */\n  toggleLumiere(id: string): void {\n    const lumiereActuelles = this.getLumieres();\n    const lumiereIndex = lumiereActuelles.findIndex(lumiere => lumiere.id === id);\n    \n    if (lumiereIndex !== -1) {\n      lumiereActuelles[lumiereIndex].enabled = !lumiereActuelles[lumiereIndex].enabled;\n      this.lumiereActuelles.next(lumiereActuelles);\n    }\n  }\n\n  /**\n   * Obtenir les statistiques de la scène\n   */\n  getStatistiquesScene(): StatistiquesScene {\n    const murs = this.murService.getMurs();\n    const ouvertures = this.ouvertureService.getOuvertures();\n    const lumiere = this.getLumieres();\n    \n    const nombreMurs = murs.length;\n    const nombreOuvertures = ouvertures.length;\n    const nombreLumieres = lumiere.length;\n    const nombreObjets = nombreMurs + nombreOuvertures + nombreLumieres;\n    \n    // Estimation du nombre de triangles (approximation)\n    const nombreTriangles = (nombreMurs * 12) + (nombreOuvertures * 8); // Estimation\n    \n    // Estimation de la mémoire utilisée (en MB)\n    const memoireUtilisee = (nombreTriangles * 0.001); // Approximation\n    \n    return {\n      nombreObjets,\n      nombreMurs,\n      nombreOuvertures,\n      nombreLumieres,\n      nombreTriangles,\n      memoireUtilisee: Math.round(memoireUtilisee * 100) / 100,\n      fps: 60, // Valeur par défaut\n      tempsRendu: 16.67 // 60 FPS = 16.67ms par frame\n    };\n  }\n\n  /**\n   * Réinitialiser la caméra à sa position par défaut\n   */\n  reinitialiserCamera(): void {\n    this.mettreAJourProprietesCamera({\n      position: { x: 5, y: 5, z: 5 },\n      target: { x: 0, y: 0, z: 0 }\n    });\n  }\n\n  /**\n   * Centrer la caméra sur un objet\n   */\n  centrerCameraSurObjet(position: { x: number; y: number; z: number }): void {\n    this.mettreAJourProprietesCamera({\n      target: position\n    });\n  }\n\n  /**\n   * Obtenir la distance entre la caméra et un point\n   */\n  calculerDistanceCamera(point: { x: number; y: number; z: number }): number {\n    const camera = this.getProprietesCamera();\n    const dx = camera.position.x - point.x;\n    const dy = camera.position.y - point.y;\n    const dz = camera.position.z - point.z;\n    \n    return Math.round(Math.sqrt(dx * dx + dy * dy + dz * dz) * 100) / 100;\n  }\n\n  /**\n   * Obtenir le point le plus proche de la caméra\n   */\n  getPointLePlusProcheDeCamera(): { x: number; y: number; z: number } | null {\n    const camera = this.getProprietesCamera();\n    const murs = this.murService.getMurs();\n    const ouvertures = this.ouvertureService.getOuvertures();\n    \n    let pointLePlusProche: { x: number; y: number; z: number } | null = null;\n    let distanceMin = Infinity;\n    \n    // Vérifier les murs\n    murs.forEach(mur => {\n      const distance = this.calculerDistanceCamera(mur.position);\n      if (distance  {\n      const distance = this.calculerDistanceCamera(ouverture.position);\n      if (distance \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProprietesTexture.html":{"url":"interfaces/ProprietesTexture.html","title":"interface - ProprietesTexture","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProprietesTexture\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/materiau/materiau.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les textures\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            format\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            nom\n                                        \n                                \n                                \n                                        \n                                            resolution\n                                        \n                                \n                                \n                                        \n                                            taille\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        format\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        format:     \"jpg\" | \"png\" | \"webp\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"jpg\" | \"png\" | \"webp\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nom:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resolution\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        resolution:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        taille\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        taille:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"diffuse\" | \"normal\" | \"roughness\" | \"metallic\" | \"emissive\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"diffuse\" | \"normal\" | \"roughness\" | \"metallic\" | \"emissive\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Interface pour les propriétés d'un matériau\n */\nexport interface ProprietesMateriau {\n  id: string;\n  nom: string;\n  type: 'mur' | 'porte' | 'fenetre' | 'toit' | 'sol' | 'decoration';\n  couleur: number;\n  couleurHex: string;\n  couleurRgb: { r: number; g: number; b: number };\n  couleurHsl: { h: number; s: number; l: number };\n  texture?: string;\n  rugosite: number; // 0 = lisse, 1 = rugueux\n  metallic: number; // 0 = non métallique, 1 = métallique\n  transparent: boolean;\n  opacity: number; // 0 = transparent, 1 = opaque\n  emissive: number; // Couleur émissive\n  emissiveIntensity: number;\n  dateCreation: Date;\n  derniereModification: Date;\n}\n\n/**\n * Interface pour les palettes de couleurs\n */\nexport interface PaletteCouleurs {\n  id: string;\n  nom: string;\n  description: string;\n  couleurs: number[];\n  type: 'architecturale' | 'moderne' | 'classique' | 'naturelle' | 'personnalisee';\n  dateCreation: Date;\n}\n\n/**\n * Interface pour les textures\n */\nexport interface ProprietesTexture {\n  id: string;\n  nom: string;\n  url: string;\n  type: 'diffuse' | 'normal' | 'roughness' | 'metallic' | 'emissive';\n  resolution: { width: number; height: number };\n  format: 'jpg' | 'png' | 'webp';\n  taille: number; // en KB\n}\n\n/**\n * Interface pour les statistiques des matériaux\n */\nexport interface StatistiquesMateriaux {\n  nombreTotal: number;\n  nombreParType: Record;\n  couleursUtilisees: number[];\n  texturesUtilisees: string[];\n  paletteLaPlusUtilisee: string;\n  materiauLePlusUtilise: string;\n}\n\n/**\n * Service de gestion des matériaux et couleurs\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MateriauService {\n  \n  private materiauxActuels = new BehaviorSubject([]);\n  private palettesActuelles = new BehaviorSubject([]);\n  private texturesActuelles = new BehaviorSubject([]);\n\n  public materiaux$ = this.materiauxActuels.asObservable();\n  public palettes$ = this.palettesActuelles.asObservable();\n  public textures$ = this.texturesActuelles.asObservable();\n\n  constructor() {\n    this.initialiserMateriauxParDefaut();\n    this.initialiserPalettesParDefaut();\n    this.initialiserTexturesParDefaut();\n  }\n\n  /**\n   * Initialiser les matériaux par défaut\n   */\n  private initialiserMateriauxParDefaut(): void {\n    const materiaux: ProprietesMateriau[] = [\n      // Matériaux pour murs\n      {\n        id: 'mur_beton',\n        nom: 'Béton Gris',\n        type: 'mur',\n        couleur: 0xaaaaaa,\n        couleurHex: '#aaaaaa',\n        couleurRgb: { r: 170, g: 170, b: 170 },\n        couleurHsl: { h: 0, s: 0, l: 67 },\n        rugosite: 0.7,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      {\n        id: 'mur_brique',\n        nom: 'Brique Rouge',\n        type: 'mur',\n        couleur: 0x8b4513,\n        couleurHex: '#8b4513',\n        couleurRgb: { r: 139, g: 69, b: 19 },\n        couleurHsl: { h: 25, s: 76, l: 31 },\n        rugosite: 0.8,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      {\n        id: 'mur_bois',\n        nom: 'Bois Naturel',\n        type: 'mur',\n        couleur: 0xdeb887,\n        couleurHex: '#deb887',\n        couleurRgb: { r: 222, g: 184, b: 135 },\n        couleurHsl: { h: 34, s: 57, l: 70 },\n        rugosite: 0.6,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      \n      // Matériaux pour portes\n      {\n        id: 'porte_bois_vert',\n        nom: 'Porte Bois Vert',\n        type: 'porte',\n        couleur: 0x00ff00,\n        couleurHex: '#00ff00',\n        couleurRgb: { r: 0, g: 255, b: 0 },\n        couleurHsl: { h: 120, s: 100, l: 50 },\n        rugosite: 0.4,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      {\n        id: 'porte_bois_brun',\n        nom: 'Porte Bois Brun',\n        type: 'porte',\n        couleur: 0x8b4513,\n        couleurHex: '#8b4513',\n        couleurRgb: { r: 139, g: 69, b: 19 },\n        couleurHsl: { h: 25, s: 76, l: 31 },\n        rugosite: 0.3,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      \n      // Matériaux pour fenêtres\n      {\n        id: 'fenetre_bleue',\n        nom: 'Fenêtre Bleue',\n        type: 'fenetre',\n        couleur: 0x0000ff,\n        couleurHex: '#0000ff',\n        couleurRgb: { r: 0, g: 0, b: 255 },\n        couleurHsl: { h: 240, s: 100, l: 50 },\n        rugosite: 0.1,\n        metallic: 0.0,\n        transparent: true,\n        opacity: 0.8,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      {\n        id: 'fenetre_rouge',\n        nom: 'Fenêtre Rouge',\n        type: 'fenetre',\n        couleur: 0xff0000,\n        couleurHex: '#ff0000',\n        couleurRgb: { r: 255, g: 0, b: 0 },\n        couleurHsl: { h: 0, s: 100, l: 50 },\n        rugosite: 0.1,\n        metallic: 0.0,\n        transparent: true,\n        opacity: 0.8,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      \n      // Matériaux pour toit\n      {\n        id: 'toit_bleu',\n        nom: 'Toit Bleu Royal',\n        type: 'toit',\n        couleur: 0x4169e1,\n        couleurHex: '#4169e1',\n        couleurRgb: { r: 65, g: 105, b: 225 },\n        couleurHsl: { h: 225, s: 73, l: 57 },\n        rugosite: 0.5,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      \n      // Matériaux pour sol\n      {\n        id: 'sol_marron',\n        nom: 'Sol Marron',\n        type: 'sol',\n        couleur: 0x8b4513,\n        couleurHex: '#8b4513',\n        couleurRgb: { r: 139, g: 69, b: 19 },\n        couleurHsl: { h: 25, s: 76, l: 31 },\n        rugosite: 0.9,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      }\n    ];\n    \n    this.materiauxActuels.next(materiaux);\n  }\n\n  /**\n   * Initialiser les palettes par défaut\n   */\n  private initialiserPalettesParDefaut(): void {\n    const palettes: PaletteCouleurs[] = [\n      {\n        id: 'palette_moderne',\n        nom: 'Palette Moderne',\n        description: 'Couleurs modernes et épurées',\n        couleurs: [0xaaaaaa, 0xffffff, 0x000000, 0x4169e1, 0x00ff00],\n        type: 'moderne',\n        dateCreation: new Date()\n      },\n      {\n        id: 'palette_classique',\n        nom: 'Palette Classique',\n        description: 'Couleurs traditionnelles et chaleureuses',\n        couleurs: [0x8b4513, 0xdeb887, 0x654321, 0xffd700, 0xcd853f],\n        type: 'classique',\n        dateCreation: new Date()\n      },\n      {\n        id: 'palette_naturelle',\n        nom: 'Palette Naturelle',\n        description: 'Couleurs inspirées de la nature',\n        couleurs: [0x228b22, 0x8fbc8f, 0x2e8b57, 0x90ee90, 0x32cd32],\n        type: 'naturelle',\n        dateCreation: new Date()\n      },\n      {\n        id: 'palette_architecturale',\n        nom: 'Palette Architecturale',\n        description: 'Couleurs professionnelles pour l\\'architecture',\n        couleurs: [0xaaaaaa, 0x696969, 0x2f4f4f, 0x708090, 0x778899],\n        type: 'architecturale',\n        dateCreation: new Date()\n      }\n    ];\n    \n    this.palettesActuelles.next(palettes);\n  }\n\n  /**\n   * Initialiser les textures par défaut\n   */\n  private initialiserTexturesParDefaut(): void {\n    const textures: ProprietesTexture[] = [\n      {\n        id: 'texture_beton',\n        nom: 'Texture Béton',\n        url: '/assets/textures/beton.jpg',\n        type: 'diffuse',\n        resolution: { width: 512, height: 512 },\n        format: 'jpg',\n        taille: 256\n      },\n      {\n        id: 'texture_brique',\n        nom: 'Texture Brique',\n        url: '/assets/textures/brique.jpg',\n        type: 'diffuse',\n        resolution: { width: 512, height: 512 },\n        format: 'jpg',\n        taille: 312\n      },\n      {\n        id: 'texture_bois',\n        nom: 'Texture Bois',\n        url: '/assets/textures/bois.jpg',\n        type: 'diffuse',\n        resolution: { width: 512, height: 512 },\n        format: 'jpg',\n        taille: 198\n      }\n    ];\n    \n    this.texturesActuelles.next(textures);\n  }\n\n  /**\n   * Convertir une couleur hexadécimale en RGB\n   */\n  hexToRgb(hex: string): { r: number; g: number; b: number } {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : { r: 0, g: 0, b: 0 };\n  }\n\n  /**\n   * Convertir une couleur RGB en HSL\n   */\n  rgbToHsl(r: number, g: number, b: number): { h: number; s: number; l: number } {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    \n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = 0, s = 0, l = (max + min) / 2;\n    \n    if (max !== min) {\n      const d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n      \n      switch (max) {\n        case r: h = (g - b) / d + (g  {\n    return this.materiaux$;\n  }\n\n  /**\n   * Obtenir un matériau par son ID\n   */\n  getMateriauParId(id: string): ProprietesMateriau | undefined {\n    return this.materiauxActuels.value.find(materiau => materiau.id === id);\n  }\n\n  /**\n   * Obtenir les matériaux par type\n   */\n  getMateriauxParType(type: ProprietesMateriau['type']): ProprietesMateriau[] {\n    return this.materiauxActuels.value.filter(materiau => materiau.type === type);\n  }\n\n  /**\n   * Obtenir les matériaux pour murs\n   */\n  getMateriauxMurs(): ProprietesMateriau[] {\n    return this.getMateriauxParType('mur');\n  }\n\n  /**\n   * Obtenir les matériaux pour portes\n   */\n  getMateriauxPortes(): ProprietesMateriau[] {\n    return this.getMateriauxParType('porte');\n  }\n\n  /**\n   * Obtenir les matériaux pour fenêtres\n   */\n  getMateriauxFenetres(): ProprietesMateriau[] {\n    return this.getMateriauxParType('fenetre');\n  }\n\n  /**\n   * Ajouter un nouveau matériau\n   */\n  ajouterMateriau(nouveauMateriau: Omit): void {\n    try {\n      // Validation des paramètres\n      if (!nouveauMateriau) {\n        throw new Error('Matériau manquant');\n      }\n      \n      if (!nouveauMateriau.nom || !nouveauMateriau.type) {\n        throw new Error('Nom et type du matériau requis');\n      }\n      \n      if (typeof nouveauMateriau.couleur !== 'number' || nouveauMateriau.couleur  0xFFFFFF) {\n        throw new Error('Couleur invalide: doit être un nombre entre 0 et 16777215');\n      }\n      \n      const materiauComplete: ProprietesMateriau = {\n        ...nouveauMateriau,\n        id: `materiau_${Date.now()}`,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      };\n      \n      const materiauxActuels = this.getMateriaux();\n      materiauxActuels.push(materiauComplete);\n      this.materiauxActuels.next(materiauxActuels);\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du matériau:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Modifier un matériau\n   */\n  modifierMateriau(id: string, nouvellesProprietes: Partial): void {\n    const materiauxActuels = this.getMateriaux();\n    const materiauIndex = materiauxActuels.findIndex(materiau => materiau.id === id);\n    \n    if (materiauIndex !== -1) {\n      materiauxActuels[materiauIndex] = {\n        ...materiauxActuels[materiauIndex],\n        ...nouvellesProprietes,\n        derniereModification: new Date()\n      };\n      this.materiauxActuels.next(materiauxActuels);\n    }\n  }\n\n  /**\n   * Supprimer un matériau\n   */\n  supprimerMateriau(id: string): void {\n    const materiauxActuels = this.getMateriaux();\n    const materiauxFiltres = materiauxActuels.filter(materiau => materiau.id !== id);\n    this.materiauxActuels.next(materiauxFiltres);\n  }\n\n  /**\n   * Obtenir toutes les palettes\n   */\n  getPalettes(): PaletteCouleurs[] {\n    return this.palettesActuelles.value;\n  }\n\n  /**\n   * Obtenir les palettes en tant qu'Observable\n   */\n  getPalettesObservable(): Observable {\n    return this.palettes$;\n  }\n\n  /**\n   * Obtenir une palette par son ID\n   */\n  getPaletteParId(id: string): PaletteCouleurs | undefined {\n    return this.palettesActuelles.value.find(palette => palette.id === id);\n  }\n\n  /**\n   * Obtenir les palettes par type\n   */\n  getPalettesParType(type: PaletteCouleurs['type']): PaletteCouleurs[] {\n    return this.palettesActuelles.value.filter(palette => palette.type === type);\n  }\n\n  /**\n   * Ajouter une nouvelle palette\n   */\n  ajouterPalette(nouvellePalette: Omit): void {\n    const paletteComplete: PaletteCouleurs = {\n      ...nouvellePalette,\n      id: `palette_${Date.now()}`,\n      dateCreation: new Date()\n    };\n    \n    const palettesActuelles = this.getPalettes();\n    palettesActuelles.push(paletteComplete);\n    this.palettesActuelles.next(palettesActuelles);\n  }\n\n  /**\n   * Obtenir toutes les textures\n   */\n  getTextures(): ProprietesTexture[] {\n    return this.texturesActuelles.value;\n  }\n\n  /**\n   * Obtenir les textures en tant qu'Observable\n   */\n  getTexturesObservable(): Observable {\n    return this.textures$;\n  }\n\n  /**\n   * Obtenir une texture par son ID\n   */\n  getTextureParId(id: string): ProprietesTexture | undefined {\n    return this.texturesActuelles.value.find(texture => texture.id === id);\n  }\n\n  /**\n   * Obtenir les textures par type\n   */\n  getTexturesParType(type: ProprietesTexture['type']): ProprietesTexture[] {\n    return this.texturesActuelles.value.filter(texture => texture.type === type);\n  }\n\n  /**\n   * Ajouter une nouvelle texture\n   */\n  ajouterTexture(nouvelleTexture: Omit): void {\n    const textureComplete: ProprietesTexture = {\n      ...nouvelleTexture,\n      id: `texture_${Date.now()}`\n    };\n    \n    const texturesActuelles = this.getTextures();\n    texturesActuelles.push(textureComplete);\n    this.texturesActuelles.next(texturesActuelles);\n  }\n\n  /**\n   * Obtenir les statistiques des matériaux\n   */\n  getStatistiquesMateriaux(): StatistiquesMateriaux {\n    const materiaux = this.getMateriaux();\n    const palettes = this.getPalettes();\n    const textures = this.getTextures();\n    \n    const nombreTotal = materiaux.length;\n    const nombreParType: Record = {};\n    \n    materiaux.forEach(materiau => {\n      nombreParType[materiau.type] = (nombreParType[materiau.type] || 0) + 1;\n    });\n    \n    const couleursUtilisees = materiaux.map(materiau => materiau.couleur);\n    const texturesUtilisees = materiaux\n      .filter(materiau => materiau.texture)\n      .map(materiau => materiau.texture!);\n    \n    const paletteLaPlusUtilisee = palettes.length > 0 ? palettes[0].nom : 'Aucune';\n    const materiauLePlusUtilise = Object.keys(nombreParType).reduce((a, b) => \n      nombreParType[a] > nombreParType[b] ? a : b\n    );\n\n    return {\n      nombreTotal,\n      nombreParType,\n      couleursUtilisees,\n      texturesUtilisees,\n      paletteLaPlusUtilisee,\n      materiauLePlusUtilise\n    };\n  }\n\n  /**\n   * Générer une couleur aléatoire\n   */\n  genererCouleurAleatoire(): number {\n    return Math.floor(Math.random() * 16777215);\n  }\n\n  /**\n   * Générer une palette de couleurs harmonieuses\n   */\n  genererPaletteHarmonieuse(couleurBase: number, nombreCouleurs: number = 5): number[] {\n    const couleurs: number[] = [couleurBase];\n    const rgb = this.hexToRgb(this.numberToHex(couleurBase));\n    const hsl = this.rgbToHsl(rgb.r, rgb.g, rgb.b);\n    \n    for (let i = 1; i  {\n      if (t  1) t -= 1;\n      if (t \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/Scene3dCoreComponent.html":{"url":"components/Scene3dCoreComponent.html","title":"component - Scene3dCoreComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  Scene3dCoreComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/scene3d/core/scene3d-core.component.ts\n\n\n\n    \n        Description\n    \n    \n        Composant core pour la gestion de la scène Three.js\nResponsable de l'initialisation, du rendu et de la navigation 3D\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-scene3d-core\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./scene3d-core.component.html\n            \n\n\n\n            \n                styleUrl\n                ./scene3d-core.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                animationId\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    \n                                canvasContainer\n                            \n                            \n                                    Private\n                                controls\n                            \n                            \n                                    Private\n                                renderer\n                            \n                            \n                                    Private\n                                scene\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                addAxes\n                            \n                            \n                                    Private\n                                addGrid\n                            \n                            \n                                    Public\n                                addObject\n                            \n                            \n                                    Private\n                                animate\n                            \n                            \n                                    Public\n                                clearScene\n                            \n                            \n                                    Public\n                                getCamera\n                            \n                            \n                                    Public\n                                getRenderer\n                            \n                            \n                                    Public\n                                getScene\n                            \n                            \n                                    Private\n                                initThreeJS\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Public\n                                removeObject\n                            \n                            \n                                    Public\n                                resetCamera\n                            \n                            \n                                    Private\n                                setupControls\n                            \n                            \n                                    Private\n                                setupLighting\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                showAxes\n                            \n                            \n                                showGrid\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                cameraReady\n                            \n                            \n                                rendererReady\n                            \n                            \n                                sceneReady\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(platformId: Object)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/scene3d/core/scene3d-core.component.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        platformId\n                                                  \n                                                        \n                                                                        Object\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        showAxes\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/core/scene3d-core.component.ts:20\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showGrid\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/core/scene3d-core.component.ts:21\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        cameraReady\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/core/scene3d-core.component.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        rendererReady\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/core/scene3d-core.component.ts:24\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        sceneReady\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/core/scene3d-core.component.ts:22\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        addAxes\n                        \n                    \n                \n            \n            \n                \n                        \n                    addAxes()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/core/scene3d-core.component.ts:122\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        addGrid\n                        \n                    \n                \n            \n            \n                \n                        \n                    addGrid()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/core/scene3d-core.component.ts:127\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addObject\n                        \n                    \n                \n            \n            \n                \n                        \n                    addObject(object: THREE.Object3D)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/core/scene3d-core.component.ts:198\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                object\n                                            \n                                                        THREE.Object3D\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        animate\n                        \n                    \n                \n            \n            \n                \n                        \n                    animate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/core/scene3d-core.component.ts:175\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clearScene\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearScene()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/core/scene3d-core.component.ts:206\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCamera\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCamera()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/core/scene3d-core.component.ts:185\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     THREE.PerspectiveCamera\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getRenderer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRenderer()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/core/scene3d-core.component.ts:189\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     THREE.WebGLRenderer\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getScene\n                        \n                    \n                \n            \n            \n                \n                        \n                    getScene()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/core/scene3d-core.component.ts:181\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     THREE.Scene\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initThreeJS\n                        \n                    \n                \n            \n            \n                \n                        \n                    initThreeJS()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/core/scene3d-core.component.ts:49\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/core/scene3d-core.component.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/core/scene3d-core.component.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeObject\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeObject(object: THREE.Object3D)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/core/scene3d-core.component.ts:202\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                object\n                                            \n                                                        THREE.Object3D\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetCamera\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetCamera()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/core/scene3d-core.component.ts:193\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setupControls\n                        \n                    \n                \n            \n            \n                \n                        \n                    setupControls()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/core/scene3d-core.component.ts:132\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setupLighting\n                        \n                    \n                \n            \n            \n                \n                        \n                    setupLighting()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/core/scene3d-core.component.ts:102\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        animationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/scene3d/core/scene3d-core.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        camera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     THREE.PerspectiveCamera\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/scene3d/core/scene3d-core.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        canvasContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('canvasContainer', {static: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/components/scene3d/core/scene3d-core.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controls\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/scene3d/core/scene3d-core.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     THREE.WebGLRenderer\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/scene3d/core/scene3d-core.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        scene\n                        \n                    \n                \n            \n                \n                    \n                        Type :     THREE.Scene\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/scene3d/core/scene3d-core.component.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, ElementRef, OnInit, OnDestroy, ViewChild, Inject, PLATFORM_ID, Input, Output, EventEmitter } from '@angular/core';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport * as THREE from 'three';\nimport { BUILDING_CONFIG, WallCalculations } from '../../../config/building-config';\n\n/**\n * Composant core pour la gestion de la scène Three.js\n * Responsable de l'initialisation, du rendu et de la navigation 3D\n */\n@Component({\n  selector: 'app-scene3d-core',\n  imports: [CommonModule],\n  templateUrl: './scene3d-core.component.html',\n  styleUrl: './scene3d-core.component.css',\n  standalone: true\n})\nexport class Scene3dCoreComponent implements OnInit, OnDestroy {\n  @ViewChild('canvasContainer', { static: true }) canvasContainer!: ElementRef;\n\n  @Input() showAxes: boolean = true;\n  @Input() showGrid: boolean = false;\n  @Output() sceneReady = new EventEmitter();\n  @Output() cameraReady = new EventEmitter();\n  @Output() rendererReady = new EventEmitter();\n\n  private scene!: THREE.Scene;\n  private camera!: THREE.PerspectiveCamera;\n  private renderer!: THREE.WebGLRenderer;\n  private animationId!: number;\n  private controls: any;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: Object) {}\n\n  ngOnInit(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      this.initThreeJS();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n    }\n    if (this.renderer) {\n      this.renderer.dispose();\n    }\n  }\n\n  private initThreeJS(): void {\n    // Initialisation de la scène\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(0xf0f0f0);\n\n    // Initialisation de la caméra\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      this.canvasContainer.nativeElement.clientWidth / this.canvasContainer.nativeElement.clientHeight,\n      0.1,\n      1000\n    );\n    this.camera.position.set(10, 8, 10);\n    this.camera.lookAt(0, 0, 0);\n\n    // Initialisation du renderer\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setSize(\n      this.canvasContainer.nativeElement.clientWidth,\n      this.canvasContainer.nativeElement.clientHeight\n    );\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n\n    // Ajout du canvas au DOM\n    this.canvasContainer.nativeElement.appendChild(this.renderer.domElement);\n\n    // Configuration de l'éclairage\n    this.setupLighting();\n\n    // Ajout des axes si demandé\n    if (this.showAxes) {\n      this.addAxes();\n    }\n\n    // Ajout de la grille si demandé\n    if (this.showGrid) {\n      this.addGrid();\n    }\n\n    // Configuration des contrôles de caméra\n    this.setupControls();\n\n    // Émission des événements\n    this.sceneReady.emit(this.scene);\n    this.cameraReady.emit(this.camera);\n    this.rendererReady.emit(this.renderer);\n\n    // Démarrage de la boucle de rendu\n    this.animate();\n  }\n\n  private setupLighting(): void {\n    // Lumière ambiante\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.6);\n    this.scene.add(ambientLight);\n\n    // Lumière directionnelle (soleil)\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(5, 15, 5);\n    directionalLight.castShadow = true;\n    directionalLight.shadow.mapSize.width = 2048;\n    directionalLight.shadow.mapSize.height = 2048;\n    directionalLight.shadow.camera.near = 0.5;\n    directionalLight.shadow.camera.far = 50;\n    directionalLight.shadow.camera.left = -10;\n    directionalLight.shadow.camera.right = 10;\n    directionalLight.shadow.camera.top = 10;\n    directionalLight.shadow.camera.bottom = -10;\n    this.scene.add(directionalLight);\n  }\n\n  private addAxes(): void {\n    const axesHelper = new THREE.AxesHelper(5);\n    this.scene.add(axesHelper);\n  }\n\n  private addGrid(): void {\n    const gridHelper = new THREE.GridHelper(20, 20);\n    this.scene.add(gridHelper);\n  }\n\n  private setupControls(): void {\n    // Contrôles de caméra simples (souris)\n    let isMouseDown = false;\n    let mouseX = 0;\n    let mouseY = 0;\n\n    this.renderer.domElement.addEventListener('mousedown', (event) => {\n      isMouseDown = true;\n      mouseX = event.clientX;\n      mouseY = event.clientY;\n    });\n\n    this.renderer.domElement.addEventListener('mousemove', (event) => {\n      if (isMouseDown) {\n        const deltaX = event.clientX - mouseX;\n        const deltaY = event.clientY - mouseY;\n\n        // Rotation de la caméra\n        const spherical = new THREE.Spherical();\n        spherical.setFromVector3(this.camera.position);\n        spherical.theta -= deltaX * 0.01;\n        spherical.phi += deltaY * 0.01;\n        spherical.phi = Math.max(0.1, Math.min(Math.PI - 0.1, spherical.phi));\n\n        this.camera.position.setFromSpherical(spherical);\n        this.camera.lookAt(0, 0, 0);\n\n        mouseX = event.clientX;\n        mouseY = event.clientY;\n      }\n    });\n\n    this.renderer.domElement.addEventListener('mouseup', () => {\n      isMouseDown = false;\n    });\n\n    // Zoom avec la molette\n    this.renderer.domElement.addEventListener('wheel', (event) => {\n      const scale = event.deltaY > 0 ? 1.1 : 0.9;\n      this.camera.position.multiplyScalar(scale);\n    });\n  }\n\n  private animate(): void {\n    this.animationId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  // Méthodes publiques pour l'interaction avec le composant parent\n  public getScene(): THREE.Scene {\n    return this.scene;\n  }\n\n  public getCamera(): THREE.PerspectiveCamera {\n    return this.camera;\n  }\n\n  public getRenderer(): THREE.WebGLRenderer {\n    return this.renderer;\n  }\n\n  public resetCamera(): void {\n    this.camera.position.set(10, 8, 10);\n    this.camera.lookAt(0, 0, 0);\n  }\n\n  public addObject(object: THREE.Object3D): void {\n    this.scene.add(object);\n  }\n\n  public removeObject(object: THREE.Object3D): void {\n    this.scene.remove(object);\n  }\n\n  public clearScene(): void {\n    while (this.scene.children.length > 0) {\n      const child = this.scene.children[0];\n      if (child instanceof THREE.AxesHelper || child instanceof THREE.GridHelper) {\n        // Garder les helpers\n        break;\n      }\n      this.scene.remove(child);\n    }\n  }\n}\n\n    \n\n    \n        \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'CalculateurFenetresComponent', 'selector': 'app-calculateur-fenetres'},{'name': 'ColorSelectorComponent', 'selector': 'app-color-selector'},{'name': 'DimensionsControllerComponent', 'selector': 'app-dimensions-controller'},{'name': 'FenetresCalculatorComponent', 'selector': 'app-fenetres-calculator'},{'name': 'MursControllerComponent', 'selector': 'app-murs-controller'},{'name': 'OuverturesControllerComponent', 'selector': 'app-ouvertures-controller'},{'name': 'Scene3d', 'selector': 'app-scene3d'},{'name': 'Scene3dCoreComponent', 'selector': 'app-scene3d-core'},{'name': 'Scene3dRefactored', 'selector': 'app-scene3d'},{'name': 'StructureControllerComponent', 'selector': 'app-structure-controller'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'Scene3dCoreComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SceneConfig.html":{"url":"interfaces/SceneConfig.html","title":"interface - SceneConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SceneConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/config/building-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration générale de la scène 3D\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            background\n                                        \n                                \n                                \n                                        \n                                            camera\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        background\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        background:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        camera\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        camera:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Position3D {\n  x: number;\n  y: number;\n  z: number;\n}\n\n/**\n * Dimensions 3D d'un objet\n * @param width - Largeur (axe X)\n * @param height - Hauteur (axe Y)\n * @param depth - Profondeur (axe Z)\n */\nexport interface Dimensions3D {\n  width: number;\n  height: number;\n  depth: number;\n}\n\n/**\n * Configuration d'un mur simple\n * @param position - Position du centre du mur\n * @param dimensions - Taille du mur\n * @param color - Couleur hexadécimale (ex: 0xaaaaaa)\n */\nexport interface WallConfig {\n  position: Position3D;\n  dimensions: Dimensions3D;\n  color: number;\n}\n\n/**\n * Configuration d'une ouverture (porte ou fenêtre)\n * @param position - Position du centre de l'ouverture\n * @param dimensions - Taille de l'ouverture\n * @param color - Couleur de l'élément\n * @param type - Type d'ouverture ('door' ou 'window')\n */\nexport interface OpeningConfig {\n  position: Position3D;\n  dimensions: Dimensions3D;\n  color: number;\n  type: 'door' | 'window';\n}\n\n/**\n * Configuration du mur principal avec ouvertures (façade)\n * @param contour - Points définissant la forme du mur\n * @param thickness - Épaisseur du mur\n * @param position - Position du mur dans l'espace\n * @param color - Couleur du mur\n * @param openings - Ouvertures (porte et fenêtres) dans ce mur\n */\nexport interface MainWallConfig {\n  contour: Position3D[];\n  thickness: number;\n  position: Position3D;\n  color: number;\n  openings: {\n    door: OpeningConfig;\n    window1: OpeningConfig;\n    window2: OpeningConfig;\n  };\n}\n\n/**\n * Configuration de la caméra et des contrôles\n * @param initial - Position et paramètres initiaux de la caméra\n * @param target - Point que la caméra regarde\n * @param controls - Paramètres des contrôles souris\n */\nexport interface CameraConfig {\n  initial: {\n    position: Position3D;\n    rotationX: number;  // Rotation verticale\n    rotationY: number;  // Rotation horizontale\n    zoom: number;       // Distance de la caméra\n  };\n  target: Position3D;   // Point central regardé par la caméra\n  controls: {\n    minZoom: number;      // Distance minimale\n    maxZoom: number;      // Distance maximale\n    rotationSpeed: number; // Vitesse de rotation\n    zoomSpeed: number;     // Vitesse de zoom\n  };\n}\n\n/**\n * Configuration de l'éclairage de la scène\n * @param ambient - Lumière ambiante (éclairage général)\n * @param directional - Lumière directionnelle (comme le soleil)\n */\nexport interface LightingConfig {\n  ambient: {\n    color: number;      // Couleur de la lumière ambiante\n    intensity: number;  // Intensité (0-1)\n  };\n  directional: {\n    color: number;      // Couleur de la lumière directionnelle\n    intensity: number;  // Intensité\n    position: Position3D; // Position de la source lumineuse\n    shadow: {\n      mapSize: number;  // Qualité des ombres (résolution)\n    };\n  };\n}\n\n/**\n * Configuration générale de la scène 3D\n * @param background - Couleur de fond de la scène\n * @param camera - Paramètres de la caméra (champ de vision, distances)\n */\nexport interface SceneConfig {\n  background: number;   // Couleur de fond (ex: 0xbfd1e5 = bleu ciel)\n  camera: {\n    fov: number;        // Champ de vision (field of view) en degrés\n    near: number;       // Distance de rendu minimale\n    far: number;        // Distance de rendu maximale\n  };\n}\n\n/**\n * ===============================================\n * CONFIGURATION PRINCIPALE DU BÂTIMENT\n * ===============================================\n * Toutes les données du modèle 3D sont centralisées ici\n */\nexport const BUILDING_CONFIG = {\n  \n  /**\n   * SCÈNE 3D - Paramètres généraux\n   */\n  scene: {\n    background: 0xbfd1e5,  // Couleur bleu ciel pour le fond\n    camera: {\n      fov: 75,             // Angle de vue (75° = vue naturelle)\n      near: 0.1,           // Objets plus proches que 0.1 non rendus\n      far: 1000            // Objets plus loin que 1000 non rendus\n    }\n  } as SceneConfig,\n\n  /**\n   * ÉCLAIRAGE - Lumières de la scène\n   */\n  lighting: {\n    ambient: {   \n      color: 0xffffff,     // Lumière blanche ambiante\n      intensity: 0.6       // 60% d'intensité (éclairage doux)\n    },\n    directional: {\n      color: 0xffffff,     // Lumière blanche directionnelle (soleil)\n      intensity: 1,        // 100% d'intensité\n      position: { x: 10, y: 20, z: 10 }, // Position du \"soleil\"\n      shadow: {\n        mapSize: 2048      // Résolution des ombres (2048x2048)\n      }\n    }\n  } as LightingConfig,\n\n  /**\n   * CAMÉRA - Point de vue et contrôles\n   */\n  camera: {\n    initial: {\n      position: { x: 10, y: 10, z: 9 }, // Position initiale de la caméra\n      rotationX: 0.3,                   // Inclinaison verticale\n      rotationY: 0.5,                   // Rotation horizontale\n      zoom: 15                          // Distance initiale\n    },\n    target: { x: 0, y: 1.25, z: 0 },   // Point regardé (centre du bâtiment)\n    controls: {\n      minZoom: 5,           // Distance minimale (zoom max)\n      maxZoom: 50,          // Distance maximale (zoom min)\n      rotationSpeed: 0.01,  // Sensibilité de rotation souris\n      zoomSpeed: 0.01       // Sensibilité du zoom molette\n    }\n  } as CameraConfig,\n\n  /**\n   * SOL - Plateforme de base\n   */\n  ground: {\n    position: { x: 0, y: -0.1, z: 0 }, // Légèrement sous le niveau 0\n    dimensions: { width: 8, height: 0.2, depth: 5 }, // 8x5m, épaisseur 20cm\n    color: 0x2E1E1A  \n  } as WallConfig,\n\n  /**\n   * TOIT - Couverture du bâtiment\n   */\n  roof: {\n    position: { x: 0, y: 2.6, z: 0 },  // Au-dessus des murs (2.5m + 0.1m)\n    dimensions: { width: 8.4, height: 0.2, depth: 5 }, \n    color: 0x4169e1       // Couleur bleu royal\n  } as WallConfig,\n\n  /**\n   * MUR PRINCIPAL (FAÇADE) - Mur avec ouvertures\n   * Ce mur utilise ExtrudeGeometry pour créer de vraies ouvertures\n   */\n  mainWall: {\n    contour: [\n      // Points définissant la forme rectangulaire du mur (8m x 2.5m)\n      { x: -4, y: 0, z: 0 },    // Coin bas gauche\n      { x: 4, y: 0, z: 0 },     // Coin bas droit\n      { x: 4, y: 2.5, z: 0 },   // Coin haut droit\n      { x: -4, y: 2.5, z: 0 },  // Coin haut gauche\n      { x: -4, y: 0, z: 0 }     // Retour au point de départ\n    ],\n    thickness: 0.2,             // Épaisseur du mur (20cm)\n    position: { x: 0, y: 0, z: 2.3 }, // Position du mur dans l'espace\n    color: 0xaaaaaa,            // Couleur gris clair\n    openings: {\n      // PORTE CENTRALE\n      door: {\n        position: { x: 0, y: 1.05, z: 2.3 },\n        dimensions: { width: 1, height: 2, depth: 0.05 }, // 1m x 2m\n        color: 0x00ff00,        // Couleur verte\n        type: 'door' as const\n      },\n      // PREMIÈRE FENÊTRE (gauche)\n      window1: {\n        position: { x: -2, y: 1.5, z: 2.3 }, \n        dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n        color: 0xff0000,        // Couleur rouge\n        type: 'window' as const\n      },\n      // DEUXIÈME FENÊTRE (droite)\n      window2: {\n        position: { x: 2, y: 1.5, z: 2.3 }, \n        dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n        color: 0xff0000,        // Couleur rouge\n        type: 'window' as const\n      }\n    }\n  } as MainWallConfig,\n\n\n  /**\n   * AUTRES MURS - Murs latéraux et arrière (murs pleins)\n   */\n  walls: {\n    // MUR ARRIÈRE\n    back: {\n      position: { x: 0, y: 0, z: -2.5 },\n      dimensions: { width: 8, height: 2.5, depth: 0.2 }, // 8m x 2.5m x 20cm\n      color: 0xaaaaaa,\n      openings: {\n        window1: {\n          position: { x: 0, y: 1.5, z: -2.2 },\n          dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n    },\n    // MUR GAUCHE\n    left: {\n      position: { x: -3.9, y: 1.25, z: 0 }, \n      dimensions: { width: 0.2, height: 2.5, depth: 5 }, // 20cm x 2.5m x 5m\n      color: 0xaaaaaa,\n      openings: {\n        window5: {\n          position: { x: -3.8, y: 1.5, z: 0 },\n          dimensions: { width: 1.2, height: 1.0, depth: 0.05 }, // 1.2m x 1m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n      // Couleur gris clair\n    },\n    // MUR DROIT\n    right: {\n      position: { x: 3.8, y: 0, z: 0 },\n      dimensions: { width: 0.2, height: 2.5, depth: 5 }, // 20cm x 2.5m x 5m\n      color: 0xaaaaaa,\n      openings: {\n        // PORTE D'ENTRÉE\n        door: {\n          position: { x: 3.8, y: 1.05, z: 0 },\n          dimensions: { width: 1, height: 2.1, depth: 0.05 }, // 1m x 2.1m\n          color: 0x00ff00,        // Couleur verte\n          type: 'door' as const\n        },\n        // FENÊTRE\n        window1: {\n          position: { x: 3.8, y: 1.5, z: 1.5 },\n          dimensions: { width: 1.2, height: 1.0, depth: 0.05 }, // 1.2m x 1m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n    }\n  },\n\n  /**\n   * AXES DE RÉFÉRENCE (REPÈRE) - Pour s'orienter dans l'espace\n   */\n  axes: {\n    size: 8,                  // Longueur des axes (8 unités)\n    labels: [\n      // Axe X (rouge) - gauche/droite\n      { text: 'X', position: { x: 10, y: 0, z: 0 }, color: 0xff0000 },\n      // Axe Y (vert) - bas/haut\n      { text: 'Y', position: { x: 0, y: 10, z: 0 }, color: 0x00ff00 },\n      // Axe Z (bleu) - avant/arrière\n      { text: 'Z', position: { x: 0, y: 0, z: 10 }, color: 0x0000ff }\n    ],\n    labelSize: { width: 0.2, height: 0.2, depth: 0.2 } // Taille des cubes de repère\n  }\n};\n\n/**\n * ===============================================\n * FONCTIONS UTILITAIRES\n * ===============================================\n * Calculs automatiques pour les ouvertures dans les murs\n */\nexport class WallCalculations {\n  \n  /**\n   * Calcule les coordonnées d'une ouverture de porte\n   * @param config - Configuration de la porte\n   * @returns Points définissant le trou rectangulaire pour la porte\n   */\n  static getDoorHole(config: OpeningConfig) {\n    const halfWidth = config.dimensions.width / 2;  // Demi-largeur de la porte\n    return [\n      // Rectangle partant du sol (y=0) jusqu'à la hauteur de la porte\n      { x: config.position.x - halfWidth, y: 0 },                    // Bas gauche\n      { x: config.position.x + halfWidth, y: 0 },                    // Bas droit\n      { x: config.position.x + halfWidth, y: config.dimensions.height }, // Haut droit\n      { x: config.position.x - halfWidth, y: config.dimensions.height }, // Haut gauche\n      { x: config.position.x - halfWidth, y: 0 }                     // Retour au début\n    ];\n  }\n\n  /**\n   * Calcule les coordonnées d'une ouverture de fenêtre\n   * @param config - Configuration de la fenêtre\n   * @param bottomOffset - Distance du sol au bas de la fenêtre (par défaut 0.9m)\n   * @returns Points définissant le trou rectangulaire pour la fenêtre\n   */\n  static getWindowHole(config: OpeningConfig, bottomOffset: number = 0.9) {\n    const halfWidth = config.dimensions.width / 2;  // Demi-largeur de la fenêtre\n    const bottom = bottomOffset;                     // Position du bas de la fenêtre\n    const top = bottom + config.dimensions.height;  // Position du haut de la fenêtre\n    \n    return [\n      // Rectangle surélevé par rapport au sol\n      { x: config.position.x - halfWidth, y: bottom }, // Bas gauche\n      { x: config.position.x + halfWidth, y: bottom }, // Bas droit\n      { x: config.position.x + halfWidth, y: top },    // Haut droit\n      { x: config.position.x - halfWidth, y: top },    // Haut gauche\n      { x: config.position.x - halfWidth, y: bottom }  // Retour au début\n    ];\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServiceMessage.html":{"url":"interfaces/ServiceMessage.html","title":"interface - ServiceMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ServiceMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/communication/communication.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les messages entre services\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            action\n                                        \n                                \n                                \n                                        \n                                            from\n                                        \n                                \n                                \n                                        \n                                            payload\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                                \n                                        \n                                            to\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        action\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        action:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        from:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        payload:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        to\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        to:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n/**\n * Interface pour les événements de communication\n */\nexport interface CommunicationEvent {\n  id: string;\n  type: string;\n  source: string;\n  target?: string;\n  data: any;\n  timestamp: Date;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n}\n\n/**\n * Interface pour les messages entre services\n */\nexport interface ServiceMessage {\n  from: string;\n  to: string;\n  action: string;\n  payload: any;\n  timestamp: Date;\n}\n\n/**\n * Interface pour les statistiques de communication\n */\nexport interface CommunicationStats {\n  totalEvents: number;\n  eventsByType: Record;\n  eventsBySource: Record;\n  eventsByPriority: Record;\n  averageResponseTime: number;\n  lastEvent: Date | null;\n}\n\n/**\n * Service de communication entre les services\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommunicationService {\n  \n  private eventSubject = new Subject();\n  private messageSubject = new Subject();\n  private statsSubject = new BehaviorSubject({\n    totalEvents: 0,\n    eventsByType: {},\n    eventsBySource: {},\n    eventsByPriority: {},\n    averageResponseTime: 0,\n    lastEvent: null\n  });\n\n  private events: CommunicationEvent[] = [];\n  private messages: ServiceMessage[] = [];\n  private responseTimes: number[] = [];\n\n  public events$ = this.eventSubject.asObservable();\n  public messages$ = this.messageSubject.asObservable();\n  public stats$ = this.statsSubject.asObservable();\n\n  constructor() {\n    console.log('CommunicationService initialisé');\n  }\n\n  /**\n   * Émettre un événement\n   */\n  emitEvent(event: Omit): void {\n    const fullEvent: CommunicationEvent = {\n      ...event,\n      id: `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date()\n    };\n\n    this.events.push(fullEvent);\n    this.eventSubject.next(fullEvent);\n    this.updateStats();\n    \n    console.log(`[CommunicationService] Événement émis:`, fullEvent);\n  }\n\n  /**\n   * Écouter les événements par type\n   */\n  listenToEventType(eventType: string): Observable {\n    return this.events$.pipe(\n      filter(event => event.type === eventType)\n    );\n  }\n\n  /**\n   * Écouter les événements par source\n   */\n  listenToSource(source: string): Observable {\n    return this.events$.pipe(\n      filter(event => event.source === source)\n    );\n  }\n\n  /**\n   * Écouter les événements par priorité\n   */\n  listenToPriority(priority: CommunicationEvent['priority']): Observable {\n    return this.events$.pipe(\n      filter(event => event.priority === priority)\n    );\n  }\n\n  /**\n   * Envoyer un message entre services\n   */\n  sendMessage(message: Omit): void {\n    const fullMessage: ServiceMessage = {\n      ...message,\n      timestamp: new Date()\n    };\n\n    this.messages.push(fullMessage);\n    this.messageSubject.next(fullMessage);\n    \n    console.log(`[CommunicationService] Message envoyé:`, fullMessage);\n  }\n\n  /**\n   * Écouter les messages destinés à un service\n   */\n  listenToMessages(serviceName: string): Observable {\n    return this.messages$.pipe(\n      filter(message => message.to === serviceName)\n    );\n  }\n\n  /**\n   * Écouter les messages d'un service\n   */\n  listenFromService(serviceName: string): Observable {\n    return this.messages$.pipe(\n      filter(message => message.from === serviceName)\n    );\n  }\n\n  /**\n   * Obtenir tous les événements\n   */\n  getEvents(): CommunicationEvent[] {\n    return [...this.events];\n  }\n\n  /**\n   * Obtenir tous les messages\n   */\n  getMessages(): ServiceMessage[] {\n    return [...this.messages];\n  }\n\n  /**\n   * Obtenir les événements récents (dernières 24h)\n   */\n  getRecentEvents(hours: number = 24): CommunicationEvent[] {\n    const cutoff = new Date(Date.now() - hours * 60 * 60 * 1000);\n    return this.events.filter(event => event.timestamp > cutoff);\n  }\n\n  /**\n   * Obtenir les événements par type\n   */\n  getEventsByType(type: string): CommunicationEvent[] {\n    return this.events.filter(event => event.type === type);\n  }\n\n  /**\n   * Obtenir les événements par source\n   */\n  getEventsBySource(source: string): CommunicationEvent[] {\n    return this.events.filter(event => event.source === source);\n  }\n\n  /**\n   * Obtenir les événements par priorité\n   */\n  getEventsByPriority(priority: CommunicationEvent['priority']): CommunicationEvent[] {\n    return this.events.filter(event => event.priority === priority);\n  }\n\n  /**\n   * Mettre à jour les statistiques\n   */\n  private updateStats(): void {\n    const stats: CommunicationStats = {\n      totalEvents: this.events.length,\n      eventsByType: this.getEventsByTypeStats(),\n      eventsBySource: this.getEventsBySourceStats(),\n      eventsByPriority: this.getEventsByPriorityStats(),\n      averageResponseTime: this.calculateAverageResponseTime(),\n      lastEvent: this.events.length > 0 ? this.events[this.events.length - 1].timestamp : null\n    };\n\n    this.statsSubject.next(stats);\n  }\n\n  /**\n   * Obtenir les statistiques par type\n   */\n  private getEventsByTypeStats(): Record {\n    const stats: Record = {};\n    this.events.forEach(event => {\n      stats[event.type] = (stats[event.type] || 0) + 1;\n    });\n    return stats;\n  }\n\n  /**\n   * Obtenir les statistiques par source\n   */\n  private getEventsBySourceStats(): Record {\n    const stats: Record = {};\n    this.events.forEach(event => {\n      stats[event.source] = (stats[event.source] || 0) + 1;\n    });\n    return stats;\n  }\n\n  /**\n   * Obtenir les statistiques par priorité\n   */\n  private getEventsByPriorityStats(): Record {\n    const stats: Record = {};\n    this.events.forEach(event => {\n      stats[event.priority] = (stats[event.priority] || 0) + 1;\n    });\n    return stats;\n  }\n\n  /**\n   * Calculer le temps de réponse moyen\n   */\n  private calculateAverageResponseTime(): number {\n    if (this.responseTimes.length === 0) return 0;\n    const sum = this.responseTimes.reduce((a, b) => a + b, 0);\n    return Math.round(sum / this.responseTimes.length * 100) / 100;\n  }\n\n  /**\n   * Enregistrer un temps de réponse\n   */\n  recordResponseTime(responseTime: number): void {\n    this.responseTimes.push(responseTime);\n    this.updateStats();\n  }\n\n  /**\n   * Obtenir les statistiques actuelles\n   */\n  getStats(): CommunicationStats {\n    return this.statsSubject.value;\n  }\n\n  /**\n   * Obtenir les statistiques en tant qu'Observable\n   */\n  getStatsObservable(): Observable {\n    return this.stats$;\n  }\n\n  /**\n   * Effacer l'historique des événements\n   */\n  clearEvents(): void {\n    this.events = [];\n    this.eventSubject.next({\n      id: 'clear',\n      type: 'system',\n      source: 'CommunicationService',\n      data: { action: 'clear' },\n      timestamp: new Date(),\n      priority: 'medium'\n    });\n    this.updateStats();\n  }\n\n  /**\n   * Effacer l'historique des messages\n   */\n  clearMessages(): void {\n    this.messages = [];\n    this.messageSubject.next({\n      from: 'CommunicationService',\n      to: 'all',\n      action: 'clear',\n      payload: { action: 'clear' },\n      timestamp: new Date()\n    });\n  }\n\n  /**\n   * Exporter les données de communication\n   */\n  exportCommunicationData(): string {\n    const data = {\n      events: this.events,\n      messages: this.messages,\n      stats: this.getStats(),\n      exportDate: new Date()\n    };\n    \n    return JSON.stringify(data, null, 2);\n  }\n\n  /**\n   * Importer les données de communication\n   */\n  importCommunicationData(dataJson: string): boolean {\n    try {\n      const data = JSON.parse(dataJson);\n      \n      if (data.events) {\n        this.events = data.events;\n      }\n      \n      if (data.messages) {\n        this.messages = data.messages;\n      }\n      \n      this.updateStats();\n      console.log('Données de communication importées avec succès');\n      return true;\n    } catch (error) {\n      console.error('Erreur lors de l\\'importation des données de communication:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Méthodes utilitaires pour les événements courants\n   */\n\n  /**\n   * Émettre un événement de modification de mur\n   */\n  emitWallModified(wallId: string, changes: any): void {\n    this.emitEvent({\n      type: 'wall_modified',\n      source: 'MurService',\n      data: { wallId, changes },\n      priority: 'medium'\n    });\n  }\n\n  /**\n   * Émettre un événement de modification d'ouverture\n   */\n  emitOpeningModified(openingId: string, changes: any): void {\n    this.emitEvent({\n      type: 'opening_modified',\n      source: 'OuvertureService',\n      data: { openingId, changes },\n      priority: 'medium'\n    });\n  }\n\n  /**\n   * Émettre un événement de changement de matériau\n   */\n  emitMaterialChanged(materialId: string, newMaterial: any): void {\n    this.emitEvent({\n      type: 'material_changed',\n      source: 'MateriauService',\n      data: { materialId, newMaterial },\n      priority: 'low'\n    });\n  }\n\n  /**\n   * Émettre un événement de mise à jour de la scène\n   */\n  emitSceneUpdated(sceneData: any): void {\n    this.emitEvent({\n      type: 'scene_updated',\n      source: 'SceneService',\n      data: sceneData,\n      priority: 'high'\n    });\n  }\n\n  /**\n   * Émettre un événement de validation\n   */\n  emitValidationResult(validationData: any): void {\n    this.emitEvent({\n      type: 'validation_result',\n      source: 'ValidationService',\n      data: validationData,\n      priority: 'high'\n    });\n  }\n\n  /**\n   * Émettre un événement d'erreur\n   */\n  emitError(error: any, source: string): void {\n    this.emitEvent({\n      type: 'error',\n      source: source,\n      data: { error: error.message || error, stack: error.stack },\n      priority: 'critical'\n    });\n  }\n\n  /**\n   * Émettre un événement de succès\n   */\n  emitSuccess(message: string, source: string, data?: any): void {\n    this.emitEvent({\n      type: 'success',\n      source: source,\n      data: { message, ...data },\n      priority: 'low'\n    });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StatistiquesBatiment.html":{"url":"interfaces/StatistiquesBatiment.html","title":"interface - StatistiquesBatiment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StatistiquesBatiment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/batiment/batiment.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les statistiques du bâtiment\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            nombreFenetres\n                                        \n                                \n                                \n                                        \n                                            nombreMurs\n                                        \n                                \n                                \n                                        \n                                            nombreOuvertures\n                                        \n                                \n                                \n                                        \n                                            nombrePortes\n                                        \n                                \n                                \n                                        \n                                            pourcentageOuvertures\n                                        \n                                \n                                \n                                        \n                                            surfaceMurs\n                                        \n                                \n                                \n                                        \n                                            surfaceOuvertures\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        nombreFenetres\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nombreFenetres:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nombreMurs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nombreMurs:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nombreOuvertures\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nombreOuvertures:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nombrePortes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nombrePortes:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pourcentageOuvertures\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pourcentageOuvertures:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surfaceMurs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        surfaceMurs:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surfaceOuvertures\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        surfaceOuvertures:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigurationService, ConfigurationBatiment } from '../configuration/configuration.service';\n\n/**\n * Interface pour les propriétés d'un bâtiment\n */\nexport interface ProprietesBatiment {\n  nom: string;\n  description: string;\n  type: 'residentiel' | 'commercial' | 'industriel' | 'public';\n  etage: number;\n  surface: number; // en m²\n  volume: number;   // en m³\n  dateCreation: Date;\n  derniereModification: Date;\n}\n\n/**\n * Interface pour les statistiques du bâtiment\n */\nexport interface StatistiquesBatiment {\n  nombreMurs: number;\n  nombreOuvertures: number;\n  nombrePortes: number;\n  nombreFenetres: number;\n  surfaceMurs: number;\n  surfaceOuvertures: number;\n  pourcentageOuvertures: number;\n}\n\n/**\n * Service de gestion des bâtiments\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class BatimentService {\n  \n  private proprietesBatiment = new BehaviorSubject({\n    nom: 'Bâtiment Principal',\n    description: 'Bâtiment architectural avec murs, ouvertures et toit',\n    type: 'residentiel',\n    etage: 1,\n    surface: 0,\n    volume: 0,\n    dateCreation: new Date(),\n    derniereModification: new Date()\n  });\n\n  public proprietes$ = this.proprietesBatiment.asObservable();\n\n  constructor(private configurationService: ConfigurationService) {\n    // Calculer automatiquement la surface et le volume\n    this.calculerSurfaceEtVolume();\n    \n    // Écouter les changements de configuration pour recalculer\n    this.configurationService.getConfigurationObservable().subscribe(() => {\n      this.calculerSurfaceEtVolume();\n      this.mettreAJourDateModification();\n    });\n  }\n\n  /**\n   * Obtenir les propriétés du bâtiment\n   */\n  getProprietes(): ProprietesBatiment {\n    return this.proprietesBatiment.value;\n  }\n\n  /**\n   * Obtenir les propriétés en tant qu'Observable\n   */\n  getProprietesObservable(): Observable {\n    return this.proprietes$;\n  }\n\n  /**\n   * Mettre à jour les propriétés du bâtiment\n   */\n  mettreAJourProprietes(nouvellesProprietes: Partial): void {\n    const proprietesActuelles = this.getProprietes();\n    const proprietesMisesAJour = {\n      ...proprietesActuelles,\n      ...nouvellesProprietes,\n      derniereModification: new Date()\n    };\n    \n    this.proprietesBatiment.next(proprietesMisesAJour);\n    console.log('Propriétés du bâtiment mises à jour:', proprietesMisesAJour);\n  }\n\n  /**\n   * Calculer la surface et le volume du bâtiment\n   */\n  private calculerSurfaceEtVolume(): void {\n    const config = this.configurationService.getConfiguration();\n    const dimensions = config.dimensions;\n    \n    const surface = dimensions.longueur * dimensions.largeur;\n    const volume = surface * dimensions.hauteur;\n    \n    this.mettreAJourProprietes({\n      surface: Math.round(surface * 100) / 100, // Arrondir à 2 décimales\n      volume: Math.round(volume * 100) / 100\n    });\n  }\n\n  /**\n   * Mettre à jour la date de dernière modification\n   */\n  private mettreAJourDateModification(): void {\n    this.mettreAJourProprietes({\n      derniereModification: new Date()\n    });\n  }\n\n  /**\n   * Obtenir les statistiques du bâtiment\n   */\n  getStatistiques(): StatistiquesBatiment {\n    const config = this.configurationService.getConfiguration();\n    const toutesOuvertures = this.configurationService.getAllOuvertures();\n    \n    const nombreMurs = 4; // principal, arrière, gauche, droit\n    const nombreOuvertures = toutesOuvertures.length;\n    const nombrePortes = toutesOuvertures.filter(o => o.type === 'porte').length;\n    const nombreFenetres = toutesOuvertures.filter(o => o.type === 'fenetre').length;\n    \n    // Calculer la surface des murs\n    const murs = config.murs;\n    const surfaceMurs = \n      (murs.principal.dimensions.width * murs.principal.dimensions.height) +\n      (murs.arriere.dimensions.width * murs.arriere.dimensions.height) +\n      (murs.gauche.dimensions.width * murs.gauche.dimensions.height) +\n      (murs.droit.dimensions.width * murs.droit.dimensions.height);\n    \n    // Calculer la surface des ouvertures\n    const surfaceOuvertures = toutesOuvertures.reduce((total, ouverture) => {\n      return total + (ouverture.dimensions.width * ouverture.dimensions.height);\n    }, 0);\n    \n    const pourcentageOuvertures = surfaceMurs > 0 ? \n      Math.round((surfaceOuvertures / surfaceMurs) * 100 * 100) / 100 : 0;\n    \n    return {\n      nombreMurs,\n      nombreOuvertures,\n      nombrePortes,\n      nombreFenetres,\n      surfaceMurs: Math.round(surfaceMurs * 100) / 100,\n      surfaceOuvertures: Math.round(surfaceOuvertures * 100) / 100,\n      pourcentageOuvertures\n    };\n  }\n\n  /**\n   * Obtenir le type de bâtiment\n   */\n  getTypeBatiment(): string {\n    return this.getProprietes().type;\n  }\n\n  /**\n   * Changer le type de bâtiment\n   */\n  changerTypeBatiment(nouveauType: ProprietesBatiment['type']): void {\n    this.mettreAJourProprietes({ type: nouveauType });\n  }\n\n  /**\n   * Obtenir la surface du bâtiment\n   */\n  getSurface(): number {\n    return this.getProprietes().surface;\n  }\n\n  /**\n   * Obtenir le volume du bâtiment\n   */\n  getVolume(): number {\n    return this.getProprietes().volume;\n  }\n\n  /**\n   * Obtenir le nom du bâtiment\n   */\n  getNom(): string {\n    return this.getProprietes().nom;\n  }\n\n  /**\n   * Changer le nom du bâtiment\n   */\n  changerNom(nouveauNom: string): void {\n    this.mettreAJourProprietes({ nom: nouveauNom });\n  }\n\n  /**\n   * Obtenir la description du bâtiment\n   */\n  getDescription(): string {\n    return this.getProprietes().description;\n  }\n\n  /**\n   * Changer la description du bâtiment\n   */\n  changerDescription(nouvelleDescription: string): void {\n    this.mettreAJourProprietes({ description: nouvelleDescription });\n  }\n\n  /**\n   * Obtenir la date de création\n   */\n  getDateCreation(): Date {\n    return this.getProprietes().dateCreation;\n  }\n\n  /**\n   * Obtenir la date de dernière modification\n   */\n  getDerniereModification(): Date {\n    return this.getProprietes().derniereModification;\n  }\n\n  /**\n   * Exporter les données du bâtiment\n   */\n  exporterDonnees(): string {\n    const proprietes = this.getProprietes();\n    const config = this.configurationService.getConfiguration();\n    const statistiques = this.getStatistiques();\n    \n    const donneesExport = {\n      proprietes,\n      configuration: config,\n      statistiques,\n      dateExport: new Date()\n    };\n    \n    return JSON.stringify(donneesExport, null, 2);\n  }\n\n  /**\n   * Importer les données du bâtiment\n   */\n  importerDonnees(donneesJson: string): boolean {\n    try {\n      if (!donneesJson || donneesJson.trim() === '') {\n        throw new Error('Données JSON vides ou invalides');\n      }\n      \n      const donnees = JSON.parse(donneesJson);\n      \n      // Validation des données importées\n      if (!donnees || typeof donnees !== 'object') {\n        throw new Error('Format de données invalide');\n      }\n      \n      if (donnees.proprietes) {\n        // Validation des propriétés\n        if (!donnees.proprietes.nom || !donnees.proprietes.type) {\n          throw new Error('Propriétés du bâtiment incomplètes');\n        }\n        this.mettreAJourProprietes(donnees.proprietes);\n      }\n      \n      if (donnees.configuration) {\n        this.configurationService.mettreAJourConfiguration(donnees.configuration);\n      }\n      \n      console.log('Données importées avec succès');\n      return true;\n    } catch (error) {\n      console.error('Erreur lors de l\\'importation:', error);\n      return false;\n    }\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StatistiquesMateriaux.html":{"url":"interfaces/StatistiquesMateriaux.html","title":"interface - StatistiquesMateriaux","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StatistiquesMateriaux\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/materiau/materiau.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les statistiques des matériaux\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            couleursUtilisees\n                                        \n                                \n                                \n                                        \n                                            materiauLePlusUtilise\n                                        \n                                \n                                \n                                        \n                                            nombreParType\n                                        \n                                \n                                \n                                        \n                                            nombreTotal\n                                        \n                                \n                                \n                                        \n                                            paletteLaPlusUtilisee\n                                        \n                                \n                                \n                                        \n                                            texturesUtilisees\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        couleursUtilisees\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        couleursUtilisees:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        materiauLePlusUtilise\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        materiauLePlusUtilise:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nombreParType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nombreParType:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nombreTotal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nombreTotal:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        paletteLaPlusUtilisee\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        paletteLaPlusUtilisee:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        texturesUtilisees\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        texturesUtilisees:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Interface pour les propriétés d'un matériau\n */\nexport interface ProprietesMateriau {\n  id: string;\n  nom: string;\n  type: 'mur' | 'porte' | 'fenetre' | 'toit' | 'sol' | 'decoration';\n  couleur: number;\n  couleurHex: string;\n  couleurRgb: { r: number; g: number; b: number };\n  couleurHsl: { h: number; s: number; l: number };\n  texture?: string;\n  rugosite: number; // 0 = lisse, 1 = rugueux\n  metallic: number; // 0 = non métallique, 1 = métallique\n  transparent: boolean;\n  opacity: number; // 0 = transparent, 1 = opaque\n  emissive: number; // Couleur émissive\n  emissiveIntensity: number;\n  dateCreation: Date;\n  derniereModification: Date;\n}\n\n/**\n * Interface pour les palettes de couleurs\n */\nexport interface PaletteCouleurs {\n  id: string;\n  nom: string;\n  description: string;\n  couleurs: number[];\n  type: 'architecturale' | 'moderne' | 'classique' | 'naturelle' | 'personnalisee';\n  dateCreation: Date;\n}\n\n/**\n * Interface pour les textures\n */\nexport interface ProprietesTexture {\n  id: string;\n  nom: string;\n  url: string;\n  type: 'diffuse' | 'normal' | 'roughness' | 'metallic' | 'emissive';\n  resolution: { width: number; height: number };\n  format: 'jpg' | 'png' | 'webp';\n  taille: number; // en KB\n}\n\n/**\n * Interface pour les statistiques des matériaux\n */\nexport interface StatistiquesMateriaux {\n  nombreTotal: number;\n  nombreParType: Record;\n  couleursUtilisees: number[];\n  texturesUtilisees: string[];\n  paletteLaPlusUtilisee: string;\n  materiauLePlusUtilise: string;\n}\n\n/**\n * Service de gestion des matériaux et couleurs\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MateriauService {\n  \n  private materiauxActuels = new BehaviorSubject([]);\n  private palettesActuelles = new BehaviorSubject([]);\n  private texturesActuelles = new BehaviorSubject([]);\n\n  public materiaux$ = this.materiauxActuels.asObservable();\n  public palettes$ = this.palettesActuelles.asObservable();\n  public textures$ = this.texturesActuelles.asObservable();\n\n  constructor() {\n    this.initialiserMateriauxParDefaut();\n    this.initialiserPalettesParDefaut();\n    this.initialiserTexturesParDefaut();\n  }\n\n  /**\n   * Initialiser les matériaux par défaut\n   */\n  private initialiserMateriauxParDefaut(): void {\n    const materiaux: ProprietesMateriau[] = [\n      // Matériaux pour murs\n      {\n        id: 'mur_beton',\n        nom: 'Béton Gris',\n        type: 'mur',\n        couleur: 0xaaaaaa,\n        couleurHex: '#aaaaaa',\n        couleurRgb: { r: 170, g: 170, b: 170 },\n        couleurHsl: { h: 0, s: 0, l: 67 },\n        rugosite: 0.7,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      {\n        id: 'mur_brique',\n        nom: 'Brique Rouge',\n        type: 'mur',\n        couleur: 0x8b4513,\n        couleurHex: '#8b4513',\n        couleurRgb: { r: 139, g: 69, b: 19 },\n        couleurHsl: { h: 25, s: 76, l: 31 },\n        rugosite: 0.8,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      {\n        id: 'mur_bois',\n        nom: 'Bois Naturel',\n        type: 'mur',\n        couleur: 0xdeb887,\n        couleurHex: '#deb887',\n        couleurRgb: { r: 222, g: 184, b: 135 },\n        couleurHsl: { h: 34, s: 57, l: 70 },\n        rugosite: 0.6,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      \n      // Matériaux pour portes\n      {\n        id: 'porte_bois_vert',\n        nom: 'Porte Bois Vert',\n        type: 'porte',\n        couleur: 0x00ff00,\n        couleurHex: '#00ff00',\n        couleurRgb: { r: 0, g: 255, b: 0 },\n        couleurHsl: { h: 120, s: 100, l: 50 },\n        rugosite: 0.4,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      {\n        id: 'porte_bois_brun',\n        nom: 'Porte Bois Brun',\n        type: 'porte',\n        couleur: 0x8b4513,\n        couleurHex: '#8b4513',\n        couleurRgb: { r: 139, g: 69, b: 19 },\n        couleurHsl: { h: 25, s: 76, l: 31 },\n        rugosite: 0.3,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      \n      // Matériaux pour fenêtres\n      {\n        id: 'fenetre_bleue',\n        nom: 'Fenêtre Bleue',\n        type: 'fenetre',\n        couleur: 0x0000ff,\n        couleurHex: '#0000ff',\n        couleurRgb: { r: 0, g: 0, b: 255 },\n        couleurHsl: { h: 240, s: 100, l: 50 },\n        rugosite: 0.1,\n        metallic: 0.0,\n        transparent: true,\n        opacity: 0.8,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      {\n        id: 'fenetre_rouge',\n        nom: 'Fenêtre Rouge',\n        type: 'fenetre',\n        couleur: 0xff0000,\n        couleurHex: '#ff0000',\n        couleurRgb: { r: 255, g: 0, b: 0 },\n        couleurHsl: { h: 0, s: 100, l: 50 },\n        rugosite: 0.1,\n        metallic: 0.0,\n        transparent: true,\n        opacity: 0.8,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      \n      // Matériaux pour toit\n      {\n        id: 'toit_bleu',\n        nom: 'Toit Bleu Royal',\n        type: 'toit',\n        couleur: 0x4169e1,\n        couleurHex: '#4169e1',\n        couleurRgb: { r: 65, g: 105, b: 225 },\n        couleurHsl: { h: 225, s: 73, l: 57 },\n        rugosite: 0.5,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      },\n      \n      // Matériaux pour sol\n      {\n        id: 'sol_marron',\n        nom: 'Sol Marron',\n        type: 'sol',\n        couleur: 0x8b4513,\n        couleurHex: '#8b4513',\n        couleurRgb: { r: 139, g: 69, b: 19 },\n        couleurHsl: { h: 25, s: 76, l: 31 },\n        rugosite: 0.9,\n        metallic: 0.0,\n        transparent: false,\n        opacity: 1.0,\n        emissive: 0x000000,\n        emissiveIntensity: 0.0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      }\n    ];\n    \n    this.materiauxActuels.next(materiaux);\n  }\n\n  /**\n   * Initialiser les palettes par défaut\n   */\n  private initialiserPalettesParDefaut(): void {\n    const palettes: PaletteCouleurs[] = [\n      {\n        id: 'palette_moderne',\n        nom: 'Palette Moderne',\n        description: 'Couleurs modernes et épurées',\n        couleurs: [0xaaaaaa, 0xffffff, 0x000000, 0x4169e1, 0x00ff00],\n        type: 'moderne',\n        dateCreation: new Date()\n      },\n      {\n        id: 'palette_classique',\n        nom: 'Palette Classique',\n        description: 'Couleurs traditionnelles et chaleureuses',\n        couleurs: [0x8b4513, 0xdeb887, 0x654321, 0xffd700, 0xcd853f],\n        type: 'classique',\n        dateCreation: new Date()\n      },\n      {\n        id: 'palette_naturelle',\n        nom: 'Palette Naturelle',\n        description: 'Couleurs inspirées de la nature',\n        couleurs: [0x228b22, 0x8fbc8f, 0x2e8b57, 0x90ee90, 0x32cd32],\n        type: 'naturelle',\n        dateCreation: new Date()\n      },\n      {\n        id: 'palette_architecturale',\n        nom: 'Palette Architecturale',\n        description: 'Couleurs professionnelles pour l\\'architecture',\n        couleurs: [0xaaaaaa, 0x696969, 0x2f4f4f, 0x708090, 0x778899],\n        type: 'architecturale',\n        dateCreation: new Date()\n      }\n    ];\n    \n    this.palettesActuelles.next(palettes);\n  }\n\n  /**\n   * Initialiser les textures par défaut\n   */\n  private initialiserTexturesParDefaut(): void {\n    const textures: ProprietesTexture[] = [\n      {\n        id: 'texture_beton',\n        nom: 'Texture Béton',\n        url: '/assets/textures/beton.jpg',\n        type: 'diffuse',\n        resolution: { width: 512, height: 512 },\n        format: 'jpg',\n        taille: 256\n      },\n      {\n        id: 'texture_brique',\n        nom: 'Texture Brique',\n        url: '/assets/textures/brique.jpg',\n        type: 'diffuse',\n        resolution: { width: 512, height: 512 },\n        format: 'jpg',\n        taille: 312\n      },\n      {\n        id: 'texture_bois',\n        nom: 'Texture Bois',\n        url: '/assets/textures/bois.jpg',\n        type: 'diffuse',\n        resolution: { width: 512, height: 512 },\n        format: 'jpg',\n        taille: 198\n      }\n    ];\n    \n    this.texturesActuelles.next(textures);\n  }\n\n  /**\n   * Convertir une couleur hexadécimale en RGB\n   */\n  hexToRgb(hex: string): { r: number; g: number; b: number } {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : { r: 0, g: 0, b: 0 };\n  }\n\n  /**\n   * Convertir une couleur RGB en HSL\n   */\n  rgbToHsl(r: number, g: number, b: number): { h: number; s: number; l: number } {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    \n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = 0, s = 0, l = (max + min) / 2;\n    \n    if (max !== min) {\n      const d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n      \n      switch (max) {\n        case r: h = (g - b) / d + (g  {\n    return this.materiaux$;\n  }\n\n  /**\n   * Obtenir un matériau par son ID\n   */\n  getMateriauParId(id: string): ProprietesMateriau | undefined {\n    return this.materiauxActuels.value.find(materiau => materiau.id === id);\n  }\n\n  /**\n   * Obtenir les matériaux par type\n   */\n  getMateriauxParType(type: ProprietesMateriau['type']): ProprietesMateriau[] {\n    return this.materiauxActuels.value.filter(materiau => materiau.type === type);\n  }\n\n  /**\n   * Obtenir les matériaux pour murs\n   */\n  getMateriauxMurs(): ProprietesMateriau[] {\n    return this.getMateriauxParType('mur');\n  }\n\n  /**\n   * Obtenir les matériaux pour portes\n   */\n  getMateriauxPortes(): ProprietesMateriau[] {\n    return this.getMateriauxParType('porte');\n  }\n\n  /**\n   * Obtenir les matériaux pour fenêtres\n   */\n  getMateriauxFenetres(): ProprietesMateriau[] {\n    return this.getMateriauxParType('fenetre');\n  }\n\n  /**\n   * Ajouter un nouveau matériau\n   */\n  ajouterMateriau(nouveauMateriau: Omit): void {\n    try {\n      // Validation des paramètres\n      if (!nouveauMateriau) {\n        throw new Error('Matériau manquant');\n      }\n      \n      if (!nouveauMateriau.nom || !nouveauMateriau.type) {\n        throw new Error('Nom et type du matériau requis');\n      }\n      \n      if (typeof nouveauMateriau.couleur !== 'number' || nouveauMateriau.couleur  0xFFFFFF) {\n        throw new Error('Couleur invalide: doit être un nombre entre 0 et 16777215');\n      }\n      \n      const materiauComplete: ProprietesMateriau = {\n        ...nouveauMateriau,\n        id: `materiau_${Date.now()}`,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      };\n      \n      const materiauxActuels = this.getMateriaux();\n      materiauxActuels.push(materiauComplete);\n      this.materiauxActuels.next(materiauxActuels);\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du matériau:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Modifier un matériau\n   */\n  modifierMateriau(id: string, nouvellesProprietes: Partial): void {\n    const materiauxActuels = this.getMateriaux();\n    const materiauIndex = materiauxActuels.findIndex(materiau => materiau.id === id);\n    \n    if (materiauIndex !== -1) {\n      materiauxActuels[materiauIndex] = {\n        ...materiauxActuels[materiauIndex],\n        ...nouvellesProprietes,\n        derniereModification: new Date()\n      };\n      this.materiauxActuels.next(materiauxActuels);\n    }\n  }\n\n  /**\n   * Supprimer un matériau\n   */\n  supprimerMateriau(id: string): void {\n    const materiauxActuels = this.getMateriaux();\n    const materiauxFiltres = materiauxActuels.filter(materiau => materiau.id !== id);\n    this.materiauxActuels.next(materiauxFiltres);\n  }\n\n  /**\n   * Obtenir toutes les palettes\n   */\n  getPalettes(): PaletteCouleurs[] {\n    return this.palettesActuelles.value;\n  }\n\n  /**\n   * Obtenir les palettes en tant qu'Observable\n   */\n  getPalettesObservable(): Observable {\n    return this.palettes$;\n  }\n\n  /**\n   * Obtenir une palette par son ID\n   */\n  getPaletteParId(id: string): PaletteCouleurs | undefined {\n    return this.palettesActuelles.value.find(palette => palette.id === id);\n  }\n\n  /**\n   * Obtenir les palettes par type\n   */\n  getPalettesParType(type: PaletteCouleurs['type']): PaletteCouleurs[] {\n    return this.palettesActuelles.value.filter(palette => palette.type === type);\n  }\n\n  /**\n   * Ajouter une nouvelle palette\n   */\n  ajouterPalette(nouvellePalette: Omit): void {\n    const paletteComplete: PaletteCouleurs = {\n      ...nouvellePalette,\n      id: `palette_${Date.now()}`,\n      dateCreation: new Date()\n    };\n    \n    const palettesActuelles = this.getPalettes();\n    palettesActuelles.push(paletteComplete);\n    this.palettesActuelles.next(palettesActuelles);\n  }\n\n  /**\n   * Obtenir toutes les textures\n   */\n  getTextures(): ProprietesTexture[] {\n    return this.texturesActuelles.value;\n  }\n\n  /**\n   * Obtenir les textures en tant qu'Observable\n   */\n  getTexturesObservable(): Observable {\n    return this.textures$;\n  }\n\n  /**\n   * Obtenir une texture par son ID\n   */\n  getTextureParId(id: string): ProprietesTexture | undefined {\n    return this.texturesActuelles.value.find(texture => texture.id === id);\n  }\n\n  /**\n   * Obtenir les textures par type\n   */\n  getTexturesParType(type: ProprietesTexture['type']): ProprietesTexture[] {\n    return this.texturesActuelles.value.filter(texture => texture.type === type);\n  }\n\n  /**\n   * Ajouter une nouvelle texture\n   */\n  ajouterTexture(nouvelleTexture: Omit): void {\n    const textureComplete: ProprietesTexture = {\n      ...nouvelleTexture,\n      id: `texture_${Date.now()}`\n    };\n    \n    const texturesActuelles = this.getTextures();\n    texturesActuelles.push(textureComplete);\n    this.texturesActuelles.next(texturesActuelles);\n  }\n\n  /**\n   * Obtenir les statistiques des matériaux\n   */\n  getStatistiquesMateriaux(): StatistiquesMateriaux {\n    const materiaux = this.getMateriaux();\n    const palettes = this.getPalettes();\n    const textures = this.getTextures();\n    \n    const nombreTotal = materiaux.length;\n    const nombreParType: Record = {};\n    \n    materiaux.forEach(materiau => {\n      nombreParType[materiau.type] = (nombreParType[materiau.type] || 0) + 1;\n    });\n    \n    const couleursUtilisees = materiaux.map(materiau => materiau.couleur);\n    const texturesUtilisees = materiaux\n      .filter(materiau => materiau.texture)\n      .map(materiau => materiau.texture!);\n    \n    const paletteLaPlusUtilisee = palettes.length > 0 ? palettes[0].nom : 'Aucune';\n    const materiauLePlusUtilise = Object.keys(nombreParType).reduce((a, b) => \n      nombreParType[a] > nombreParType[b] ? a : b\n    );\n\n    return {\n      nombreTotal,\n      nombreParType,\n      couleursUtilisees,\n      texturesUtilisees,\n      paletteLaPlusUtilisee,\n      materiauLePlusUtilise\n    };\n  }\n\n  /**\n   * Générer une couleur aléatoire\n   */\n  genererCouleurAleatoire(): number {\n    return Math.floor(Math.random() * 16777215);\n  }\n\n  /**\n   * Générer une palette de couleurs harmonieuses\n   */\n  genererPaletteHarmonieuse(couleurBase: number, nombreCouleurs: number = 5): number[] {\n    const couleurs: number[] = [couleurBase];\n    const rgb = this.hexToRgb(this.numberToHex(couleurBase));\n    const hsl = this.rgbToHsl(rgb.r, rgb.g, rgb.b);\n    \n    for (let i = 1; i  {\n      if (t  1) t -= 1;\n      if (t \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StatistiquesOuvertures.html":{"url":"interfaces/StatistiquesOuvertures.html","title":"interface - StatistiquesOuvertures","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StatistiquesOuvertures\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/ouverture/ouverture.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les statistiques des ouvertures\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            nombreFenetres\n                                        \n                                \n                                \n                                        \n                                            nombrePortes\n                                        \n                                \n                                \n                                        \n                                            nombreTotal\n                                        \n                                \n                                \n                                        \n                                            pourcentageFenetres\n                                        \n                                \n                                \n                                        \n                                            pourcentagePortes\n                                        \n                                \n                                \n                                        \n                                            surfaceFenetres\n                                        \n                                \n                                \n                                        \n                                            surfacePortes\n                                        \n                                \n                                \n                                        \n                                            surfaceTotale\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        nombreFenetres\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nombreFenetres:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nombrePortes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nombrePortes:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nombreTotal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nombreTotal:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pourcentageFenetres\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pourcentageFenetres:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pourcentagePortes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pourcentagePortes:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surfaceFenetres\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        surfaceFenetres:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surfacePortes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        surfacePortes:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surfaceTotale\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        surfaceTotale:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigurationService, ConfigurationOuverture } from '../configuration/configuration.service';\n\n/**\n * Interface pour les propriétés d'une ouverture\n */\nexport interface ProprietesOuverture {\n  id: string;\n  nom: string;\n  type: 'porte' | 'fenetre';\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n  surface: number;\n  volume: number;\n  murParent: 'principal' | 'arriere' | 'gauche' | 'droit';\n  dateCreation: Date;\n  derniereModification: Date;\n}\n\n/**\n * Interface pour les calculs d'une ouverture\n */\nexport interface CalculsOuverture {\n  surface: number;\n  volume: number;\n  perimetre: number;\n  centreGravite: { x: number; y: number; z: number };\n  ratioAspect: number; // largeur/hauteur\n}\n\n/**\n * Interface pour la validation d'une ouverture\n */\nexport interface ValidationOuverture {\n  isValid: boolean;\n  erreurs: string[];\n  avertissements: string[];\n}\n\n/**\n * Interface pour les statistiques des ouvertures\n */\nexport interface StatistiquesOuvertures {\n  nombreTotal: number;\n  nombrePortes: number;\n  nombreFenetres: number;\n  surfaceTotale: number;\n  surfacePortes: number;\n  surfaceFenetres: number;\n  pourcentagePortes: number;\n  pourcentageFenetres: number;\n}\n\n/**\n * Service de gestion des ouvertures (portes et fenêtres)\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class OuvertureService {\n  \n  private ouverturesActuelles = new BehaviorSubject([]);\n  public ouvertures$ = this.ouverturesActuelles.asObservable();\n\n  constructor(private configurationService: ConfigurationService) {\n    // Initialiser avec la configuration actuelle\n    this.initialiserOuvertures();\n    \n    // Écouter les changements de configuration\n    this.configurationService.getConfigurationObservable().subscribe(() => {\n      this.initialiserOuvertures();\n    });\n  }\n\n  /**\n   * Initialiser les ouvertures à partir de la configuration\n   */\n  private initialiserOuvertures(): void {\n    const config = this.configurationService.getConfiguration();\n    const ouvertures: ProprietesOuverture[] = [];\n    \n    Object.entries(config.murs).forEach(([typeMur, murConfig]) => {\n      murConfig.ouvertures.forEach(ouvertureConfig => {\n        const calculs = this.calculerProprietesOuverture(ouvertureConfig);\n        const ouverture: ProprietesOuverture = {\n          id: ouvertureConfig.id,\n          nom: ouvertureConfig.nom || `${ouvertureConfig.type}_${ouvertureConfig.id}`,\n          type: ouvertureConfig.type,\n          position: ouvertureConfig.position,\n          dimensions: ouvertureConfig.dimensions,\n          couleur: ouvertureConfig.couleur,\n          surface: calculs.surface,\n          volume: calculs.volume,\n          murParent: typeMur as ProprietesOuverture['murParent'],\n          dateCreation: new Date(),\n          derniereModification: new Date()\n        };\n        ouvertures.push(ouverture);\n      });\n    });\n    \n    this.ouverturesActuelles.next(ouvertures);\n  }\n\n  /**\n   * Calculer les propriétés géométriques d'une ouverture\n   */\n  private calculerProprietesOuverture(ouvertureConfig: ConfigurationOuverture): CalculsOuverture {\n    const surface = ouvertureConfig.dimensions.width * ouvertureConfig.dimensions.height;\n    const volume = surface * ouvertureConfig.dimensions.depth;\n    const perimetre = 2 * (ouvertureConfig.dimensions.width + ouvertureConfig.dimensions.height);\n    const ratioAspect = ouvertureConfig.dimensions.width / ouvertureConfig.dimensions.height;\n    \n    const centreGravite = {\n      x: ouvertureConfig.position.x,\n      y: ouvertureConfig.position.y + (ouvertureConfig.dimensions.height / 2),\n      z: ouvertureConfig.position.z\n    };\n\n    return {\n      surface: Math.round(surface * 100) / 100,\n      volume: Math.round(volume * 100) / 100,\n      perimetre: Math.round(perimetre * 100) / 100,\n      centreGravite,\n      ratioAspect: Math.round(ratioAspect * 100) / 100\n    };\n  }\n\n  /**\n   * Obtenir toutes les ouvertures\n   */\n  getOuvertures(): ProprietesOuverture[] {\n    return this.ouverturesActuelles.value;\n  }\n\n  /**\n   * Obtenir les ouvertures en tant qu'Observable\n   */\n  getOuverturesObservable(): Observable {\n    return this.ouvertures$;\n  }\n\n  /**\n   * Obtenir une ouverture par son ID\n   */\n  getOuvertureParId(id: string): ProprietesOuverture | undefined {\n    return this.ouverturesActuelles.value.find(ouverture => ouverture.id === id);\n  }\n\n  /**\n   * Obtenir les ouvertures par type\n   */\n  getOuverturesParType(type: 'porte' | 'fenetre'): ProprietesOuverture[] {\n    return this.ouverturesActuelles.value.filter(ouverture => ouverture.type === type);\n  }\n\n  /**\n   * Obtenir toutes les portes\n   */\n  getPortes(): ProprietesOuverture[] {\n    return this.getOuverturesParType('porte');\n  }\n\n  /**\n   * Obtenir toutes les fenêtres\n   */\n  getFenetres(): ProprietesOuverture[] {\n    return this.getOuverturesParType('fenetre');\n  }\n\n  /**\n   * Obtenir les ouvertures d'un mur spécifique\n   */\n  getOuverturesParMur(murParent: ProprietesOuverture['murParent']): ProprietesOuverture[] {\n    return this.ouverturesActuelles.value.filter(ouverture => ouverture.murParent === murParent);\n  }\n\n  /**\n   * Ajouter une nouvelle ouverture\n   */\n  ajouterOuverture(\n    murParent: ProprietesOuverture['murParent'],\n    nouvelleOuverture: Omit\n  ): void {\n    try {\n      // Validation des paramètres\n      if (!murParent || !nouvelleOuverture) {\n        throw new Error('Paramètres manquants pour l\\'ajout d\\'ouverture');\n      }\n      \n      if (!nouvelleOuverture.type || !nouvelleOuverture.dimensions || !nouvelleOuverture.position) {\n        throw new Error('Ouverture incomplète: propriétés manquantes');\n      }\n      \n      if (nouvelleOuverture.dimensions.width  o.id === id);\n      \n      if (ouvertureConfig) {\n        ouvertureConfig.position = nouvellePosition;\n        this.configurationService.mettreAJourMur(ouverture.murParent, murConfig);\n      }\n    }\n  }\n\n  /**\n   * Modifier les dimensions d'une ouverture\n   */\n  modifierDimensionsOuverture(id: string, nouvellesDimensions: { width: number; height: number; depth: number }): void {\n    const ouverture = this.getOuvertureParId(id);\n    if (ouverture) {\n      const config = this.configurationService.getConfiguration();\n      const murConfig = config.murs[ouverture.murParent];\n      const ouvertureConfig = murConfig.ouvertures.find(o => o.id === id);\n      \n      if (ouvertureConfig) {\n        ouvertureConfig.dimensions = nouvellesDimensions;\n        this.configurationService.mettreAJourMur(ouverture.murParent, murConfig);\n      }\n    }\n  }\n\n  /**\n   * Modifier la couleur d'une ouverture\n   */\n  modifierCouleurOuverture(id: string, nouvelleCouleur: number): void {\n    const ouverture = this.getOuvertureParId(id);\n    if (ouverture) {\n      const config = this.configurationService.getConfiguration();\n      const murConfig = config.murs[ouverture.murParent];\n      const ouvertureConfig = murConfig.ouvertures.find(o => o.id === id);\n      \n      if (ouvertureConfig) {\n        ouvertureConfig.couleur = nouvelleCouleur;\n        this.configurationService.mettreAJourMur(ouverture.murParent, murConfig);\n      }\n    }\n  }\n\n  /**\n   * Valider une ouverture\n   */\n  validerOuverture(ouverture: ProprietesOuverture): ValidationOuverture {\n    const erreurs: string[] = [];\n    const avertissements: string[] = [];\n\n    // Validation des dimensions\n    if (ouverture.dimensions.width  1.2) {\n        avertissements.push('La largeur de la porte est supérieure à 1.2m');\n      }\n    }\n\n    // Validation spécifique aux fenêtres\n    if (ouverture.type === 'fenetre') {\n      if (ouverture.dimensions.height  3) {\n      avertissements.push('Le ratio largeur/hauteur est très élevé (> 3)');\n    }\n    if (ratioAspect  total + ouverture.surface, 0);\n    const surfacePortes = portes.reduce((total, porte) => total + porte.surface, 0);\n    const surfaceFenetres = fenetres.reduce((total, fenetre) => total + fenetre.surface, 0);\n    \n    const pourcentagePortes = surfaceTotale > 0 ? (surfacePortes / surfaceTotale) * 100 : 0;\n    const pourcentageFenetres = surfaceTotale > 0 ? (surfaceFenetres / surfaceTotale) * 100 : 0;\n\n    return {\n      nombreTotal,\n      nombrePortes,\n      nombreFenetres,\n      surfaceTotale: Math.round(surfaceTotale * 100) / 100,\n      surfacePortes: Math.round(surfacePortes * 100) / 100,\n      surfaceFenetres: Math.round(surfaceFenetres * 100) / 100,\n      pourcentagePortes: Math.round(pourcentagePortes * 100) / 100,\n      pourcentageFenetres: Math.round(pourcentageFenetres * 100) / 100\n    };\n  }\n\n  /**\n   * Obtenir la plus grande ouverture\n   */\n  getPlusGrandeOuverture(): ProprietesOuverture | undefined {\n    const ouvertures = this.getOuvertures();\n    if (ouvertures.length === 0) return undefined;\n    \n    return ouvertures.reduce((plusGrande, ouverture) => \n      ouverture.surface > plusGrande.surface ? ouverture : plusGrande\n    );\n  }\n\n  /**\n   * Obtenir la plus petite ouverture\n   */\n  getPlusPetiteOuverture(): ProprietesOuverture | undefined {\n    const ouvertures = this.getOuvertures();\n    if (ouvertures.length === 0) return undefined;\n    \n    return ouvertures.reduce((plusPetite, ouverture) => \n      ouverture.surface  \n      ouverture.surface >= minSurface && ouverture.surface  {\n      if (autreOuverture.id !== ouverture.id) {\n        const distance = this.calculerDistanceEntreOuvertures(ouverture, autreOuverture);\n        if (distance  ouverture.couleur === couleur);\n  }\n\n  /**\n   * Obtenir les couleurs utilisées\n   */\n  getCouleursUtilisees(): number[] {\n    const ouvertures = this.getOuvertures();\n    const couleurs = new Set();\n    \n    ouvertures.forEach(ouverture => {\n      couleurs.add(ouverture.couleur);\n    });\n    \n    return Array.from(couleurs);\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StatistiquesScene.html":{"url":"interfaces/StatistiquesScene.html","title":"interface - StatistiquesScene","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StatistiquesScene\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/scene/scene.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les statistiques de la scène\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            fps\n                                        \n                                \n                                \n                                        \n                                            memoireUtilisee\n                                        \n                                \n                                \n                                        \n                                            nombreLumieres\n                                        \n                                \n                                \n                                        \n                                            nombreMurs\n                                        \n                                \n                                \n                                        \n                                            nombreObjets\n                                        \n                                \n                                \n                                        \n                                            nombreOuvertures\n                                        \n                                \n                                \n                                        \n                                            nombreTriangles\n                                        \n                                \n                                \n                                        \n                                            tempsRendu\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fps\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fps:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        memoireUtilisee\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        memoireUtilisee:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nombreLumieres\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nombreLumieres:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nombreMurs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nombreMurs:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nombreObjets\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nombreObjets:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nombreOuvertures\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nombreOuvertures:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nombreTriangles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nombreTriangles:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tempsRendu\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tempsRendu:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigurationService } from '../configuration/configuration.service';\nimport { MurService, ProprietesMur } from '../mur/mur.service';\nimport { OuvertureService, ProprietesOuverture } from '../ouverture/ouverture.service';\n\n/**\n * Interface pour les propriétés de la scène 3D\n */\nexport interface ProprietesScene {\n  id: string;\n  nom: string;\n  largeur: number;\n  hauteur: number;\n  backgroundColor: number;\n  fogColor: number;\n  fogNear: number;\n  fogFar: number;\n  antialias: boolean;\n  shadowMapEnabled: boolean;\n  shadowMapType: 'PCF' | 'PCFSoft' | 'Basic';\n  dateCreation: Date;\n  derniereModification: Date;\n}\n\n/**\n * Interface pour la caméra\n */\nexport interface ProprietesCamera {\n  position: { x: number; y: number; z: number };\n  target: { x: number; y: number; z: number };\n  fov: number;\n  near: number;\n  far: number;\n  type: 'perspective' | 'orthographic';\n}\n\n/**\n * Interface pour les contrôles de la scène\n */\nexport interface ControlesScene {\n  enableRotate: boolean;\n  enableZoom: boolean;\n  enablePan: boolean;\n  enableDamping: boolean;\n  dampingFactor: number;\n  rotateSpeed: number;\n  zoomSpeed: number;\n  panSpeed: number;\n  minDistance: number;\n  maxDistance: number;\n  minPolarAngle: number;\n  maxPolarAngle: number;\n}\n\n/**\n * Interface pour les lumières\n */\nexport interface ProprietesLumiere {\n  id: string;\n  type: 'ambient' | 'directional' | 'point' | 'spot';\n  position?: { x: number; y: number; z: number };\n  direction?: { x: number; y: number; z: number };\n  color: number;\n  intensity: number;\n  castShadow: boolean;\n  enabled: boolean;\n}\n\n/**\n * Interface pour les statistiques de la scène\n */\nexport interface StatistiquesScene {\n  nombreObjets: number;\n  nombreMurs: number;\n  nombreOuvertures: number;\n  nombreLumieres: number;\n  nombreTriangles: number;\n  memoireUtilisee: number;\n  fps: number;\n  tempsRendu: number;\n}\n\n/**\n * Service de gestion de la scène 3D\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SceneService {\n  \n  private sceneActuelle = new BehaviorSubject({\n    id: 'scene_principale',\n    nom: 'Scène Architecturale 3D',\n    largeur: 800,\n    hauteur: 600,\n    backgroundColor: 0x87CEEB, // Bleu ciel\n    fogColor: 0x87CEEB,\n    fogNear: 1,\n    fogFar: 100,\n    antialias: true,\n    shadowMapEnabled: true,\n    shadowMapType: 'PCFSoft',\n    dateCreation: new Date(),\n    derniereModification: new Date()\n  });\n\n  private cameraActuelle = new BehaviorSubject({\n    position: { x: 5, y: 5, z: 5 },\n    target: { x: 0, y: 0, z: 0 },\n    fov: 75,\n    near: 0.1,\n    far: 1000,\n    type: 'perspective'\n  });\n\n  private controlesActuels = new BehaviorSubject({\n    enableRotate: true,\n    enableZoom: true,\n    enablePan: true,\n    enableDamping: true,\n    dampingFactor: 0.05,\n    rotateSpeed: 1.0,\n    zoomSpeed: 1.0,\n    panSpeed: 1.0,\n    minDistance: 2,\n    maxDistance: 50,\n    minPolarAngle: 0,\n    maxPolarAngle: Math.PI\n  });\n\n  private lumiereActuelles = new BehaviorSubject([\n    {\n      id: 'lumiere_ambient',\n      type: 'ambient',\n      color: 0x404040,\n      intensity: 0.4,\n      castShadow: false,\n      enabled: true\n    },\n    {\n      id: 'lumiere_directionnelle',\n      type: 'directional',\n      position: { x: 10, y: 10, z: 5 },\n      direction: { x: -1, y: -1, z: -1 },\n      color: 0xffffff,\n      intensity: 1.0,\n      castShadow: true,\n      enabled: true\n    }\n  ]);\n\n  public scene$ = this.sceneActuelle.asObservable();\n  public camera$ = this.cameraActuelle.asObservable();\n  public controles$ = this.controlesActuels.asObservable();\n  public lumiere$ = this.lumiereActuelles.asObservable();\n\n  constructor(\n    private configurationService: ConfigurationService,\n    private murService: MurService,\n    private ouvertureService: OuvertureService\n  ) {\n    console.log('SceneService initialisé');\n  }\n\n  /**\n   * Obtenir les propriétés de la scène\n   */\n  getProprietesScene(): ProprietesScene {\n    return this.sceneActuelle.value;\n  }\n\n  /**\n   * Obtenir les propriétés de la scène en tant qu'Observable\n   */\n  getProprietesSceneObservable(): Observable {\n    return this.scene$;\n  }\n\n  /**\n   * Mettre à jour les propriétés de la scène\n   */\n  mettreAJourProprietesScene(nouvellesProprietes: Partial): void {\n    const proprietesActuelles = this.getProprietesScene();\n    const proprietesMisesAJour = {\n      ...proprietesActuelles,\n      ...nouvellesProprietes,\n      derniereModification: new Date()\n    };\n    \n    this.sceneActuelle.next(proprietesMisesAJour);\n    console.log('Propriétés de la scène mises à jour:', proprietesMisesAJour);\n  }\n\n  /**\n   * Obtenir les propriétés de la caméra\n   */\n  getProprietesCamera(): ProprietesCamera {\n    return this.cameraActuelle.value;\n  }\n\n  /**\n   * Obtenir les propriétés de la caméra en tant qu'Observable\n   */\n  getProprietesCameraObservable(): Observable {\n    return this.camera$;\n  }\n\n  /**\n   * Mettre à jour les propriétés de la caméra\n   */\n  mettreAJourProprietesCamera(nouvellesProprietes: Partial): void {\n    const proprietesActuelles = this.getProprietesCamera();\n    const proprietesMisesAJour = {\n      ...proprietesActuelles,\n      ...nouvellesProprietes\n    };\n    \n    this.cameraActuelle.next(proprietesMisesAJour);\n    console.log('Propriétés de la caméra mises à jour:', proprietesMisesAJour);\n  }\n\n  /**\n   * Obtenir les contrôles de la scène\n   */\n  getControlesScene(): ControlesScene {\n    return this.controlesActuels.value;\n  }\n\n  /**\n   * Obtenir les contrôles de la scène en tant qu'Observable\n   */\n  getControlesSceneObservable(): Observable {\n    return this.controles$;\n  }\n\n  /**\n   * Mettre à jour les contrôles de la scène\n   */\n  mettreAJourControlesScene(nouveauxControles: Partial): void {\n    const controlesActuels = this.getControlesScene();\n    const controlesMisesAJour = {\n      ...controlesActuels,\n      ...nouveauxControles\n    };\n    \n    this.controlesActuels.next(controlesMisesAJour);\n    console.log('Contrôles de la scène mis à jour:', controlesMisesAJour);\n  }\n\n  /**\n   * Obtenir les lumières\n   */\n  getLumieres(): ProprietesLumiere[] {\n    return this.lumiereActuelles.value;\n  }\n\n  /**\n   * Obtenir les lumières en tant qu'Observable\n   */\n  getLumieresObservable(): Observable {\n    return this.lumiere$;\n  }\n\n  /**\n   * Ajouter une nouvelle lumière\n   */\n  ajouterLumiere(nouvelleLumiere: Omit): void {\n    const lumiereComplete: ProprietesLumiere = {\n      ...nouvelleLumiere,\n      id: `lumiere_${Date.now()}`\n    };\n    \n    const lumiereActuelles = this.getLumieres();\n    lumiereActuelles.push(lumiereComplete);\n    this.lumiereActuelles.next(lumiereActuelles);\n  }\n\n  /**\n   * Supprimer une lumière\n   */\n  supprimerLumiere(id: string): void {\n    const lumiereActuelles = this.getLumieres();\n    const lumiereFiltrees = lumiereActuelles.filter(lumiere => lumiere.id !== id);\n    this.lumiereActuelles.next(lumiereFiltrees);\n  }\n\n  /**\n   * Modifier une lumière\n   */\n  modifierLumiere(id: string, nouvellesProprietes: Partial): void {\n    const lumiereActuelles = this.getLumieres();\n    const lumiereIndex = lumiereActuelles.findIndex(lumiere => lumiere.id === id);\n    \n    if (lumiereIndex !== -1) {\n      lumiereActuelles[lumiereIndex] = {\n        ...lumiereActuelles[lumiereIndex],\n        ...nouvellesProprietes\n      };\n      this.lumiereActuelles.next(lumiereActuelles);\n    }\n  }\n\n  /**\n   * Activer/Désactiver une lumière\n   */\n  toggleLumiere(id: string): void {\n    const lumiereActuelles = this.getLumieres();\n    const lumiereIndex = lumiereActuelles.findIndex(lumiere => lumiere.id === id);\n    \n    if (lumiereIndex !== -1) {\n      lumiereActuelles[lumiereIndex].enabled = !lumiereActuelles[lumiereIndex].enabled;\n      this.lumiereActuelles.next(lumiereActuelles);\n    }\n  }\n\n  /**\n   * Obtenir les statistiques de la scène\n   */\n  getStatistiquesScene(): StatistiquesScene {\n    const murs = this.murService.getMurs();\n    const ouvertures = this.ouvertureService.getOuvertures();\n    const lumiere = this.getLumieres();\n    \n    const nombreMurs = murs.length;\n    const nombreOuvertures = ouvertures.length;\n    const nombreLumieres = lumiere.length;\n    const nombreObjets = nombreMurs + nombreOuvertures + nombreLumieres;\n    \n    // Estimation du nombre de triangles (approximation)\n    const nombreTriangles = (nombreMurs * 12) + (nombreOuvertures * 8); // Estimation\n    \n    // Estimation de la mémoire utilisée (en MB)\n    const memoireUtilisee = (nombreTriangles * 0.001); // Approximation\n    \n    return {\n      nombreObjets,\n      nombreMurs,\n      nombreOuvertures,\n      nombreLumieres,\n      nombreTriangles,\n      memoireUtilisee: Math.round(memoireUtilisee * 100) / 100,\n      fps: 60, // Valeur par défaut\n      tempsRendu: 16.67 // 60 FPS = 16.67ms par frame\n    };\n  }\n\n  /**\n   * Réinitialiser la caméra à sa position par défaut\n   */\n  reinitialiserCamera(): void {\n    this.mettreAJourProprietesCamera({\n      position: { x: 5, y: 5, z: 5 },\n      target: { x: 0, y: 0, z: 0 }\n    });\n  }\n\n  /**\n   * Centrer la caméra sur un objet\n   */\n  centrerCameraSurObjet(position: { x: number; y: number; z: number }): void {\n    this.mettreAJourProprietesCamera({\n      target: position\n    });\n  }\n\n  /**\n   * Obtenir la distance entre la caméra et un point\n   */\n  calculerDistanceCamera(point: { x: number; y: number; z: number }): number {\n    const camera = this.getProprietesCamera();\n    const dx = camera.position.x - point.x;\n    const dy = camera.position.y - point.y;\n    const dz = camera.position.z - point.z;\n    \n    return Math.round(Math.sqrt(dx * dx + dy * dy + dz * dz) * 100) / 100;\n  }\n\n  /**\n   * Obtenir le point le plus proche de la caméra\n   */\n  getPointLePlusProcheDeCamera(): { x: number; y: number; z: number } | null {\n    const camera = this.getProprietesCamera();\n    const murs = this.murService.getMurs();\n    const ouvertures = this.ouvertureService.getOuvertures();\n    \n    let pointLePlusProche: { x: number; y: number; z: number } | null = null;\n    let distanceMin = Infinity;\n    \n    // Vérifier les murs\n    murs.forEach(mur => {\n      const distance = this.calculerDistanceCamera(mur.position);\n      if (distance  {\n      const distance = this.calculerDistanceCamera(ouverture.position);\n      if (distance \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Structure.html":{"url":"interfaces/Structure.html","title":"interface - Structure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Structure\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/scene3d/controls/structure-controller.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour la structure du bâtiment\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            couleur\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            dimensions\n                                        \n                                \n                                \n                                        \n                                            materiau\n                                        \n                                \n                                \n                                        \n                                            materiauPrincipal\n                                        \n                                \n                                \n                                        \n                                            materiauToit\n                                        \n                                \n                                \n                                        \n                                            nom\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        couleur\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        couleur:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dimensions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dimensions:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        materiau\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        materiau:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        materiauPrincipal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        materiauPrincipal:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        materiauToit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        materiauToit:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nom:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n/**\n * Interface pour la structure du bâtiment\n */\nexport interface Structure {\n  nom: string;\n  description: string;\n  type: string;\n  dimensions: {\n    longueur: number;\n    largeur: number;\n    hauteur: number;\n  };\n  couleur: string;\n  materiau: string;\n  materiauPrincipal: string;\n  materiauToit: string;\n}\n\n/**\n * Composant pour contrôler la structure globale du bâtiment\n */\n@Component({\n  selector: 'app-structure-controller',\n  imports: [CommonModule, FormsModule],\n  templateUrl: './structure-controller.component.html',\n  styleUrl: './structure-controller.component.css',\n  standalone: true\n})\nexport class StructureControllerComponent {\n  @Input() isVisible: boolean = false;\n  @Input() structure: Structure = {\n    nom: 'Bâtiment Principal',\n    description: 'Bâtiment architectural avec murs, ouvertures et toit',\n    type: 'residentiel',\n    dimensions: { longueur: 8, largeur: 5, hauteur: 2.5 },\n    couleur: '#aaaaaa',\n    materiau: 'beton',\n    materiauPrincipal: 'beton',\n    materiauToit: 'tuile'\n  };\n\n  @Output() structureChanged = new EventEmitter();\n  @Output() structureApplied = new EventEmitter();\n  @Output() structureReset = new EventEmitter();\n  @Output() structureOptimized = new EventEmitter();\n  @Output() structureExported = new EventEmitter();\n  @Output() structureImported = new EventEmitter();\n  @Output() structurePreviewed = new EventEmitter();\n\n  onStructureChange(): void {\n    this.structureChanged.emit({ ...this.structure });\n  }\n\n  applyStructure(): void {\n    this.structureApplied.emit({ ...this.structure });\n  }\n\n  resetToDefault(): void {\n    this.structure = {\n      nom: 'Bâtiment Principal',\n      description: 'Bâtiment architectural avec murs, ouvertures et toit',\n      type: 'residentiel',\n      dimensions: { longueur: 8, largeur: 5, hauteur: 2.5 },\n      couleur: '#aaaaaa',\n      materiau: 'beton',\n      materiauPrincipal: 'beton',\n      materiauToit: 'tuile'\n    };\n    this.structureReset.emit();\n  }\n\n  optimizeDimensions(): void {\n    // Optimisation basique des dimensions\n    const optimizedStructure = { ...this.structure };\n    \n    // Ratio optimal pour un bâtiment résidentiel\n    const ratioOptimal = 0.4; // hauteur/longueur\n    const longueurOptimale = Math.sqrt(this.getVolume() / ratioOptimal);\n    \n    optimizedStructure.dimensions.longueur = Math.round(longueurOptimale * 10) / 10;\n    optimizedStructure.dimensions.largeur = Math.round(longueurOptimale * 0.6 * 10) / 10;\n    optimizedStructure.dimensions.hauteur = Math.round(longueurOptimale * ratioOptimal * 10) / 10;\n    \n    this.structure = optimizedStructure;\n    this.structureOptimized.emit(optimizedStructure);\n  }\n\n  exportStructure(): void {\n    this.structureExported.emit({ ...this.structure });\n  }\n\n  importStructure(): void {\n    // Simulation d'importation\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.json';\n    input.onchange = (event: any) => {\n      const file = event.target.files[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = (e: any) => {\n          try {\n            const importedStructure = JSON.parse(e.target.result);\n            this.structure = { ...this.structure, ...importedStructure };\n            this.structureImported.emit(this.structure);\n          } catch (error) {\n            console.error('Erreur lors de l\\'importation:', error);\n          }\n        };\n        reader.readAsText(file);\n      }\n    };\n    input.click();\n  }\n\n  previewStructure(): void {\n    this.structurePreviewed.emit({ ...this.structure });\n  }\n\n  // Méthodes de calcul\n  getSurfaceSol(): number {\n    return Math.round(this.structure.dimensions.longueur * this.structure.dimensions.largeur * 10) / 10;\n  }\n\n  getVolume(): number {\n    return Math.round(this.structure.dimensions.longueur * this.structure.dimensions.largeur * this.structure.dimensions.hauteur * 10) / 10;\n  }\n\n  getPerimetre(): number {\n    return Math.round((this.structure.dimensions.longueur + this.structure.dimensions.largeur) * 2 * 10) / 10;\n  }\n\n  getRatioHauteurLongueur(): number {\n    return Math.round((this.structure.dimensions.hauteur / this.structure.dimensions.longueur) * 100) / 100;\n  }\n\n  getVolumeTotal(): number {\n    return this.getVolume();\n  }\n\n  getNombreMurs(): number {\n    // Cette méthode devrait recevoir les murs en input ou via un service\n    return 0; // Valeur par défaut\n  }\n\n  getNombreOuvertures(): number {\n    // Cette méthode devrait recevoir les ouvertures en input ou via un service\n    return 0; // Valeur par défaut\n  }\n\n  resetStructure(): void {\n    this.resetToDefault();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/StructureControllerComponent.html":{"url":"components/StructureControllerComponent.html","title":"component - StructureControllerComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  StructureControllerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/scene3d/controls/structure-controller.component.ts\n\n\n\n    \n        Description\n    \n    \n        Composant pour contrôler la structure globale du bâtiment\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-structure-controller\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./structure-controller.component.html\n            \n\n\n\n            \n                styleUrl\n                ./structure-controller.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyStructure\n                            \n                            \n                                exportStructure\n                            \n                            \n                                getNombreMurs\n                            \n                            \n                                getNombreOuvertures\n                            \n                            \n                                getPerimetre\n                            \n                            \n                                getRatioHauteurLongueur\n                            \n                            \n                                getSurfaceSol\n                            \n                            \n                                getVolume\n                            \n                            \n                                getVolumeTotal\n                            \n                            \n                                importStructure\n                            \n                            \n                                onStructureChange\n                            \n                            \n                                optimizeDimensions\n                            \n                            \n                                previewStructure\n                            \n                            \n                                resetStructure\n                            \n                            \n                                resetToDefault\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                isVisible\n                            \n                            \n                                structure\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                structureApplied\n                            \n                            \n                                structureChanged\n                            \n                            \n                                structureExported\n                            \n                            \n                                structureImported\n                            \n                            \n                                structureOptimized\n                            \n                            \n                                structurePreviewed\n                            \n                            \n                                structureReset\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        isVisible\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/structure-controller.component.ts:34\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        structure\n                    \n                \n                \n                    \n                        Type :         Structure\n\n                    \n                \n                \n                    \n                        Default value : {\n    nom: 'Bâtiment Principal',\n    description: 'Bâtiment architectural avec murs, ouvertures et toit',\n    type: 'residentiel',\n    dimensions: { longueur: 8, largeur: 5, hauteur: 2.5 },\n    couleur: '#aaaaaa',\n    materiau: 'beton',\n    materiauPrincipal: 'beton',\n    materiauToit: 'tuile'\n  }\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/structure-controller.component.ts:35\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        structureApplied\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/structure-controller.component.ts:47\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        structureChanged\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/structure-controller.component.ts:46\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        structureExported\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/structure-controller.component.ts:50\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        structureImported\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/structure-controller.component.ts:51\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        structureOptimized\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/structure-controller.component.ts:49\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        structurePreviewed\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/structure-controller.component.ts:52\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        structureReset\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/scene3d/controls/structure-controller.component.ts:48\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        applyStructure\n                        \n                    \n                \n            \n            \n                \napplyStructure()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/structure-controller.component.ts:58\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exportStructure\n                        \n                    \n                \n            \n            \n                \nexportStructure()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/structure-controller.component.ts:92\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNombreMurs\n                        \n                    \n                \n            \n            \n                \ngetNombreMurs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/structure-controller.component.ts:145\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNombreOuvertures\n                        \n                    \n                \n            \n            \n                \ngetNombreOuvertures()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/structure-controller.component.ts:150\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPerimetre\n                        \n                    \n                \n            \n            \n                \ngetPerimetre()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/structure-controller.component.ts:133\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRatioHauteurLongueur\n                        \n                    \n                \n            \n            \n                \ngetRatioHauteurLongueur()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/structure-controller.component.ts:137\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSurfaceSol\n                        \n                    \n                \n            \n            \n                \ngetSurfaceSol()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/structure-controller.component.ts:125\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getVolume\n                        \n                    \n                \n            \n            \n                \ngetVolume()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/structure-controller.component.ts:129\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getVolumeTotal\n                        \n                    \n                \n            \n            \n                \ngetVolumeTotal()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/structure-controller.component.ts:141\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        importStructure\n                        \n                    \n                \n            \n            \n                \nimportStructure()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/structure-controller.component.ts:96\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onStructureChange\n                        \n                    \n                \n            \n            \n                \nonStructureChange()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/structure-controller.component.ts:54\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        optimizeDimensions\n                        \n                    \n                \n            \n            \n                \noptimizeDimensions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/structure-controller.component.ts:76\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        previewStructure\n                        \n                    \n                \n            \n            \n                \npreviewStructure()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/structure-controller.component.ts:120\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetStructure\n                        \n                    \n                \n            \n            \n                \nresetStructure()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/structure-controller.component.ts:155\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetToDefault\n                        \n                    \n                \n            \n            \n                \nresetToDefault()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/scene3d/controls/structure-controller.component.ts:62\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n/**\n * Interface pour la structure du bâtiment\n */\nexport interface Structure {\n  nom: string;\n  description: string;\n  type: string;\n  dimensions: {\n    longueur: number;\n    largeur: number;\n    hauteur: number;\n  };\n  couleur: string;\n  materiau: string;\n  materiauPrincipal: string;\n  materiauToit: string;\n}\n\n/**\n * Composant pour contrôler la structure globale du bâtiment\n */\n@Component({\n  selector: 'app-structure-controller',\n  imports: [CommonModule, FormsModule],\n  templateUrl: './structure-controller.component.html',\n  styleUrl: './structure-controller.component.css',\n  standalone: true\n})\nexport class StructureControllerComponent {\n  @Input() isVisible: boolean = false;\n  @Input() structure: Structure = {\n    nom: 'Bâtiment Principal',\n    description: 'Bâtiment architectural avec murs, ouvertures et toit',\n    type: 'residentiel',\n    dimensions: { longueur: 8, largeur: 5, hauteur: 2.5 },\n    couleur: '#aaaaaa',\n    materiau: 'beton',\n    materiauPrincipal: 'beton',\n    materiauToit: 'tuile'\n  };\n\n  @Output() structureChanged = new EventEmitter();\n  @Output() structureApplied = new EventEmitter();\n  @Output() structureReset = new EventEmitter();\n  @Output() structureOptimized = new EventEmitter();\n  @Output() structureExported = new EventEmitter();\n  @Output() structureImported = new EventEmitter();\n  @Output() structurePreviewed = new EventEmitter();\n\n  onStructureChange(): void {\n    this.structureChanged.emit({ ...this.structure });\n  }\n\n  applyStructure(): void {\n    this.structureApplied.emit({ ...this.structure });\n  }\n\n  resetToDefault(): void {\n    this.structure = {\n      nom: 'Bâtiment Principal',\n      description: 'Bâtiment architectural avec murs, ouvertures et toit',\n      type: 'residentiel',\n      dimensions: { longueur: 8, largeur: 5, hauteur: 2.5 },\n      couleur: '#aaaaaa',\n      materiau: 'beton',\n      materiauPrincipal: 'beton',\n      materiauToit: 'tuile'\n    };\n    this.structureReset.emit();\n  }\n\n  optimizeDimensions(): void {\n    // Optimisation basique des dimensions\n    const optimizedStructure = { ...this.structure };\n    \n    // Ratio optimal pour un bâtiment résidentiel\n    const ratioOptimal = 0.4; // hauteur/longueur\n    const longueurOptimale = Math.sqrt(this.getVolume() / ratioOptimal);\n    \n    optimizedStructure.dimensions.longueur = Math.round(longueurOptimale * 10) / 10;\n    optimizedStructure.dimensions.largeur = Math.round(longueurOptimale * 0.6 * 10) / 10;\n    optimizedStructure.dimensions.hauteur = Math.round(longueurOptimale * ratioOptimal * 10) / 10;\n    \n    this.structure = optimizedStructure;\n    this.structureOptimized.emit(optimizedStructure);\n  }\n\n  exportStructure(): void {\n    this.structureExported.emit({ ...this.structure });\n  }\n\n  importStructure(): void {\n    // Simulation d'importation\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.json';\n    input.onchange = (event: any) => {\n      const file = event.target.files[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = (e: any) => {\n          try {\n            const importedStructure = JSON.parse(e.target.result);\n            this.structure = { ...this.structure, ...importedStructure };\n            this.structureImported.emit(this.structure);\n          } catch (error) {\n            console.error('Erreur lors de l\\'importation:', error);\n          }\n        };\n        reader.readAsText(file);\n      }\n    };\n    input.click();\n  }\n\n  previewStructure(): void {\n    this.structurePreviewed.emit({ ...this.structure });\n  }\n\n  // Méthodes de calcul\n  getSurfaceSol(): number {\n    return Math.round(this.structure.dimensions.longueur * this.structure.dimensions.largeur * 10) / 10;\n  }\n\n  getVolume(): number {\n    return Math.round(this.structure.dimensions.longueur * this.structure.dimensions.largeur * this.structure.dimensions.hauteur * 10) / 10;\n  }\n\n  getPerimetre(): number {\n    return Math.round((this.structure.dimensions.longueur + this.structure.dimensions.largeur) * 2 * 10) / 10;\n  }\n\n  getRatioHauteurLongueur(): number {\n    return Math.round((this.structure.dimensions.hauteur / this.structure.dimensions.longueur) * 100) / 100;\n  }\n\n  getVolumeTotal(): number {\n    return this.getVolume();\n  }\n\n  getNombreMurs(): number {\n    // Cette méthode devrait recevoir les murs en input ou via un service\n    return 0; // Valeur par défaut\n  }\n\n  getNombreOuvertures(): number {\n    // Cette méthode devrait recevoir les ouvertures en input ou via un service\n    return 0; // Valeur par défaut\n  }\n\n  resetStructure(): void {\n    this.resetToDefault();\n  }\n}\n\n    \n\n    \n        \n  🏗️ Contrôleur de Structure\n  \n  \n  \n    Informations générales\n    \n      \n        Nom du bâtiment :\n        \n      \n      \n      \n        Type de bâtiment :\n        \n          Résidentiel\n          Commercial\n          Industriel\n          Public\n        \n      \n    \n  \n\n  \n  \n    Dimensions globales\n    \n      \n        Longueur (m)\n        \n        {{ structure.dimensions.longueur }}\n      \n      \n      \n        Largeur (m)\n        \n        {{ structure.dimensions.largeur }}\n      \n      \n      \n        Hauteur (m)\n        \n        {{ structure.dimensions.hauteur }}\n      \n    \n  \n\n  \n  \n    Couleur de base\n    \n        \n      {{ structure.couleur }}\n    \n  \n\n  \n  \n    Matériaux\n    \n      \n        Matériau principal :\n        \n          Béton\n          Brique\n          Bois\n          Métal\n          Pierre\n        \n      \n      \n      \n        Matériau de toit :\n        \n          Tuile\n          Ardoise\n          Métal\n          Béton\n        \n      \n    \n  \n\n  \n  \n    Statistiques\n    \n      \n        Surface au sol :\n        {{ getSurfaceSol() }} m²\n      \n      \n      \n        Volume total :\n        {{ getVolumeTotal() }} m³\n      \n      \n      \n        Nombre de murs :\n        {{ getNombreMurs() }}\n      \n      \n      \n        Nombre d'ouvertures :\n        {{ getNombreOuvertures() }}\n      \n    \n  \n\n  \n  \n    \n      🔄 Réinitialiser\n    \n    \n    \n      📤 Exporter\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  🏗️ Contrôleur de Structure          Informations générales                  Nom du bâtiment :                                  Type de bâtiment :                  Résidentiel          Commercial          Industriel          Public                            Dimensions globales                  Longueur (m)                {{ structure.dimensions.longueur }}                          Largeur (m)                {{ structure.dimensions.largeur }}                          Hauteur (m)                {{ structure.dimensions.hauteur }}                    Couleur de base                  {{ structure.couleur }}              Matériaux                  Matériau principal :                  Béton          Brique          Bois          Métal          Pierre                                  Matériau de toit :                  Tuile          Ardoise          Métal          Béton                            Statistiques                  Surface au sol :        {{ getSurfaceSol() }} m²                          Volume total :        {{ getVolumeTotal() }} m³                          Nombre de murs :        {{ getNombreMurs() }}                          Nombre d\\'ouvertures :        {{ getNombreOuvertures() }}                          🔄 Réinitialiser                  📤 Exporter      '\n    var COMPONENTS = [{'name': 'App', 'selector': 'app-root'},{'name': 'CalculateurFenetresComponent', 'selector': 'app-calculateur-fenetres'},{'name': 'ColorSelectorComponent', 'selector': 'app-color-selector'},{'name': 'DimensionsControllerComponent', 'selector': 'app-dimensions-controller'},{'name': 'FenetresCalculatorComponent', 'selector': 'app-fenetres-calculator'},{'name': 'MursControllerComponent', 'selector': 'app-murs-controller'},{'name': 'OuverturesControllerComponent', 'selector': 'app-ouvertures-controller'},{'name': 'Scene3d', 'selector': 'app-scene3d'},{'name': 'Scene3dCoreComponent', 'selector': 'app-scene3d-core'},{'name': 'Scene3dRefactored', 'selector': 'app-scene3d'},{'name': 'StructureControllerComponent', 'selector': 'app-structure-controller'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'StructureControllerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StructureDimensions.html":{"url":"interfaces/StructureDimensions.html","title":"interface - StructureDimensions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StructureDimensions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/scene3d/controls/dimensions-controller.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les dimensions de structure\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hauteur\n                                        \n                                \n                                \n                                        \n                                            largeur\n                                        \n                                \n                                \n                                        \n                                            longueur\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hauteur\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hauteur:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        largeur\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        largeur:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        longueur\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        longueur:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n/**\n * Interface pour les dimensions d'un élément\n */\nexport interface Dimensions {\n  width: number;\n  height: number;\n  depth: number;\n}\n\n/**\n * Interface pour les dimensions de structure\n */\nexport interface StructureDimensions {\n  longueur: number;\n  largeur: number;\n  hauteur: number;\n}\n\n/**\n * Composant pour contrôler les dimensions en temps réel\n */\n@Component({\n  selector: 'app-dimensions-controller',\n  imports: [CommonModule, FormsModule],\n  templateUrl: './dimensions-controller.component.html',\n  styleUrl: './dimensions-controller.component.css',\n  standalone: true\n})\nexport class DimensionsControllerComponent {\n  @Input() isVisible: boolean = false;\n  @Input() showStructureDimensions: boolean = true;\n  @Input() showElementDimensions: boolean = false;\n  @Input() elementName: string = 'Élément';\n  @Input() structureDimensions: StructureDimensions = { longueur: 8, largeur: 5, hauteur: 2.5 };\n  @Input() elementDimensions: Dimensions = { width: 1, height: 2, depth: 0.1 };\n  @Input() minDimensions: Dimensions = { width: 0.5, height: 1, depth: 0.01 };\n  @Input() maxDimensions: Dimensions = { width: 5, height: 4, depth: 1 };\n\n  @Output() structureDimensionsChange = new EventEmitter();\n  @Output() elementDimensionsChange = new EventEmitter();\n  @Output() resetRequested = new EventEmitter();\n  @Output() applyRequested = new EventEmitter();\n\n  onStructureDimensionsChange(): void {\n    this.structureDimensionsChange.emit({ ...this.structureDimensions });\n  }\n\n  onElementDimensionsChange(): void {\n    this.elementDimensionsChange.emit({ ...this.elementDimensions });\n  }\n\n  resetDimensions(): void {\n    this.structureDimensions = { longueur: 8, largeur: 5, hauteur: 2.5 };\n    this.elementDimensions = { width: 1, height: 2, depth: 0.1 };\n    this.resetRequested.emit();\n  }\n\n  applyDimensions(): void {\n    this.applyRequested.emit();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationError.html":{"url":"interfaces/ValidationError.html","title":"interface - ValidationError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidationError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/validation/validation.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les erreurs de validation\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            field\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            severity\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            suggestion\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        severity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        severity:     \"low\" | \"medium\" | \"high\" | \"critical\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"low\" | \"medium\" | \"high\" | \"critical\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        suggestion\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        suggestion:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CommunicationService } from '../communication/communication.service';\n\n/**\n * Interface pour les résultats de validation\n */\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n  score: number; // Score de 0 à 100\n  timestamp: Date;\n}\n\n/**\n * Interface pour les erreurs de validation\n */\nexport interface ValidationError {\n  code: string;\n  message: string;\n  field: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  suggestion?: string;\n}\n\n/**\n * Interface pour les avertissements de validation\n */\nexport interface ValidationWarning {\n  code: string;\n  message: string;\n  field: string;\n  suggestion?: string;\n}\n\n/**\n * Interface pour les règles de validation\n */\nexport interface ValidationRule {\n  id: string;\n  name: string;\n  description: string;\n  category: 'dimensions' | 'proportions' | 'materials' | 'safety' | 'aesthetics';\n  weight: number; // Poids de la règle (1-10)\n  enabled: boolean;\n}\n\n/**\n * Interface pour les statistiques de validation\n */\nexport interface ValidationStats {\n  totalValidations: number;\n  successRate: number;\n  averageScore: number;\n  errorsByCategory: Record;\n  warningsByCategory: Record;\n  lastValidation: Date | null;\n}\n\n/**\n * Service de validation architecturale\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationService {\n  \n  private validationRules: ValidationRule[] = [];\n  private validationHistory: ValidationResult[] = [];\n  private statsSubject = new BehaviorSubject({\n    totalValidations: 0,\n    successRate: 0,\n    averageScore: 0,\n    errorsByCategory: {},\n    warningsByCategory: {},\n    lastValidation: null\n  });\n\n  public stats$ = this.statsSubject.asObservable();\n\n  constructor(private communicationService: CommunicationService) {\n    this.initializeValidationRules();\n    console.log('ValidationService initialisé');\n  }\n\n  /**\n   * Initialiser les règles de validation\n   */\n  private initializeValidationRules(): void {\n    this.validationRules = [\n      // Règles de dimensions\n      {\n        id: 'wall_thickness_min',\n        name: 'Épaisseur minimale des murs',\n        description: 'Les murs doivent avoir une épaisseur minimale de 10cm',\n        category: 'dimensions',\n        weight: 8,\n        enabled: true\n      },\n      {\n        id: 'wall_thickness_max',\n        name: 'Épaisseur maximale des murs',\n        description: 'Les murs ne doivent pas dépasser 1m d\\'épaisseur',\n        category: 'dimensions',\n        weight: 5,\n        enabled: true\n      },\n      {\n        id: 'door_height_min',\n        name: 'Hauteur minimale des portes',\n        description: 'Les portes doivent faire au moins 2m de haut',\n        category: 'dimensions',\n        weight: 9,\n        enabled: true\n      },\n      {\n        id: 'door_width_min',\n        name: 'Largeur minimale des portes',\n        description: 'Les portes doivent faire au moins 80cm de large',\n        category: 'dimensions',\n        weight: 9,\n        enabled: true\n      },\n      {\n        id: 'window_height_min',\n        name: 'Hauteur minimale des fenêtres',\n        description: 'Les fenêtres doivent faire au moins 1m de haut',\n        category: 'dimensions',\n        weight: 6,\n        enabled: true\n      },\n\n      // Règles de proportions\n      {\n        id: 'opening_ratio_max',\n        name: 'Ratio d\\'ouvertures maximum',\n        description: 'Les ouvertures ne doivent pas représenter plus de 50% de la surface des murs',\n        category: 'proportions',\n        weight: 7,\n        enabled: true\n      },\n      {\n        id: 'aspect_ratio_reasonable',\n        name: 'Ratio d\\'aspect raisonnable',\n        description: 'Le ratio largeur/hauteur des ouvertures doit être entre 0.3 et 3',\n        category: 'proportions',\n        weight: 4,\n        enabled: true\n      },\n\n      // Règles de sécurité\n      {\n        id: 'exit_accessibility',\n        name: 'Accessibilité des sorties',\n        description: 'Au moins une porte doit être accessible depuis chaque pièce',\n        category: 'safety',\n        weight: 10,\n        enabled: true\n      },\n      {\n        id: 'window_placement',\n        name: 'Placement des fenêtres',\n        description: 'Les fenêtres doivent être placées à une hauteur raisonnable',\n        category: 'safety',\n        weight: 6,\n        enabled: true\n      },\n\n      // Règles esthétiques\n      {\n        id: 'color_harmony',\n        name: 'Harmonie des couleurs',\n        description: 'Les couleurs doivent être harmonieuses',\n        category: 'aesthetics',\n        weight: 3,\n        enabled: true\n      },\n      {\n        id: 'symmetry_preference',\n        name: 'Préférence pour la symétrie',\n        description: 'La symétrie est préférable pour l\\'esthétique',\n        category: 'aesthetics',\n        weight: 2,\n        enabled: true\n      }\n    ];\n  }\n\n  /**\n   * Valider un bâtiment complet\n   */\n  validateBuilding(buildingData: any): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let totalScore = 0;\n    let maxScore = 0;\n\n    // Valider les murs\n    if (buildingData.murs) {\n      Object.entries(buildingData.murs).forEach(([wallType, wallData]: [string, any]) => {\n        const wallValidation = this.validateWall(wallData, wallType);\n        errors.push(...wallValidation.errors);\n        warnings.push(...wallValidation.warnings);\n        totalScore += wallValidation.score;\n        maxScore += 100;\n      });\n    }\n\n    // Valider les ouvertures\n    if (buildingData.murs) {\n      Object.entries(buildingData.murs).forEach(([wallType, wallData]: [string, any]) => {\n        if (wallData.ouvertures) {\n          wallData.ouvertures.forEach((opening: any) => {\n            const openingValidation = this.validateOpening(opening, wallType);\n            errors.push(...openingValidation.errors);\n            warnings.push(...openingValidation.warnings);\n            totalScore += openingValidation.score;\n            maxScore += 100;\n          });\n        }\n      });\n    }\n\n    // Valider les proportions globales\n    const proportionsValidation = this.validateProportions(buildingData);\n    errors.push(...proportionsValidation.errors);\n    warnings.push(...proportionsValidation.warnings);\n    totalScore += proportionsValidation.score;\n    maxScore += 100;\n\n    const finalScore = maxScore > 0 ? Math.round((totalScore / maxScore) * 100) : 100;\n    const isValid = errors.filter(e => e.severity === 'critical' || e.severity === 'high').length === 0;\n\n    const result: ValidationResult = {\n      isValid,\n      errors,\n      warnings,\n      score: finalScore,\n      timestamp: new Date()\n    };\n\n    this.validationHistory.push(result);\n    this.updateStats();\n    \n    // Émettre l'événement de validation\n    this.communicationService.emitValidationResult(result);\n\n    return result;\n  }\n\n  /**\n   * Valider un mur\n   */\n  validateWall(wallData: any, wallType: string): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let score = 100;\n\n    // Épaisseur minimale\n    if (wallData.epaisseur  1.0) {\n      warnings.push({\n        code: 'wall_thickness_max',\n        message: `Le mur ${wallType} a une épaisseur très importante (${wallData.epaisseur}m)`,\n        field: 'epaisseur',\n        suggestion: 'Considérer une épaisseur plus standard'\n      });\n      score -= 10;\n    }\n\n    // Dimensions raisonnables\n    if (wallData.dimensions.height  e.severity === 'critical' || e.severity === 'high').length === 0,\n      errors,\n      warnings,\n      score: Math.max(0, score),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Valider une ouverture\n   */\n  validateOpening(openingData: any, wallType: string): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let score = 100;\n\n    if (openingData.type === 'porte') {\n      // Hauteur minimale des portes\n      if (openingData.dimensions.height  1.2) {\n        warnings.push({\n          code: 'door_width_max',\n          message: `La porte sur le mur ${wallType} est très large (${openingData.dimensions.width}m)`,\n          field: 'dimensions.width',\n          suggestion: 'Considérer une largeur plus standard'\n        });\n        score -= 10;\n      }\n    }\n\n    if (openingData.type === 'fenetre') {\n      // Hauteur minimale des fenêtres\n      if (openingData.dimensions.height  3) {\n        warnings.push({\n          code: 'aspect_ratio_reasonable',\n          message: `La fenêtre sur le mur ${wallType} a un ratio d'aspect inhabituel (${aspectRatio.toFixed(2)})`,\n          field: 'dimensions',\n          suggestion: 'Considérer un ratio entre 0.3 et 3'\n        });\n        score -= 15;\n      }\n    }\n\n    return {\n      isValid: errors.filter(e => e.severity === 'critical' || e.severity === 'high').length === 0,\n      errors,\n      warnings,\n      score: Math.max(0, score),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Valider les proportions globales\n   */\n  validateProportions(buildingData: any): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let score = 100;\n\n    // Calculer le pourcentage d'ouvertures\n    let totalWallSurface = 0;\n    let totalOpeningSurface = 0;\n\n    if (buildingData.murs) {\n      Object.values(buildingData.murs).forEach((wall: any) => {\n        totalWallSurface += wall.dimensions.width * wall.dimensions.height;\n        if (wall.ouvertures) {\n          wall.ouvertures.forEach((opening: any) => {\n            totalOpeningSurface += opening.dimensions.width * opening.dimensions.height;\n          });\n        }\n      });\n    }\n\n    const openingPercentage = totalWallSurface > 0 ? (totalOpeningSurface / totalWallSurface) * 100 : 0;\n\n    if (openingPercentage > 50) {\n      errors.push({\n        code: 'opening_ratio_max',\n        message: `Trop d'ouvertures (${openingPercentage.toFixed(1)}% de la surface des murs)`,\n        field: 'ouvertures',\n        severity: 'medium',\n        suggestion: 'Réduire le nombre ou la taille des ouvertures'\n      });\n      score -= 30;\n    } else if (openingPercentage > 30) {\n      warnings.push({\n        code: 'opening_ratio_high',\n        message: `Beaucoup d'ouvertures (${openingPercentage.toFixed(1)}% de la surface des murs)`,\n        field: 'ouvertures',\n        suggestion: 'Vérifier l\\'isolation thermique'\n      });\n      score -= 10;\n    }\n\n    return {\n      isValid: errors.filter(e => e.severity === 'critical' || e.severity === 'high').length === 0,\n      errors,\n      warnings,\n      score: Math.max(0, score),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Obtenir les règles de validation\n   */\n  getValidationRules(): ValidationRule[] {\n    return [...this.validationRules];\n  }\n\n  /**\n   * Activer/désactiver une règle\n   */\n  toggleRule(ruleId: string): void {\n    const rule = this.validationRules.find(r => r.id === ruleId);\n    if (rule) {\n      rule.enabled = !rule.enabled;\n      console.log(`Règle ${ruleId} ${rule.enabled ? 'activée' : 'désactivée'}`);\n    }\n  }\n\n  /**\n   * Obtenir l'historique des validations\n   */\n  getValidationHistory(): ValidationResult[] {\n    return [...this.validationHistory];\n  }\n\n  /**\n   * Obtenir les statistiques de validation\n   */\n  getStats(): ValidationStats {\n    return this.statsSubject.value;\n  }\n\n  /**\n   * Obtenir les statistiques en tant qu'Observable\n   */\n  getStatsObservable(): Observable {\n    return this.stats$;\n  }\n\n  /**\n   * Mettre à jour les statistiques\n   */\n  private updateStats(): void {\n    const totalValidations = this.validationHistory.length;\n    const successfulValidations = this.validationHistory.filter(v => v.isValid).length;\n    const successRate = totalValidations > 0 ? (successfulValidations / totalValidations) * 100 : 0;\n    const averageScore = totalValidations > 0 ? \n      this.validationHistory.reduce((sum, v) => sum + v.score, 0) / totalValidations : 0;\n\n    const errorsByCategory: Record = {};\n    const warningsByCategory: Record = {};\n\n    this.validationHistory.forEach(validation => {\n      validation.errors.forEach(error => {\n        const rule = this.validationRules.find(r => r.id === error.code);\n        if (rule) {\n          errorsByCategory[rule.category] = (errorsByCategory[rule.category] || 0) + 1;\n        }\n      });\n\n      validation.warnings.forEach(warning => {\n        const rule = this.validationRules.find(r => r.id === warning.code);\n        if (rule) {\n          warningsByCategory[rule.category] = (warningsByCategory[rule.category] || 0) + 1;\n        }\n      });\n    });\n\n    const stats: ValidationStats = {\n      totalValidations,\n      successRate: Math.round(successRate * 100) / 100,\n      averageScore: Math.round(averageScore * 100) / 100,\n      errorsByCategory,\n      warningsByCategory,\n      lastValidation: totalValidations > 0 ? this.validationHistory[totalValidations - 1].timestamp : null\n    };\n\n    this.statsSubject.next(stats);\n  }\n\n  /**\n   * Effacer l'historique des validations\n   */\n  clearHistory(): void {\n    this.validationHistory = [];\n    this.updateStats();\n    console.log('Historique des validations effacé');\n  }\n\n  /**\n   * Exporter les données de validation\n   */\n  exportValidationData(): string {\n    const data = {\n      rules: this.validationRules,\n      history: this.validationHistory,\n      stats: this.getStats(),\n      exportDate: new Date()\n    };\n    \n    return JSON.stringify(data, null, 2);\n  }\n\n  /**\n   * Importer les données de validation\n   */\n  importValidationData(dataJson: string): boolean {\n    try {\n      const data = JSON.parse(dataJson);\n      \n      if (data.rules) {\n        this.validationRules = data.rules;\n      }\n      \n      if (data.history) {\n        this.validationHistory = data.history;\n      }\n      \n      this.updateStats();\n      console.log('Données de validation importées avec succès');\n      return true;\n    } catch (error) {\n      console.error('Erreur lors de l\\'importation des données de validation:', error);\n      return false;\n    }\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationMur.html":{"url":"interfaces/ValidationMur.html","title":"interface - ValidationMur","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidationMur\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/mur/mur.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour la validation d'un mur\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            avertissements\n                                        \n                                \n                                \n                                        \n                                            erreurs\n                                        \n                                \n                                \n                                        \n                                            isValid\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        avertissements\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        avertissements:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        erreurs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        erreurs:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isValid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isValid:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigurationService, ConfigurationMur } from '../configuration/configuration.service';\n\n/**\n * Interface pour les propriétés d'un mur\n */\nexport interface ProprietesMur {\n  id: string;\n  nom: string;\n  type: 'principal' | 'arriere' | 'gauche' | 'droit';\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n  epaisseur: number;\n  surface: number;\n  volume: number;\n  nombreOuvertures: number;\n  pourcentageOuvertures: number;\n  dateCreation: Date;\n  derniereModification: Date;\n}\n\n/**\n * Interface pour les calculs géométriques d'un mur\n */\nexport interface CalculsMur {\n  surfaceTotale: number;\n  surfaceOuvertures: number;\n  surfaceNet: number;\n  volume: number;\n  perimetre: number;\n  centreGravite: { x: number; y: number; z: number };\n}\n\n/**\n * Interface pour la validation d'un mur\n */\nexport interface ValidationMur {\n  isValid: boolean;\n  erreurs: string[];\n  avertissements: string[];\n}\n\n/**\n * Service de gestion des murs\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MurService {\n  \n  private mursActuels = new BehaviorSubject([]);\n  public murs$ = this.mursActuels.asObservable();\n\n  constructor(private configurationService: ConfigurationService) {\n    // Initialiser avec la configuration actuelle\n    this.initialiserMurs();\n    \n    // Écouter les changements de configuration\n    this.configurationService.getConfigurationObservable().subscribe(() => {\n      this.initialiserMurs();\n    });\n  }\n\n  /**\n   * Initialiser les murs à partir de la configuration\n   */\n  private initialiserMurs(): void {\n    const config = this.configurationService.getConfiguration();\n    const murs: ProprietesMur[] = [];\n    \n    Object.entries(config.murs).forEach(([type, murConfig]) => {\n      const calculs = this.calculerProprietesMur(murConfig);\n      const mur: ProprietesMur = {\n        id: `mur_${type}`,\n        nom: this.getNomMur(type),\n        type: type as ProprietesMur['type'],\n        position: murConfig.position,\n        dimensions: murConfig.dimensions,\n        couleur: murConfig.couleur,\n        epaisseur: murConfig.epaisseur,\n        surface: calculs.surfaceTotale,\n        volume: calculs.volume,\n        nombreOuvertures: murConfig.ouvertures.length,\n        pourcentageOuvertures: calculs.surfaceOuvertures > 0 ? \n          Math.round((calculs.surfaceOuvertures / calculs.surfaceTotale) * 100 * 100) / 100 : 0,\n        dateCreation: new Date(),\n        derniereModification: new Date()\n      };\n      murs.push(mur);\n    });\n    \n    this.mursActuels.next(murs);\n  }\n\n  /**\n   * Obtenir le nom d'un mur selon son type\n   */\n  private getNomMur(type: string): string {\n    const noms: Record = {\n      principal: 'Mur Principal',\n      arriere: 'Mur Arrière',\n      gauche: 'Mur Gauche',\n      droit: 'Mur Droit'\n    };\n    return noms[type] || 'Mur Inconnu';\n  }\n\n  /**\n   * Calculer les propriétés géométriques d'un mur\n   */\n  private calculerProprietesMur(murConfig: ConfigurationMur): CalculsMur {\n    const surfaceTotale = murConfig.dimensions.width * murConfig.dimensions.height;\n    const surfaceOuvertures = murConfig.ouvertures.reduce((total, ouverture) => {\n      return total + (ouverture.dimensions.width * ouverture.dimensions.height);\n    }, 0);\n    const surfaceNet = surfaceTotale - surfaceOuvertures;\n    const volume = surfaceTotale * murConfig.dimensions.depth;\n    const perimetre = 2 * (murConfig.dimensions.width + murConfig.dimensions.height);\n    \n    const centreGravite = {\n      x: murConfig.position.x,\n      y: murConfig.position.y + (murConfig.dimensions.height / 2),\n      z: murConfig.position.z\n    };\n\n    return {\n      surfaceTotale: Math.round(surfaceTotale * 100) / 100,\n      surfaceOuvertures: Math.round(surfaceOuvertures * 100) / 100,\n      surfaceNet: Math.round(surfaceNet * 100) / 100,\n      volume: Math.round(volume * 100) / 100,\n      perimetre: Math.round(perimetre * 100) / 100,\n      centreGravite\n    };\n  }\n\n  /**\n   * Obtenir tous les murs\n   */\n  getMurs(): ProprietesMur[] {\n    return this.mursActuels.value;\n  }\n\n  /**\n   * Obtenir les murs en tant qu'Observable\n   */\n  getMursObservable(): Observable {\n    return this.murs$;\n  }\n\n  /**\n   * Obtenir un mur par son ID\n   */\n  getMurParId(id: string): ProprietesMur | undefined {\n    return this.mursActuels.value.find(mur => mur.id === id);\n  }\n\n  /**\n   * Obtenir un mur par son type\n   */\n  getMurParType(type: ProprietesMur['type']): ProprietesMur | undefined {\n    return this.mursActuels.value.find(mur => mur.type === type);\n  }\n\n  /**\n   * Obtenir le mur principal\n   */\n  getMurPrincipal(): ProprietesMur | undefined {\n    return this.getMurParType('principal');\n  }\n\n  /**\n   * Obtenir le mur arrière\n   */\n  getMurArriere(): ProprietesMur | undefined {\n    return this.getMurParType('arriere');\n  }\n\n  /**\n   * Obtenir le mur gauche\n   */\n  getMurGauche(): ProprietesMur | undefined {\n    return this.getMurParType('gauche');\n  }\n\n  /**\n   * Obtenir le mur droit\n   */\n  getMurDroit(): ProprietesMur | undefined {\n    return this.getMurParType('droit');\n  }\n\n  /**\n   * Modifier la position d'un mur\n   */\n  modifierPositionMur(type: ProprietesMur['type'], nouvellePosition: { x: number; y: number; z: number }): void {\n    try {\n      // Validation des paramètres\n      if (!type || !nouvellePosition) {\n        throw new Error('Paramètres manquants pour la modification de position');\n      }\n      \n      if (typeof nouvellePosition.x !== 'number' || \n          typeof nouvellePosition.y !== 'number' || \n          typeof nouvellePosition.z !== 'number') {\n        throw new Error('Position invalide: coordonnées doivent être des nombres');\n      }\n      \n      const config = this.configurationService.getConfiguration();\n      const murConfig = config.murs[type];\n      \n      if (!murConfig) {\n        throw new Error(`Mur de type '${type}' non trouvé`);\n      }\n      \n      murConfig.position = nouvellePosition;\n      this.configurationService.mettreAJourMur(type, murConfig);\n    } catch (error) {\n      console.error('Erreur lors de la modification de position du mur:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Modifier les dimensions d'un mur\n   */\n  modifierDimensionsMur(type: ProprietesMur['type'], nouvellesDimensions: { width: number; height: number; depth: number }): void {\n    const config = this.configurationService.getConfiguration();\n    const murConfig = config.murs[type];\n    \n    if (murConfig) {\n      murConfig.dimensions = nouvellesDimensions;\n      this.configurationService.mettreAJourMur(type, murConfig);\n    }\n  }\n\n  /**\n   * Modifier la couleur d'un mur\n   */\n  modifierCouleurMur(type: ProprietesMur['type'], nouvelleCouleur: number): void {\n    const config = this.configurationService.getConfiguration();\n    const murConfig = config.murs[type];\n    \n    if (murConfig) {\n      murConfig.couleur = nouvelleCouleur;\n      this.configurationService.mettreAJourMur(type, murConfig);\n    }\n  }\n\n  /**\n   * Modifier l'épaisseur d'un mur\n   */\n  modifierEpaisseurMur(type: ProprietesMur['type'], nouvelleEpaisseur: number): void {\n    const config = this.configurationService.getConfiguration();\n    const murConfig = config.murs[type];\n    \n    if (murConfig) {\n      murConfig.epaisseur = nouvelleEpaisseur;\n      murConfig.dimensions.depth = nouvelleEpaisseur;\n      this.configurationService.mettreAJourMur(type, murConfig);\n    }\n  }\n\n  /**\n   * Valider un mur\n   */\n  validerMur(mur: ProprietesMur): ValidationMur {\n    const erreurs: string[] = [];\n    const avertissements: string[] = [];\n\n    // Validation des dimensions\n    if (mur.dimensions.width  1) {\n      avertissements.push('L\\'épaisseur du mur est très épaisse (> 1m)');\n    }\n\n    // Validation du pourcentage d'ouvertures\n    if (mur.pourcentageOuvertures > 50) {\n      avertissements.push('Le mur a plus de 50% d\\'ouvertures');\n    }\n\n    // Validation de la position\n    if (Math.abs(mur.position.x) > 10 || Math.abs(mur.position.y) > 10 || Math.abs(mur.position.z) > 10) {\n      avertissements.push('La position du mur est très éloignée de l\\'origine');\n    }\n\n    return {\n      isValid: erreurs.length === 0,\n      erreurs,\n      avertissements\n    };\n  }\n\n  /**\n   * Obtenir les statistiques des murs\n   */\n  getStatistiquesMurs(): {\n    nombreTotal: number;\n    surfaceTotale: number;\n    volumeTotal: number;\n    nombreOuvertures: number;\n    pourcentageOuverturesMoyen: number;\n  } {\n    const murs = this.getMurs();\n    \n    const nombreTotal = murs.length;\n    const surfaceTotale = murs.reduce((total, mur) => total + mur.surface, 0);\n    const volumeTotal = murs.reduce((total, mur) => total + mur.volume, 0);\n    const nombreOuvertures = murs.reduce((total, mur) => total + mur.nombreOuvertures, 0);\n    const pourcentageOuverturesMoyen = murs.length > 0 ? \n      murs.reduce((total, mur) => total + mur.pourcentageOuvertures, 0) / murs.length : 0;\n\n    return {\n      nombreTotal,\n      surfaceTotale: Math.round(surfaceTotale * 100) / 100,\n      volumeTotal: Math.round(volumeTotal * 100) / 100,\n      nombreOuvertures,\n      pourcentageOuverturesMoyen: Math.round(pourcentageOuverturesMoyen * 100) / 100\n    };\n  }\n\n  /**\n   * Obtenir les murs avec le plus d'ouvertures\n   */\n  getMursAvecPlusOuvertures(): ProprietesMur[] {\n    const murs = this.getMurs();\n    const maxOuvertures = Math.max(...murs.map(mur => mur.nombreOuvertures));\n    return murs.filter(mur => mur.nombreOuvertures === maxOuvertures);\n  }\n\n  /**\n   * Obtenir les murs sans ouvertures\n   */\n  getMursSansOuvertures(): ProprietesMur[] {\n    return this.getMurs().filter(mur => mur.nombreOuvertures === 0);\n  }\n\n  /**\n   * Calculer la distance entre deux murs\n   */\n  calculerDistanceEntreMurs(mur1: ProprietesMur, mur2: ProprietesMur): number {\n    const dx = mur1.position.x - mur2.position.x;\n    const dy = mur1.position.y - mur2.position.y;\n    const dz = mur1.position.z - mur2.position.z;\n    \n    return Math.round(Math.sqrt(dx * dx + dy * dy + dz * dz) * 100) / 100;\n  }\n\n  /**\n   * Obtenir les murs adjacents\n   */\n  getMursAdjacents(mur: ProprietesMur): ProprietesMur[] {\n    const murs = this.getMurs();\n    const mursAdjacents: ProprietesMur[] = [];\n    \n    murs.forEach(autreMur => {\n      if (autreMur.id !== mur.id) {\n        const distance = this.calculerDistanceEntreMurs(mur, autreMur);\n        // Considérer comme adjacent si la distance est inférieure à 5m\n        if (distance \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationOuverture.html":{"url":"interfaces/ValidationOuverture.html","title":"interface - ValidationOuverture","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidationOuverture\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/ouverture/ouverture.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour la validation d'une ouverture\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            avertissements\n                                        \n                                \n                                \n                                        \n                                            erreurs\n                                        \n                                \n                                \n                                        \n                                            isValid\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        avertissements\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        avertissements:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        erreurs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        erreurs:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isValid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isValid:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigurationService, ConfigurationOuverture } from '../configuration/configuration.service';\n\n/**\n * Interface pour les propriétés d'une ouverture\n */\nexport interface ProprietesOuverture {\n  id: string;\n  nom: string;\n  type: 'porte' | 'fenetre';\n  position: { x: number; y: number; z: number };\n  dimensions: { width: number; height: number; depth: number };\n  couleur: number;\n  surface: number;\n  volume: number;\n  murParent: 'principal' | 'arriere' | 'gauche' | 'droit';\n  dateCreation: Date;\n  derniereModification: Date;\n}\n\n/**\n * Interface pour les calculs d'une ouverture\n */\nexport interface CalculsOuverture {\n  surface: number;\n  volume: number;\n  perimetre: number;\n  centreGravite: { x: number; y: number; z: number };\n  ratioAspect: number; // largeur/hauteur\n}\n\n/**\n * Interface pour la validation d'une ouverture\n */\nexport interface ValidationOuverture {\n  isValid: boolean;\n  erreurs: string[];\n  avertissements: string[];\n}\n\n/**\n * Interface pour les statistiques des ouvertures\n */\nexport interface StatistiquesOuvertures {\n  nombreTotal: number;\n  nombrePortes: number;\n  nombreFenetres: number;\n  surfaceTotale: number;\n  surfacePortes: number;\n  surfaceFenetres: number;\n  pourcentagePortes: number;\n  pourcentageFenetres: number;\n}\n\n/**\n * Service de gestion des ouvertures (portes et fenêtres)\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class OuvertureService {\n  \n  private ouverturesActuelles = new BehaviorSubject([]);\n  public ouvertures$ = this.ouverturesActuelles.asObservable();\n\n  constructor(private configurationService: ConfigurationService) {\n    // Initialiser avec la configuration actuelle\n    this.initialiserOuvertures();\n    \n    // Écouter les changements de configuration\n    this.configurationService.getConfigurationObservable().subscribe(() => {\n      this.initialiserOuvertures();\n    });\n  }\n\n  /**\n   * Initialiser les ouvertures à partir de la configuration\n   */\n  private initialiserOuvertures(): void {\n    const config = this.configurationService.getConfiguration();\n    const ouvertures: ProprietesOuverture[] = [];\n    \n    Object.entries(config.murs).forEach(([typeMur, murConfig]) => {\n      murConfig.ouvertures.forEach(ouvertureConfig => {\n        const calculs = this.calculerProprietesOuverture(ouvertureConfig);\n        const ouverture: ProprietesOuverture = {\n          id: ouvertureConfig.id,\n          nom: ouvertureConfig.nom || `${ouvertureConfig.type}_${ouvertureConfig.id}`,\n          type: ouvertureConfig.type,\n          position: ouvertureConfig.position,\n          dimensions: ouvertureConfig.dimensions,\n          couleur: ouvertureConfig.couleur,\n          surface: calculs.surface,\n          volume: calculs.volume,\n          murParent: typeMur as ProprietesOuverture['murParent'],\n          dateCreation: new Date(),\n          derniereModification: new Date()\n        };\n        ouvertures.push(ouverture);\n      });\n    });\n    \n    this.ouverturesActuelles.next(ouvertures);\n  }\n\n  /**\n   * Calculer les propriétés géométriques d'une ouverture\n   */\n  private calculerProprietesOuverture(ouvertureConfig: ConfigurationOuverture): CalculsOuverture {\n    const surface = ouvertureConfig.dimensions.width * ouvertureConfig.dimensions.height;\n    const volume = surface * ouvertureConfig.dimensions.depth;\n    const perimetre = 2 * (ouvertureConfig.dimensions.width + ouvertureConfig.dimensions.height);\n    const ratioAspect = ouvertureConfig.dimensions.width / ouvertureConfig.dimensions.height;\n    \n    const centreGravite = {\n      x: ouvertureConfig.position.x,\n      y: ouvertureConfig.position.y + (ouvertureConfig.dimensions.height / 2),\n      z: ouvertureConfig.position.z\n    };\n\n    return {\n      surface: Math.round(surface * 100) / 100,\n      volume: Math.round(volume * 100) / 100,\n      perimetre: Math.round(perimetre * 100) / 100,\n      centreGravite,\n      ratioAspect: Math.round(ratioAspect * 100) / 100\n    };\n  }\n\n  /**\n   * Obtenir toutes les ouvertures\n   */\n  getOuvertures(): ProprietesOuverture[] {\n    return this.ouverturesActuelles.value;\n  }\n\n  /**\n   * Obtenir les ouvertures en tant qu'Observable\n   */\n  getOuverturesObservable(): Observable {\n    return this.ouvertures$;\n  }\n\n  /**\n   * Obtenir une ouverture par son ID\n   */\n  getOuvertureParId(id: string): ProprietesOuverture | undefined {\n    return this.ouverturesActuelles.value.find(ouverture => ouverture.id === id);\n  }\n\n  /**\n   * Obtenir les ouvertures par type\n   */\n  getOuverturesParType(type: 'porte' | 'fenetre'): ProprietesOuverture[] {\n    return this.ouverturesActuelles.value.filter(ouverture => ouverture.type === type);\n  }\n\n  /**\n   * Obtenir toutes les portes\n   */\n  getPortes(): ProprietesOuverture[] {\n    return this.getOuverturesParType('porte');\n  }\n\n  /**\n   * Obtenir toutes les fenêtres\n   */\n  getFenetres(): ProprietesOuverture[] {\n    return this.getOuverturesParType('fenetre');\n  }\n\n  /**\n   * Obtenir les ouvertures d'un mur spécifique\n   */\n  getOuverturesParMur(murParent: ProprietesOuverture['murParent']): ProprietesOuverture[] {\n    return this.ouverturesActuelles.value.filter(ouverture => ouverture.murParent === murParent);\n  }\n\n  /**\n   * Ajouter une nouvelle ouverture\n   */\n  ajouterOuverture(\n    murParent: ProprietesOuverture['murParent'],\n    nouvelleOuverture: Omit\n  ): void {\n    try {\n      // Validation des paramètres\n      if (!murParent || !nouvelleOuverture) {\n        throw new Error('Paramètres manquants pour l\\'ajout d\\'ouverture');\n      }\n      \n      if (!nouvelleOuverture.type || !nouvelleOuverture.dimensions || !nouvelleOuverture.position) {\n        throw new Error('Ouverture incomplète: propriétés manquantes');\n      }\n      \n      if (nouvelleOuverture.dimensions.width  o.id === id);\n      \n      if (ouvertureConfig) {\n        ouvertureConfig.position = nouvellePosition;\n        this.configurationService.mettreAJourMur(ouverture.murParent, murConfig);\n      }\n    }\n  }\n\n  /**\n   * Modifier les dimensions d'une ouverture\n   */\n  modifierDimensionsOuverture(id: string, nouvellesDimensions: { width: number; height: number; depth: number }): void {\n    const ouverture = this.getOuvertureParId(id);\n    if (ouverture) {\n      const config = this.configurationService.getConfiguration();\n      const murConfig = config.murs[ouverture.murParent];\n      const ouvertureConfig = murConfig.ouvertures.find(o => o.id === id);\n      \n      if (ouvertureConfig) {\n        ouvertureConfig.dimensions = nouvellesDimensions;\n        this.configurationService.mettreAJourMur(ouverture.murParent, murConfig);\n      }\n    }\n  }\n\n  /**\n   * Modifier la couleur d'une ouverture\n   */\n  modifierCouleurOuverture(id: string, nouvelleCouleur: number): void {\n    const ouverture = this.getOuvertureParId(id);\n    if (ouverture) {\n      const config = this.configurationService.getConfiguration();\n      const murConfig = config.murs[ouverture.murParent];\n      const ouvertureConfig = murConfig.ouvertures.find(o => o.id === id);\n      \n      if (ouvertureConfig) {\n        ouvertureConfig.couleur = nouvelleCouleur;\n        this.configurationService.mettreAJourMur(ouverture.murParent, murConfig);\n      }\n    }\n  }\n\n  /**\n   * Valider une ouverture\n   */\n  validerOuverture(ouverture: ProprietesOuverture): ValidationOuverture {\n    const erreurs: string[] = [];\n    const avertissements: string[] = [];\n\n    // Validation des dimensions\n    if (ouverture.dimensions.width  1.2) {\n        avertissements.push('La largeur de la porte est supérieure à 1.2m');\n      }\n    }\n\n    // Validation spécifique aux fenêtres\n    if (ouverture.type === 'fenetre') {\n      if (ouverture.dimensions.height  3) {\n      avertissements.push('Le ratio largeur/hauteur est très élevé (> 3)');\n    }\n    if (ratioAspect  total + ouverture.surface, 0);\n    const surfacePortes = portes.reduce((total, porte) => total + porte.surface, 0);\n    const surfaceFenetres = fenetres.reduce((total, fenetre) => total + fenetre.surface, 0);\n    \n    const pourcentagePortes = surfaceTotale > 0 ? (surfacePortes / surfaceTotale) * 100 : 0;\n    const pourcentageFenetres = surfaceTotale > 0 ? (surfaceFenetres / surfaceTotale) * 100 : 0;\n\n    return {\n      nombreTotal,\n      nombrePortes,\n      nombreFenetres,\n      surfaceTotale: Math.round(surfaceTotale * 100) / 100,\n      surfacePortes: Math.round(surfacePortes * 100) / 100,\n      surfaceFenetres: Math.round(surfaceFenetres * 100) / 100,\n      pourcentagePortes: Math.round(pourcentagePortes * 100) / 100,\n      pourcentageFenetres: Math.round(pourcentageFenetres * 100) / 100\n    };\n  }\n\n  /**\n   * Obtenir la plus grande ouverture\n   */\n  getPlusGrandeOuverture(): ProprietesOuverture | undefined {\n    const ouvertures = this.getOuvertures();\n    if (ouvertures.length === 0) return undefined;\n    \n    return ouvertures.reduce((plusGrande, ouverture) => \n      ouverture.surface > plusGrande.surface ? ouverture : plusGrande\n    );\n  }\n\n  /**\n   * Obtenir la plus petite ouverture\n   */\n  getPlusPetiteOuverture(): ProprietesOuverture | undefined {\n    const ouvertures = this.getOuvertures();\n    if (ouvertures.length === 0) return undefined;\n    \n    return ouvertures.reduce((plusPetite, ouverture) => \n      ouverture.surface  \n      ouverture.surface >= minSurface && ouverture.surface  {\n      if (autreOuverture.id !== ouverture.id) {\n        const distance = this.calculerDistanceEntreOuvertures(ouverture, autreOuverture);\n        if (distance  ouverture.couleur === couleur);\n  }\n\n  /**\n   * Obtenir les couleurs utilisées\n   */\n  getCouleursUtilisees(): number[] {\n    const ouvertures = this.getOuvertures();\n    const couleurs = new Set();\n    \n    ouvertures.forEach(ouverture => {\n      couleurs.add(ouverture.couleur);\n    });\n    \n    return Array.from(couleurs);\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationResult.html":{"url":"interfaces/ValidationResult.html","title":"interface - ValidationResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidationResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/validation/validation.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les résultats de validation\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            errors\n                                        \n                                \n                                \n                                        \n                                            isValid\n                                        \n                                \n                                \n                                        \n                                            score\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                                \n                                        \n                                            warnings\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errors:         ValidationError[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ValidationError[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isValid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isValid:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        score\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        score:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        warnings\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        warnings:         ValidationWarning[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ValidationWarning[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CommunicationService } from '../communication/communication.service';\n\n/**\n * Interface pour les résultats de validation\n */\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n  score: number; // Score de 0 à 100\n  timestamp: Date;\n}\n\n/**\n * Interface pour les erreurs de validation\n */\nexport interface ValidationError {\n  code: string;\n  message: string;\n  field: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  suggestion?: string;\n}\n\n/**\n * Interface pour les avertissements de validation\n */\nexport interface ValidationWarning {\n  code: string;\n  message: string;\n  field: string;\n  suggestion?: string;\n}\n\n/**\n * Interface pour les règles de validation\n */\nexport interface ValidationRule {\n  id: string;\n  name: string;\n  description: string;\n  category: 'dimensions' | 'proportions' | 'materials' | 'safety' | 'aesthetics';\n  weight: number; // Poids de la règle (1-10)\n  enabled: boolean;\n}\n\n/**\n * Interface pour les statistiques de validation\n */\nexport interface ValidationStats {\n  totalValidations: number;\n  successRate: number;\n  averageScore: number;\n  errorsByCategory: Record;\n  warningsByCategory: Record;\n  lastValidation: Date | null;\n}\n\n/**\n * Service de validation architecturale\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationService {\n  \n  private validationRules: ValidationRule[] = [];\n  private validationHistory: ValidationResult[] = [];\n  private statsSubject = new BehaviorSubject({\n    totalValidations: 0,\n    successRate: 0,\n    averageScore: 0,\n    errorsByCategory: {},\n    warningsByCategory: {},\n    lastValidation: null\n  });\n\n  public stats$ = this.statsSubject.asObservable();\n\n  constructor(private communicationService: CommunicationService) {\n    this.initializeValidationRules();\n    console.log('ValidationService initialisé');\n  }\n\n  /**\n   * Initialiser les règles de validation\n   */\n  private initializeValidationRules(): void {\n    this.validationRules = [\n      // Règles de dimensions\n      {\n        id: 'wall_thickness_min',\n        name: 'Épaisseur minimale des murs',\n        description: 'Les murs doivent avoir une épaisseur minimale de 10cm',\n        category: 'dimensions',\n        weight: 8,\n        enabled: true\n      },\n      {\n        id: 'wall_thickness_max',\n        name: 'Épaisseur maximale des murs',\n        description: 'Les murs ne doivent pas dépasser 1m d\\'épaisseur',\n        category: 'dimensions',\n        weight: 5,\n        enabled: true\n      },\n      {\n        id: 'door_height_min',\n        name: 'Hauteur minimale des portes',\n        description: 'Les portes doivent faire au moins 2m de haut',\n        category: 'dimensions',\n        weight: 9,\n        enabled: true\n      },\n      {\n        id: 'door_width_min',\n        name: 'Largeur minimale des portes',\n        description: 'Les portes doivent faire au moins 80cm de large',\n        category: 'dimensions',\n        weight: 9,\n        enabled: true\n      },\n      {\n        id: 'window_height_min',\n        name: 'Hauteur minimale des fenêtres',\n        description: 'Les fenêtres doivent faire au moins 1m de haut',\n        category: 'dimensions',\n        weight: 6,\n        enabled: true\n      },\n\n      // Règles de proportions\n      {\n        id: 'opening_ratio_max',\n        name: 'Ratio d\\'ouvertures maximum',\n        description: 'Les ouvertures ne doivent pas représenter plus de 50% de la surface des murs',\n        category: 'proportions',\n        weight: 7,\n        enabled: true\n      },\n      {\n        id: 'aspect_ratio_reasonable',\n        name: 'Ratio d\\'aspect raisonnable',\n        description: 'Le ratio largeur/hauteur des ouvertures doit être entre 0.3 et 3',\n        category: 'proportions',\n        weight: 4,\n        enabled: true\n      },\n\n      // Règles de sécurité\n      {\n        id: 'exit_accessibility',\n        name: 'Accessibilité des sorties',\n        description: 'Au moins une porte doit être accessible depuis chaque pièce',\n        category: 'safety',\n        weight: 10,\n        enabled: true\n      },\n      {\n        id: 'window_placement',\n        name: 'Placement des fenêtres',\n        description: 'Les fenêtres doivent être placées à une hauteur raisonnable',\n        category: 'safety',\n        weight: 6,\n        enabled: true\n      },\n\n      // Règles esthétiques\n      {\n        id: 'color_harmony',\n        name: 'Harmonie des couleurs',\n        description: 'Les couleurs doivent être harmonieuses',\n        category: 'aesthetics',\n        weight: 3,\n        enabled: true\n      },\n      {\n        id: 'symmetry_preference',\n        name: 'Préférence pour la symétrie',\n        description: 'La symétrie est préférable pour l\\'esthétique',\n        category: 'aesthetics',\n        weight: 2,\n        enabled: true\n      }\n    ];\n  }\n\n  /**\n   * Valider un bâtiment complet\n   */\n  validateBuilding(buildingData: any): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let totalScore = 0;\n    let maxScore = 0;\n\n    // Valider les murs\n    if (buildingData.murs) {\n      Object.entries(buildingData.murs).forEach(([wallType, wallData]: [string, any]) => {\n        const wallValidation = this.validateWall(wallData, wallType);\n        errors.push(...wallValidation.errors);\n        warnings.push(...wallValidation.warnings);\n        totalScore += wallValidation.score;\n        maxScore += 100;\n      });\n    }\n\n    // Valider les ouvertures\n    if (buildingData.murs) {\n      Object.entries(buildingData.murs).forEach(([wallType, wallData]: [string, any]) => {\n        if (wallData.ouvertures) {\n          wallData.ouvertures.forEach((opening: any) => {\n            const openingValidation = this.validateOpening(opening, wallType);\n            errors.push(...openingValidation.errors);\n            warnings.push(...openingValidation.warnings);\n            totalScore += openingValidation.score;\n            maxScore += 100;\n          });\n        }\n      });\n    }\n\n    // Valider les proportions globales\n    const proportionsValidation = this.validateProportions(buildingData);\n    errors.push(...proportionsValidation.errors);\n    warnings.push(...proportionsValidation.warnings);\n    totalScore += proportionsValidation.score;\n    maxScore += 100;\n\n    const finalScore = maxScore > 0 ? Math.round((totalScore / maxScore) * 100) : 100;\n    const isValid = errors.filter(e => e.severity === 'critical' || e.severity === 'high').length === 0;\n\n    const result: ValidationResult = {\n      isValid,\n      errors,\n      warnings,\n      score: finalScore,\n      timestamp: new Date()\n    };\n\n    this.validationHistory.push(result);\n    this.updateStats();\n    \n    // Émettre l'événement de validation\n    this.communicationService.emitValidationResult(result);\n\n    return result;\n  }\n\n  /**\n   * Valider un mur\n   */\n  validateWall(wallData: any, wallType: string): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let score = 100;\n\n    // Épaisseur minimale\n    if (wallData.epaisseur  1.0) {\n      warnings.push({\n        code: 'wall_thickness_max',\n        message: `Le mur ${wallType} a une épaisseur très importante (${wallData.epaisseur}m)`,\n        field: 'epaisseur',\n        suggestion: 'Considérer une épaisseur plus standard'\n      });\n      score -= 10;\n    }\n\n    // Dimensions raisonnables\n    if (wallData.dimensions.height  e.severity === 'critical' || e.severity === 'high').length === 0,\n      errors,\n      warnings,\n      score: Math.max(0, score),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Valider une ouverture\n   */\n  validateOpening(openingData: any, wallType: string): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let score = 100;\n\n    if (openingData.type === 'porte') {\n      // Hauteur minimale des portes\n      if (openingData.dimensions.height  1.2) {\n        warnings.push({\n          code: 'door_width_max',\n          message: `La porte sur le mur ${wallType} est très large (${openingData.dimensions.width}m)`,\n          field: 'dimensions.width',\n          suggestion: 'Considérer une largeur plus standard'\n        });\n        score -= 10;\n      }\n    }\n\n    if (openingData.type === 'fenetre') {\n      // Hauteur minimale des fenêtres\n      if (openingData.dimensions.height  3) {\n        warnings.push({\n          code: 'aspect_ratio_reasonable',\n          message: `La fenêtre sur le mur ${wallType} a un ratio d'aspect inhabituel (${aspectRatio.toFixed(2)})`,\n          field: 'dimensions',\n          suggestion: 'Considérer un ratio entre 0.3 et 3'\n        });\n        score -= 15;\n      }\n    }\n\n    return {\n      isValid: errors.filter(e => e.severity === 'critical' || e.severity === 'high').length === 0,\n      errors,\n      warnings,\n      score: Math.max(0, score),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Valider les proportions globales\n   */\n  validateProportions(buildingData: any): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let score = 100;\n\n    // Calculer le pourcentage d'ouvertures\n    let totalWallSurface = 0;\n    let totalOpeningSurface = 0;\n\n    if (buildingData.murs) {\n      Object.values(buildingData.murs).forEach((wall: any) => {\n        totalWallSurface += wall.dimensions.width * wall.dimensions.height;\n        if (wall.ouvertures) {\n          wall.ouvertures.forEach((opening: any) => {\n            totalOpeningSurface += opening.dimensions.width * opening.dimensions.height;\n          });\n        }\n      });\n    }\n\n    const openingPercentage = totalWallSurface > 0 ? (totalOpeningSurface / totalWallSurface) * 100 : 0;\n\n    if (openingPercentage > 50) {\n      errors.push({\n        code: 'opening_ratio_max',\n        message: `Trop d'ouvertures (${openingPercentage.toFixed(1)}% de la surface des murs)`,\n        field: 'ouvertures',\n        severity: 'medium',\n        suggestion: 'Réduire le nombre ou la taille des ouvertures'\n      });\n      score -= 30;\n    } else if (openingPercentage > 30) {\n      warnings.push({\n        code: 'opening_ratio_high',\n        message: `Beaucoup d'ouvertures (${openingPercentage.toFixed(1)}% de la surface des murs)`,\n        field: 'ouvertures',\n        suggestion: 'Vérifier l\\'isolation thermique'\n      });\n      score -= 10;\n    }\n\n    return {\n      isValid: errors.filter(e => e.severity === 'critical' || e.severity === 'high').length === 0,\n      errors,\n      warnings,\n      score: Math.max(0, score),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Obtenir les règles de validation\n   */\n  getValidationRules(): ValidationRule[] {\n    return [...this.validationRules];\n  }\n\n  /**\n   * Activer/désactiver une règle\n   */\n  toggleRule(ruleId: string): void {\n    const rule = this.validationRules.find(r => r.id === ruleId);\n    if (rule) {\n      rule.enabled = !rule.enabled;\n      console.log(`Règle ${ruleId} ${rule.enabled ? 'activée' : 'désactivée'}`);\n    }\n  }\n\n  /**\n   * Obtenir l'historique des validations\n   */\n  getValidationHistory(): ValidationResult[] {\n    return [...this.validationHistory];\n  }\n\n  /**\n   * Obtenir les statistiques de validation\n   */\n  getStats(): ValidationStats {\n    return this.statsSubject.value;\n  }\n\n  /**\n   * Obtenir les statistiques en tant qu'Observable\n   */\n  getStatsObservable(): Observable {\n    return this.stats$;\n  }\n\n  /**\n   * Mettre à jour les statistiques\n   */\n  private updateStats(): void {\n    const totalValidations = this.validationHistory.length;\n    const successfulValidations = this.validationHistory.filter(v => v.isValid).length;\n    const successRate = totalValidations > 0 ? (successfulValidations / totalValidations) * 100 : 0;\n    const averageScore = totalValidations > 0 ? \n      this.validationHistory.reduce((sum, v) => sum + v.score, 0) / totalValidations : 0;\n\n    const errorsByCategory: Record = {};\n    const warningsByCategory: Record = {};\n\n    this.validationHistory.forEach(validation => {\n      validation.errors.forEach(error => {\n        const rule = this.validationRules.find(r => r.id === error.code);\n        if (rule) {\n          errorsByCategory[rule.category] = (errorsByCategory[rule.category] || 0) + 1;\n        }\n      });\n\n      validation.warnings.forEach(warning => {\n        const rule = this.validationRules.find(r => r.id === warning.code);\n        if (rule) {\n          warningsByCategory[rule.category] = (warningsByCategory[rule.category] || 0) + 1;\n        }\n      });\n    });\n\n    const stats: ValidationStats = {\n      totalValidations,\n      successRate: Math.round(successRate * 100) / 100,\n      averageScore: Math.round(averageScore * 100) / 100,\n      errorsByCategory,\n      warningsByCategory,\n      lastValidation: totalValidations > 0 ? this.validationHistory[totalValidations - 1].timestamp : null\n    };\n\n    this.statsSubject.next(stats);\n  }\n\n  /**\n   * Effacer l'historique des validations\n   */\n  clearHistory(): void {\n    this.validationHistory = [];\n    this.updateStats();\n    console.log('Historique des validations effacé');\n  }\n\n  /**\n   * Exporter les données de validation\n   */\n  exportValidationData(): string {\n    const data = {\n      rules: this.validationRules,\n      history: this.validationHistory,\n      stats: this.getStats(),\n      exportDate: new Date()\n    };\n    \n    return JSON.stringify(data, null, 2);\n  }\n\n  /**\n   * Importer les données de validation\n   */\n  importValidationData(dataJson: string): boolean {\n    try {\n      const data = JSON.parse(dataJson);\n      \n      if (data.rules) {\n        this.validationRules = data.rules;\n      }\n      \n      if (data.history) {\n        this.validationHistory = data.history;\n      }\n      \n      this.updateStats();\n      console.log('Données de validation importées avec succès');\n      return true;\n    } catch (error) {\n      console.error('Erreur lors de l\\'importation des données de validation:', error);\n      return false;\n    }\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationRule.html":{"url":"interfaces/ValidationRule.html","title":"interface - ValidationRule","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidationRule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/validation/validation.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les règles de validation\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            enabled\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            weight\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:     \"dimensions\" | \"proportions\" | \"materials\" | \"safety\" | \"aesthetics\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"dimensions\" | \"proportions\" | \"materials\" | \"safety\" | \"aesthetics\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        weight\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        weight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CommunicationService } from '../communication/communication.service';\n\n/**\n * Interface pour les résultats de validation\n */\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n  score: number; // Score de 0 à 100\n  timestamp: Date;\n}\n\n/**\n * Interface pour les erreurs de validation\n */\nexport interface ValidationError {\n  code: string;\n  message: string;\n  field: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  suggestion?: string;\n}\n\n/**\n * Interface pour les avertissements de validation\n */\nexport interface ValidationWarning {\n  code: string;\n  message: string;\n  field: string;\n  suggestion?: string;\n}\n\n/**\n * Interface pour les règles de validation\n */\nexport interface ValidationRule {\n  id: string;\n  name: string;\n  description: string;\n  category: 'dimensions' | 'proportions' | 'materials' | 'safety' | 'aesthetics';\n  weight: number; // Poids de la règle (1-10)\n  enabled: boolean;\n}\n\n/**\n * Interface pour les statistiques de validation\n */\nexport interface ValidationStats {\n  totalValidations: number;\n  successRate: number;\n  averageScore: number;\n  errorsByCategory: Record;\n  warningsByCategory: Record;\n  lastValidation: Date | null;\n}\n\n/**\n * Service de validation architecturale\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationService {\n  \n  private validationRules: ValidationRule[] = [];\n  private validationHistory: ValidationResult[] = [];\n  private statsSubject = new BehaviorSubject({\n    totalValidations: 0,\n    successRate: 0,\n    averageScore: 0,\n    errorsByCategory: {},\n    warningsByCategory: {},\n    lastValidation: null\n  });\n\n  public stats$ = this.statsSubject.asObservable();\n\n  constructor(private communicationService: CommunicationService) {\n    this.initializeValidationRules();\n    console.log('ValidationService initialisé');\n  }\n\n  /**\n   * Initialiser les règles de validation\n   */\n  private initializeValidationRules(): void {\n    this.validationRules = [\n      // Règles de dimensions\n      {\n        id: 'wall_thickness_min',\n        name: 'Épaisseur minimale des murs',\n        description: 'Les murs doivent avoir une épaisseur minimale de 10cm',\n        category: 'dimensions',\n        weight: 8,\n        enabled: true\n      },\n      {\n        id: 'wall_thickness_max',\n        name: 'Épaisseur maximale des murs',\n        description: 'Les murs ne doivent pas dépasser 1m d\\'épaisseur',\n        category: 'dimensions',\n        weight: 5,\n        enabled: true\n      },\n      {\n        id: 'door_height_min',\n        name: 'Hauteur minimale des portes',\n        description: 'Les portes doivent faire au moins 2m de haut',\n        category: 'dimensions',\n        weight: 9,\n        enabled: true\n      },\n      {\n        id: 'door_width_min',\n        name: 'Largeur minimale des portes',\n        description: 'Les portes doivent faire au moins 80cm de large',\n        category: 'dimensions',\n        weight: 9,\n        enabled: true\n      },\n      {\n        id: 'window_height_min',\n        name: 'Hauteur minimale des fenêtres',\n        description: 'Les fenêtres doivent faire au moins 1m de haut',\n        category: 'dimensions',\n        weight: 6,\n        enabled: true\n      },\n\n      // Règles de proportions\n      {\n        id: 'opening_ratio_max',\n        name: 'Ratio d\\'ouvertures maximum',\n        description: 'Les ouvertures ne doivent pas représenter plus de 50% de la surface des murs',\n        category: 'proportions',\n        weight: 7,\n        enabled: true\n      },\n      {\n        id: 'aspect_ratio_reasonable',\n        name: 'Ratio d\\'aspect raisonnable',\n        description: 'Le ratio largeur/hauteur des ouvertures doit être entre 0.3 et 3',\n        category: 'proportions',\n        weight: 4,\n        enabled: true\n      },\n\n      // Règles de sécurité\n      {\n        id: 'exit_accessibility',\n        name: 'Accessibilité des sorties',\n        description: 'Au moins une porte doit être accessible depuis chaque pièce',\n        category: 'safety',\n        weight: 10,\n        enabled: true\n      },\n      {\n        id: 'window_placement',\n        name: 'Placement des fenêtres',\n        description: 'Les fenêtres doivent être placées à une hauteur raisonnable',\n        category: 'safety',\n        weight: 6,\n        enabled: true\n      },\n\n      // Règles esthétiques\n      {\n        id: 'color_harmony',\n        name: 'Harmonie des couleurs',\n        description: 'Les couleurs doivent être harmonieuses',\n        category: 'aesthetics',\n        weight: 3,\n        enabled: true\n      },\n      {\n        id: 'symmetry_preference',\n        name: 'Préférence pour la symétrie',\n        description: 'La symétrie est préférable pour l\\'esthétique',\n        category: 'aesthetics',\n        weight: 2,\n        enabled: true\n      }\n    ];\n  }\n\n  /**\n   * Valider un bâtiment complet\n   */\n  validateBuilding(buildingData: any): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let totalScore = 0;\n    let maxScore = 0;\n\n    // Valider les murs\n    if (buildingData.murs) {\n      Object.entries(buildingData.murs).forEach(([wallType, wallData]: [string, any]) => {\n        const wallValidation = this.validateWall(wallData, wallType);\n        errors.push(...wallValidation.errors);\n        warnings.push(...wallValidation.warnings);\n        totalScore += wallValidation.score;\n        maxScore += 100;\n      });\n    }\n\n    // Valider les ouvertures\n    if (buildingData.murs) {\n      Object.entries(buildingData.murs).forEach(([wallType, wallData]: [string, any]) => {\n        if (wallData.ouvertures) {\n          wallData.ouvertures.forEach((opening: any) => {\n            const openingValidation = this.validateOpening(opening, wallType);\n            errors.push(...openingValidation.errors);\n            warnings.push(...openingValidation.warnings);\n            totalScore += openingValidation.score;\n            maxScore += 100;\n          });\n        }\n      });\n    }\n\n    // Valider les proportions globales\n    const proportionsValidation = this.validateProportions(buildingData);\n    errors.push(...proportionsValidation.errors);\n    warnings.push(...proportionsValidation.warnings);\n    totalScore += proportionsValidation.score;\n    maxScore += 100;\n\n    const finalScore = maxScore > 0 ? Math.round((totalScore / maxScore) * 100) : 100;\n    const isValid = errors.filter(e => e.severity === 'critical' || e.severity === 'high').length === 0;\n\n    const result: ValidationResult = {\n      isValid,\n      errors,\n      warnings,\n      score: finalScore,\n      timestamp: new Date()\n    };\n\n    this.validationHistory.push(result);\n    this.updateStats();\n    \n    // Émettre l'événement de validation\n    this.communicationService.emitValidationResult(result);\n\n    return result;\n  }\n\n  /**\n   * Valider un mur\n   */\n  validateWall(wallData: any, wallType: string): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let score = 100;\n\n    // Épaisseur minimale\n    if (wallData.epaisseur  1.0) {\n      warnings.push({\n        code: 'wall_thickness_max',\n        message: `Le mur ${wallType} a une épaisseur très importante (${wallData.epaisseur}m)`,\n        field: 'epaisseur',\n        suggestion: 'Considérer une épaisseur plus standard'\n      });\n      score -= 10;\n    }\n\n    // Dimensions raisonnables\n    if (wallData.dimensions.height  e.severity === 'critical' || e.severity === 'high').length === 0,\n      errors,\n      warnings,\n      score: Math.max(0, score),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Valider une ouverture\n   */\n  validateOpening(openingData: any, wallType: string): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let score = 100;\n\n    if (openingData.type === 'porte') {\n      // Hauteur minimale des portes\n      if (openingData.dimensions.height  1.2) {\n        warnings.push({\n          code: 'door_width_max',\n          message: `La porte sur le mur ${wallType} est très large (${openingData.dimensions.width}m)`,\n          field: 'dimensions.width',\n          suggestion: 'Considérer une largeur plus standard'\n        });\n        score -= 10;\n      }\n    }\n\n    if (openingData.type === 'fenetre') {\n      // Hauteur minimale des fenêtres\n      if (openingData.dimensions.height  3) {\n        warnings.push({\n          code: 'aspect_ratio_reasonable',\n          message: `La fenêtre sur le mur ${wallType} a un ratio d'aspect inhabituel (${aspectRatio.toFixed(2)})`,\n          field: 'dimensions',\n          suggestion: 'Considérer un ratio entre 0.3 et 3'\n        });\n        score -= 15;\n      }\n    }\n\n    return {\n      isValid: errors.filter(e => e.severity === 'critical' || e.severity === 'high').length === 0,\n      errors,\n      warnings,\n      score: Math.max(0, score),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Valider les proportions globales\n   */\n  validateProportions(buildingData: any): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let score = 100;\n\n    // Calculer le pourcentage d'ouvertures\n    let totalWallSurface = 0;\n    let totalOpeningSurface = 0;\n\n    if (buildingData.murs) {\n      Object.values(buildingData.murs).forEach((wall: any) => {\n        totalWallSurface += wall.dimensions.width * wall.dimensions.height;\n        if (wall.ouvertures) {\n          wall.ouvertures.forEach((opening: any) => {\n            totalOpeningSurface += opening.dimensions.width * opening.dimensions.height;\n          });\n        }\n      });\n    }\n\n    const openingPercentage = totalWallSurface > 0 ? (totalOpeningSurface / totalWallSurface) * 100 : 0;\n\n    if (openingPercentage > 50) {\n      errors.push({\n        code: 'opening_ratio_max',\n        message: `Trop d'ouvertures (${openingPercentage.toFixed(1)}% de la surface des murs)`,\n        field: 'ouvertures',\n        severity: 'medium',\n        suggestion: 'Réduire le nombre ou la taille des ouvertures'\n      });\n      score -= 30;\n    } else if (openingPercentage > 30) {\n      warnings.push({\n        code: 'opening_ratio_high',\n        message: `Beaucoup d'ouvertures (${openingPercentage.toFixed(1)}% de la surface des murs)`,\n        field: 'ouvertures',\n        suggestion: 'Vérifier l\\'isolation thermique'\n      });\n      score -= 10;\n    }\n\n    return {\n      isValid: errors.filter(e => e.severity === 'critical' || e.severity === 'high').length === 0,\n      errors,\n      warnings,\n      score: Math.max(0, score),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Obtenir les règles de validation\n   */\n  getValidationRules(): ValidationRule[] {\n    return [...this.validationRules];\n  }\n\n  /**\n   * Activer/désactiver une règle\n   */\n  toggleRule(ruleId: string): void {\n    const rule = this.validationRules.find(r => r.id === ruleId);\n    if (rule) {\n      rule.enabled = !rule.enabled;\n      console.log(`Règle ${ruleId} ${rule.enabled ? 'activée' : 'désactivée'}`);\n    }\n  }\n\n  /**\n   * Obtenir l'historique des validations\n   */\n  getValidationHistory(): ValidationResult[] {\n    return [...this.validationHistory];\n  }\n\n  /**\n   * Obtenir les statistiques de validation\n   */\n  getStats(): ValidationStats {\n    return this.statsSubject.value;\n  }\n\n  /**\n   * Obtenir les statistiques en tant qu'Observable\n   */\n  getStatsObservable(): Observable {\n    return this.stats$;\n  }\n\n  /**\n   * Mettre à jour les statistiques\n   */\n  private updateStats(): void {\n    const totalValidations = this.validationHistory.length;\n    const successfulValidations = this.validationHistory.filter(v => v.isValid).length;\n    const successRate = totalValidations > 0 ? (successfulValidations / totalValidations) * 100 : 0;\n    const averageScore = totalValidations > 0 ? \n      this.validationHistory.reduce((sum, v) => sum + v.score, 0) / totalValidations : 0;\n\n    const errorsByCategory: Record = {};\n    const warningsByCategory: Record = {};\n\n    this.validationHistory.forEach(validation => {\n      validation.errors.forEach(error => {\n        const rule = this.validationRules.find(r => r.id === error.code);\n        if (rule) {\n          errorsByCategory[rule.category] = (errorsByCategory[rule.category] || 0) + 1;\n        }\n      });\n\n      validation.warnings.forEach(warning => {\n        const rule = this.validationRules.find(r => r.id === warning.code);\n        if (rule) {\n          warningsByCategory[rule.category] = (warningsByCategory[rule.category] || 0) + 1;\n        }\n      });\n    });\n\n    const stats: ValidationStats = {\n      totalValidations,\n      successRate: Math.round(successRate * 100) / 100,\n      averageScore: Math.round(averageScore * 100) / 100,\n      errorsByCategory,\n      warningsByCategory,\n      lastValidation: totalValidations > 0 ? this.validationHistory[totalValidations - 1].timestamp : null\n    };\n\n    this.statsSubject.next(stats);\n  }\n\n  /**\n   * Effacer l'historique des validations\n   */\n  clearHistory(): void {\n    this.validationHistory = [];\n    this.updateStats();\n    console.log('Historique des validations effacé');\n  }\n\n  /**\n   * Exporter les données de validation\n   */\n  exportValidationData(): string {\n    const data = {\n      rules: this.validationRules,\n      history: this.validationHistory,\n      stats: this.getStats(),\n      exportDate: new Date()\n    };\n    \n    return JSON.stringify(data, null, 2);\n  }\n\n  /**\n   * Importer les données de validation\n   */\n  importValidationData(dataJson: string): boolean {\n    try {\n      const data = JSON.parse(dataJson);\n      \n      if (data.rules) {\n        this.validationRules = data.rules;\n      }\n      \n      if (data.history) {\n        this.validationHistory = data.history;\n      }\n      \n      this.updateStats();\n      console.log('Données de validation importées avec succès');\n      return true;\n    } catch (error) {\n      console.error('Erreur lors de l\\'importation des données de validation:', error);\n      return false;\n    }\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationService.html":{"url":"injectables/ValidationService.html","title":"injectable - ValidationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/validation/validation.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service de validation architecturale\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                stats$\n                            \n                            \n                                    Private\n                                statsSubject\n                            \n                            \n                                    Private\n                                validationHistory\n                            \n                            \n                                    Private\n                                validationRules\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearHistory\n                            \n                            \n                                exportValidationData\n                            \n                            \n                                getStats\n                            \n                            \n                                getStatsObservable\n                            \n                            \n                                getValidationHistory\n                            \n                            \n                                getValidationRules\n                            \n                            \n                                importValidationData\n                            \n                            \n                                    Private\n                                initializeValidationRules\n                            \n                            \n                                toggleRule\n                            \n                            \n                                    Private\n                                updateStats\n                            \n                            \n                                validateBuilding\n                            \n                            \n                                validateOpening\n                            \n                            \n                                validateProportions\n                            \n                            \n                                validateWall\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(communicationService: CommunicationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/validation/validation.service.ts:80\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        communicationService\n                                                  \n                                                        \n                                                                        CommunicationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearHistory\n                        \n                    \n                \n            \n            \n                \nclearHistory()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/validation/validation.service.ts:520\n                        \n                    \n\n\n            \n                \n                        Effacer l'historique des validations\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exportValidationData\n                        \n                    \n                \n            \n            \n                \nexportValidationData()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/validation/validation.service.ts:529\n                        \n                    \n\n\n            \n                \n                        Exporter les données de validation\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStats\n                        \n                    \n                \n            \n            \n                \ngetStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/validation/validation.service.ts:465\n                        \n                    \n\n\n            \n                \n                        Obtenir les statistiques de validation\n\n\n                        \n                            Returns :         ValidationStats\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStatsObservable\n                        \n                    \n                \n            \n            \n                \ngetStatsObservable()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/validation/validation.service.ts:472\n                        \n                    \n\n\n            \n                \n                        Obtenir les statistiques en tant qu'Observable\n\n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getValidationHistory\n                        \n                    \n                \n            \n            \n                \ngetValidationHistory()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/validation/validation.service.ts:458\n                        \n                    \n\n\n            \n                \n                        Obtenir l'historique des validations\n\n\n                        \n                            Returns :         ValidationResult[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getValidationRules\n                        \n                    \n                \n            \n            \n                \ngetValidationRules()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/validation/validation.service.ts:440\n                        \n                    \n\n\n            \n                \n                        Obtenir les règles de validation\n\n\n                        \n                            Returns :         ValidationRule[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        importValidationData\n                        \n                    \n                \n            \n            \n                \nimportValidationData(dataJson: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/validation/validation.service.ts:543\n                        \n                    \n\n\n            \n                \n                        Importer les données de validation\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dataJson\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializeValidationRules\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeValidationRules()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/validation/validation.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Initialiser les règles de validation\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleRule\n                        \n                    \n                \n            \n            \n                \ntoggleRule(ruleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/validation/validation.service.ts:447\n                        \n                    \n\n\n            \n                \n                        Activer/désactiver une règle\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ruleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/validation/validation.service.ts:479\n                        \n                    \n\n\n            \n                \n                        Mettre à jour les statistiques\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateBuilding\n                        \n                    \n                \n            \n            \n                \nvalidateBuilding(buildingData: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/validation/validation.service.ts:193\n                        \n                    \n\n\n            \n                \n                        Valider un bâtiment complet\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                buildingData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ValidationResult\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateOpening\n                        \n                    \n                \n            \n            \n                \nvalidateOpening(openingData: any, wallType: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/validation/validation.service.ts:307\n                        \n                    \n\n\n            \n                \n                        Valider une ouverture\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                openingData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                wallType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ValidationResult\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateProportions\n                        \n                    \n                \n            \n            \n                \nvalidateProportions(buildingData: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/validation/validation.service.ts:387\n                        \n                    \n\n\n            \n                \n                        Valider les proportions globales\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                buildingData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ValidationResult\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateWall\n                        \n                    \n                \n            \n            \n                \nvalidateWall(wallData: any, wallType: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/validation/validation.service.ts:255\n                        \n                    \n\n\n            \n                \n                        Valider un mur\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                wallData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                wallType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ValidationResult\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stats$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.statsSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/validation/validation.service.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        statsSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject({\n    totalValidations: 0,\n    successRate: 0,\n    averageScore: 0,\n    errorsByCategory: {},\n    warningsByCategory: {},\n    lastValidation: null\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/services/validation/validation.service.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        validationHistory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ValidationResult[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/services/validation/validation.service.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        validationRules\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ValidationRule[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/services/validation/validation.service.ts:69\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CommunicationService } from '../communication/communication.service';\n\n/**\n * Interface pour les résultats de validation\n */\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n  score: number; // Score de 0 à 100\n  timestamp: Date;\n}\n\n/**\n * Interface pour les erreurs de validation\n */\nexport interface ValidationError {\n  code: string;\n  message: string;\n  field: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  suggestion?: string;\n}\n\n/**\n * Interface pour les avertissements de validation\n */\nexport interface ValidationWarning {\n  code: string;\n  message: string;\n  field: string;\n  suggestion?: string;\n}\n\n/**\n * Interface pour les règles de validation\n */\nexport interface ValidationRule {\n  id: string;\n  name: string;\n  description: string;\n  category: 'dimensions' | 'proportions' | 'materials' | 'safety' | 'aesthetics';\n  weight: number; // Poids de la règle (1-10)\n  enabled: boolean;\n}\n\n/**\n * Interface pour les statistiques de validation\n */\nexport interface ValidationStats {\n  totalValidations: number;\n  successRate: number;\n  averageScore: number;\n  errorsByCategory: Record;\n  warningsByCategory: Record;\n  lastValidation: Date | null;\n}\n\n/**\n * Service de validation architecturale\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationService {\n  \n  private validationRules: ValidationRule[] = [];\n  private validationHistory: ValidationResult[] = [];\n  private statsSubject = new BehaviorSubject({\n    totalValidations: 0,\n    successRate: 0,\n    averageScore: 0,\n    errorsByCategory: {},\n    warningsByCategory: {},\n    lastValidation: null\n  });\n\n  public stats$ = this.statsSubject.asObservable();\n\n  constructor(private communicationService: CommunicationService) {\n    this.initializeValidationRules();\n    console.log('ValidationService initialisé');\n  }\n\n  /**\n   * Initialiser les règles de validation\n   */\n  private initializeValidationRules(): void {\n    this.validationRules = [\n      // Règles de dimensions\n      {\n        id: 'wall_thickness_min',\n        name: 'Épaisseur minimale des murs',\n        description: 'Les murs doivent avoir une épaisseur minimale de 10cm',\n        category: 'dimensions',\n        weight: 8,\n        enabled: true\n      },\n      {\n        id: 'wall_thickness_max',\n        name: 'Épaisseur maximale des murs',\n        description: 'Les murs ne doivent pas dépasser 1m d\\'épaisseur',\n        category: 'dimensions',\n        weight: 5,\n        enabled: true\n      },\n      {\n        id: 'door_height_min',\n        name: 'Hauteur minimale des portes',\n        description: 'Les portes doivent faire au moins 2m de haut',\n        category: 'dimensions',\n        weight: 9,\n        enabled: true\n      },\n      {\n        id: 'door_width_min',\n        name: 'Largeur minimale des portes',\n        description: 'Les portes doivent faire au moins 80cm de large',\n        category: 'dimensions',\n        weight: 9,\n        enabled: true\n      },\n      {\n        id: 'window_height_min',\n        name: 'Hauteur minimale des fenêtres',\n        description: 'Les fenêtres doivent faire au moins 1m de haut',\n        category: 'dimensions',\n        weight: 6,\n        enabled: true\n      },\n\n      // Règles de proportions\n      {\n        id: 'opening_ratio_max',\n        name: 'Ratio d\\'ouvertures maximum',\n        description: 'Les ouvertures ne doivent pas représenter plus de 50% de la surface des murs',\n        category: 'proportions',\n        weight: 7,\n        enabled: true\n      },\n      {\n        id: 'aspect_ratio_reasonable',\n        name: 'Ratio d\\'aspect raisonnable',\n        description: 'Le ratio largeur/hauteur des ouvertures doit être entre 0.3 et 3',\n        category: 'proportions',\n        weight: 4,\n        enabled: true\n      },\n\n      // Règles de sécurité\n      {\n        id: 'exit_accessibility',\n        name: 'Accessibilité des sorties',\n        description: 'Au moins une porte doit être accessible depuis chaque pièce',\n        category: 'safety',\n        weight: 10,\n        enabled: true\n      },\n      {\n        id: 'window_placement',\n        name: 'Placement des fenêtres',\n        description: 'Les fenêtres doivent être placées à une hauteur raisonnable',\n        category: 'safety',\n        weight: 6,\n        enabled: true\n      },\n\n      // Règles esthétiques\n      {\n        id: 'color_harmony',\n        name: 'Harmonie des couleurs',\n        description: 'Les couleurs doivent être harmonieuses',\n        category: 'aesthetics',\n        weight: 3,\n        enabled: true\n      },\n      {\n        id: 'symmetry_preference',\n        name: 'Préférence pour la symétrie',\n        description: 'La symétrie est préférable pour l\\'esthétique',\n        category: 'aesthetics',\n        weight: 2,\n        enabled: true\n      }\n    ];\n  }\n\n  /**\n   * Valider un bâtiment complet\n   */\n  validateBuilding(buildingData: any): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let totalScore = 0;\n    let maxScore = 0;\n\n    // Valider les murs\n    if (buildingData.murs) {\n      Object.entries(buildingData.murs).forEach(([wallType, wallData]: [string, any]) => {\n        const wallValidation = this.validateWall(wallData, wallType);\n        errors.push(...wallValidation.errors);\n        warnings.push(...wallValidation.warnings);\n        totalScore += wallValidation.score;\n        maxScore += 100;\n      });\n    }\n\n    // Valider les ouvertures\n    if (buildingData.murs) {\n      Object.entries(buildingData.murs).forEach(([wallType, wallData]: [string, any]) => {\n        if (wallData.ouvertures) {\n          wallData.ouvertures.forEach((opening: any) => {\n            const openingValidation = this.validateOpening(opening, wallType);\n            errors.push(...openingValidation.errors);\n            warnings.push(...openingValidation.warnings);\n            totalScore += openingValidation.score;\n            maxScore += 100;\n          });\n        }\n      });\n    }\n\n    // Valider les proportions globales\n    const proportionsValidation = this.validateProportions(buildingData);\n    errors.push(...proportionsValidation.errors);\n    warnings.push(...proportionsValidation.warnings);\n    totalScore += proportionsValidation.score;\n    maxScore += 100;\n\n    const finalScore = maxScore > 0 ? Math.round((totalScore / maxScore) * 100) : 100;\n    const isValid = errors.filter(e => e.severity === 'critical' || e.severity === 'high').length === 0;\n\n    const result: ValidationResult = {\n      isValid,\n      errors,\n      warnings,\n      score: finalScore,\n      timestamp: new Date()\n    };\n\n    this.validationHistory.push(result);\n    this.updateStats();\n    \n    // Émettre l'événement de validation\n    this.communicationService.emitValidationResult(result);\n\n    return result;\n  }\n\n  /**\n   * Valider un mur\n   */\n  validateWall(wallData: any, wallType: string): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let score = 100;\n\n    // Épaisseur minimale\n    if (wallData.epaisseur  1.0) {\n      warnings.push({\n        code: 'wall_thickness_max',\n        message: `Le mur ${wallType} a une épaisseur très importante (${wallData.epaisseur}m)`,\n        field: 'epaisseur',\n        suggestion: 'Considérer une épaisseur plus standard'\n      });\n      score -= 10;\n    }\n\n    // Dimensions raisonnables\n    if (wallData.dimensions.height  e.severity === 'critical' || e.severity === 'high').length === 0,\n      errors,\n      warnings,\n      score: Math.max(0, score),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Valider une ouverture\n   */\n  validateOpening(openingData: any, wallType: string): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let score = 100;\n\n    if (openingData.type === 'porte') {\n      // Hauteur minimale des portes\n      if (openingData.dimensions.height  1.2) {\n        warnings.push({\n          code: 'door_width_max',\n          message: `La porte sur le mur ${wallType} est très large (${openingData.dimensions.width}m)`,\n          field: 'dimensions.width',\n          suggestion: 'Considérer une largeur plus standard'\n        });\n        score -= 10;\n      }\n    }\n\n    if (openingData.type === 'fenetre') {\n      // Hauteur minimale des fenêtres\n      if (openingData.dimensions.height  3) {\n        warnings.push({\n          code: 'aspect_ratio_reasonable',\n          message: `La fenêtre sur le mur ${wallType} a un ratio d'aspect inhabituel (${aspectRatio.toFixed(2)})`,\n          field: 'dimensions',\n          suggestion: 'Considérer un ratio entre 0.3 et 3'\n        });\n        score -= 15;\n      }\n    }\n\n    return {\n      isValid: errors.filter(e => e.severity === 'critical' || e.severity === 'high').length === 0,\n      errors,\n      warnings,\n      score: Math.max(0, score),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Valider les proportions globales\n   */\n  validateProportions(buildingData: any): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let score = 100;\n\n    // Calculer le pourcentage d'ouvertures\n    let totalWallSurface = 0;\n    let totalOpeningSurface = 0;\n\n    if (buildingData.murs) {\n      Object.values(buildingData.murs).forEach((wall: any) => {\n        totalWallSurface += wall.dimensions.width * wall.dimensions.height;\n        if (wall.ouvertures) {\n          wall.ouvertures.forEach((opening: any) => {\n            totalOpeningSurface += opening.dimensions.width * opening.dimensions.height;\n          });\n        }\n      });\n    }\n\n    const openingPercentage = totalWallSurface > 0 ? (totalOpeningSurface / totalWallSurface) * 100 : 0;\n\n    if (openingPercentage > 50) {\n      errors.push({\n        code: 'opening_ratio_max',\n        message: `Trop d'ouvertures (${openingPercentage.toFixed(1)}% de la surface des murs)`,\n        field: 'ouvertures',\n        severity: 'medium',\n        suggestion: 'Réduire le nombre ou la taille des ouvertures'\n      });\n      score -= 30;\n    } else if (openingPercentage > 30) {\n      warnings.push({\n        code: 'opening_ratio_high',\n        message: `Beaucoup d'ouvertures (${openingPercentage.toFixed(1)}% de la surface des murs)`,\n        field: 'ouvertures',\n        suggestion: 'Vérifier l\\'isolation thermique'\n      });\n      score -= 10;\n    }\n\n    return {\n      isValid: errors.filter(e => e.severity === 'critical' || e.severity === 'high').length === 0,\n      errors,\n      warnings,\n      score: Math.max(0, score),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Obtenir les règles de validation\n   */\n  getValidationRules(): ValidationRule[] {\n    return [...this.validationRules];\n  }\n\n  /**\n   * Activer/désactiver une règle\n   */\n  toggleRule(ruleId: string): void {\n    const rule = this.validationRules.find(r => r.id === ruleId);\n    if (rule) {\n      rule.enabled = !rule.enabled;\n      console.log(`Règle ${ruleId} ${rule.enabled ? 'activée' : 'désactivée'}`);\n    }\n  }\n\n  /**\n   * Obtenir l'historique des validations\n   */\n  getValidationHistory(): ValidationResult[] {\n    return [...this.validationHistory];\n  }\n\n  /**\n   * Obtenir les statistiques de validation\n   */\n  getStats(): ValidationStats {\n    return this.statsSubject.value;\n  }\n\n  /**\n   * Obtenir les statistiques en tant qu'Observable\n   */\n  getStatsObservable(): Observable {\n    return this.stats$;\n  }\n\n  /**\n   * Mettre à jour les statistiques\n   */\n  private updateStats(): void {\n    const totalValidations = this.validationHistory.length;\n    const successfulValidations = this.validationHistory.filter(v => v.isValid).length;\n    const successRate = totalValidations > 0 ? (successfulValidations / totalValidations) * 100 : 0;\n    const averageScore = totalValidations > 0 ? \n      this.validationHistory.reduce((sum, v) => sum + v.score, 0) / totalValidations : 0;\n\n    const errorsByCategory: Record = {};\n    const warningsByCategory: Record = {};\n\n    this.validationHistory.forEach(validation => {\n      validation.errors.forEach(error => {\n        const rule = this.validationRules.find(r => r.id === error.code);\n        if (rule) {\n          errorsByCategory[rule.category] = (errorsByCategory[rule.category] || 0) + 1;\n        }\n      });\n\n      validation.warnings.forEach(warning => {\n        const rule = this.validationRules.find(r => r.id === warning.code);\n        if (rule) {\n          warningsByCategory[rule.category] = (warningsByCategory[rule.category] || 0) + 1;\n        }\n      });\n    });\n\n    const stats: ValidationStats = {\n      totalValidations,\n      successRate: Math.round(successRate * 100) / 100,\n      averageScore: Math.round(averageScore * 100) / 100,\n      errorsByCategory,\n      warningsByCategory,\n      lastValidation: totalValidations > 0 ? this.validationHistory[totalValidations - 1].timestamp : null\n    };\n\n    this.statsSubject.next(stats);\n  }\n\n  /**\n   * Effacer l'historique des validations\n   */\n  clearHistory(): void {\n    this.validationHistory = [];\n    this.updateStats();\n    console.log('Historique des validations effacé');\n  }\n\n  /**\n   * Exporter les données de validation\n   */\n  exportValidationData(): string {\n    const data = {\n      rules: this.validationRules,\n      history: this.validationHistory,\n      stats: this.getStats(),\n      exportDate: new Date()\n    };\n    \n    return JSON.stringify(data, null, 2);\n  }\n\n  /**\n   * Importer les données de validation\n   */\n  importValidationData(dataJson: string): boolean {\n    try {\n      const data = JSON.parse(dataJson);\n      \n      if (data.rules) {\n        this.validationRules = data.rules;\n      }\n      \n      if (data.history) {\n        this.validationHistory = data.history;\n      }\n      \n      this.updateStats();\n      console.log('Données de validation importées avec succès');\n      return true;\n    } catch (error) {\n      console.error('Erreur lors de l\\'importation des données de validation:', error);\n      return false;\n    }\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationStats.html":{"url":"interfaces/ValidationStats.html","title":"interface - ValidationStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidationStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/validation/validation.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les statistiques de validation\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            averageScore\n                                        \n                                \n                                \n                                        \n                                            errorsByCategory\n                                        \n                                \n                                \n                                        \n                                            lastValidation\n                                        \n                                \n                                \n                                        \n                                            successRate\n                                        \n                                \n                                \n                                        \n                                            totalValidations\n                                        \n                                \n                                \n                                        \n                                            warningsByCategory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        averageScore\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        averageScore:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorsByCategory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorsByCategory:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastValidation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastValidation:     Date | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        successRate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        successRate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalValidations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalValidations:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        warningsByCategory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        warningsByCategory:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CommunicationService } from '../communication/communication.service';\n\n/**\n * Interface pour les résultats de validation\n */\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n  score: number; // Score de 0 à 100\n  timestamp: Date;\n}\n\n/**\n * Interface pour les erreurs de validation\n */\nexport interface ValidationError {\n  code: string;\n  message: string;\n  field: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  suggestion?: string;\n}\n\n/**\n * Interface pour les avertissements de validation\n */\nexport interface ValidationWarning {\n  code: string;\n  message: string;\n  field: string;\n  suggestion?: string;\n}\n\n/**\n * Interface pour les règles de validation\n */\nexport interface ValidationRule {\n  id: string;\n  name: string;\n  description: string;\n  category: 'dimensions' | 'proportions' | 'materials' | 'safety' | 'aesthetics';\n  weight: number; // Poids de la règle (1-10)\n  enabled: boolean;\n}\n\n/**\n * Interface pour les statistiques de validation\n */\nexport interface ValidationStats {\n  totalValidations: number;\n  successRate: number;\n  averageScore: number;\n  errorsByCategory: Record;\n  warningsByCategory: Record;\n  lastValidation: Date | null;\n}\n\n/**\n * Service de validation architecturale\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationService {\n  \n  private validationRules: ValidationRule[] = [];\n  private validationHistory: ValidationResult[] = [];\n  private statsSubject = new BehaviorSubject({\n    totalValidations: 0,\n    successRate: 0,\n    averageScore: 0,\n    errorsByCategory: {},\n    warningsByCategory: {},\n    lastValidation: null\n  });\n\n  public stats$ = this.statsSubject.asObservable();\n\n  constructor(private communicationService: CommunicationService) {\n    this.initializeValidationRules();\n    console.log('ValidationService initialisé');\n  }\n\n  /**\n   * Initialiser les règles de validation\n   */\n  private initializeValidationRules(): void {\n    this.validationRules = [\n      // Règles de dimensions\n      {\n        id: 'wall_thickness_min',\n        name: 'Épaisseur minimale des murs',\n        description: 'Les murs doivent avoir une épaisseur minimale de 10cm',\n        category: 'dimensions',\n        weight: 8,\n        enabled: true\n      },\n      {\n        id: 'wall_thickness_max',\n        name: 'Épaisseur maximale des murs',\n        description: 'Les murs ne doivent pas dépasser 1m d\\'épaisseur',\n        category: 'dimensions',\n        weight: 5,\n        enabled: true\n      },\n      {\n        id: 'door_height_min',\n        name: 'Hauteur minimale des portes',\n        description: 'Les portes doivent faire au moins 2m de haut',\n        category: 'dimensions',\n        weight: 9,\n        enabled: true\n      },\n      {\n        id: 'door_width_min',\n        name: 'Largeur minimale des portes',\n        description: 'Les portes doivent faire au moins 80cm de large',\n        category: 'dimensions',\n        weight: 9,\n        enabled: true\n      },\n      {\n        id: 'window_height_min',\n        name: 'Hauteur minimale des fenêtres',\n        description: 'Les fenêtres doivent faire au moins 1m de haut',\n        category: 'dimensions',\n        weight: 6,\n        enabled: true\n      },\n\n      // Règles de proportions\n      {\n        id: 'opening_ratio_max',\n        name: 'Ratio d\\'ouvertures maximum',\n        description: 'Les ouvertures ne doivent pas représenter plus de 50% de la surface des murs',\n        category: 'proportions',\n        weight: 7,\n        enabled: true\n      },\n      {\n        id: 'aspect_ratio_reasonable',\n        name: 'Ratio d\\'aspect raisonnable',\n        description: 'Le ratio largeur/hauteur des ouvertures doit être entre 0.3 et 3',\n        category: 'proportions',\n        weight: 4,\n        enabled: true\n      },\n\n      // Règles de sécurité\n      {\n        id: 'exit_accessibility',\n        name: 'Accessibilité des sorties',\n        description: 'Au moins une porte doit être accessible depuis chaque pièce',\n        category: 'safety',\n        weight: 10,\n        enabled: true\n      },\n      {\n        id: 'window_placement',\n        name: 'Placement des fenêtres',\n        description: 'Les fenêtres doivent être placées à une hauteur raisonnable',\n        category: 'safety',\n        weight: 6,\n        enabled: true\n      },\n\n      // Règles esthétiques\n      {\n        id: 'color_harmony',\n        name: 'Harmonie des couleurs',\n        description: 'Les couleurs doivent être harmonieuses',\n        category: 'aesthetics',\n        weight: 3,\n        enabled: true\n      },\n      {\n        id: 'symmetry_preference',\n        name: 'Préférence pour la symétrie',\n        description: 'La symétrie est préférable pour l\\'esthétique',\n        category: 'aesthetics',\n        weight: 2,\n        enabled: true\n      }\n    ];\n  }\n\n  /**\n   * Valider un bâtiment complet\n   */\n  validateBuilding(buildingData: any): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let totalScore = 0;\n    let maxScore = 0;\n\n    // Valider les murs\n    if (buildingData.murs) {\n      Object.entries(buildingData.murs).forEach(([wallType, wallData]: [string, any]) => {\n        const wallValidation = this.validateWall(wallData, wallType);\n        errors.push(...wallValidation.errors);\n        warnings.push(...wallValidation.warnings);\n        totalScore += wallValidation.score;\n        maxScore += 100;\n      });\n    }\n\n    // Valider les ouvertures\n    if (buildingData.murs) {\n      Object.entries(buildingData.murs).forEach(([wallType, wallData]: [string, any]) => {\n        if (wallData.ouvertures) {\n          wallData.ouvertures.forEach((opening: any) => {\n            const openingValidation = this.validateOpening(opening, wallType);\n            errors.push(...openingValidation.errors);\n            warnings.push(...openingValidation.warnings);\n            totalScore += openingValidation.score;\n            maxScore += 100;\n          });\n        }\n      });\n    }\n\n    // Valider les proportions globales\n    const proportionsValidation = this.validateProportions(buildingData);\n    errors.push(...proportionsValidation.errors);\n    warnings.push(...proportionsValidation.warnings);\n    totalScore += proportionsValidation.score;\n    maxScore += 100;\n\n    const finalScore = maxScore > 0 ? Math.round((totalScore / maxScore) * 100) : 100;\n    const isValid = errors.filter(e => e.severity === 'critical' || e.severity === 'high').length === 0;\n\n    const result: ValidationResult = {\n      isValid,\n      errors,\n      warnings,\n      score: finalScore,\n      timestamp: new Date()\n    };\n\n    this.validationHistory.push(result);\n    this.updateStats();\n    \n    // Émettre l'événement de validation\n    this.communicationService.emitValidationResult(result);\n\n    return result;\n  }\n\n  /**\n   * Valider un mur\n   */\n  validateWall(wallData: any, wallType: string): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let score = 100;\n\n    // Épaisseur minimale\n    if (wallData.epaisseur  1.0) {\n      warnings.push({\n        code: 'wall_thickness_max',\n        message: `Le mur ${wallType} a une épaisseur très importante (${wallData.epaisseur}m)`,\n        field: 'epaisseur',\n        suggestion: 'Considérer une épaisseur plus standard'\n      });\n      score -= 10;\n    }\n\n    // Dimensions raisonnables\n    if (wallData.dimensions.height  e.severity === 'critical' || e.severity === 'high').length === 0,\n      errors,\n      warnings,\n      score: Math.max(0, score),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Valider une ouverture\n   */\n  validateOpening(openingData: any, wallType: string): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let score = 100;\n\n    if (openingData.type === 'porte') {\n      // Hauteur minimale des portes\n      if (openingData.dimensions.height  1.2) {\n        warnings.push({\n          code: 'door_width_max',\n          message: `La porte sur le mur ${wallType} est très large (${openingData.dimensions.width}m)`,\n          field: 'dimensions.width',\n          suggestion: 'Considérer une largeur plus standard'\n        });\n        score -= 10;\n      }\n    }\n\n    if (openingData.type === 'fenetre') {\n      // Hauteur minimale des fenêtres\n      if (openingData.dimensions.height  3) {\n        warnings.push({\n          code: 'aspect_ratio_reasonable',\n          message: `La fenêtre sur le mur ${wallType} a un ratio d'aspect inhabituel (${aspectRatio.toFixed(2)})`,\n          field: 'dimensions',\n          suggestion: 'Considérer un ratio entre 0.3 et 3'\n        });\n        score -= 15;\n      }\n    }\n\n    return {\n      isValid: errors.filter(e => e.severity === 'critical' || e.severity === 'high').length === 0,\n      errors,\n      warnings,\n      score: Math.max(0, score),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Valider les proportions globales\n   */\n  validateProportions(buildingData: any): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let score = 100;\n\n    // Calculer le pourcentage d'ouvertures\n    let totalWallSurface = 0;\n    let totalOpeningSurface = 0;\n\n    if (buildingData.murs) {\n      Object.values(buildingData.murs).forEach((wall: any) => {\n        totalWallSurface += wall.dimensions.width * wall.dimensions.height;\n        if (wall.ouvertures) {\n          wall.ouvertures.forEach((opening: any) => {\n            totalOpeningSurface += opening.dimensions.width * opening.dimensions.height;\n          });\n        }\n      });\n    }\n\n    const openingPercentage = totalWallSurface > 0 ? (totalOpeningSurface / totalWallSurface) * 100 : 0;\n\n    if (openingPercentage > 50) {\n      errors.push({\n        code: 'opening_ratio_max',\n        message: `Trop d'ouvertures (${openingPercentage.toFixed(1)}% de la surface des murs)`,\n        field: 'ouvertures',\n        severity: 'medium',\n        suggestion: 'Réduire le nombre ou la taille des ouvertures'\n      });\n      score -= 30;\n    } else if (openingPercentage > 30) {\n      warnings.push({\n        code: 'opening_ratio_high',\n        message: `Beaucoup d'ouvertures (${openingPercentage.toFixed(1)}% de la surface des murs)`,\n        field: 'ouvertures',\n        suggestion: 'Vérifier l\\'isolation thermique'\n      });\n      score -= 10;\n    }\n\n    return {\n      isValid: errors.filter(e => e.severity === 'critical' || e.severity === 'high').length === 0,\n      errors,\n      warnings,\n      score: Math.max(0, score),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Obtenir les règles de validation\n   */\n  getValidationRules(): ValidationRule[] {\n    return [...this.validationRules];\n  }\n\n  /**\n   * Activer/désactiver une règle\n   */\n  toggleRule(ruleId: string): void {\n    const rule = this.validationRules.find(r => r.id === ruleId);\n    if (rule) {\n      rule.enabled = !rule.enabled;\n      console.log(`Règle ${ruleId} ${rule.enabled ? 'activée' : 'désactivée'}`);\n    }\n  }\n\n  /**\n   * Obtenir l'historique des validations\n   */\n  getValidationHistory(): ValidationResult[] {\n    return [...this.validationHistory];\n  }\n\n  /**\n   * Obtenir les statistiques de validation\n   */\n  getStats(): ValidationStats {\n    return this.statsSubject.value;\n  }\n\n  /**\n   * Obtenir les statistiques en tant qu'Observable\n   */\n  getStatsObservable(): Observable {\n    return this.stats$;\n  }\n\n  /**\n   * Mettre à jour les statistiques\n   */\n  private updateStats(): void {\n    const totalValidations = this.validationHistory.length;\n    const successfulValidations = this.validationHistory.filter(v => v.isValid).length;\n    const successRate = totalValidations > 0 ? (successfulValidations / totalValidations) * 100 : 0;\n    const averageScore = totalValidations > 0 ? \n      this.validationHistory.reduce((sum, v) => sum + v.score, 0) / totalValidations : 0;\n\n    const errorsByCategory: Record = {};\n    const warningsByCategory: Record = {};\n\n    this.validationHistory.forEach(validation => {\n      validation.errors.forEach(error => {\n        const rule = this.validationRules.find(r => r.id === error.code);\n        if (rule) {\n          errorsByCategory[rule.category] = (errorsByCategory[rule.category] || 0) + 1;\n        }\n      });\n\n      validation.warnings.forEach(warning => {\n        const rule = this.validationRules.find(r => r.id === warning.code);\n        if (rule) {\n          warningsByCategory[rule.category] = (warningsByCategory[rule.category] || 0) + 1;\n        }\n      });\n    });\n\n    const stats: ValidationStats = {\n      totalValidations,\n      successRate: Math.round(successRate * 100) / 100,\n      averageScore: Math.round(averageScore * 100) / 100,\n      errorsByCategory,\n      warningsByCategory,\n      lastValidation: totalValidations > 0 ? this.validationHistory[totalValidations - 1].timestamp : null\n    };\n\n    this.statsSubject.next(stats);\n  }\n\n  /**\n   * Effacer l'historique des validations\n   */\n  clearHistory(): void {\n    this.validationHistory = [];\n    this.updateStats();\n    console.log('Historique des validations effacé');\n  }\n\n  /**\n   * Exporter les données de validation\n   */\n  exportValidationData(): string {\n    const data = {\n      rules: this.validationRules,\n      history: this.validationHistory,\n      stats: this.getStats(),\n      exportDate: new Date()\n    };\n    \n    return JSON.stringify(data, null, 2);\n  }\n\n  /**\n   * Importer les données de validation\n   */\n  importValidationData(dataJson: string): boolean {\n    try {\n      const data = JSON.parse(dataJson);\n      \n      if (data.rules) {\n        this.validationRules = data.rules;\n      }\n      \n      if (data.history) {\n        this.validationHistory = data.history;\n      }\n      \n      this.updateStats();\n      console.log('Données de validation importées avec succès');\n      return true;\n    } catch (error) {\n      console.error('Erreur lors de l\\'importation des données de validation:', error);\n      return false;\n    }\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationWarning.html":{"url":"interfaces/ValidationWarning.html","title":"interface - ValidationWarning","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidationWarning\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/validation/validation.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface pour les avertissements de validation\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            field\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            suggestion\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        suggestion\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        suggestion:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CommunicationService } from '../communication/communication.service';\n\n/**\n * Interface pour les résultats de validation\n */\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n  score: number; // Score de 0 à 100\n  timestamp: Date;\n}\n\n/**\n * Interface pour les erreurs de validation\n */\nexport interface ValidationError {\n  code: string;\n  message: string;\n  field: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  suggestion?: string;\n}\n\n/**\n * Interface pour les avertissements de validation\n */\nexport interface ValidationWarning {\n  code: string;\n  message: string;\n  field: string;\n  suggestion?: string;\n}\n\n/**\n * Interface pour les règles de validation\n */\nexport interface ValidationRule {\n  id: string;\n  name: string;\n  description: string;\n  category: 'dimensions' | 'proportions' | 'materials' | 'safety' | 'aesthetics';\n  weight: number; // Poids de la règle (1-10)\n  enabled: boolean;\n}\n\n/**\n * Interface pour les statistiques de validation\n */\nexport interface ValidationStats {\n  totalValidations: number;\n  successRate: number;\n  averageScore: number;\n  errorsByCategory: Record;\n  warningsByCategory: Record;\n  lastValidation: Date | null;\n}\n\n/**\n * Service de validation architecturale\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationService {\n  \n  private validationRules: ValidationRule[] = [];\n  private validationHistory: ValidationResult[] = [];\n  private statsSubject = new BehaviorSubject({\n    totalValidations: 0,\n    successRate: 0,\n    averageScore: 0,\n    errorsByCategory: {},\n    warningsByCategory: {},\n    lastValidation: null\n  });\n\n  public stats$ = this.statsSubject.asObservable();\n\n  constructor(private communicationService: CommunicationService) {\n    this.initializeValidationRules();\n    console.log('ValidationService initialisé');\n  }\n\n  /**\n   * Initialiser les règles de validation\n   */\n  private initializeValidationRules(): void {\n    this.validationRules = [\n      // Règles de dimensions\n      {\n        id: 'wall_thickness_min',\n        name: 'Épaisseur minimale des murs',\n        description: 'Les murs doivent avoir une épaisseur minimale de 10cm',\n        category: 'dimensions',\n        weight: 8,\n        enabled: true\n      },\n      {\n        id: 'wall_thickness_max',\n        name: 'Épaisseur maximale des murs',\n        description: 'Les murs ne doivent pas dépasser 1m d\\'épaisseur',\n        category: 'dimensions',\n        weight: 5,\n        enabled: true\n      },\n      {\n        id: 'door_height_min',\n        name: 'Hauteur minimale des portes',\n        description: 'Les portes doivent faire au moins 2m de haut',\n        category: 'dimensions',\n        weight: 9,\n        enabled: true\n      },\n      {\n        id: 'door_width_min',\n        name: 'Largeur minimale des portes',\n        description: 'Les portes doivent faire au moins 80cm de large',\n        category: 'dimensions',\n        weight: 9,\n        enabled: true\n      },\n      {\n        id: 'window_height_min',\n        name: 'Hauteur minimale des fenêtres',\n        description: 'Les fenêtres doivent faire au moins 1m de haut',\n        category: 'dimensions',\n        weight: 6,\n        enabled: true\n      },\n\n      // Règles de proportions\n      {\n        id: 'opening_ratio_max',\n        name: 'Ratio d\\'ouvertures maximum',\n        description: 'Les ouvertures ne doivent pas représenter plus de 50% de la surface des murs',\n        category: 'proportions',\n        weight: 7,\n        enabled: true\n      },\n      {\n        id: 'aspect_ratio_reasonable',\n        name: 'Ratio d\\'aspect raisonnable',\n        description: 'Le ratio largeur/hauteur des ouvertures doit être entre 0.3 et 3',\n        category: 'proportions',\n        weight: 4,\n        enabled: true\n      },\n\n      // Règles de sécurité\n      {\n        id: 'exit_accessibility',\n        name: 'Accessibilité des sorties',\n        description: 'Au moins une porte doit être accessible depuis chaque pièce',\n        category: 'safety',\n        weight: 10,\n        enabled: true\n      },\n      {\n        id: 'window_placement',\n        name: 'Placement des fenêtres',\n        description: 'Les fenêtres doivent être placées à une hauteur raisonnable',\n        category: 'safety',\n        weight: 6,\n        enabled: true\n      },\n\n      // Règles esthétiques\n      {\n        id: 'color_harmony',\n        name: 'Harmonie des couleurs',\n        description: 'Les couleurs doivent être harmonieuses',\n        category: 'aesthetics',\n        weight: 3,\n        enabled: true\n      },\n      {\n        id: 'symmetry_preference',\n        name: 'Préférence pour la symétrie',\n        description: 'La symétrie est préférable pour l\\'esthétique',\n        category: 'aesthetics',\n        weight: 2,\n        enabled: true\n      }\n    ];\n  }\n\n  /**\n   * Valider un bâtiment complet\n   */\n  validateBuilding(buildingData: any): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let totalScore = 0;\n    let maxScore = 0;\n\n    // Valider les murs\n    if (buildingData.murs) {\n      Object.entries(buildingData.murs).forEach(([wallType, wallData]: [string, any]) => {\n        const wallValidation = this.validateWall(wallData, wallType);\n        errors.push(...wallValidation.errors);\n        warnings.push(...wallValidation.warnings);\n        totalScore += wallValidation.score;\n        maxScore += 100;\n      });\n    }\n\n    // Valider les ouvertures\n    if (buildingData.murs) {\n      Object.entries(buildingData.murs).forEach(([wallType, wallData]: [string, any]) => {\n        if (wallData.ouvertures) {\n          wallData.ouvertures.forEach((opening: any) => {\n            const openingValidation = this.validateOpening(opening, wallType);\n            errors.push(...openingValidation.errors);\n            warnings.push(...openingValidation.warnings);\n            totalScore += openingValidation.score;\n            maxScore += 100;\n          });\n        }\n      });\n    }\n\n    // Valider les proportions globales\n    const proportionsValidation = this.validateProportions(buildingData);\n    errors.push(...proportionsValidation.errors);\n    warnings.push(...proportionsValidation.warnings);\n    totalScore += proportionsValidation.score;\n    maxScore += 100;\n\n    const finalScore = maxScore > 0 ? Math.round((totalScore / maxScore) * 100) : 100;\n    const isValid = errors.filter(e => e.severity === 'critical' || e.severity === 'high').length === 0;\n\n    const result: ValidationResult = {\n      isValid,\n      errors,\n      warnings,\n      score: finalScore,\n      timestamp: new Date()\n    };\n\n    this.validationHistory.push(result);\n    this.updateStats();\n    \n    // Émettre l'événement de validation\n    this.communicationService.emitValidationResult(result);\n\n    return result;\n  }\n\n  /**\n   * Valider un mur\n   */\n  validateWall(wallData: any, wallType: string): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let score = 100;\n\n    // Épaisseur minimale\n    if (wallData.epaisseur  1.0) {\n      warnings.push({\n        code: 'wall_thickness_max',\n        message: `Le mur ${wallType} a une épaisseur très importante (${wallData.epaisseur}m)`,\n        field: 'epaisseur',\n        suggestion: 'Considérer une épaisseur plus standard'\n      });\n      score -= 10;\n    }\n\n    // Dimensions raisonnables\n    if (wallData.dimensions.height  e.severity === 'critical' || e.severity === 'high').length === 0,\n      errors,\n      warnings,\n      score: Math.max(0, score),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Valider une ouverture\n   */\n  validateOpening(openingData: any, wallType: string): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let score = 100;\n\n    if (openingData.type === 'porte') {\n      // Hauteur minimale des portes\n      if (openingData.dimensions.height  1.2) {\n        warnings.push({\n          code: 'door_width_max',\n          message: `La porte sur le mur ${wallType} est très large (${openingData.dimensions.width}m)`,\n          field: 'dimensions.width',\n          suggestion: 'Considérer une largeur plus standard'\n        });\n        score -= 10;\n      }\n    }\n\n    if (openingData.type === 'fenetre') {\n      // Hauteur minimale des fenêtres\n      if (openingData.dimensions.height  3) {\n        warnings.push({\n          code: 'aspect_ratio_reasonable',\n          message: `La fenêtre sur le mur ${wallType} a un ratio d'aspect inhabituel (${aspectRatio.toFixed(2)})`,\n          field: 'dimensions',\n          suggestion: 'Considérer un ratio entre 0.3 et 3'\n        });\n        score -= 15;\n      }\n    }\n\n    return {\n      isValid: errors.filter(e => e.severity === 'critical' || e.severity === 'high').length === 0,\n      errors,\n      warnings,\n      score: Math.max(0, score),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Valider les proportions globales\n   */\n  validateProportions(buildingData: any): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n    let score = 100;\n\n    // Calculer le pourcentage d'ouvertures\n    let totalWallSurface = 0;\n    let totalOpeningSurface = 0;\n\n    if (buildingData.murs) {\n      Object.values(buildingData.murs).forEach((wall: any) => {\n        totalWallSurface += wall.dimensions.width * wall.dimensions.height;\n        if (wall.ouvertures) {\n          wall.ouvertures.forEach((opening: any) => {\n            totalOpeningSurface += opening.dimensions.width * opening.dimensions.height;\n          });\n        }\n      });\n    }\n\n    const openingPercentage = totalWallSurface > 0 ? (totalOpeningSurface / totalWallSurface) * 100 : 0;\n\n    if (openingPercentage > 50) {\n      errors.push({\n        code: 'opening_ratio_max',\n        message: `Trop d'ouvertures (${openingPercentage.toFixed(1)}% de la surface des murs)`,\n        field: 'ouvertures',\n        severity: 'medium',\n        suggestion: 'Réduire le nombre ou la taille des ouvertures'\n      });\n      score -= 30;\n    } else if (openingPercentage > 30) {\n      warnings.push({\n        code: 'opening_ratio_high',\n        message: `Beaucoup d'ouvertures (${openingPercentage.toFixed(1)}% de la surface des murs)`,\n        field: 'ouvertures',\n        suggestion: 'Vérifier l\\'isolation thermique'\n      });\n      score -= 10;\n    }\n\n    return {\n      isValid: errors.filter(e => e.severity === 'critical' || e.severity === 'high').length === 0,\n      errors,\n      warnings,\n      score: Math.max(0, score),\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Obtenir les règles de validation\n   */\n  getValidationRules(): ValidationRule[] {\n    return [...this.validationRules];\n  }\n\n  /**\n   * Activer/désactiver une règle\n   */\n  toggleRule(ruleId: string): void {\n    const rule = this.validationRules.find(r => r.id === ruleId);\n    if (rule) {\n      rule.enabled = !rule.enabled;\n      console.log(`Règle ${ruleId} ${rule.enabled ? 'activée' : 'désactivée'}`);\n    }\n  }\n\n  /**\n   * Obtenir l'historique des validations\n   */\n  getValidationHistory(): ValidationResult[] {\n    return [...this.validationHistory];\n  }\n\n  /**\n   * Obtenir les statistiques de validation\n   */\n  getStats(): ValidationStats {\n    return this.statsSubject.value;\n  }\n\n  /**\n   * Obtenir les statistiques en tant qu'Observable\n   */\n  getStatsObservable(): Observable {\n    return this.stats$;\n  }\n\n  /**\n   * Mettre à jour les statistiques\n   */\n  private updateStats(): void {\n    const totalValidations = this.validationHistory.length;\n    const successfulValidations = this.validationHistory.filter(v => v.isValid).length;\n    const successRate = totalValidations > 0 ? (successfulValidations / totalValidations) * 100 : 0;\n    const averageScore = totalValidations > 0 ? \n      this.validationHistory.reduce((sum, v) => sum + v.score, 0) / totalValidations : 0;\n\n    const errorsByCategory: Record = {};\n    const warningsByCategory: Record = {};\n\n    this.validationHistory.forEach(validation => {\n      validation.errors.forEach(error => {\n        const rule = this.validationRules.find(r => r.id === error.code);\n        if (rule) {\n          errorsByCategory[rule.category] = (errorsByCategory[rule.category] || 0) + 1;\n        }\n      });\n\n      validation.warnings.forEach(warning => {\n        const rule = this.validationRules.find(r => r.id === warning.code);\n        if (rule) {\n          warningsByCategory[rule.category] = (warningsByCategory[rule.category] || 0) + 1;\n        }\n      });\n    });\n\n    const stats: ValidationStats = {\n      totalValidations,\n      successRate: Math.round(successRate * 100) / 100,\n      averageScore: Math.round(averageScore * 100) / 100,\n      errorsByCategory,\n      warningsByCategory,\n      lastValidation: totalValidations > 0 ? this.validationHistory[totalValidations - 1].timestamp : null\n    };\n\n    this.statsSubject.next(stats);\n  }\n\n  /**\n   * Effacer l'historique des validations\n   */\n  clearHistory(): void {\n    this.validationHistory = [];\n    this.updateStats();\n    console.log('Historique des validations effacé');\n  }\n\n  /**\n   * Exporter les données de validation\n   */\n  exportValidationData(): string {\n    const data = {\n      rules: this.validationRules,\n      history: this.validationHistory,\n      stats: this.getStats(),\n      exportDate: new Date()\n    };\n    \n    return JSON.stringify(data, null, 2);\n  }\n\n  /**\n   * Importer les données de validation\n   */\n  importValidationData(dataJson: string): boolean {\n    try {\n      const data = JSON.parse(dataJson);\n      \n      if (data.rules) {\n        this.validationRules = data.rules;\n      }\n      \n      if (data.history) {\n        this.validationHistory = data.history;\n      }\n      \n      this.updateStats();\n      console.log('Données de validation importées avec succès');\n      return true;\n    } catch (error) {\n      console.error('Erreur lors de l\\'importation des données de validation:', error);\n      return false;\n    }\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WallCalculations.html":{"url":"classes/WallCalculations.html","title":"class - WallCalculations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WallCalculations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/config/building-config.ts\n        \n\n\n            \n                Description\n            \n            \n                ===============================================\nFONCTIONS UTILITAIRES\nCalculs automatiques pour les ouvertures dans les murs\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getDoorHole\n                            \n                            \n                                    Static\n                                getWindowHole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getDoorHole\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDoorHole(config: OpeningConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/config/building-config.ts:364\n                        \n                    \n\n\n            \n                \n                        Calcule les coordonnées d'une ouverture de porte\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            OpeningConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nConfiguration de la porte\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                Points définissant le trou rectangulaire pour la porte\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getWindowHole\n                        \n                    \n                \n            \n            \n                \n                        \n                    getWindowHole(config: OpeningConfig, bottomOffset: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/config/building-config.ts:382\n                        \n                    \n\n\n            \n                \n                        Calcule les coordonnées d'une ouverture de fenêtre\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            OpeningConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nConfiguration de la fenêtre\n\n\n                                            \n                                        \n                                        \n                                                bottomOffset\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    0.9\n                                            \n\n                                            \n                                                    \nDistance du sol au bas de la fenêtre (par défaut 0.9m)\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                Points définissant le trou rectangulaire pour la fenêtre\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export interface Position3D {\n  x: number;\n  y: number;\n  z: number;\n}\n\n/**\n * Dimensions 3D d'un objet\n * @param width - Largeur (axe X)\n * @param height - Hauteur (axe Y)\n * @param depth - Profondeur (axe Z)\n */\nexport interface Dimensions3D {\n  width: number;\n  height: number;\n  depth: number;\n}\n\n/**\n * Configuration d'un mur simple\n * @param position - Position du centre du mur\n * @param dimensions - Taille du mur\n * @param color - Couleur hexadécimale (ex: 0xaaaaaa)\n */\nexport interface WallConfig {\n  position: Position3D;\n  dimensions: Dimensions3D;\n  color: number;\n}\n\n/**\n * Configuration d'une ouverture (porte ou fenêtre)\n * @param position - Position du centre de l'ouverture\n * @param dimensions - Taille de l'ouverture\n * @param color - Couleur de l'élément\n * @param type - Type d'ouverture ('door' ou 'window')\n */\nexport interface OpeningConfig {\n  position: Position3D;\n  dimensions: Dimensions3D;\n  color: number;\n  type: 'door' | 'window';\n}\n\n/**\n * Configuration du mur principal avec ouvertures (façade)\n * @param contour - Points définissant la forme du mur\n * @param thickness - Épaisseur du mur\n * @param position - Position du mur dans l'espace\n * @param color - Couleur du mur\n * @param openings - Ouvertures (porte et fenêtres) dans ce mur\n */\nexport interface MainWallConfig {\n  contour: Position3D[];\n  thickness: number;\n  position: Position3D;\n  color: number;\n  openings: {\n    door: OpeningConfig;\n    window1: OpeningConfig;\n    window2: OpeningConfig;\n  };\n}\n\n/**\n * Configuration de la caméra et des contrôles\n * @param initial - Position et paramètres initiaux de la caméra\n * @param target - Point que la caméra regarde\n * @param controls - Paramètres des contrôles souris\n */\nexport interface CameraConfig {\n  initial: {\n    position: Position3D;\n    rotationX: number;  // Rotation verticale\n    rotationY: number;  // Rotation horizontale\n    zoom: number;       // Distance de la caméra\n  };\n  target: Position3D;   // Point central regardé par la caméra\n  controls: {\n    minZoom: number;      // Distance minimale\n    maxZoom: number;      // Distance maximale\n    rotationSpeed: number; // Vitesse de rotation\n    zoomSpeed: number;     // Vitesse de zoom\n  };\n}\n\n/**\n * Configuration de l'éclairage de la scène\n * @param ambient - Lumière ambiante (éclairage général)\n * @param directional - Lumière directionnelle (comme le soleil)\n */\nexport interface LightingConfig {\n  ambient: {\n    color: number;      // Couleur de la lumière ambiante\n    intensity: number;  // Intensité (0-1)\n  };\n  directional: {\n    color: number;      // Couleur de la lumière directionnelle\n    intensity: number;  // Intensité\n    position: Position3D; // Position de la source lumineuse\n    shadow: {\n      mapSize: number;  // Qualité des ombres (résolution)\n    };\n  };\n}\n\n/**\n * Configuration générale de la scène 3D\n * @param background - Couleur de fond de la scène\n * @param camera - Paramètres de la caméra (champ de vision, distances)\n */\nexport interface SceneConfig {\n  background: number;   // Couleur de fond (ex: 0xbfd1e5 = bleu ciel)\n  camera: {\n    fov: number;        // Champ de vision (field of view) en degrés\n    near: number;       // Distance de rendu minimale\n    far: number;        // Distance de rendu maximale\n  };\n}\n\n/**\n * ===============================================\n * CONFIGURATION PRINCIPALE DU BÂTIMENT\n * ===============================================\n * Toutes les données du modèle 3D sont centralisées ici\n */\nexport const BUILDING_CONFIG = {\n  \n  /**\n   * SCÈNE 3D - Paramètres généraux\n   */\n  scene: {\n    background: 0xbfd1e5,  // Couleur bleu ciel pour le fond\n    camera: {\n      fov: 75,             // Angle de vue (75° = vue naturelle)\n      near: 0.1,           // Objets plus proches que 0.1 non rendus\n      far: 1000            // Objets plus loin que 1000 non rendus\n    }\n  } as SceneConfig,\n\n  /**\n   * ÉCLAIRAGE - Lumières de la scène\n   */\n  lighting: {\n    ambient: {   \n      color: 0xffffff,     // Lumière blanche ambiante\n      intensity: 0.6       // 60% d'intensité (éclairage doux)\n    },\n    directional: {\n      color: 0xffffff,     // Lumière blanche directionnelle (soleil)\n      intensity: 1,        // 100% d'intensité\n      position: { x: 10, y: 20, z: 10 }, // Position du \"soleil\"\n      shadow: {\n        mapSize: 2048      // Résolution des ombres (2048x2048)\n      }\n    }\n  } as LightingConfig,\n\n  /**\n   * CAMÉRA - Point de vue et contrôles\n   */\n  camera: {\n    initial: {\n      position: { x: 10, y: 10, z: 9 }, // Position initiale de la caméra\n      rotationX: 0.3,                   // Inclinaison verticale\n      rotationY: 0.5,                   // Rotation horizontale\n      zoom: 15                          // Distance initiale\n    },\n    target: { x: 0, y: 1.25, z: 0 },   // Point regardé (centre du bâtiment)\n    controls: {\n      minZoom: 5,           // Distance minimale (zoom max)\n      maxZoom: 50,          // Distance maximale (zoom min)\n      rotationSpeed: 0.01,  // Sensibilité de rotation souris\n      zoomSpeed: 0.01       // Sensibilité du zoom molette\n    }\n  } as CameraConfig,\n\n  /**\n   * SOL - Plateforme de base\n   */\n  ground: {\n    position: { x: 0, y: -0.1, z: 0 }, // Légèrement sous le niveau 0\n    dimensions: { width: 8, height: 0.2, depth: 5 }, // 8x5m, épaisseur 20cm\n    color: 0x2E1E1A  \n  } as WallConfig,\n\n  /**\n   * TOIT - Couverture du bâtiment\n   */\n  roof: {\n    position: { x: 0, y: 2.6, z: 0 },  // Au-dessus des murs (2.5m + 0.1m)\n    dimensions: { width: 8.4, height: 0.2, depth: 5 }, \n    color: 0x4169e1       // Couleur bleu royal\n  } as WallConfig,\n\n  /**\n   * MUR PRINCIPAL (FAÇADE) - Mur avec ouvertures\n   * Ce mur utilise ExtrudeGeometry pour créer de vraies ouvertures\n   */\n  mainWall: {\n    contour: [\n      // Points définissant la forme rectangulaire du mur (8m x 2.5m)\n      { x: -4, y: 0, z: 0 },    // Coin bas gauche\n      { x: 4, y: 0, z: 0 },     // Coin bas droit\n      { x: 4, y: 2.5, z: 0 },   // Coin haut droit\n      { x: -4, y: 2.5, z: 0 },  // Coin haut gauche\n      { x: -4, y: 0, z: 0 }     // Retour au point de départ\n    ],\n    thickness: 0.2,             // Épaisseur du mur (20cm)\n    position: { x: 0, y: 0, z: 2.3 }, // Position du mur dans l'espace\n    color: 0xaaaaaa,            // Couleur gris clair\n    openings: {\n      // PORTE CENTRALE\n      door: {\n        position: { x: 0, y: 1.05, z: 2.3 },\n        dimensions: { width: 1, height: 2, depth: 0.05 }, // 1m x 2m\n        color: 0x00ff00,        // Couleur verte\n        type: 'door' as const\n      },\n      // PREMIÈRE FENÊTRE (gauche)\n      window1: {\n        position: { x: -2, y: 1.5, z: 2.3 }, \n        dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n        color: 0xff0000,        // Couleur rouge\n        type: 'window' as const\n      },\n      // DEUXIÈME FENÊTRE (droite)\n      window2: {\n        position: { x: 2, y: 1.5, z: 2.3 }, \n        dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n        color: 0xff0000,        // Couleur rouge\n        type: 'window' as const\n      }\n    }\n  } as MainWallConfig,\n\n\n  /**\n   * AUTRES MURS - Murs latéraux et arrière (murs pleins)\n   */\n  walls: {\n    // MUR ARRIÈRE\n    back: {\n      position: { x: 0, y: 0, z: -2.5 },\n      dimensions: { width: 8, height: 2.5, depth: 0.2 }, // 8m x 2.5m x 20cm\n      color: 0xaaaaaa,\n      openings: {\n        window1: {\n          position: { x: 0, y: 1.5, z: -2.2 },\n          dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n    },\n    // MUR GAUCHE\n    left: {\n      position: { x: -3.9, y: 1.25, z: 0 }, \n      dimensions: { width: 0.2, height: 2.5, depth: 5 }, // 20cm x 2.5m x 5m\n      color: 0xaaaaaa,\n      openings: {\n        window5: {\n          position: { x: -3.8, y: 1.5, z: 0 },\n          dimensions: { width: 1.2, height: 1.0, depth: 0.05 }, // 1.2m x 1m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n      // Couleur gris clair\n    },\n    // MUR DROIT\n    right: {\n      position: { x: 3.8, y: 0, z: 0 },\n      dimensions: { width: 0.2, height: 2.5, depth: 5 }, // 20cm x 2.5m x 5m\n      color: 0xaaaaaa,\n      openings: {\n        // PORTE D'ENTRÉE\n        door: {\n          position: { x: 3.8, y: 1.05, z: 0 },\n          dimensions: { width: 1, height: 2.1, depth: 0.05 }, // 1m x 2.1m\n          color: 0x00ff00,        // Couleur verte\n          type: 'door' as const\n        },\n        // FENÊTRE\n        window1: {\n          position: { x: 3.8, y: 1.5, z: 1.5 },\n          dimensions: { width: 1.2, height: 1.0, depth: 0.05 }, // 1.2m x 1m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n    }\n  },\n\n  /**\n   * AXES DE RÉFÉRENCE (REPÈRE) - Pour s'orienter dans l'espace\n   */\n  axes: {\n    size: 8,                  // Longueur des axes (8 unités)\n    labels: [\n      // Axe X (rouge) - gauche/droite\n      { text: 'X', position: { x: 10, y: 0, z: 0 }, color: 0xff0000 },\n      // Axe Y (vert) - bas/haut\n      { text: 'Y', position: { x: 0, y: 10, z: 0 }, color: 0x00ff00 },\n      // Axe Z (bleu) - avant/arrière\n      { text: 'Z', position: { x: 0, y: 0, z: 10 }, color: 0x0000ff }\n    ],\n    labelSize: { width: 0.2, height: 0.2, depth: 0.2 } // Taille des cubes de repère\n  }\n};\n\n/**\n * ===============================================\n * FONCTIONS UTILITAIRES\n * ===============================================\n * Calculs automatiques pour les ouvertures dans les murs\n */\nexport class WallCalculations {\n  \n  /**\n   * Calcule les coordonnées d'une ouverture de porte\n   * @param config - Configuration de la porte\n   * @returns Points définissant le trou rectangulaire pour la porte\n   */\n  static getDoorHole(config: OpeningConfig) {\n    const halfWidth = config.dimensions.width / 2;  // Demi-largeur de la porte\n    return [\n      // Rectangle partant du sol (y=0) jusqu'à la hauteur de la porte\n      { x: config.position.x - halfWidth, y: 0 },                    // Bas gauche\n      { x: config.position.x + halfWidth, y: 0 },                    // Bas droit\n      { x: config.position.x + halfWidth, y: config.dimensions.height }, // Haut droit\n      { x: config.position.x - halfWidth, y: config.dimensions.height }, // Haut gauche\n      { x: config.position.x - halfWidth, y: 0 }                     // Retour au début\n    ];\n  }\n\n  /**\n   * Calcule les coordonnées d'une ouverture de fenêtre\n   * @param config - Configuration de la fenêtre\n   * @param bottomOffset - Distance du sol au bas de la fenêtre (par défaut 0.9m)\n   * @returns Points définissant le trou rectangulaire pour la fenêtre\n   */\n  static getWindowHole(config: OpeningConfig, bottomOffset: number = 0.9) {\n    const halfWidth = config.dimensions.width / 2;  // Demi-largeur de la fenêtre\n    const bottom = bottomOffset;                     // Position du bas de la fenêtre\n    const top = bottom + config.dimensions.height;  // Position du haut de la fenêtre\n    \n    return [\n      // Rectangle surélevé par rapport au sol\n      { x: config.position.x - halfWidth, y: bottom }, // Bas gauche\n      { x: config.position.x + halfWidth, y: bottom }, // Bas droit\n      { x: config.position.x + halfWidth, y: top },    // Haut droit\n      { x: config.position.x - halfWidth, y: top },    // Haut gauche\n      { x: config.position.x - halfWidth, y: bottom }  // Retour au début\n    ];\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WallConfig.html":{"url":"interfaces/WallConfig.html","title":"interface - WallConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WallConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/config/building-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration d'un mur simple\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            dimensions\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dimensions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dimensions:         Dimensions3D\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Dimensions3D\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         Position3D\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Position3D\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Position3D {\n  x: number;\n  y: number;\n  z: number;\n}\n\n/**\n * Dimensions 3D d'un objet\n * @param width - Largeur (axe X)\n * @param height - Hauteur (axe Y)\n * @param depth - Profondeur (axe Z)\n */\nexport interface Dimensions3D {\n  width: number;\n  height: number;\n  depth: number;\n}\n\n/**\n * Configuration d'un mur simple\n * @param position - Position du centre du mur\n * @param dimensions - Taille du mur\n * @param color - Couleur hexadécimale (ex: 0xaaaaaa)\n */\nexport interface WallConfig {\n  position: Position3D;\n  dimensions: Dimensions3D;\n  color: number;\n}\n\n/**\n * Configuration d'une ouverture (porte ou fenêtre)\n * @param position - Position du centre de l'ouverture\n * @param dimensions - Taille de l'ouverture\n * @param color - Couleur de l'élément\n * @param type - Type d'ouverture ('door' ou 'window')\n */\nexport interface OpeningConfig {\n  position: Position3D;\n  dimensions: Dimensions3D;\n  color: number;\n  type: 'door' | 'window';\n}\n\n/**\n * Configuration du mur principal avec ouvertures (façade)\n * @param contour - Points définissant la forme du mur\n * @param thickness - Épaisseur du mur\n * @param position - Position du mur dans l'espace\n * @param color - Couleur du mur\n * @param openings - Ouvertures (porte et fenêtres) dans ce mur\n */\nexport interface MainWallConfig {\n  contour: Position3D[];\n  thickness: number;\n  position: Position3D;\n  color: number;\n  openings: {\n    door: OpeningConfig;\n    window1: OpeningConfig;\n    window2: OpeningConfig;\n  };\n}\n\n/**\n * Configuration de la caméra et des contrôles\n * @param initial - Position et paramètres initiaux de la caméra\n * @param target - Point que la caméra regarde\n * @param controls - Paramètres des contrôles souris\n */\nexport interface CameraConfig {\n  initial: {\n    position: Position3D;\n    rotationX: number;  // Rotation verticale\n    rotationY: number;  // Rotation horizontale\n    zoom: number;       // Distance de la caméra\n  };\n  target: Position3D;   // Point central regardé par la caméra\n  controls: {\n    minZoom: number;      // Distance minimale\n    maxZoom: number;      // Distance maximale\n    rotationSpeed: number; // Vitesse de rotation\n    zoomSpeed: number;     // Vitesse de zoom\n  };\n}\n\n/**\n * Configuration de l'éclairage de la scène\n * @param ambient - Lumière ambiante (éclairage général)\n * @param directional - Lumière directionnelle (comme le soleil)\n */\nexport interface LightingConfig {\n  ambient: {\n    color: number;      // Couleur de la lumière ambiante\n    intensity: number;  // Intensité (0-1)\n  };\n  directional: {\n    color: number;      // Couleur de la lumière directionnelle\n    intensity: number;  // Intensité\n    position: Position3D; // Position de la source lumineuse\n    shadow: {\n      mapSize: number;  // Qualité des ombres (résolution)\n    };\n  };\n}\n\n/**\n * Configuration générale de la scène 3D\n * @param background - Couleur de fond de la scène\n * @param camera - Paramètres de la caméra (champ de vision, distances)\n */\nexport interface SceneConfig {\n  background: number;   // Couleur de fond (ex: 0xbfd1e5 = bleu ciel)\n  camera: {\n    fov: number;        // Champ de vision (field of view) en degrés\n    near: number;       // Distance de rendu minimale\n    far: number;        // Distance de rendu maximale\n  };\n}\n\n/**\n * ===============================================\n * CONFIGURATION PRINCIPALE DU BÂTIMENT\n * ===============================================\n * Toutes les données du modèle 3D sont centralisées ici\n */\nexport const BUILDING_CONFIG = {\n  \n  /**\n   * SCÈNE 3D - Paramètres généraux\n   */\n  scene: {\n    background: 0xbfd1e5,  // Couleur bleu ciel pour le fond\n    camera: {\n      fov: 75,             // Angle de vue (75° = vue naturelle)\n      near: 0.1,           // Objets plus proches que 0.1 non rendus\n      far: 1000            // Objets plus loin que 1000 non rendus\n    }\n  } as SceneConfig,\n\n  /**\n   * ÉCLAIRAGE - Lumières de la scène\n   */\n  lighting: {\n    ambient: {   \n      color: 0xffffff,     // Lumière blanche ambiante\n      intensity: 0.6       // 60% d'intensité (éclairage doux)\n    },\n    directional: {\n      color: 0xffffff,     // Lumière blanche directionnelle (soleil)\n      intensity: 1,        // 100% d'intensité\n      position: { x: 10, y: 20, z: 10 }, // Position du \"soleil\"\n      shadow: {\n        mapSize: 2048      // Résolution des ombres (2048x2048)\n      }\n    }\n  } as LightingConfig,\n\n  /**\n   * CAMÉRA - Point de vue et contrôles\n   */\n  camera: {\n    initial: {\n      position: { x: 10, y: 10, z: 9 }, // Position initiale de la caméra\n      rotationX: 0.3,                   // Inclinaison verticale\n      rotationY: 0.5,                   // Rotation horizontale\n      zoom: 15                          // Distance initiale\n    },\n    target: { x: 0, y: 1.25, z: 0 },   // Point regardé (centre du bâtiment)\n    controls: {\n      minZoom: 5,           // Distance minimale (zoom max)\n      maxZoom: 50,          // Distance maximale (zoom min)\n      rotationSpeed: 0.01,  // Sensibilité de rotation souris\n      zoomSpeed: 0.01       // Sensibilité du zoom molette\n    }\n  } as CameraConfig,\n\n  /**\n   * SOL - Plateforme de base\n   */\n  ground: {\n    position: { x: 0, y: -0.1, z: 0 }, // Légèrement sous le niveau 0\n    dimensions: { width: 8, height: 0.2, depth: 5 }, // 8x5m, épaisseur 20cm\n    color: 0x2E1E1A  \n  } as WallConfig,\n\n  /**\n   * TOIT - Couverture du bâtiment\n   */\n  roof: {\n    position: { x: 0, y: 2.6, z: 0 },  // Au-dessus des murs (2.5m + 0.1m)\n    dimensions: { width: 8.4, height: 0.2, depth: 5 }, \n    color: 0x4169e1       // Couleur bleu royal\n  } as WallConfig,\n\n  /**\n   * MUR PRINCIPAL (FAÇADE) - Mur avec ouvertures\n   * Ce mur utilise ExtrudeGeometry pour créer de vraies ouvertures\n   */\n  mainWall: {\n    contour: [\n      // Points définissant la forme rectangulaire du mur (8m x 2.5m)\n      { x: -4, y: 0, z: 0 },    // Coin bas gauche\n      { x: 4, y: 0, z: 0 },     // Coin bas droit\n      { x: 4, y: 2.5, z: 0 },   // Coin haut droit\n      { x: -4, y: 2.5, z: 0 },  // Coin haut gauche\n      { x: -4, y: 0, z: 0 }     // Retour au point de départ\n    ],\n    thickness: 0.2,             // Épaisseur du mur (20cm)\n    position: { x: 0, y: 0, z: 2.3 }, // Position du mur dans l'espace\n    color: 0xaaaaaa,            // Couleur gris clair\n    openings: {\n      // PORTE CENTRALE\n      door: {\n        position: { x: 0, y: 1.05, z: 2.3 },\n        dimensions: { width: 1, height: 2, depth: 0.05 }, // 1m x 2m\n        color: 0x00ff00,        // Couleur verte\n        type: 'door' as const\n      },\n      // PREMIÈRE FENÊTRE (gauche)\n      window1: {\n        position: { x: -2, y: 1.5, z: 2.3 }, \n        dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n        color: 0xff0000,        // Couleur rouge\n        type: 'window' as const\n      },\n      // DEUXIÈME FENÊTRE (droite)\n      window2: {\n        position: { x: 2, y: 1.5, z: 2.3 }, \n        dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n        color: 0xff0000,        // Couleur rouge\n        type: 'window' as const\n      }\n    }\n  } as MainWallConfig,\n\n\n  /**\n   * AUTRES MURS - Murs latéraux et arrière (murs pleins)\n   */\n  walls: {\n    // MUR ARRIÈRE\n    back: {\n      position: { x: 0, y: 0, z: -2.5 },\n      dimensions: { width: 8, height: 2.5, depth: 0.2 }, // 8m x 2.5m x 20cm\n      color: 0xaaaaaa,\n      openings: {\n        window1: {\n          position: { x: 0, y: 1.5, z: -2.2 },\n          dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n    },\n    // MUR GAUCHE\n    left: {\n      position: { x: -3.9, y: 1.25, z: 0 }, \n      dimensions: { width: 0.2, height: 2.5, depth: 5 }, // 20cm x 2.5m x 5m\n      color: 0xaaaaaa,\n      openings: {\n        window5: {\n          position: { x: -3.8, y: 1.5, z: 0 },\n          dimensions: { width: 1.2, height: 1.0, depth: 0.05 }, // 1.2m x 1m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n      // Couleur gris clair\n    },\n    // MUR DROIT\n    right: {\n      position: { x: 3.8, y: 0, z: 0 },\n      dimensions: { width: 0.2, height: 2.5, depth: 5 }, // 20cm x 2.5m x 5m\n      color: 0xaaaaaa,\n      openings: {\n        // PORTE D'ENTRÉE\n        door: {\n          position: { x: 3.8, y: 1.05, z: 0 },\n          dimensions: { width: 1, height: 2.1, depth: 0.05 }, // 1m x 2.1m\n          color: 0x00ff00,        // Couleur verte\n          type: 'door' as const\n        },\n        // FENÊTRE\n        window1: {\n          position: { x: 3.8, y: 1.5, z: 1.5 },\n          dimensions: { width: 1.2, height: 1.0, depth: 0.05 }, // 1.2m x 1m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n    }\n  },\n\n  /**\n   * AXES DE RÉFÉRENCE (REPÈRE) - Pour s'orienter dans l'espace\n   */\n  axes: {\n    size: 8,                  // Longueur des axes (8 unités)\n    labels: [\n      // Axe X (rouge) - gauche/droite\n      { text: 'X', position: { x: 10, y: 0, z: 0 }, color: 0xff0000 },\n      // Axe Y (vert) - bas/haut\n      { text: 'Y', position: { x: 0, y: 10, z: 0 }, color: 0x00ff00 },\n      // Axe Z (bleu) - avant/arrière\n      { text: 'Z', position: { x: 0, y: 0, z: 10 }, color: 0x0000ff }\n    ],\n    labelSize: { width: 0.2, height: 0.2, depth: 0.2 } // Taille des cubes de repère\n  }\n};\n\n/**\n * ===============================================\n * FONCTIONS UTILITAIRES\n * ===============================================\n * Calculs automatiques pour les ouvertures dans les murs\n */\nexport class WallCalculations {\n  \n  /**\n   * Calcule les coordonnées d'une ouverture de porte\n   * @param config - Configuration de la porte\n   * @returns Points définissant le trou rectangulaire pour la porte\n   */\n  static getDoorHole(config: OpeningConfig) {\n    const halfWidth = config.dimensions.width / 2;  // Demi-largeur de la porte\n    return [\n      // Rectangle partant du sol (y=0) jusqu'à la hauteur de la porte\n      { x: config.position.x - halfWidth, y: 0 },                    // Bas gauche\n      { x: config.position.x + halfWidth, y: 0 },                    // Bas droit\n      { x: config.position.x + halfWidth, y: config.dimensions.height }, // Haut droit\n      { x: config.position.x - halfWidth, y: config.dimensions.height }, // Haut gauche\n      { x: config.position.x - halfWidth, y: 0 }                     // Retour au début\n    ];\n  }\n\n  /**\n   * Calcule les coordonnées d'une ouverture de fenêtre\n   * @param config - Configuration de la fenêtre\n   * @param bottomOffset - Distance du sol au bas de la fenêtre (par défaut 0.9m)\n   * @returns Points définissant le trou rectangulaire pour la fenêtre\n   */\n  static getWindowHole(config: OpeningConfig, bottomOffset: number = 0.9) {\n    const halfWidth = config.dimensions.width / 2;  // Demi-largeur de la fenêtre\n    const bottom = bottomOffset;                     // Position du bas de la fenêtre\n    const top = bottom + config.dimensions.height;  // Position du haut de la fenêtre\n    \n    return [\n      // Rectangle surélevé par rapport au sol\n      { x: config.position.x - halfWidth, y: bottom }, // Bas gauche\n      { x: config.position.x + halfWidth, y: bottom }, // Bas droit\n      { x: config.position.x + halfWidth, y: top },    // Haut droit\n      { x: config.position.x - halfWidth, y: top },    // Haut gauche\n      { x: config.position.x - halfWidth, y: bottom }  // Retour au début\n    ];\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/app.routes.ts\n            \n            variable\n            routes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/app.ts\n            \n            component\n            App\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app/components/calculateur-fenetres/calculateur-fenetres.component.ts\n            \n            component\n            CalculateurFenetresComponent\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                        src/app/components/scene3d/calculators/fenetres-calculator.component.ts\n            \n            component\n            FenetresCalculatorComponent\n            \n                6 %\n                (1/16)\n            \n        \n        \n            \n                \n                        src/app/components/scene3d/calculators/fenetres-calculator.component.ts\n            \n            interface\n            FenetresParams\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                        src/app/components/scene3d/controls/color-selector.component.ts\n            \n            component\n            ColorSelectorComponent\n            \n                6 %\n                (1/16)\n            \n        \n        \n            \n                \n                        src/app/components/scene3d/controls/color-selector.component.ts\n            \n            interface\n            ColorableElement\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                        src/app/components/scene3d/controls/dimensions-controller.component.ts\n            \n            component\n            DimensionsControllerComponent\n            \n                5 %\n                (1/17)\n            \n        \n        \n            \n                \n                        src/app/components/scene3d/controls/dimensions-controller.component.ts\n            \n            interface\n            Dimensions\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                        src/app/components/scene3d/controls/dimensions-controller.component.ts\n            \n            interface\n            StructureDimensions\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                        src/app/components/scene3d/controls/murs-controller.component.ts\n            \n            component\n            MursControllerComponent\n            \n                6 %\n                (1/16)\n            \n        \n        \n            \n                \n                        src/app/components/scene3d/controls/murs-controller.component.ts\n            \n            interface\n            Mur\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                        src/app/components/scene3d/controls/ouvertures-controller.component.ts\n            \n            component\n            OuverturesControllerComponent\n            \n                4 %\n                (1/22)\n            \n        \n        \n            \n                \n                        src/app/components/scene3d/controls/ouvertures-controller.component.ts\n            \n            interface\n            Ouverture\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                        src/app/components/scene3d/controls/structure-controller.component.ts\n            \n            component\n            StructureControllerComponent\n            \n                4 %\n                (1/25)\n            \n        \n        \n            \n                \n                        src/app/components/scene3d/controls/structure-controller.component.ts\n            \n            interface\n            Structure\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                        src/app/components/scene3d/core/scene3d-core.component.ts\n            \n            component\n            Scene3dCoreComponent\n            \n                3 %\n                (1/28)\n            \n        \n        \n            \n                \n                        src/app/components/scene3d/scene3d-refactored.ts\n            \n            component\n            Scene3dRefactored\n            \n                1 %\n                (1/79)\n            \n        \n        \n            \n                \n                        src/app/components/scene3d/scene3d.ts\n            \n            component\n            Scene3d\n            \n                49 %\n                (92/185)\n            \n        \n        \n            \n                \n                        src/app/config/building-config.ts\n            \n            class\n            WallCalculations\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/app/config/building-config.ts\n            \n            interface\n            CameraConfig\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                        src/app/config/building-config.ts\n            \n            interface\n            Dimensions3D\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                        src/app/config/building-config.ts\n            \n            interface\n            LightingConfig\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                        src/app/config/building-config.ts\n            \n            interface\n            MainWallConfig\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                        src/app/config/building-config.ts\n            \n            interface\n            OpeningConfig\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                        src/app/config/building-config.ts\n            \n            interface\n            Position3D\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                        src/app/config/building-config.ts\n            \n            interface\n            SceneConfig\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                        src/app/config/building-config.ts\n            \n            interface\n            WallConfig\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                        src/app/config/building-config.ts\n            \n            variable\n            BUILDING_CONFIG\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/app/config/config-direct.ts\n            \n            injectable\n            ConfigDirectService\n            \n                76 %\n                (10/13)\n            \n        \n        \n            \n                \n                        src/app/config/config-direct.ts\n            \n            interface\n            ConfigurationComplete\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                        src/app/services/batiment/batiment.service.ts\n            \n            injectable\n            BatimentService\n            \n                86 %\n                (19/22)\n            \n        \n        \n            \n                \n                        src/app/services/batiment/batiment.service.ts\n            \n            interface\n            ProprietesBatiment\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                        src/app/services/batiment/batiment.service.ts\n            \n            interface\n            StatistiquesBatiment\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                        src/app/services/calculateur-fenetres/calculateur-fenetres.service.ts\n            \n            injectable\n            CalculateurFenetresService\n            \n                66 %\n                (6/9)\n            \n        \n        \n            \n                \n                        src/app/services/calculateur-fenetres/calculateur-fenetres.service.ts\n            \n            interface\n            CalculFenetres\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        src/app/services/calculateur-fenetres/calculateur-fenetres.service.ts\n            \n            interface\n            FenetreConfig\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/app/services/calculateur-fenetres/calculateur-fenetres.service.ts\n            \n            interface\n            MurConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/app/services/communication/communication.service.ts\n            \n            injectable\n            CommunicationService\n            \n                76 %\n                (33/43)\n            \n        \n        \n            \n                \n                        src/app/services/communication/communication.service.ts\n            \n            interface\n            CommunicationEvent\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                        src/app/services/communication/communication.service.ts\n            \n            interface\n            CommunicationStats\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                        src/app/services/communication/communication.service.ts\n            \n            interface\n            ServiceMessage\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                        src/app/services/configuration/configuration.service.ts\n            \n            injectable\n            ConfigurationService\n            \n                77 %\n                (14/18)\n            \n        \n        \n            \n                \n                        src/app/services/configuration/configuration.service.ts\n            \n            interface\n            ConfigurationBatiment\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                        src/app/services/configuration/configuration.service.ts\n            \n            interface\n            ConfigurationMur\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                        src/app/services/configuration/configuration.service.ts\n            \n            interface\n            ConfigurationOuverture\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                        src/app/services/configuration/configuration.service.ts\n            \n            interface\n            ConfigurationSol\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                        src/app/services/configuration/configuration.service.ts\n            \n            interface\n            ConfigurationToit\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                        src/app/services/materiau/materiau.service.ts\n            \n            injectable\n            MateriauService\n            \n                82 %\n                (34/41)\n            \n        \n        \n            \n                \n                        src/app/services/materiau/materiau.service.ts\n            \n            interface\n            PaletteCouleurs\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                        src/app/services/materiau/materiau.service.ts\n            \n            interface\n            ProprietesMateriau\n            \n                5 %\n                (1/17)\n            \n        \n        \n            \n                \n                        src/app/services/materiau/materiau.service.ts\n            \n            interface\n            ProprietesTexture\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                        src/app/services/materiau/materiau.service.ts\n            \n            interface\n            StatistiquesMateriaux\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                        src/app/services/mur/mur.service.ts\n            \n            injectable\n            MurService\n            \n                88 %\n                (22/25)\n            \n        \n        \n            \n                \n                        src/app/services/mur/mur.service.ts\n            \n            interface\n            CalculsMur\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                        src/app/services/mur/mur.service.ts\n            \n            interface\n            ProprietesMur\n            \n                7 %\n                (1/14)\n            \n        \n        \n            \n                \n                        src/app/services/mur/mur.service.ts\n            \n            interface\n            ValidationMur\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                        src/app/services/ouverture/ouverture.service.ts\n            \n            injectable\n            OuvertureService\n            \n                88 %\n                (24/27)\n            \n        \n        \n            \n                \n                        src/app/services/ouverture/ouverture.service.ts\n            \n            interface\n            CalculsOuverture\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                        src/app/services/ouverture/ouverture.service.ts\n            \n            interface\n            ProprietesOuverture\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                        src/app/services/ouverture/ouverture.service.ts\n            \n            interface\n            StatistiquesOuvertures\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                        src/app/services/ouverture/ouverture.service.ts\n            \n            interface\n            ValidationOuverture\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                        src/app/services/scene/scene.service.ts\n            \n            injectable\n            SceneService\n            \n                72 %\n                (24/33)\n            \n        \n        \n            \n                \n                        src/app/services/scene/scene.service.ts\n            \n            interface\n            ControlesScene\n            \n                7 %\n                (1/13)\n            \n        \n        \n            \n                \n                        src/app/services/scene/scene.service.ts\n            \n            interface\n            ProprietesCamera\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                        src/app/services/scene/scene.service.ts\n            \n            interface\n            ProprietesLumiere\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                        src/app/services/scene/scene.service.ts\n            \n            interface\n            ProprietesScene\n            \n                7 %\n                (1/14)\n            \n        \n        \n            \n                \n                        src/app/services/scene/scene.service.ts\n            \n            interface\n            StatistiquesScene\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                        src/app/services/validation/validation.service.ts\n            \n            injectable\n            ValidationService\n            \n                75 %\n                (15/20)\n            \n        \n        \n            \n                \n                        src/app/services/validation/validation.service.ts\n            \n            interface\n            ValidationError\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                        src/app/services/validation/validation.service.ts\n            \n            interface\n            ValidationResult\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                        src/app/services/validation/validation.service.ts\n            \n            interface\n            ValidationRule\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                        src/app/services/validation/validation.service.ts\n            \n            interface\n            ValidationStats\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                        src/app/services/validation/validation.service.ts\n            \n            interface\n            ValidationWarning\n            \n                20 %\n                (1/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/common : ^20.3.0\n        \n            @angular/compiler : ^20.3.0\n        \n            @angular/core : ^20.3.0\n        \n            @angular/forms : ^20.3.0\n        \n            @angular/platform-browser : ^20.3.0\n        \n            @angular/router : ^20.3.0\n        \n            @types/three : ^0.180.0\n        \n            rxjs : ~7.8.0\n        \n            three : ^0.180.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"readme - index","body":"\n                   \n\n\n🏗️ Modélisation Architecturale 3D\nApplication Angular avec Three.js pour la modélisation et visualisation de bâtiments en 3D.\n🚀 Démarrage Rapide\nExample :# Installation des dépendances\nnpm install\n\n# Lancement de l'application\nng serve\n\n# Accès à l'application\nhttp://localhost:4200✨ Fonctionnalités Principales\n🏠 Modélisation 3D\n\nBâtiment complet : Murs, toit, sol, ouvertures\nModifications en temps réel : Dimensions, couleurs, positions\nCalculateur de fenêtres : Ajout automatique d'ouvertures\nInterface intuitive : Contrôles visuels et sliders\n\n🎨 Personnalisation\n\nCouleurs interactives : Sélecteur de couleurs pour chaque élément\nDimensions flexibles : Modification des tailles en temps réel\nConfiguration directe : Édition du fichier building-config.ts\n\n🧮 Outils Avancés\n\nCalculateur de fenêtres : Calcul automatique du nombre d'ouvertures\nValidation en temps réel : Vérification des contraintes architecturales\nExport/Import : Sauvegarde des configurations\n\n📁 Structure du Projet\nExample :src/\n├── app/\n│   ├── components/\n│   │   ├── scene3d/           # Composant principal 3D\n│   │   └── calculateur-fenetres/ # Calculateur d'ouvertures\n│   ├── services/              # Services métier\n│   ├── config/\n│   │   └── building-config.ts # Configuration du bâtiment\n│   └── app.ts                 # Composant racine\n├── assets/                    # Ressources statiques\n└── styles/                    # Styles globaux🎯 Utilisation\n1. Interface Principale\n\nBarre latérale gauche : Contrôles et outils\nZone centrale : Visualisation 3D interactive\nBoutons de modification : Dimensions, couleurs, ouvertures\n\n2. Modification du Bâtiment\n\nDimensions : Sliders pour longueur, largeur, hauteur\nCouleurs : Sélecteur de couleurs pour chaque élément\nOuvertures : Ajout/suppression de fenêtres et portes\n\n3. Calculateur de Fenêtres\n\nSélection du mur : Choisir le mur à modifier\nParamètres : Taille, écart, nombre de fenêtres\nApplication : Ajout automatique des ouvertures\n\n🔧 Configuration\nFichier building-config.ts\nExample :export const BUILDING_CONFIG = {\n  // Dimensions du bâtiment\n  dimensions: { longueur: 8, largeur: 5, hauteur: 2.5 },\n  \n  // Configuration des murs\n  murs: {\n    principal: { /* ... */ },\n    arriere: { /* ... */ },\n    gauche: { /* ... */ },\n    droit: { /* ... */ }\n  },\n  \n  // Ouvertures (fenêtres et portes)\n  ouvertures: { /* ... */ }\n};Modification Directe\n\nÉditez src/app/config/building-config.ts\nCliquez sur \"🔄 Recharger Configuration\"\nLes changements s'appliquent immédiatement\n\n🛠️ Technologies\n\nAngular 17+ : Framework frontend\nThree.js : Rendu 3D\nTypeScript : Langage de développement\nRxJS : Programmation réactive\nCSS3 : Styles et animations\n\n📚 Documentation\n\nGuide de Navigation : Navigation dans l'interface\nGuide de Test de Scène : Tests et diagnostics\nDocumentation Complète : Guide détaillé\n\n🐛 Dépannage\nProblèmes Courants\n\nScène 3D ne se charge pas : Vérifiez la console, redémarrez l'application\nModifications non visibles : Cliquez sur \"Recharger Configuration\"\nErreurs de compilation : Vérifiez building-config.ts pour les erreurs de syntaxe\n\nConsole de Développement\nOuvrez F12 pour voir :\n\nMessages de log détaillés\nErreurs de compilation\nÉtat des services\n\n🚀 Développement\nCommandes Utiles\nExample :# Compilation\nng build\n\n# Tests\nng test\n\n# Linting\nng lint\n\n# Génération de composant\nng generate component nom-composantStructure des Services\n\nConfigurationService : Gestion de la configuration\nSceneService : Gestion de la scène 3D\nCalculateurFenetresService : Calcul des ouvertures\n\n📄 Licence\nProjet éducatif - Utilisation libre pour l'apprentissage.\n\nDernière mise à jour : {{ new Date().toLocaleDateString('fr-FR') }}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n\n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    11 Components\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    50 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        0 \n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            BUILDING_CONFIG   (src/.../building-config.ts)\n                        \n                        \n                            routes   (src/.../app.routes.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideBrowserGlobalErrorListeners(),\n    provideZonelessChangeDetection(),\n    provideRouter(routes), \n    provideClientHydration(withEventReplay()),\n    // Services\n    ConfigurationService,\n    BatimentService,\n    MurService,\n    OuvertureService,\n    MateriauService,\n    SceneService,\n    CalculateurFenetresService\n    // Temporairement commentés pour debug\n    // CommunicationService,\n    // ValidationService\n  ]\n}\n                    \n                \n\n\n        \n    \n\n    src/app/config/building-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BUILDING_CONFIG\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  \n  /**\n   * SCÈNE 3D - Paramètres généraux\n   */\n  scene: {\n    background: 0xbfd1e5,  // Couleur bleu ciel pour le fond\n    camera: {\n      fov: 75,             // Angle de vue (75° = vue naturelle)\n      near: 0.1,           // Objets plus proches que 0.1 non rendus\n      far: 1000            // Objets plus loin que 1000 non rendus\n    }\n  } as SceneConfig,\n\n  /**\n   * ÉCLAIRAGE - Lumières de la scène\n   */\n  lighting: {\n    ambient: {   \n      color: 0xffffff,     // Lumière blanche ambiante\n      intensity: 0.6       // 60% d'intensité (éclairage doux)\n    },\n    directional: {\n      color: 0xffffff,     // Lumière blanche directionnelle (soleil)\n      intensity: 1,        // 100% d'intensité\n      position: { x: 10, y: 20, z: 10 }, // Position du \"soleil\"\n      shadow: {\n        mapSize: 2048      // Résolution des ombres (2048x2048)\n      }\n    }\n  } as LightingConfig,\n\n  /**\n   * CAMÉRA - Point de vue et contrôles\n   */\n  camera: {\n    initial: {\n      position: { x: 10, y: 10, z: 9 }, // Position initiale de la caméra\n      rotationX: 0.3,                   // Inclinaison verticale\n      rotationY: 0.5,                   // Rotation horizontale\n      zoom: 15                          // Distance initiale\n    },\n    target: { x: 0, y: 1.25, z: 0 },   // Point regardé (centre du bâtiment)\n    controls: {\n      minZoom: 5,           // Distance minimale (zoom max)\n      maxZoom: 50,          // Distance maximale (zoom min)\n      rotationSpeed: 0.01,  // Sensibilité de rotation souris\n      zoomSpeed: 0.01       // Sensibilité du zoom molette\n    }\n  } as CameraConfig,\n\n  /**\n   * SOL - Plateforme de base\n   */\n  ground: {\n    position: { x: 0, y: -0.1, z: 0 }, // Légèrement sous le niveau 0\n    dimensions: { width: 8, height: 0.2, depth: 5 }, // 8x5m, épaisseur 20cm\n    color: 0x2E1E1A  \n  } as WallConfig,\n\n  /**\n   * TOIT - Couverture du bâtiment\n   */\n  roof: {\n    position: { x: 0, y: 2.6, z: 0 },  // Au-dessus des murs (2.5m + 0.1m)\n    dimensions: { width: 8.4, height: 0.2, depth: 5 }, \n    color: 0x4169e1       // Couleur bleu royal\n  } as WallConfig,\n\n  /**\n   * MUR PRINCIPAL (FAÇADE) - Mur avec ouvertures\n   * Ce mur utilise ExtrudeGeometry pour créer de vraies ouvertures\n   */\n  mainWall: {\n    contour: [\n      // Points définissant la forme rectangulaire du mur (8m x 2.5m)\n      { x: -4, y: 0, z: 0 },    // Coin bas gauche\n      { x: 4, y: 0, z: 0 },     // Coin bas droit\n      { x: 4, y: 2.5, z: 0 },   // Coin haut droit\n      { x: -4, y: 2.5, z: 0 },  // Coin haut gauche\n      { x: -4, y: 0, z: 0 }     // Retour au point de départ\n    ],\n    thickness: 0.2,             // Épaisseur du mur (20cm)\n    position: { x: 0, y: 0, z: 2.3 }, // Position du mur dans l'espace\n    color: 0xaaaaaa,            // Couleur gris clair\n    openings: {\n      // PORTE CENTRALE\n      door: {\n        position: { x: 0, y: 1.05, z: 2.3 },\n        dimensions: { width: 1, height: 2, depth: 0.05 }, // 1m x 2m\n        color: 0x00ff00,        // Couleur verte\n        type: 'door' as const\n      },\n      // PREMIÈRE FENÊTRE (gauche)\n      window1: {\n        position: { x: -2, y: 1.5, z: 2.3 }, \n        dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n        color: 0xff0000,        // Couleur rouge\n        type: 'window' as const\n      },\n      // DEUXIÈME FENÊTRE (droite)\n      window2: {\n        position: { x: 2, y: 1.5, z: 2.3 }, \n        dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n        color: 0xff0000,        // Couleur rouge\n        type: 'window' as const\n      }\n    }\n  } as MainWallConfig,\n\n\n  /**\n   * AUTRES MURS - Murs latéraux et arrière (murs pleins)\n   */\n  walls: {\n    // MUR ARRIÈRE\n    back: {\n      position: { x: 0, y: 0, z: -2.5 },\n      dimensions: { width: 8, height: 2.5, depth: 0.2 }, // 8m x 2.5m x 20cm\n      color: 0xaaaaaa,\n      openings: {\n        window1: {\n          position: { x: 0, y: 1.5, z: -2.2 },\n          dimensions: { width: 1.5, height: 1.2, depth: 0.05 }, // 1.5m x 1.2m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n    },\n    // MUR GAUCHE\n    left: {\n      position: { x: -3.9, y: 1.25, z: 0 }, \n      dimensions: { width: 0.2, height: 2.5, depth: 5 }, // 20cm x 2.5m x 5m\n      color: 0xaaaaaa,\n      openings: {\n        window5: {\n          position: { x: -3.8, y: 1.5, z: 0 },\n          dimensions: { width: 1.2, height: 1.0, depth: 0.05 }, // 1.2m x 1m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n      // Couleur gris clair\n    },\n    // MUR DROIT\n    right: {\n      position: { x: 3.8, y: 0, z: 0 },\n      dimensions: { width: 0.2, height: 2.5, depth: 5 }, // 20cm x 2.5m x 5m\n      color: 0xaaaaaa,\n      openings: {\n        // PORTE D'ENTRÉE\n        door: {\n          position: { x: 3.8, y: 1.05, z: 0 },\n          dimensions: { width: 1, height: 2.1, depth: 0.05 }, // 1m x 2.1m\n          color: 0x00ff00,        // Couleur verte\n          type: 'door' as const\n        },\n        // FENÊTRE\n        window1: {\n          position: { x: 3.8, y: 1.5, z: 1.5 },\n          dimensions: { width: 1.2, height: 1.0, depth: 0.05 }, // 1.2m x 1m\n          color: 0xff0000,        // Couleur rouge\n          type: 'window' as const\n        }\n      }\n    }\n  },\n\n  /**\n   * AXES DE RÉFÉRENCE (REPÈRE) - Pour s'orienter dans l'espace\n   */\n  axes: {\n    size: 8,                  // Longueur des axes (8 unités)\n    labels: [\n      // Axe X (rouge) - gauche/droite\n      { text: 'X', position: { x: 10, y: 0, z: 0 }, color: 0xff0000 },\n      // Axe Y (vert) - bas/haut\n      { text: 'Y', position: { x: 0, y: 10, z: 0 }, color: 0x00ff00 },\n      // Axe Z (bleu) - avant/arrière\n      { text: 'Z', position: { x: 0, y: 0, z: 10 }, color: 0x0000ff }\n    ],\n    labelSize: { width: 0.2, height: 0.2, depth: 0.2 } // Taille des cubes de repère\n  }\n}\n                    \n                \n\n            \n                \n                    ===============================================\nCONFIGURATION PRINCIPALE DU BÂTIMENT\nToutes les données du modèle 3D sont centralisées ici\n\n                \n            \n\n        \n    \n\n    src/app/app.routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        routes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Routes\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    path: '',\n    loadComponent: () => \"import('./components/scene3d/scene3d').then(m => m.Scene3d)\"\n  },\n  {\n    path: 'calculateur',\n    loadComponent: () => \"import('./components/calculateur-fenetres/calculateur-fenetres.component').then(m => m.CalculateurFenetresComponent)\"\n  },\n  {\n    path: '**',\n    redirectTo: ''\n  }\n]\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
